/* The following code was generated by JFlex 1.4.3 on 3/17/21 11:15 p.m. */

package proyectocompiladores;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/17/21 11:15 p.m. from the specification file
 * <tt>C:/Users/ItsJaan/Desktop/ProyectoCompiladores/src/proyectocompiladores/Analizador_Sintactico.flex</tt>
 */
public class Analizador_Sintactico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  9,  0,  0,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  0,  8,  0,  0,  5, 30, 10, 29, 29,  5,  5, 29,  5, 29,  5, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  3,  3,  3,  0, 
     0, 28, 19, 21, 22, 23, 26, 31, 33, 11,  2, 35, 20, 12, 25, 14, 
    13,  2, 15, 17, 16, 18, 27, 32, 34, 24,  2,  0,  0,  0,  5,  2, 
     0, 28, 19, 21, 22, 23, 26, 31, 33, 11,  2, 35, 20, 12, 25, 14, 
    13,  2, 15, 17, 16, 18, 27, 32, 34, 24,  2, 29,  4, 29,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\2\10\20\3\1\10\1\11\1\3\1\12\2\3"+
    "\2\13\1\3\1\13\5\3\1\12\3\3\1\0\1\14"+
    "\1\12\10\3\1\13\15\3\1\13\11\3\1\13\4\3"+
    "\1\15\1\3\1\15\2\3\2\13\2\3\1\13\1\3"+
    "\1\16\5\3\1\15\2\13\6\3\1\13\7\3\1\16"+
    "\1\13\1\16\5\3\1\17\3\13\5\3\1\13\4\3"+
    "\1\16\1\3\1\13\2\3\1\13\2\3\1\13\2\3"+
    "\1\13\2\3\1\13\2\3\3\13\7\3\1\13\1\3"+
    "\1\13\1\3\1\13\3\3\2\13\2\3\4\13\3\3"+
    "\1\13\2\3\1\13\3\3\1\20\3\3\1\20\1\13"+
    "\3\3\1\13\2\3\1\13\2\3\1\13\1\3\1\13"+
    "\3\3\1\20\2\13\2\3\1\13\7\3\1\20\1\13"+
    "\3\3\1\20\1\13\1\21\1\3\1\22\1\13\1\3"+
    "\1\23\1\21\1\13\2\3\1\21\1\3\1\21\2\22"+
    "\1\23\1\13\1\3\1\21\1\23\1\13\1\3\1\23"+
    "\2\24\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\44\0\220\0\44\0\264"+
    "\0\330\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4"+
    "\0\u01f8\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4"+
    "\0\u0318\0\u033c\0\u0360\0\44\0\44\0\u0384\0\u03a8\0\u03cc"+
    "\0\u03f0\0\u0414\0\u0438\0\u045c\0\154\0\u0480\0\u04a4\0\u04c8"+
    "\0\u04ec\0\u0510\0\154\0\u0534\0\u0558\0\u057c\0\u05a0\0\u0120"+
    "\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c\0\u06c0"+
    "\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0"+
    "\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900"+
    "\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc"+
    "\0\u0a20\0\u0a44\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8"+
    "\0\154\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4"+
    "\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0bd0"+
    "\0\u0d14\0\u0c3c\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\u0b64\0\u0dc8"+
    "\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8"+
    "\0\u0f0c\0\u0f0c\0\154\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0"+
    "\0\u05a0\0\u0fe4\0\u1008\0\u102c\0\u1050\0\u1074\0\u0bf4\0\u1098"+
    "\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c\0\u1170\0\u1194\0\u11b8"+
    "\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c\0\u1290\0\u12b4\0\u12d8"+
    "\0\u12fc\0\u1320\0\u1344\0\u1368\0\u138c\0\u13b0\0\u13d4\0\u13f8"+
    "\0\u141c\0\u1440\0\u1440\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4"+
    "\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8\0\u0bd0\0\u15cc\0\u15f0"+
    "\0\u1614\0\u1638\0\u165c\0\u141c\0\u165c\0\u1464\0\u1680\0\u15a8"+
    "\0\u16a4\0\u16c8\0\u16ec\0\u1710\0\u15cc\0\u1734\0\u16a4\0\u1758"+
    "\0\u177c\0\u17a0\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854\0\u1878"+
    "\0\u189c\0\u18c0\0\u18e4\0\u1908\0\u18c0\0\u192c\0\u1950\0\u0fc0"+
    "\0\u1974\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\u1a28\0\u1a4c\0\u1a70"+
    "\0\154\0\u1a94\0\u1368\0\u1a04\0\u1ab8\0\u1adc\0\u1b00\0\u1b24"+
    "\0\u1b48\0\u1b6c\0\u1a94\0\u1b90\0\u1bb4\0\u1b24\0\u1908\0\u1bd8"+
    "\0\u1bfc\0\u1c20\0\u1a04\0\u1854\0\u1c44\0\u1c68\0\154\0\u1c8c"+
    "\0\u1cb0\0\154\0\u01b0\0\u1cd4\0\u1cd4\0\u1cf8\0\u1d1c\0\u1d1c"+
    "\0\154\0\u1bb4\0\u1a28\0\u0f54\0\u01b0\0\u1d40\0\u10bc\0\u1cf8"+
    "\0\u1d1c\0\u1d64\0\u0bd0\0\u1d88\0\154\0\u0f54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\4\1\31\1\32\1\4\1\33\1\34\1\35\1\4"+
    "\1\36\3\4\45\0\1\3\43\0\2\4\1\0\1\4"+
    "\6\0\22\4\2\0\5\4\1\0\2\4\1\0\1\37"+
    "\6\0\1\40\1\41\1\4\1\42\1\43\1\44\1\45"+
    "\1\46\1\4\1\47\2\4\1\50\1\51\1\52\1\53"+
    "\1\4\1\54\2\0\2\4\1\55\1\56\1\4\6\0"+
    "\1\10\44\0\1\11\1\0\1\11\32\0\11\57\1\0"+
    "\32\57\11\60\1\0\32\60\1\0\2\4\1\0\1\61"+
    "\6\0\1\4\1\41\14\4\1\62\1\53\2\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\63\6\0\3\4\1\64"+
    "\15\4\1\65\2\0\5\4\1\0\2\4\1\0\1\66"+
    "\6\0\4\4\1\67\2\4\1\70\12\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\45\6\0\4\4\1\45\15\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\71\6\0\14\4"+
    "\1\71\5\4\2\0\5\4\1\0\2\4\1\0\1\72"+
    "\6\0\3\4\1\45\1\73\15\4\2\0\2\4\1\74"+
    "\2\4\1\0\2\4\1\0\1\75\6\0\5\4\1\44"+
    "\1\4\1\76\5\4\1\77\4\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\100\6\0\16\4\1\100\3\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\101\6\0\3\4\1\102"+
    "\11\4\1\103\4\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\104\6\0\1\105\2\4\1\106\16\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\107\6\0\3\4\1\107\16\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\110\6\0\1\111"+
    "\2\4\1\45\16\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\112\6\0\11\4\1\47\4\4\1\113\3\4\2\0"+
    "\3\4\1\56\1\4\1\0\2\4\1\0\1\114\6\0"+
    "\7\4\1\115\4\4\1\116\5\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\117\6\0\3\4\1\17\3\4\1\120"+
    "\11\4\1\121\2\0\5\4\1\0\2\4\1\0\1\122"+
    "\6\0\6\4\1\45\7\4\1\123\3\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\124\6\0\4\4\1\125\15\4"+
    "\2\0\2\4\1\126\2\4\1\0\2\4\1\0\1\127"+
    "\6\0\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
    "\1\137\1\140\1\141\1\4\1\142\1\143\1\4\1\144"+
    "\1\4\1\145\1\146\2\0\3\4\1\147\1\137\1\0"+
    "\2\4\1\0\1\150\6\0\1\4\1\131\20\4\2\0"+
    "\4\4\1\137\1\0\2\4\1\0\1\132\6\0\2\4"+
    "\1\132\17\4\2\0\5\4\1\0\2\4\1\0\1\151"+
    "\6\0\3\4\1\133\1\45\6\4\1\152\2\4\1\153"+
    "\3\4\2\0\5\4\1\0\2\4\1\0\1\154\6\0"+
    "\1\155\6\4\1\137\12\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\156\6\0\4\4\1\157\7\4\1\160\5\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\161\6\0\10\4"+
    "\1\140\1\162\4\4\1\163\3\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\164\6\0\6\4\1\164\13\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\165\6\0\5\4\1\166"+
    "\13\4\1\146\2\0\3\4\1\147\1\4\1\0\2\4"+
    "\1\0\1\167\6\0\6\4\1\170\11\4\1\145\1\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\171\6\0\5\4"+
    "\1\172\5\4\1\173\6\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\174\6\0\1\175\10\4\1\176\10\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\177\6\0\1\200\13\4"+
    "\1\175\5\4\2\0\5\4\1\0\2\4\1\0\1\147"+
    "\6\0\1\147\21\4\2\0\5\4\10\57\1\201\1\0"+
    "\32\57\1\0\2\4\1\0\1\202\6\0\2\4\1\132"+
    "\2\4\1\203\14\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\203\6\0\5\4\1\203\14\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\204\6\0\1\175\12\4\1\152\6\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\152\6\0\13\4"+
    "\1\152\6\4\2\0\5\4\1\0\2\4\1\0\1\175"+
    "\6\0\1\175\21\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\205\6\0\1\206\7\4\1\207\11\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\206\6\0\1\206\21\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\207\6\0\10\4\1\207"+
    "\11\4\2\0\5\4\1\0\2\4\1\0\1\210\6\0"+
    "\5\4\1\166\13\4\1\146\2\0\5\4\1\0\2\4"+
    "\1\0\1\211\6\0\7\4\1\137\4\4\1\175\5\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\137\6\0\7\4"+
    "\1\137\12\4\2\0\5\4\1\0\2\4\1\0\1\175"+
    "\6\0\14\4\1\175\5\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\212\6\0\4\4\1\157\1\4\1\170\1\4"+
    "\1\45\3\4\1\160\5\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\45\6\0\10\4\1\45\11\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\170\6\0\6\4\1\170\13\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\213\6\0\5\4"+
    "\1\213\14\4\2\0\5\4\1\0\2\4\1\0\1\214"+
    "\6\0\3\4\1\215\14\4\1\145\1\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\215\6\0\3\4\1\215\16\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\145\6\0\20\4"+
    "\1\145\1\4\2\0\5\4\1\0\2\4\1\0\1\216"+
    "\6\0\3\4\1\160\16\4\2\0\4\4\1\137\1\0"+
    "\2\4\1\0\1\137\6\0\22\4\2\0\4\4\1\137"+
    "\1\0\2\4\1\0\1\160\6\0\3\4\1\160\16\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\153\6\0\16\4"+
    "\1\153\3\4\2\0\5\4\1\0\2\4\1\0\1\131"+
    "\6\0\1\4\1\131\20\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\217\6\0\1\147\5\4\1\164\4\4\1\173"+
    "\6\4\2\0\5\4\1\0\2\4\1\0\1\173\6\0"+
    "\13\4\1\173\6\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\220\6\0\11\4\1\162\10\4\2\0\3\4\1\147"+
    "\1\4\1\0\2\4\1\0\1\162\6\0\11\4\1\162"+
    "\10\4\2\0\5\4\1\0\2\4\1\0\1\147\6\0"+
    "\22\4\2\0\3\4\1\147\1\4\1\0\2\4\1\0"+
    "\1\221\6\0\4\4\1\45\4\4\1\176\4\4\1\163"+
    "\3\4\2\0\5\4\1\0\2\4\1\0\1\163\6\0"+
    "\16\4\1\163\3\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\176\6\0\11\4\1\176\10\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\45\6\0\13\4\1\45\6\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\222\6\0\1\222\21\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\223\6\0\1\223"+
    "\21\4\2\0\5\4\1\0\2\4\1\0\1\200\6\0"+
    "\1\200\21\4\2\0\5\4\1\0\2\4\1\0\1\224"+
    "\6\0\1\225\1\4\1\45\1\226\1\4\1\227\1\230"+
    "\1\231\1\4\1\232\1\233\1\234\1\235\1\4\1\45"+
    "\1\4\1\236\1\237\2\0\5\4\1\0\2\4\1\0"+
    "\1\240\6\0\5\4\1\241\3\4\1\137\4\4\1\45"+
    "\1\4\1\236\1\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\226\6\0\3\4\1\226\16\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\242\6\0\2\4\1\45\6\4\1\243"+
    "\10\4\2\0\5\4\1\0\2\4\1\0\1\244\6\0"+
    "\1\245\6\4\1\246\12\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\247\6\0\1\162\6\4\1\250\4\4\1\251"+
    "\5\4\2\0\5\4\1\0\2\4\1\0\1\252\6\0"+
    "\5\4\1\253\6\4\1\254\5\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\45\6\0\14\4\1\45\5\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\255\6\0\11\4\1\255"+
    "\10\4\2\0\5\4\1\0\2\4\1\0\1\256\6\0"+
    "\6\4\1\137\2\4\1\45\10\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\257\6\0\7\4\1\257\12\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\45\6\0\2\4\1\45"+
    "\13\4\1\45\3\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\260\6\0\6\4\1\261\3\4\1\233\7\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\237\6\0\21\4\1\237"+
    "\2\0\5\4\1\0\2\4\1\0\1\234\6\0\13\4"+
    "\1\234\6\4\2\0\5\4\1\0\2\4\1\0\1\45"+
    "\6\0\5\4\1\45\14\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\262\6\0\2\4\1\45\3\4\1\261\1\257"+
    "\1\4\1\243\10\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\261\6\0\6\4\1\261\13\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\263\6\0\5\4\1\264\6\4\1\45"+
    "\3\4\1\236\1\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\265\6\0\5\4\1\264\12\4\1\236\1\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\266\6\0\1\245\1\4"+
    "\1\45\4\4\1\246\12\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\45\6\0\2\4\1\45\17\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\267\6\0\11\4\1\270\1\233"+
    "\7\4\2\0\5\4\1\0\2\4\1\0\1\45\6\0"+
    "\11\4\1\45\10\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\233\6\0\12\4\1\233\7\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\254\6\0\14\4\1\254\5\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\271\6\0\5\4\1\45"+
    "\1\4\1\250\3\4\1\234\6\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\250\6\0\7\4\1\250\12\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\272\6\0\5\4\1\253"+
    "\13\4\1\237\2\0\5\4\1\0\2\4\1\0\1\253"+
    "\6\0\5\4\1\253\14\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\273\6\0\1\162\13\4\1\251\5\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\256\6\0\6\4\1\137"+
    "\7\4\1\45\3\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\45\6\0\16\4\1\45\3\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\137\6\0\6\4\1\137\13\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\256\6\0\11\4\1\137"+
    "\4\4\1\45\3\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\137\6\0\11\4\1\137\10\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\274\6\0\3\4\1\226\10\4\1\251"+
    "\5\4\2\0\5\4\1\0\2\4\1\0\1\251\6\0"+
    "\14\4\1\251\5\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\275\6\0\7\4\1\257\6\4\1\45\3\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\276\6\0\11\4\1\255"+
    "\6\4\1\236\1\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\236\6\0\20\4\1\236\1\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\277\6\0\7\4\1\250\3\4\1\234"+
    "\6\4\2\0\5\4\1\0\2\4\1\0\1\45\6\0"+
    "\14\4\1\45\1\4\1\45\3\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\300\6\0\1\245\1\4\1\45\2\4"+
    "\1\253\1\4\1\246\12\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\162\6\0\1\162\21\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\301\6\0\11\4\1\243\7\4\1\237"+
    "\2\0\5\4\1\0\2\4\1\0\1\243\6\0\11\4"+
    "\1\243\10\4\2\0\5\4\1\0\2\4\1\0\1\45"+
    "\6\0\2\4\1\45\11\4\1\45\5\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\254\6\0\5\4\1\45\6\4"+
    "\1\254\5\4\2\0\5\4\1\0\2\4\1\0\1\45"+
    "\6\0\5\4\1\45\3\4\1\45\10\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\302\6\0\6\4\1\137\3\4"+
    "\1\233\7\4\2\0\5\4\1\0\2\4\1\0\1\303"+
    "\6\0\5\4\1\264\3\4\1\137\10\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\264\6\0\5\4\1\264\14\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\304\6\0\1\305"+
    "\2\4\1\200\1\306\1\307\3\4\1\310\1\147\1\4"+
    "\1\311\1\4\1\312\2\4\1\313\2\0\1\314\4\4"+
    "\1\0\2\4\1\0\1\315\6\0\11\4\1\45\4\4"+
    "\1\312\3\4\2\0\5\4\1\0\2\4\1\0\1\316"+
    "\6\0\4\4\1\316\15\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\317\6\0\14\4\1\317\5\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\320\6\0\3\4\1\200\10\4"+
    "\1\45\5\4\2\0\5\4\1\0\2\4\1\0\1\321"+
    "\6\0\4\4\1\175\4\4\1\322\1\147\7\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\323\6\0\1\324\13\4"+
    "\1\325\5\4\2\0\5\4\1\0\2\4\1\0\1\307"+
    "\6\0\5\4\1\307\14\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\326\6\0\11\4\1\326\10\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\327\6\0\1\330\21\4\2\0"+
    "\1\314\4\4\1\0\2\4\1\0\1\313\6\0\21\4"+
    "\1\313\2\0\5\4\1\0\2\4\1\0\1\331\6\0"+
    "\11\4\1\331\10\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\332\6\0\14\4\1\333\4\4\1\313\2\0\5\4"+
    "\1\0\2\4\1\0\1\234\6\0\14\4\1\234\5\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\334\6\0\14\4"+
    "\1\334\5\4\2\0\5\4\1\0\2\4\1\0\1\335"+
    "\6\0\12\4\1\147\3\4\1\312\3\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\312\6\0\16\4\1\312\3\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\147\6\0\12\4"+
    "\1\147\7\4\2\0\5\4\1\0\2\4\1\0\1\336"+
    "\6\0\4\4\1\175\4\4\1\45\10\4\2\0\1\314"+
    "\4\4\1\0\2\4\1\0\1\175\6\0\4\4\1\175"+
    "\15\4\2\0\5\4\1\0\2\4\1\0\1\314\6\0"+
    "\22\4\2\0\1\314\4\4\1\0\2\4\1\0\1\337"+
    "\6\0\1\330\13\4\1\340\5\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\340\6\0\14\4\1\340\5\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\330\6\0\1\330\21\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\324\6\0\1\324"+
    "\21\4\2\0\5\4\1\0\2\4\1\0\1\322\6\0"+
    "\11\4\1\322\10\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\341\6\0\3\4\1\200\1\4\1\307\14\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\200\6\0\3\4\1\200"+
    "\16\4\2\0\5\4\1\0\2\4\1\0\1\342\6\0"+
    "\3\4\1\200\5\4\1\322\2\4\1\334\5\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\343\6\0\14\4\1\234"+
    "\4\4\1\313\2\0\5\4\1\0\2\4\1\0\1\344"+
    "\6\0\1\324\4\4\1\307\14\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\345\6\0\4\4\1\175\4\4\1\326"+
    "\10\4\2\0\5\4\1\0\2\4\1\0\1\346\6\0"+
    "\11\4\1\331\2\4\1\340\5\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\347\6\0\11\4\1\45\10\4\2\0"+
    "\1\314\4\4\1\0\2\4\1\0\1\350\6\0\4\4"+
    "\1\316\15\4\2\0\1\314\4\4\1\0\2\4\1\0"+
    "\1\351\6\0\1\324\20\4\1\313\2\0\5\4\1\0"+
    "\2\4\1\0\1\352\6\0\12\4\1\147\1\4\1\340"+
    "\1\4\1\312\3\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\353\6\0\11\4\1\331\2\4\1\334\5\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\354\6\0\5\4\1\307"+
    "\6\4\1\45\5\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\333\6\0\14\4\1\333\5\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\355\6\0\1\356\1\357\3\4\1\360"+
    "\3\4\1\361\1\362\1\4\1\363\1\4\2\45\1\4"+
    "\1\175\2\0\1\45\4\4\1\0\2\4\1\0\1\362"+
    "\6\0\12\4\1\362\4\4\1\45\2\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\364\6\0\5\4\1\365\10\4"+
    "\1\45\3\4\2\0\5\4\1\0\2\4\1\0\1\366"+
    "\6\0\1\366\21\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\367\6\0\1\370\13\4\1\371\5\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\372\6\0\1\4\1\357\7\4"+
    "\1\326\7\4\1\175\2\0\5\4\1\0\2\4\1\0"+
    "\1\45\6\0\22\4\2\0\1\45\4\4\1\0\2\4"+
    "\1\0\1\137\6\0\5\4\1\137\14\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\17\6\0\14\4\1\17\5\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\365\6\0\5\4"+
    "\1\365\14\4\2\0\5\4\1\0\2\4\1\0\1\373"+
    "\6\0\1\4\1\357\7\4\1\326\10\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\371\6\0\5\4\1\45\6\4"+
    "\1\371\1\4\1\45\3\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\371\6\0\14\4\1\371\5\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\374\6\0\12\4\1\362\6\4"+
    "\1\175\2\0\5\4\1\0\2\4\1\0\1\362\6\0"+
    "\12\4\1\362\7\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\175\6\0\21\4\1\175\2\0\5\4\1\0\2\4"+
    "\1\0\1\370\6\0\1\370\21\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\375\6\0\14\4\1\17\2\4\1\45"+
    "\2\4\2\0\5\4\1\0\2\4\1\0\1\45\6\0"+
    "\17\4\1\45\2\4\2\0\5\4\1\0\2\4\1\0"+
    "\1\361\6\0\5\4\1\137\3\4\1\326\10\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\45\6\0\5\4\1\45"+
    "\14\4\2\0\1\45\4\4\1\0\2\4\1\0\1\375"+
    "\6\0\14\4\1\17\1\4\1\45\3\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\357\6\0\1\4\1\357\15\4"+
    "\1\45\2\4\2\0\5\4\1\0\2\4\1\0\1\357"+
    "\6\0\1\4\1\357\20\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\376\6\0\1\366\10\4\1\137\10\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\377\6\0\11\4\1\137"+
    "\2\4\1\371\4\4\1\175\2\0\5\4\1\0\2\4"+
    "\1\0\1\u0100\6\0\1\366\11\4\1\362\7\4\2\0"+
    "\5\4\1\0\2\4\1\0\1\u0101\6\0\1\370\15\4"+
    "\1\45\3\4\2\0\5\4\1\0\2\4\1\0\1\u0102"+
    "\6\0\5\4\1\365\6\4\1\17\5\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\u0103\6\0\5\4\1\137\4\4"+
    "\1\362\7\4\2\0\5\4\1\0\2\4\1\0\1\357"+
    "\6\0\1\4\1\357\3\4\1\45\14\4\2\0\1\45"+
    "\4\4\1\0\2\4\1\0\1\u0104\6\0\1\370\2\4"+
    "\1\175\1\45\1\4\1\u0105\5\4\1\45\1\4\1\256"+
    "\3\4\2\0\5\4\1\0\2\4\1\0\1\211\6\0"+
    "\3\4\1\175\12\4\1\137\3\4\2\0\5\4\1\0"+
    "\2\4\1\0\1\u0105\6\0\6\4\1\u0105\5\4\1\45"+
    "\5\4\2\0\5\4\1\0\2\4\1\0\1\u0101\6\0"+
    "\1\370\13\4\1\45\5\4\2\0\5\4\1\0\2\4"+
    "\1\0\1\u0105\6\0\6\4\1\u0105\13\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\175\6\0\3\4\1\175\16\4"+
    "\2\0\5\4\1\0\2\4\1\0\1\137\6\0\16\4"+
    "\1\137\3\4\2\0\5\4\1\0\2\4\1\0\1\u0106"+
    "\6\0\3\4\1\175\10\4\1\45\5\4\2\0\5\4"+
    "\1\0\2\4\1\0\1\u0105\6\0\4\4\1\45\1\4"+
    "\1\u0105\13\4\2\0\5\4\1\0\2\4\1\0\1\256"+
    "\6\0\14\4\1\45\1\4\1\256\3\4\2\0\5\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7596];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\24\1\2\11"+
    "\21\1\1\0\327\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Sintactico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analizador_Sintactico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return new Symbol(sym.if_, yychar, yyline, yytext());
          }
        case 21: break;
        case 15: 
          { return new Symbol(sym.texto_, yychar, yyline, yytext());
          }
        case 22: break;
        case 17: 
          { return new Symbol(sym.Module, yychar, yyline, yytext());
          }
        case 23: break;
        case 1: 
          { return new Symbol(sym.error, yychar, yyline, yytext());
          }
        case 24: break;
        case 11: 
          { if(yytext().equalsIgnoreCase("sub")){return new Symbol(sym.sub, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("for")){return new Symbol(sym.for_, yychar, yyline, yytext());}
                                        
                                        
                                        if(yytext().equalsIgnoreCase("integer")){return new Symbol(sym.integer_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("boolean")){return new Symbol(sym.boolean_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("string")){return new Symbol(sym.string_, yychar, yyline, yytext());}
                                        
                                        if(yytext().equalsIgnoreCase("console")){return new Symbol(sym.console_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("writeline")){return new Symbol(sym.writeline, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("as")){return new Symbol(sym.as, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("do")){return new Symbol(sym.do_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("while")){return new Symbol(sym.while_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("struct")){return new Symbol(sym.struct_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("then")){return new Symbol(sym.then, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("else")){return new Symbol(sym.else_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("function")){return new Symbol(sym.function_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("return")){return new Symbol(sym.return_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("next")){return new Symbol(sym.next, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("private")){return new Symbol(sym.private_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("loop")){return new Symbol(sym.loop, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("exit")){return new Symbol(sym.exit, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("until")){return new Symbol(sym.until, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("to")){return new Symbol(sym.to, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("and")){return new Symbol(sym.and, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("or")){return new Symbol(sym.or, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("true")){return new Symbol(sym.true_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("false")){return new Symbol(sym.false_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("like")){return new Symbol(sym.like, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("mod")){return new Symbol(sym.mod, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("int")){return new Symbol(sym.int_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("null")){return new Symbol(sym.null_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("main")){return new Symbol(sym.main_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("step")){return new Symbol(sym.step_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("elseif")){return new Symbol(sym.elseif_, yychar, yyline, yytext());}
                                        if(yytext().equalsIgnoreCase("readline")){return new Symbol(sym.readline, yychar, yyline, yytext());}
          }
        case 25: break;
        case 18: 
          { return new Symbol(sym.System_, yychar, yyline, yytext());
          }
        case 26: break;
        case 12: 
          { return new Symbol(sym.comentario, yychar, yyline, yytext());
          }
        case 27: break;
        case 3: 
          { return new Symbol(sym.identificador, yychar, yyline, yytext());
          }
        case 28: break;
        case 9: 
          { return new Symbol(sym.continuaciondelinea, yychar, yyline, yytext());
          }
        case 29: break;
        case 20: 
          { return new Symbol(sym.imports, yychar, yyline, yytext());
          }
        case 30: break;
        case 13: 
          { return new Symbol(sym.dim, yychar, yyline, yytext());
          }
        case 31: break;
        case 8: 
          { if(yytext().equals(".")){return new Symbol(sym.punto, yychar, yyline, yytext());}
                                        if(yytext().equals("\"")){return new Symbol(sym.comillaD, yychar, yyline, yytext());}
                                        if(yytext().equals("\'")){return new Symbol(sym.comillaS, yychar, yyline, yytext());}
                                        if(yytext().equals("(")){return new Symbol(sym.parentesisA, yychar, yyline, yytext());}
                                        if(yytext().equals(")")){return new Symbol(sym.parentesisC, yychar, yyline, yytext());}
                                        if(yytext().equals("{")){return new Symbol(sym.llaveA, yychar, yyline, yytext());}
                                        if(yytext().equals("}")){return new Symbol(sym.llaveC, yychar, yyline, yytext());}
                                        if(yytext().equals(",")){return new Symbol(sym.coma_, yychar, yyline, yytext());}
          }
        case 32: break;
        case 19: 
          { return new Symbol(sym.Public_, yychar, yyline, yytext());
          }
        case 33: break;
        case 14: 
          { return new Symbol(sym.end_, yychar, yyline, yytext());
          }
        case 34: break;
        case 5: 
          { if(yytext().equals("+")){return new Symbol(sym.suma, yychar, yyline, yytext());}
                                        if(yytext().equals("-")){return new Symbol(sym.resta, yychar, yyline, yytext());}
                                        if(yytext().equals("*")){return new Symbol(sym.mult, yychar, yyline, yytext());}
                                        if(yytext().equals("/")){return new Symbol(sym.div, yychar, yyline, yytext());}
                                        if(yytext().equals("^")){return new Symbol(sym.potencia, yychar, yyline, yytext());}
                                        if(yytext().equals("%")){return new Symbol(sym.mod_, yychar, yyline, yytext());}
          }
        case 35: break;
        case 2: 
          { return new Symbol(sym.numero, yychar, yyline, yytext());
          }
        case 36: break;
        case 4: 
          { if(yytext().equals(">=")){return new Symbol(sym.mayorigual, yychar, yyline, yytext());}
                                        if(yytext().equals("<=")){return new Symbol(sym.menorigual, yychar, yyline, yytext());}
                                        if(yytext().equals("=")){return new Symbol(sym.igual, yychar, yyline, yytext());}
                                        if(yytext().equals(">")){return new Symbol(sym.mayor, yychar, yyline, yytext());}
                                        if(yytext().equals("<")){return new Symbol(sym.menor, yychar, yyline, yytext());}
          }
        case 37: break;
        case 16: 
          { return new Symbol(sym.byval, yychar, yyline, yytext());
          }
        case 38: break;
        case 7: 
          { return new Symbol(sym.findelinea, yychar, yyline, yytext());
          }
        case 39: break;
        case 6: 
          { /*Ignore*/
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
