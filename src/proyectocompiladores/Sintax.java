
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 26 10:39:45 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 26 10:39:45 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0273\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\130\004\000\002\130" +
    "\004\000\002\021\003\000\002\021\004\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\010\012\000\002\010" +
    "\012\000\002\010\012\000\002\010\012\000\002\010\012" +
    "\000\002\010\012\000\002\010\012\000\002\010\012\000" +
    "\002\010\012\000\002\010\012\000\002\010\012\000\002" +
    "\010\013\000\002\010\013\000\002\010\013\000\002\010" +
    "\013\000\002\010\013\000\002\010\013\000\002\010\013" +
    "\000\002\010\002\000\002\121\003\000\002\121\004\000" +
    "\002\125\004\000\002\125\005\000\002\125\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\012\000\002\022" +
    "\004\000\002\022\004\000\002\022\005\000\002\022\004" +
    "\000\002\022\006\000\002\022\011\000\002\022\011\000" +
    "\002\022\005\000\002\022\006\000\002\022\006\000\002" +
    "\126\011\000\002\126\003\000\002\126\003\000\002\126" +
    "\004\000\002\126\004\000\002\126\003\000\002\126\005" +
    "\000\002\126\005\000\002\126\010\000\002\126\010\000" +
    "\002\126\004\000\002\126\004\000\002\127\005\000\002" +
    "\127\005\000\002\114\004\000\002\114\005\000\002\122" +
    "\004\000\002\122\005\000\002\122\007\000\002\122\006" +
    "\000\002\113\003\000\002\113\004\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\007\000\002\123\003\000\002\123\003\000" +
    "\002\123\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\017\007\000\002\017" +
    "\007\000\002\017\010\000\002\017\006\000\002\017\006" +
    "\000\002\017\007\000\002\017\010\000\002\017\006\000" +
    "\002\017\007\000\002\017\010\000\002\017\007\000\002" +
    "\017\010\000\002\017\005\000\002\017\006\000\002\017" +
    "\006\000\002\017\007\000\002\017\007\000\002\017\010" +
    "\000\002\017\007\000\002\017\010\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\007\000\002" +
    "\017\010\000\002\017\010\000\002\017\007\000\002\017" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\006\000\002\017\007\000\002\017\010\000" +
    "\002\017\011\000\002\017\010\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\120\003\000\002\120\003" +
    "\000\002\015\007\000\002\015\011\000\002\015\007\000" +
    "\002\015\007\000\002\015\011\000\002\015\011\000\002" +
    "\015\007\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\005\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\015\010\000\002\015\007\000\002\015" +
    "\011\000\002\015\006\000\002\015\010\000\002\015\007" +
    "\000\002\015\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\124\007\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\116\003\000\002\116\003\000\002\117\004\000\002" +
    "\117\003\000\002\026\012\000\002\026\015\000\002\026" +
    "\015\000\002\026\013\000\002\077\011\000\002\077\003" +
    "\000\002\077\003\000\002\077\004\000\002\077\005\000" +
    "\002\077\004\000\002\077\012\000\002\077\004\000\002" +
    "\077\005\000\002\077\005\000\002\077\003\000\002\077" +
    "\004\000\002\077\006\000\002\077\005\000\002\077\010" +
    "\000\002\077\011\000\002\077\010\000\002\077\011\000" +
    "\002\027\010\000\002\027\010\000\002\107\010\000\002" +
    "\107\007\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\031\004\000\002" +
    "\031\004\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\017\000\002\033\011\000\002\033\003" +
    "\000\002\033\003\000\002\033\012\000\002\033\004\000" +
    "\002\033\004\000\002\033\005\000\002\033\004\000\002" +
    "\033\004\000\002\033\005\000\002\033\003\000\002\033" +
    "\004\000\002\033\006\000\002\033\005\000\002\033\010" +
    "\000\002\033\011\000\002\033\010\000\002\033\011\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\100\011\000\002\100\003\000\002\100\003\000\002\100" +
    "\012\000\002\100\004\000\002\100\004\000\002\100\005" +
    "\000\002\100\004\000\002\100\004\000\002\100\005\000" +
    "\002\100\003\000\002\100\004\000\002\100\006\000\002" +
    "\100\006\000\002\100\005\000\002\100\005\000\002\100" +
    "\010\000\002\100\011\000\002\100\010\000\002\100\011" +
    "\000\002\035\012\000\002\035\015\000\002\035\015\000" +
    "\002\035\013\000\002\036\010\000\002\036\010\000\002" +
    "\110\007\000\002\110\010\000\002\037\011\000\002\040" +
    "\011\000\002\040\003\000\002\040\003\000\002\040\004" +
    "\000\002\040\005\000\002\040\012\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\005\000\002" +
    "\040\003\000\002\040\004\000\002\040\006\000\002\040" +
    "\006\000\002\040\005\000\002\040\005\000\002\040\010" +
    "\000\002\040\011\000\002\040\010\000\002\040\011\000" +
    "\002\041\011\000\002\042\011\000\002\042\003\000\002" +
    "\042\003\000\002\042\004\000\002\042\005\000\002\042" +
    "\012\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\042\005\000\002\042\003\000\002\042\004\000" +
    "\002\042\006\000\002\042\005\000\002\042\010\000\002" +
    "\042\011\000\002\042\010\000\002\042\011\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\101\011" +
    "\000\002\101\003\000\002\101\003\000\002\101\004\000" +
    "\002\101\005\000\002\101\012\000\002\101\004\000\002" +
    "\101\004\000\002\101\004\000\002\101\005\000\002\101" +
    "\003\000\002\101\004\000\002\101\006\000\002\101\006" +
    "\000\002\101\005\000\002\101\005\000\002\101\010\000" +
    "\002\101\011\000\002\101\010\000\002\101\011\000\002" +
    "\044\012\000\002\044\015\000\002\044\015\000\002\044" +
    "\013\000\002\045\010\000\002\045\010\000\002\106\007" +
    "\000\002\106\010\000\002\046\017\000\002\047\011\000" +
    "\002\047\003\000\002\047\004\000\002\047\005\000\002" +
    "\047\003\000\002\047\012\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\005\000\002\047\003" +
    "\000\002\047\004\000\002\047\006\000\002\047\006\000" +
    "\002\047\005\000\002\047\005\000\002\047\010\000\002" +
    "\047\011\000\002\047\010\000\002\047\011\000\002\050" +
    "\005\000\002\050\005\000\002\051\004\000\002\051\005" +
    "\000\002\051\007\000\002\051\006\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\052\007\000\002" +
    "\052\007\000\002\052\007\000\002\052\007\000\002\052" +
    "\010\000\002\052\010\000\002\052\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\132\004\000\002\132\004\000\002\132\004\000\002" +
    "\053\015\000\002\053\015\000\002\053\015\000\002\053" +
    "\015\000\002\053\015\000\002\053\015\000\002\053\015" +
    "\000\002\053\015\000\002\053\015\000\002\131\004\000" +
    "\002\131\004\000\002\131\004\000\002\011\005\000\002" +
    "\011\007\000\002\011\010\000\002\011\006\000\002\013" +
    "\011\000\002\013\003\000\002\013\004\000\002\013\005" +
    "\000\002\013\004\000\002\013\012\000\002\013\004\000" +
    "\002\013\005\000\002\013\003\000\002\013\004\000\002" +
    "\013\006\000\002\013\005\000\002\013\010\000\002\013" +
    "\011\000\002\013\010\000\002\013\011\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\012\000" +
    "\002\055\015\000\002\055\015\000\002\055\013\000\002" +
    "\102\011\000\002\102\003\000\002\102\004\000\002\102" +
    "\005\000\002\102\003\000\002\102\012\000\002\102\004" +
    "\000\002\102\004\000\002\102\004\000\002\102\005\000" +
    "\002\102\003\000\002\102\004\000\002\102\006\000\002" +
    "\102\005\000\002\102\010\000\002\102\011\000\002\102" +
    "\010\000\002\102\011\000\002\056\010\000\002\056\010" +
    "\000\002\111\007\000\002\111\010\000\002\057\017\000" +
    "\002\060\011\000\002\060\003\000\002\060\004\000\002" +
    "\060\005\000\002\060\003\000\002\060\012\000\002\060" +
    "\004\000\002\060\004\000\002\060\004\000\002\060\005" +
    "\000\002\060\003\000\002\060\004\000\002\060\006\000" +
    "\002\060\005\000\002\060\006\000\002\060\005\000\002" +
    "\060\010\000\002\060\011\000\002\060\010\000\002\060" +
    "\011\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\062\012\000\002\062\015\000\002\062\015\000" +
    "\002\062\013\000\002\103\011\000\002\103\003\000\002" +
    "\103\004\000\002\103\005\000\002\103\003\000\002\103" +
    "\012\000\002\103\004\000\002\103\004\000\002\103\004" +
    "\000\002\103\005\000\002\103\003\000\002\103\004\000" +
    "\002\103\006\000\002\103\005\000\002\103\006\000\002" +
    "\103\005\000\002\103\010\000\002\103\011\000\002\103" +
    "\010\000\002\103\011\000\002\063\010\000\002\063\010" +
    "\000\002\112\007\000\002\112\010\000\002\064\011\000" +
    "\002\065\011\000\002\065\003\000\002\065\003\000\002" +
    "\065\004\000\002\065\005\000\002\065\012\000\002\065" +
    "\004\000\002\065\004\000\002\065\004\000\002\065\005" +
    "\000\002\065\003\000\002\065\004\000\002\065\006\000" +
    "\002\065\006\000\002\065\006\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\010\000\002\065" +
    "\011\000\002\065\010\000\002\065\011\000\002\066\011" +
    "\000\002\067\011\000\002\067\003\000\002\067\004\000" +
    "\002\067\005\000\002\067\003\000\002\067\012\000\002" +
    "\067\004\000\002\067\004\000\002\067\004\000\002\067" +
    "\005\000\002\067\003\000\002\067\004\000\002\067\006" +
    "\000\002\067\006\000\002\067\005\000\002\067\005\000" +
    "\002\067\010\000\002\067\011\000\002\067\010\000\002" +
    "\067\011\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\071\012\000\002\071\014\000\002\071\016" +
    "\000\002\071\011\000\002\071\013\000\002\104\011\000" +
    "\002\104\003\000\002\104\004\000\002\104\005\000\002" +
    "\104\003\000\002\104\012\000\002\104\004\000\002\104" +
    "\004\000\002\104\004\000\002\104\005\000\002\104\003" +
    "\000\002\104\004\000\002\104\006\000\002\104\006\000" +
    "\002\104\005\000\002\104\005\000\002\104\010\000\002" +
    "\104\011\000\002\104\010\000\002\104\011\000\002\074" +
    "\010\000\002\074\010\000\002\105\007\000\002\105\010" +
    "\000\002\072\017\000\002\073\011\000\002\073\003\000" +
    "\002\073\003\000\002\073\004\000\002\073\005\000\002" +
    "\073\012\000\002\073\004\000\002\073\004\000\002\073" +
    "\004\000\002\073\005\000\002\073\003\000\002\073\004" +
    "\000\002\073\006\000\002\073\006\000\002\073\006\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\010\000\002\073\011\000\002\073\010\000\002\073" +
    "\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u050f\000\010\003\010\006\005\102\004\001\002\000" +
    "\004\100\u0510\001\002\000\006\003\u04f2\007\u04f3\001\002" +
    "\000\004\002\u04f1\001\002\000\004\002\000\001\002\000" +
    "\004\007\017\001\002\000\006\003\010\006\005\001\002" +
    "\000\004\102\013\001\002\000\006\002\uffcf\100\015\001" +
    "\002\000\004\002\uffff\001\002\000\006\002\uffd1\102\013" +
    "\001\002\000\004\002\uffd0\001\002\000\004\051\020\001" +
    "\002\000\006\100\022\102\021\001\002\000\004\100\u04ee" +
    "\001\002\000\020\003\031\006\033\010\023\013\uffd4\033" +
    "\025\100\uffd4\102\032\001\002\000\010\003\u049b\051\u049c" +
    "\103\u049a\001\002\000\006\013\ufff1\100\u0498\001\002\000" +
    "\006\003\u045d\030\u045e\001\002\000\004\013\u045a\001\002" +
    "\000\014\003\u0452\010\023\013\uffd4\100\041\102\040\001" +
    "\002\000\014\003\u0452\010\023\013\uffd4\100\041\102\040" +
    "\001\002\000\012\025\115\030\114\051\113\103\112\001" +
    "\002\000\004\100\110\001\002\000\006\003\034\025\035" +
    "\001\002\000\004\051\104\001\002\000\006\003\036\051" +
    "\037\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\004\100\100\001\002\000" +
    "\046\003\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\020\uffd3\023\uffd3\027\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\051\uffd3\100\uffd3\102\uffd3\107\uffd3\001\002" +
    "\000\004\012\044\001\002\000\006\003\073\013\074\001" +
    "\002\000\006\003\045\051\046\001\002\000\004\022\066" +
    "\001\002\000\006\003\050\022\047\001\002\000\016\003" +
    "\061\014\054\015\053\016\056\046\055\051\052\001\002" +
    "\000\014\014\054\015\053\016\056\046\055\051\052\001" +
    "\002\000\006\100\041\102\040\001\002\000\016\003\uff4d" +
    "\054\uff4d\074\uff4d\100\uff4d\102\uff4d\104\uff4d\001\002\000" +
    "\016\003\uff50\054\uff50\074\uff50\100\uff50\102\uff50\104\uff50" +
    "\001\002\000\016\003\uff4f\054\uff4f\074\uff4f\100\uff4f\102" +
    "\uff4f\104\uff4f\001\002\000\016\003\uff4e\054\uff4e\074\uff4e" +
    "\100\uff4e\102\uff4e\104\uff4e\001\002\000\016\003\uff51\054" +
    "\uff51\074\uff51\100\uff51\102\uff51\104\uff51\001\002\000\010" +
    "\003\ufe6e\012\044\013\ufe6e\001\002\000\006\003\ufe6a\013" +
    "\ufe6a\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\010\003\ufe70\012\044\013" +
    "\ufe70\001\002\000\006\003\ufe6c\013\ufe6c\001\002\000\006" +
    "\003\ufe6d\013\ufe6d\001\002\000\014\014\054\015\053\016" +
    "\056\046\055\051\052\001\002\000\006\100\041\102\040" +
    "\001\002\000\010\003\ufe6f\012\044\013\ufe6f\001\002\000" +
    "\006\003\ufe6b\013\ufe6b\001\002\000\014\003\ufe69\010\ufe69" +
    "\013\ufe69\100\ufe69\102\ufe69\001\002\000\004\025\077\001" +
    "\002\000\006\003\075\025\076\001\002\000\014\003\ufe63" +
    "\010\ufe63\013\ufe63\100\ufe63\102\ufe63\001\002\000\014\003" +
    "\ufe65\010\ufe65\013\ufe65\100\ufe65\102\ufe65\001\002\000\014" +
    "\003\ufe64\010\ufe64\013\ufe64\100\ufe64\102\ufe64\001\002\000" +
    "\046\003\uffd2\005\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\020\uffd2\023\uffd2\027\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\051\uffd2\100\uffd2\102\uffd2\107\uffd2\001\002" +
    "\000\004\012\044\001\002\000\006\003\073\013\074\001" +
    "\002\000\014\003\ufe66\010\ufe66\013\ufe66\100\ufe66\102\ufe66" +
    "\001\002\000\006\100\041\102\040\001\002\000\004\012" +
    "\044\001\002\000\006\003\073\013\074\001\002\000\014" +
    "\003\ufe67\010\ufe67\013\ufe67\100\ufe67\102\ufe67\001\002\000" +
    "\020\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4" +
    "\102\032\001\002\000\004\013\uffeb\001\002\000\004\073" +
    "\u0449\001\002\000\004\073\u03cb\001\002\000\004\051\122" +
    "\001\002\000\004\051\116\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\012\044\001\002\000\006\003\073" +
    "\013\074\001\002\000\014\003\ufe68\010\ufe68\013\ufe68\100" +
    "\ufe68\102\ufe68\001\002\000\004\073\123\001\002\000\006" +
    "\051\126\106\124\001\002\000\004\051\u03c6\001\002\000" +
    "\004\074\133\001\002\000\004\022\127\001\002\000\014" +
    "\014\054\015\053\016\056\046\055\051\052\001\002\000" +
    "\010\003\ufe56\074\ufe56\104\131\001\002\000\006\051\126" +
    "\106\124\001\002\000\006\003\ufe55\074\ufe55\001\002\000" +
    "\004\022\134\001\002\000\014\014\054\015\053\016\056" +
    "\046\055\051\052\001\002\000\006\100\041\102\040\001" +
    "\002\000\020\005\141\011\144\020\143\023\154\035\137" +
    "\051\153\102\147\001\002\000\004\030\u03c3\001\002\000" +
    "\006\003\u03bd\013\u03bf\001\002\000\016\042\162\043\164" +
    "\051\172\060\160\065\166\073\161\001\002\000\032\003" +
    "\ufe41\005\ufe41\011\ufe41\012\ufe41\013\ufe41\020\ufe41\023\ufe41" +
    "\027\ufe41\035\ufe41\051\ufe41\102\ufe41\107\ufe41\001\002\000" +
    "\004\070\u038f\001\002\000\004\051\u0360\001\002\000\006" +
    "\100\041\102\040\001\002\000\024\003\ufe4a\005\141\011" +
    "\144\013\ufe4a\020\143\023\154\035\137\051\153\102\147" +
    "\001\002\000\004\100\u035b\001\002\000\032\003\ufe40\005" +
    "\ufe40\011\ufe40\012\ufe40\013\ufe40\020\ufe40\023\ufe40\027\ufe40" +
    "\035\ufe40\051\ufe40\102\ufe40\107\ufe40\001\002\000\032\003" +
    "\ufe42\005\ufe42\011\ufe42\012\ufe42\013\ufe42\020\ufe42\023\ufe42" +
    "\027\ufe42\035\ufe42\051\ufe42\102\ufe42\107\ufe42\001\002\000" +
    "\024\003\ufe51\005\141\011\144\013\ufe51\020\143\023\154" +
    "\035\137\051\153\102\147\001\002\000\020\003\u0258\042" +
    "\162\043\164\051\310\060\302\065\166\073\u0255\001\002" +
    "\000\006\024\157\036\156\001\002\000\016\042\162\043" +
    "\164\051\172\060\160\065\166\073\161\001\002\000\016" +
    "\042\uff42\043\uff42\051\uff42\060\uff42\065\uff42\073\uff42\001" +
    "\002\000\016\042\uff41\043\uff41\051\uff41\060\uff41\065\uff41" +
    "\073\uff41\001\002\000\010\051\361\065\321\073\363\001" +
    "\002\000\012\051\331\060\u0349\065\166\073\161\001\002" +
    "\000\024\026\uff47\054\uff47\055\uff47\056\uff47\074\uff47\100" +
    "\uff47\101\uff47\102\uff47\104\uff47\001\002\000\010\054\u0327" +
    "\055\u0329\056\u0328\001\002\000\024\026\uff46\054\uff46\055" +
    "\uff46\056\uff46\074\uff46\100\uff46\101\uff46\102\uff46\104\uff46" +
    "\001\002\000\026\054\u0327\055\u0329\056\u0328\057\uff9f\060" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\110\uff9f\001\002" +
    "\000\100\003\uffad\005\uffad\011\uffad\012\uffad\013\uffad\020" +
    "\uffad\023\uffad\026\uffad\027\uffad\032\uffad\034\uffad\035\uffad" +
    "\037\uffad\047\uffad\051\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\073\uffad\074\uffad" +
    "\100\uffad\101\uffad\102\uffad\104\uffad\107\uffad\110\uffad\001" +
    "\002\000\026\054\u0327\055\u0329\056\u0328\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\073\uff9d\110\uff9d\001\002\000" +
    "\012\054\u0327\055\u0329\056\u0328\073\327\001\002\000\020" +
    "\057\341\060\347\061\342\062\336\063\335\073\351\110" +
    "\343\001\002\000\026\054\u0327\055\u0329\056\u0328\057\uff9e" +
    "\060\uff9e\061\uff9e\062\uff9e\063\uff9e\073\300\110\uff9e\001" +
    "\002\000\006\100\041\102\040\001\002\000\022\005\200" +
    "\011\144\012\205\020\204\023\213\035\176\051\212\102" +
    "\207\001\002\000\034\005\ufe10\011\ufe10\012\ufe10\013\ufe10" +
    "\020\ufe10\023\ufe10\027\ufe10\032\ufe10\034\ufe10\035\ufe10\051" +
    "\ufe10\102\ufe10\107\ufe10\001\002\000\006\023\u0321\030\u0322" +
    "\001\002\000\034\005\ufe0e\011\ufe0e\012\ufe0e\013\ufe0e\020" +
    "\ufe0e\023\ufe0e\027\ufe0e\032\ufe0e\034\ufe0e\035\ufe0e\051\ufe0e" +
    "\102\ufe0e\107\ufe0e\001\002\000\016\042\162\043\164\051" +
    "\172\060\160\065\166\073\161\001\002\000\004\034\u02bd" +
    "\001\002\000\024\005\200\011\144\012\205\020\204\023" +
    "\213\034\ufdd8\035\176\051\212\102\207\001\002\000\034" +
    "\005\ufe0f\011\ufe0f\012\ufe0f\013\ufe0f\020\ufe0f\023\ufe0f\027" +
    "\ufe0f\032\ufe0f\034\ufe0f\035\ufe0f\051\ufe0f\102\ufe0f\107\ufe0f" +
    "\001\002\000\004\070\u02ad\001\002\000\004\051\u0291\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\100\u028d" +
    "\001\002\000\024\005\200\011\144\012\205\020\204\023" +
    "\213\034\ufdcf\035\176\051\212\102\207\001\002\000\024" +
    "\005\200\011\144\012\205\020\204\023\213\034\ufdd5\035" +
    "\176\051\212\102\207\001\002\000\024\003\u0258\042\162" +
    "\043\164\051\310\054\u025a\060\302\065\166\070\u0256\073" +
    "\u0255\001\002\000\006\024\157\036\156\001\002\000\016" +
    "\042\162\043\164\051\172\060\160\065\166\073\161\001" +
    "\002\000\006\100\041\102\040\001\002\000\022\005\221" +
    "\011\230\012\205\020\225\023\234\035\220\051\212\102" +
    "\231\001\002\000\032\005\ufead\011\ufead\012\ufead\013\ufead" +
    "\020\ufead\023\ufead\027\ufead\034\ufead\035\ufead\051\ufead\102" +
    "\ufead\107\ufead\001\002\000\010\011\u024e\023\u024c\030\u024d" +
    "\001\002\000\016\042\162\043\164\051\172\060\160\065" +
    "\166\073\161\001\002\000\032\005\ufeab\011\ufeab\012\ufeab" +
    "\013\ufeab\020\ufeab\023\ufeab\027\ufeab\034\ufeab\035\ufeab\051" +
    "\ufeab\102\ufeab\107\ufeab\001\002\000\024\005\221\011\230" +
    "\012\205\020\225\023\234\034\ufdef\035\220\051\212\102" +
    "\231\001\002\000\004\034\u0207\001\002\000\004\070\u01f8" +
    "\001\002\000\024\005\221\011\230\012\205\020\225\023" +
    "\234\034\ufdee\035\220\051\212\102\231\001\002\000\006" +
    "\100\041\102\040\001\002\000\004\051\u0127\001\002\000" +
    "\004\100\u0125\001\002\000\024\005\221\011\230\012\205" +
    "\020\225\023\234\034\ufde6\035\220\051\212\102\231\001" +
    "\002\000\032\005\ufeac\011\ufeac\012\ufeac\013\ufeac\020\ufeac" +
    "\023\ufeac\027\ufeac\034\ufeac\035\ufeac\051\ufeac\102\ufeac\107" +
    "\ufeac\001\002\000\006\024\157\036\156\001\002\000\016" +
    "\042\162\043\164\051\172\060\160\065\166\073\161\001" +
    "\002\000\006\100\041\102\040\001\002\000\022\005\221" +
    "\011\230\012\205\020\242\023\234\035\240\051\212\102" +
    "\247\001\002\000\004\023\u0121\001\002\000\024\005\221" +
    "\011\230\012\205\020\242\023\234\034\ufebe\035\240\051" +
    "\212\102\247\001\002\000\004\070\260\001\002\000\004" +
    "\034\256\001\002\000\024\005\221\011\230\012\205\020" +
    "\242\023\234\034\ufebd\035\240\051\212\102\247\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\221\011" +
    "\230\012\205\020\242\023\234\034\ufeb5\035\240\051\212" +
    "\102\247\001\002\000\004\100\250\001\002\000\024\005" +
    "\221\011\230\012\205\020\242\023\234\034\ufebc\035\240" +
    "\051\212\102\247\001\002\000\004\034\ufebb\001\002\000" +
    "\004\034\ufeb4\001\002\000\024\005\221\011\230\012\205" +
    "\020\242\023\234\034\ufeb7\035\240\051\212\102\247\001" +
    "\002\000\004\034\ufeb6\001\002\000\004\034\ufeb8\001\002" +
    "\000\006\100\041\102\040\001\002\000\036\003\ufec0\005" +
    "\ufec0\011\ufec0\012\ufec0\013\ufec0\020\ufec0\023\ufec0\027\ufec0" +
    "\034\ufec0\035\ufec0\051\ufec0\100\ufec0\102\ufec0\107\ufec0\001" +
    "\002\000\006\021\262\111\261\001\002\000\004\073\u011c" +
    "\001\002\000\004\073\263\001\002\000\022\042\162\043" +
    "\164\051\272\060\160\064\273\065\166\073\161\074\264" +
    "\001\002\000\006\100\041\102\040\001\002\000\006\074" +
    "\uffa9\101\u0118\001\002\000\024\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\073\uff9f\074\uffaa\101\u0116\110\uff9f\001" +
    "\002\000\004\074\u0113\001\002\000\040\026\uff9d\054\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\073\uff9d\074\uff9d\100\uff9d\101\uff9d\102\uff9d\110\uff9d" +
    "\001\002\000\010\073\327\074\uffa6\101\326\001\002\000" +
    "\026\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\070\276" +
    "\073\300\074\uffa8\101\277\110\uff9e\001\002\000\006\074" +
    "\uffab\101\274\001\002\000\020\042\162\043\164\051\272" +
    "\060\160\064\273\065\166\073\161\001\002\000\004\074" +
    "\uffa5\001\002\000\004\051\323\001\002\000\020\042\162" +
    "\043\164\051\272\060\160\064\273\065\166\073\161\001" +
    "\002\000\020\042\162\043\164\051\310\060\302\065\166" +
    "\073\303\074\301\001\002\000\044\026\ufe79\051\ufe79\054" +
    "\ufe79\055\ufe79\056\ufe79\057\ufe79\060\ufe79\061\ufe79\062\ufe79" +
    "\063\ufe79\065\ufe79\073\ufe79\074\ufe79\100\ufe79\101\ufe79\102" +
    "\ufe79\110\ufe79\001\002\000\004\065\321\001\002\000\014" +
    "\042\162\043\164\051\310\060\302\065\166\001\002\000" +
    "\044\026\ufe78\051\ufe78\054\ufe78\055\ufe78\056\ufe78\057\ufe78" +
    "\060\ufe78\061\ufe78\062\ufe78\063\ufe78\065\ufe78\073\ufe78\074" +
    "\ufe78\100\ufe78\101\ufe78\102\ufe78\110\ufe78\001\002\000\012" +
    "\074\ufe72\100\ufe72\102\ufe72\104\ufe72\001\002\000\012\074" +
    "\ufe71\100\ufe71\102\ufe71\104\ufe71\001\002\000\006\074\312" +
    "\104\311\001\002\000\012\074\ufe73\100\ufe73\102\ufe73\104" +
    "\ufe73\001\002\000\016\042\162\043\164\051\310\060\302" +
    "\065\166\073\303\001\002\000\044\026\ufe77\051\ufe77\054" +
    "\ufe77\055\ufe77\056\ufe77\057\ufe77\060\ufe77\061\ufe77\062\ufe77" +
    "\063\ufe77\065\ufe77\073\ufe77\074\ufe77\100\ufe77\101\ufe77\102" +
    "\ufe77\110\ufe77\001\002\000\044\026\ufe76\051\ufe76\054\ufe76" +
    "\055\ufe76\056\ufe76\057\ufe76\060\ufe76\061\ufe76\062\ufe76\063" +
    "\ufe76\065\ufe76\073\ufe76\074\ufe76\100\ufe76\101\ufe76\102\ufe76" +
    "\110\ufe76\001\002\000\004\074\315\001\002\000\006\074" +
    "\317\104\316\001\002\000\016\042\162\043\164\051\310" +
    "\060\302\065\166\073\303\001\002\000\044\026\ufe74\051" +
    "\ufe74\054\ufe74\055\ufe74\056\ufe74\057\ufe74\060\ufe74\061\ufe74" +
    "\062\ufe74\063\ufe74\065\ufe74\073\ufe74\074\ufe74\100\ufe74\101" +
    "\ufe74\102\ufe74\110\ufe74\001\002\000\044\026\ufe75\051\ufe75" +
    "\054\ufe75\055\ufe75\056\ufe75\057\ufe75\060\ufe75\061\ufe75\062" +
    "\ufe75\063\ufe75\065\ufe75\073\ufe75\074\ufe75\100\ufe75\101\ufe75" +
    "\102\ufe75\110\ufe75\001\002\000\100\003\uffac\005\uffac\011" +
    "\uffac\012\uffac\013\uffac\020\uffac\023\uffac\026\uffac\027\uffac" +
    "\032\uffac\034\uffac\035\uffac\037\uffac\047\uffac\051\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\073\uffac\074\uffac\100\uffac\101\uffac\102\uffac\104" +
    "\uffac\107\uffac\110\uffac\001\002\000\004\074\uffa1\001\002" +
    "\000\006\074\uffa7\101\324\001\002\000\020\042\162\043" +
    "\164\051\272\060\160\064\273\065\166\073\161\001\002" +
    "\000\004\074\uffa0\001\002\000\020\042\162\043\164\051" +
    "\272\060\160\064\273\065\166\073\161\001\002\000\012" +
    "\051\331\060\160\065\166\073\161\001\002\000\040\026" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\073\uff9f\074\uff9f\100\uff9f\101\uff9f\102" +
    "\uff9f\110\uff9f\001\002\000\040\026\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\073" +
    "\300\074\uff9e\100\uff9e\101\uff9e\102\uff9e\110\uff9e\001\002" +
    "\000\022\057\341\060\347\061\342\062\336\063\335\073" +
    "\351\074\u010d\110\343\001\002\000\006\073\327\074\334" +
    "\001\002\000\044\026\uff9a\051\331\054\uff9a\055\uff9a\056" +
    "\uff9a\057\341\060\337\061\342\062\336\063\335\065\166" +
    "\073\uff9a\074\uff9a\100\uff9a\101\uff9a\102\uff9a\110\343\001" +
    "\002\000\012\051\uff70\060\uff70\065\uff70\073\uff70\001\002" +
    "\000\012\051\uff71\060\uff71\065\uff71\073\uff71\001\002\000" +
    "\012\051\uff73\060\uff73\065\uff73\073\363\001\002\000\012" +
    "\051\331\060\160\065\166\073\161\001\002\000\012\051" +
    "\uff74\060\uff74\065\uff74\073\uff74\001\002\000\012\051\uff72" +
    "\060\uff72\065\uff72\073\uff72\001\002\000\012\051\uff6f\060" +
    "\uff6f\065\uff6f\073\uff6f\001\002\000\024\026\uff98\054\uff98" +
    "\055\uff98\056\uff98\073\uff98\074\uff98\100\uff98\101\uff98\102" +
    "\uff98\001\002\000\040\026\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\341\060\347\061\342\062\336\063\335\073\uff92\074" +
    "\uff92\100\uff92\101\uff92\102\uff92\110\343\001\002\000\024" +
    "\026\uff96\054\uff96\055\uff96\056\uff96\073\uff96\074\uff96\100" +
    "\uff96\101\uff96\102\uff96\001\002\000\012\051\uff73\060\uff73" +
    "\065\uff73\073\uff73\001\002\000\012\051\331\060\160\065" +
    "\166\073\161\001\002\000\012\051\331\060\160\065\166" +
    "\073\161\001\002\000\022\057\341\060\347\061\342\062" +
    "\336\063\335\073\351\074\355\110\343\001\002\000\006" +
    "\073\327\074\354\001\002\000\024\026\uff95\054\uff95\055" +
    "\uff95\056\uff95\073\uff95\074\uff95\100\uff95\101\uff95\102\uff95" +
    "\001\002\000\024\026\uff84\054\uff84\055\uff84\056\uff84\073" +
    "\uff84\074\uff84\100\uff84\101\uff84\102\uff84\001\002\000\024" +
    "\026\uff6d\054\uff6d\055\uff6d\056\uff6d\073\327\074\uff6d\100" +
    "\uff6d\101\uff6d\102\uff6d\001\002\000\040\026\uff6e\054\uff6e" +
    "\055\uff6e\056\uff6e\057\341\060\347\061\342\062\336\063" +
    "\335\073\351\074\uff6e\100\uff6e\101\uff6e\102\uff6e\110\343" +
    "\001\002\000\024\026\uff9c\054\uff9c\055\uff9c\056\uff9c\073" +
    "\uff9c\074\uff9c\100\uff9c\101\uff9c\102\uff9c\001\002\000\004" +
    "\073\300\001\002\000\044\026\uff7d\051\331\054\uff7d\055" +
    "\uff7d\056\uff7d\057\341\060\337\061\342\062\336\063\335" +
    "\065\166\073\161\074\uff7d\100\uff7d\101\uff7d\102\uff7d\110" +
    "\343\001\002\000\012\051\331\060\364\065\166\073\161" +
    "\001\002\000\010\051\361\065\321\073\363\001\002\000" +
    "\022\057\341\060\347\061\342\062\336\063\335\073\351" +
    "\074\375\110\343\001\002\000\006\073\327\074\367\001" +
    "\002\000\044\026\uff91\051\331\054\uff91\055\uff91\056\uff91" +
    "\057\341\060\337\061\342\062\336\063\335\065\166\073" +
    "\uff91\074\uff91\100\uff91\101\uff91\102\uff91\110\343\001\002" +
    "\000\012\051\331\060\160\065\166\073\161\001\002\000" +
    "\040\026\uff8e\054\uff8e\055\uff8e\056\uff8e\057\341\060\347" +
    "\061\342\062\336\063\335\073\uff8e\074\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\110\343\001\002\000\024\026\uff90\054\uff90" +
    "\055\uff90\056\uff90\073\uff90\074\uff90\100\uff90\101\uff90\102" +
    "\uff90\001\002\000\040\026\uff8d\054\uff8d\055\uff8d\056\uff8d" +
    "\057\341\060\347\061\342\062\336\063\335\073\uff8d\074" +
    "\uff8d\100\uff8d\101\uff8d\102\uff8d\110\343\001\002\000\024" +
    "\026\uff8f\054\uff8f\055\uff8f\056\uff8f\073\uff8f\074\uff8f\100" +
    "\uff8f\101\uff8f\102\uff8f\001\002\000\044\026\uff82\051\331" +
    "\054\uff82\055\uff82\056\uff82\057\341\060\337\061\342\062" +
    "\336\063\335\065\166\073\uff82\074\uff82\100\uff82\101\uff82" +
    "\102\uff82\110\343\001\002\000\012\051\331\060\160\065" +
    "\166\073\161\001\002\000\024\026\uff81\054\uff81\055\uff81" +
    "\056\uff81\073\uff81\074\uff81\100\uff81\101\uff81\102\uff81\001" +
    "\002\000\040\026\uff7e\054\uff7e\055\uff7e\056\uff7e\057\341" +
    "\060\347\061\342\062\336\063\335\073\uff7e\074\uff7e\100" +
    "\uff7e\101\uff7e\102\uff7e\110\343\001\002\000\040\026\uff7f" +
    "\054\uff7f\055\uff7f\056\uff7f\057\341\060\347\061\342\062" +
    "\336\063\335\073\uff7f\074\uff7f\100\uff7f\101\uff7f\102\uff7f" +
    "\110\343\001\002\000\024\026\uff80\054\uff80\055\uff80\056" +
    "\uff80\073\uff80\074\uff80\100\uff80\101\uff80\102\uff80\001\002" +
    "\000\026\051\331\057\341\060\337\061\342\062\336\063" +
    "\335\065\166\073\161\074\u0104\110\343\001\002\000\044" +
    "\026\uff78\051\331\054\uff78\055\uff78\056\uff78\057\341\060" +
    "\337\061\342\062\336\063\335\065\166\073\uff78\074\uff78" +
    "\100\uff78\101\uff78\102\uff78\110\343\001\002\000\012\051" +
    "\331\060\160\065\166\073\161\001\002\000\040\026\uff7c" +
    "\054\uff7c\055\uff7c\056\uff7c\057\341\060\347\061\342\062" +
    "\336\063\335\073\351\074\uff7c\100\uff7c\101\uff7c\102\uff7c" +
    "\110\343\001\002\000\024\026\uff7b\054\uff7b\055\uff7b\056" +
    "\uff7b\073\327\074\uff7b\100\uff7b\101\uff7b\102\uff7b\001\002" +
    "\000\024\026\uff7a\054\uff7a\055\uff7a\056\uff7a\073\uff7a\074" +
    "\uff7a\100\uff7a\101\uff7a\102\uff7a\001\002\000\012\051\331" +
    "\060\160\065\166\073\161\001\002\000\024\026\uff77\054" +
    "\uff77\055\uff77\056\uff77\073\uff77\074\uff77\100\uff77\101\uff77" +
    "\102\uff77\001\002\000\040\026\uff75\054\uff75\055\uff75\056" +
    "\uff75\057\341\060\347\061\342\062\336\063\335\073\uff75" +
    "\074\uff75\100\uff75\101\uff75\102\uff75\110\343\001\002\000" +
    "\024\026\uff76\054\uff76\055\uff76\056\uff76\073\uff76\074\uff76" +
    "\100\uff76\101\uff76\102\uff76\001\002\000\044\026\uff8b\051" +
    "\331\054\uff8b\055\uff8b\056\uff8b\057\341\060\337\061\342" +
    "\062\336\063\335\065\166\073\uff8b\074\uff8b\100\uff8b\101" +
    "\uff8b\102\uff8b\110\343\001\002\000\012\051\331\060\160" +
    "\065\166\073\161\001\002\000\024\026\uff89\054\uff89\055" +
    "\uff89\056\uff89\073\uff89\074\uff89\100\uff89\101\uff89\102\uff89" +
    "\001\002\000\040\026\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\341\060\347\061\342\062\336\063\335\073\uff85\074\uff85" +
    "\100\uff85\101\uff85\102\uff85\110\343\001\002\000\024\026" +
    "\uff87\054\uff87\055\uff87\056\uff87\073\uff87\074\uff87\100\uff87" +
    "\101\uff87\102\uff87\001\002\000\004\074\uffa3\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\230" +
    "\012\205\020\242\023\234\034\ufebf\035\240\051\212\102" +
    "\247\001\002\000\004\034\ufeba\001\002\000\020\042\162" +
    "\043\164\051\272\060\160\064\273\065\166\073\161\001" +
    "\002\000\004\074\uffa4\001\002\000\020\042\162\043\164" +
    "\051\272\060\160\064\273\065\166\073\161\001\002\000" +
    "\004\074\uffa2\001\002\000\024\005\221\011\230\012\205" +
    "\020\242\023\234\034\ufeb1\035\240\051\212\102\247\001" +
    "\002\000\004\034\ufeb0\001\002\000\004\074\u011d\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\221\011" +
    "\230\012\205\020\242\023\234\034\ufeaf\035\240\051\212" +
    "\102\247\001\002\000\004\034\ufeae\001\002\000\004\034" +
    "\ufeb9\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\221\011\230\012\205\020\242\023\234\034\ufeb2\035" +
    "\240\051\212\102\247\001\002\000\004\034\ufeb3\001\002" +
    "\000\004\034\ufde5\001\002\000\024\005\221\011\230\012" +
    "\205\020\225\023\234\034\ufded\035\220\051\212\102\231" +
    "\001\002\000\004\034\ufdec\001\002\000\004\054\u0128\001" +
    "\002\000\006\060\302\065\166\001\002\000\004\037\u012a" +
    "\001\002\000\006\060\302\065\166\001\002\000\004\047" +
    "\u012c\001\002\000\006\060\302\065\166\001\002\000\006" +
    "\100\041\102\040\001\002\000\022\005\u0131\011\u0135\012" +
    "\205\020\u0134\023\u013c\035\u0130\051\212\102\u0137\001\002" +
    "\000\024\005\u0131\011\u0135\012\205\020\u0134\023\u013c\032" +
    "\ufe89\035\u0130\051\212\102\u0137\001\002\000\006\011\u01ef" +
    "\023\u01ee\001\002\000\016\042\162\043\164\051\172\060" +
    "\160\065\166\073\161\001\002\000\024\005\u0131\011\u0135" +
    "\012\205\020\u0134\023\u013c\032\ufe8c\035\u0130\051\212\102" +
    "\u0137\001\002\000\032\005\ufef3\011\ufef3\012\ufef3\013\ufef3" +
    "\020\ufef3\023\ufef3\027\ufef3\032\ufef3\035\ufef3\051\ufef3\102" +
    "\ufef3\107\ufef3\001\002\000\004\070\u019a\001\002\000\004" +
    "\051\u016e\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\100\u016a\001\002\000\032\005\ufef4\011\ufef4\012\ufef4" +
    "\013\ufef4\020\ufef4\023\ufef4\027\ufef4\032\ufef4\035\ufef4\051" +
    "\ufef4\102\ufef4\107\ufef4\001\002\000\024\005\u0131\011\u0135" +
    "\012\205\020\u0134\023\u013c\032\ufe83\035\u0130\051\212\102" +
    "\u0137\001\002\000\004\032\u0166\001\002\000\032\005\ufef2" +
    "\011\ufef2\012\ufef2\013\ufef2\020\ufef2\023\ufef2\027\ufef2\032" +
    "\ufef2\035\ufef2\051\ufef2\102\ufef2\107\ufef2\001\002\000\006" +
    "\024\157\036\156\001\002\000\016\042\162\043\164\051" +
    "\172\060\160\065\166\073\161\001\002\000\006\100\041" +
    "\102\040\001\002\000\022\005\221\011\230\012\205\020" +
    "\u0142\023\234\035\u0140\051\212\102\u0146\001\002\000\006" +
    "\011\u0161\023\u0160\001\002\000\024\005\221\011\230\012" +
    "\205\020\u0142\023\234\034\ufed3\035\u0140\051\212\102\u0146" +
    "\001\002\000\004\070\u0150\001\002\000\024\005\221\011" +
    "\230\012\205\020\u0142\023\234\034\ufed2\035\u0140\051\212" +
    "\102\u0146\001\002\000\006\100\041\102\040\001\002\000" +
    "\024\005\221\011\230\012\205\020\u0142\023\234\034\ufeca" +
    "\035\u0140\051\212\102\u0146\001\002\000\004\100\u014a\001" +
    "\002\000\004\034\u0148\001\002\000\006\100\041\102\040" +
    "\001\002\000\032\005\ufed5\011\ufed5\012\ufed5\013\ufed5\020" +
    "\ufed5\023\ufed5\027\ufed5\032\ufed5\035\ufed5\051\ufed5\102\ufed5" +
    "\107\ufed5\001\002\000\024\005\221\011\230\012\205\020" +
    "\u0142\023\234\034\ufed1\035\u0140\051\212\102\u0146\001\002" +
    "\000\004\034\ufed0\001\002\000\004\034\ufec9\001\002\000" +
    "\024\005\221\011\230\012\205\020\u0142\023\234\034\ufecc" +
    "\035\u0140\051\212\102\u0146\001\002\000\004\034\ufecb\001" +
    "\002\000\004\034\ufecd\001\002\000\006\021\u0152\111\u0151" +
    "\001\002\000\004\073\u015b\001\002\000\004\073\u0153\001" +
    "\002\000\022\042\162\043\164\051\272\060\160\064\273" +
    "\065\166\073\161\074\u0154\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\074\u0156\001\002\000\006\100\041" +
    "\102\040\001\002\000\024\005\221\011\230\012\205\020" +
    "\u0142\023\234\034\ufed4\035\u0140\051\212\102\u0146\001\002" +
    "\000\004\034\ufecf\001\002\000\024\005\221\011\230\012" +
    "\205\020\u0142\023\234\034\ufec4\035\u0140\051\212\102\u0146" +
    "\001\002\000\004\034\ufec3\001\002\000\004\074\u015c\001" +
    "\002\000\006\100\041\102\040\001\002\000\024\005\221" +
    "\011\230\012\205\020\u0142\023\234\034\ufec2\035\u0140\051" +
    "\212\102\u0146\001\002\000\004\034\ufec1\001\002\000\004" +
    "\034\ufece\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\230" +
    "\012\205\020\u0142\023\234\034\ufec5\035\u0140\051\212\102" +
    "\u0146\001\002\000\004\034\ufec7\001\002\000\024\005\221" +
    "\011\230\012\205\020\u0142\023\234\034\ufec6\035\u0140\051" +
    "\212\102\u0146\001\002\000\004\034\ufec8\001\002\000\004" +
    "\051\u0167\001\002\000\006\100\041\102\040\001\002\000" +
    "\032\005\ufe8e\011\ufe8e\012\ufe8e\013\ufe8e\020\ufe8e\023\ufe8e" +
    "\027\ufe8e\034\ufe8e\035\ufe8e\051\ufe8e\102\ufe8e\107\ufe8e\001" +
    "\002\000\004\032\ufe82\001\002\000\024\005\u0131\011\u0135" +
    "\012\205\020\u0134\023\u013c\032\ufe8b\035\u0130\051\212\102" +
    "\u0137\001\002\000\004\032\ufe8a\001\002\000\024\005\u0131" +
    "\011\u0135\012\205\020\u0134\023\u013c\032\ufe85\035\u0130\051" +
    "\212\102\u0137\001\002\000\004\032\ufe84\001\002\000\004" +
    "\054\u016f\001\002\000\006\060\302\065\166\001\002\000" +
    "\004\037\u0171\001\002\000\006\060\302\065\166\001\002" +
    "\000\004\047\u0173\001\002\000\006\060\302\065\166\001" +
    "\002\000\006\100\041\102\040\001\002\000\022\005\u0131" +
    "\011\u0135\012\205\020\u017a\023\u013c\035\u0177\051\212\102" +
    "\u017d\001\002\000\024\005\u0131\011\u0135\012\205\020\u017a" +
    "\023\u013c\032\uff04\035\u0177\051\212\102\u017d\001\002\000" +
    "\004\011\u0196\001\002\000\004\032\u0193\001\002\000\024" +
    "\005\u0131\011\u0135\012\205\020\u017a\023\u013c\032\uff05\035" +
    "\u0177\051\212\102\u017d\001\002\000\004\070\u0183\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\u0131\011" +
    "\u0135\012\205\020\u017a\023\u013c\032\ufefc\035\u0177\051\212" +
    "\102\u017d\001\002\000\004\100\u017e\001\002\000\024\005" +
    "\u0131\011\u0135\012\205\020\u017a\023\u013c\032\uff01\035\u0177" +
    "\051\212\102\u017d\001\002\000\004\032\uff00\001\002\000" +
    "\004\032\ufefb\001\002\000\024\005\u0131\011\u0135\012\205" +
    "\020\u017a\023\u013c\032\ufefe\035\u0177\051\212\102\u017d\001" +
    "\002\000\004\032\ufefd\001\002\000\006\021\u0185\111\u0184" +
    "\001\002\000\004\073\u018e\001\002\000\004\073\u0186\001" +
    "\002\000\022\042\162\043\164\051\272\060\160\064\273" +
    "\065\166\073\161\074\u0187\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\074\u0189\001\002\000\006\100\041" +
    "\102\040\001\002\000\024\005\u0131\011\u0135\012\205\020" +
    "\u017a\023\u013c\032\uff06\035\u0177\051\212\102\u017d\001\002" +
    "\000\004\032\uff03\001\002\000\024\005\u0131\011\u0135\012" +
    "\205\020\u017a\023\u013c\032\ufef8\035\u0177\051\212\102\u017d" +
    "\001\002\000\004\032\ufef7\001\002\000\004\074\u018f\001" +
    "\002\000\006\100\041\102\040\001\002\000\024\005\u0131" +
    "\011\u0135\012\205\020\u017a\023\u013c\032\ufef6\035\u0177\051" +
    "\212\102\u017d\001\002\000\004\032\ufef5\001\002\000\004" +
    "\032\uff02\001\002\000\004\051\u0194\001\002\000\006\100" +
    "\041\102\040\001\002\000\036\003\uff07\005\uff07\011\uff07" +
    "\012\uff07\013\uff07\020\uff07\023\uff07\027\uff07\032\uff07\035" +
    "\uff07\051\uff07\100\uff07\102\uff07\107\uff07\001\002\000\006" +
    "\100\041\102\040\001\002\000\024\005\u0131\011\u0135\012" +
    "\205\020\u017a\023\u013c\032\ufef9\035\u0177\051\212\102\u017d" +
    "\001\002\000\004\032\ufefa\001\002\000\004\032\ufeff\001" +
    "\002\000\006\021\u019c\111\u019b\001\002\000\004\073\u01a5" +
    "\001\002\000\004\073\u019d\001\002\000\022\042\162\043" +
    "\164\051\272\060\160\064\273\065\166\073\161\074\u019e" +
    "\001\002\000\006\100\041\102\040\001\002\000\004\074" +
    "\u01a0\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\u0131\011\u0135\012\205\020\u0134\023\u013c\032\ufe8d\035" +
    "\u0130\051\212\102\u0137\001\002\000\004\032\ufe88\001\002" +
    "\000\024\005\u0131\011\u0135\012\205\020\u0134\023\u013c\032" +
    "\ufe7d\035\u0130\051\212\102\u0137\001\002\000\004\032\ufe7c" +
    "\001\002\000\004\074\u01a6\001\002\000\006\100\041\102" +
    "\040\001\002\000\024\005\u0131\011\u0135\012\205\020\u0134" +
    "\023\u013c\032\ufe7b\035\u0130\051\212\102\u0137\001\002\000" +
    "\004\032\ufe7a\001\002\000\004\032\ufe87\001\002\000\004" +
    "\026\u01ab\001\002\000\006\100\041\102\040\001\002\000" +
    "\022\005\u0131\011\u0135\012\205\020\u01b0\023\u013c\035\u01ae" +
    "\051\212\102\u01b3\001\002\000\030\005\u0131\011\u0135\012" +
    "\205\013\ufeef\020\u01b0\023\u013c\027\ufeef\035\u01ae\051\212" +
    "\102\u01b3\107\ufeef\001\002\000\006\010\u01e7\011\u01e8\001" +
    "\002\000\030\005\u0131\011\u0135\012\205\013\ufef0\020\u01b0" +
    "\023\u013c\027\ufef0\035\u01ae\051\212\102\u01b3\107\ufef0\001" +
    "\002\000\004\070\u01d7\001\002\000\006\100\041\102\040" +
    "\001\002\000\030\005\u0131\011\u0135\012\205\013\ufee7\020" +
    "\u01b0\023\u013c\027\ufee7\035\u01ae\051\212\102\u01b3\107\ufee7" +
    "\001\002\000\004\100\u01d2\001\002\000\010\013\u01ba\027" +
    "\u01b8\107\u01b5\001\002\000\016\042\uff3f\043\uff3f\051\uff3f" +
    "\060\uff3f\065\uff3f\073\uff3f\001\002\000\016\042\162\043" +
    "\164\051\172\060\160\065\166\073\161\001\002\000\004" +
    "\013\u01c8\001\002\000\010\005\u01c2\100\041\102\040\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\005\u01bb" +
    "\001\002\000\006\100\041\102\040\001\002\000\032\005" +
    "\ufedd\011\ufedd\012\ufedd\013\ufedd\020\ufedd\023\ufedd\027\ufedd" +
    "\032\ufedd\035\ufedd\051\ufedd\102\ufedd\107\ufedd\001\002\000" +
    "\022\005\u0131\011\u0135\012\205\020\u01b0\023\u013c\035\u01ae" +
    "\051\212\102\u01b3\001\002\000\004\013\u01bf\001\002\000" +
    "\004\005\u01c0\001\002\000\006\100\041\102\040\001\002" +
    "\000\032\005\ufedb\011\ufedb\012\ufedb\013\ufedb\020\ufedb\023" +
    "\ufedb\027\ufedb\032\ufedb\035\ufedb\051\ufedb\102\ufedb\107\ufedb" +
    "\001\002\000\016\042\uff40\043\uff40\051\uff40\060\uff40\065" +
    "\uff40\073\uff40\001\002\000\022\005\u0131\011\u0135\012\205" +
    "\020\u01b0\023\u013c\035\u01ae\051\212\102\u01b3\001\002\000" +
    "\004\013\u01c5\001\002\000\004\005\u01c6\001\002\000\006" +
    "\100\041\102\040\001\002\000\032\005\ufedc\011\ufedc\012" +
    "\ufedc\013\ufedc\020\ufedc\023\ufedc\027\ufedc\032\ufedc\035\ufedc" +
    "\051\ufedc\102\ufedc\107\ufedc\001\002\000\004\005\u01c9\001" +
    "\002\000\006\100\041\102\040\001\002\000\032\005\ufeda" +
    "\011\ufeda\012\ufeda\013\ufeda\020\ufeda\023\ufeda\027\ufeda\032" +
    "\ufeda\035\ufeda\051\ufeda\102\ufeda\107\ufeda\001\002\000\004" +
    "\026\u01cc\001\002\000\006\100\041\102\040\001\002\000" +
    "\022\005\u0131\011\u0135\012\205\020\u01b0\023\u013c\035\u01ae" +
    "\051\212\102\u01b3\001\002\000\010\013\ufed7\027\u01d0\107" +
    "\u01b5\001\002\000\004\013\ufed6\001\002\000\010\005\u01c2" +
    "\100\ufed9\102\ufed9\001\002\000\006\100\ufed8\102\ufed8\001" +
    "\002\000\030\005\u0131\011\u0135\012\205\013\ufeec\020\u01b0" +
    "\023\u013c\027\ufeec\035\u01ae\051\212\102\u01b3\107\ufeec\001" +
    "\002\000\010\013\ufeeb\027\ufeeb\107\ufeeb\001\002\000\010" +
    "\013\ufee6\027\ufee6\107\ufee6\001\002\000\030\005\u0131\011" +
    "\u0135\012\205\013\ufee9\020\u01b0\023\u013c\027\ufee9\035\u01ae" +
    "\051\212\102\u01b3\107\ufee9\001\002\000\010\013\ufee8\027" +
    "\ufee8\107\ufee8\001\002\000\006\021\u01d9\111\u01d8\001\002" +
    "\000\004\073\u01e2\001\002\000\004\073\u01da\001\002\000" +
    "\022\042\162\043\164\051\272\060\160\064\273\065\166" +
    "\073\161\074\u01db\001\002\000\006\100\041\102\040\001" +
    "\002\000\004\074\u01dd\001\002\000\006\100\041\102\040" +
    "\001\002\000\030\005\u0131\011\u0135\012\205\013\ufef1\020" +
    "\u01b0\023\u013c\027\ufef1\035\u01ae\051\212\102\u01b3\107\ufef1" +
    "\001\002\000\010\013\ufeee\027\ufeee\107\ufeee\001\002\000" +
    "\030\005\u0131\011\u0135\012\205\013\ufee1\020\u01b0\023\u013c" +
    "\027\ufee1\035\u01ae\051\212\102\u01b3\107\ufee1\001\002\000" +
    "\010\013\ufee0\027\ufee0\107\ufee0\001\002\000\004\074\u01e3" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\u0131\011\u0135\012\205\013\ufedf\020\u01b0\023\u013c\027\ufedf" +
    "\035\u01ae\051\212\102\u01b3\107\ufedf\001\002\000\010\013" +
    "\ufede\027\ufede\107\ufede\001\002\000\010\013\ufeed\027\ufeed" +
    "\107\ufeed\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\030\005\u0131\011\u0135" +
    "\012\205\013\ufee3\020\u01b0\023\u013c\027\ufee3\035\u01ae\051" +
    "\212\102\u01b3\107\ufee3\001\002\000\010\013\ufee5\027\ufee5" +
    "\107\ufee5\001\002\000\030\005\u0131\011\u0135\012\205\013" +
    "\ufee2\020\u01b0\023\u013c\027\ufee2\035\u01ae\051\212\102\u01b3" +
    "\107\ufee2\001\002\000\010\013\ufee4\027\ufee4\107\ufee4\001" +
    "\002\000\010\013\ufeea\027\ufeea\107\ufeea\001\002\000\006" +
    "\100\041\102\040\001\002\000\006\100\041\102\040\001" +
    "\002\000\024\005\u0131\011\u0135\012\205\020\u0134\023\u013c" +
    "\032\ufe7f\035\u0130\051\212\102\u0137\001\002\000\004\032" +
    "\ufe81\001\002\000\024\005\u0131\011\u0135\012\205\020\u0134" +
    "\023\u013c\032\ufe7e\035\u0130\051\212\102\u0137\001\002\000" +
    "\004\032\ufe80\001\002\000\004\032\ufe86\001\002\000\024" +
    "\005\221\011\230\012\205\020\225\023\234\034\ufde8\035" +
    "\220\051\212\102\231\001\002\000\004\034\ufde7\001\002" +
    "\000\004\034\ufde9\001\002\000\006\021\u01fa\111\u01f9\001" +
    "\002\000\004\073\u0203\001\002\000\004\073\u01fb\001\002" +
    "\000\022\042\162\043\164\051\272\060\160\064\273\065" +
    "\166\073\161\074\u01fc\001\002\000\006\100\041\102\040" +
    "\001\002\000\004\074\u01fe\001\002\000\006\100\041\102" +
    "\040\001\002\000\024\005\221\011\230\012\205\020\225" +
    "\023\234\034\ufdf0\035\220\051\212\102\231\001\002\000" +
    "\004\034\ufdeb\001\002\000\024\005\221\011\230\012\205" +
    "\020\225\023\234\034\ufdde\035\220\051\212\102\231\001" +
    "\002\000\004\034\ufddd\001\002\000\004\074\u0204\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\221\011" +
    "\230\012\205\020\225\023\234\034\ufddc\035\220\051\212" +
    "\102\231\001\002\000\004\034\ufddb\001\002\000\006\100" +
    "\041\102\040\001\002\000\034\005\ufdf1\011\ufdf1\012\ufdf1" +
    "\013\ufdf1\020\ufdf1\023\ufdf1\027\ufdf1\032\ufdf1\034\ufdf1\035" +
    "\ufdf1\051\ufdf1\102\ufdf1\107\ufdf1\001\002\000\004\034\ufdea" +
    "\001\002\000\004\026\u020b\001\002\000\006\100\041\102" +
    "\040\001\002\000\022\005\221\011\230\012\205\020\u020f" +
    "\023\234\035\u020d\051\212\102\u0212\001\002\000\006\010" +
    "\u0247\023\u0246\001\002\000\030\005\221\011\230\012\205" +
    "\013\ufea9\020\u020f\023\234\027\ufea9\035\u020d\051\212\102" +
    "\u0212\107\ufea9\001\002\000\004\070\u0236\001\002\000\030" +
    "\005\221\011\230\012\205\013\ufea8\020\u020f\023\234\027" +
    "\ufea8\035\u020d\051\212\102\u0212\107\ufea8\001\002\000\006" +
    "\100\041\102\040\001\002\000\004\100\u0231\001\002\000" +
    "\030\005\221\011\230\012\205\013\ufea0\020\u020f\023\234" +
    "\027\ufea0\035\u020d\051\212\102\u0212\107\ufea0\001\002\000" +
    "\010\013\u0219\027\u0216\107\u01b5\001\002\000\016\042\162" +
    "\043\164\051\172\060\160\065\166\073\161\001\002\000" +
    "\010\005\u01c2\100\041\102\040\001\002\000\006\100\041" +
    "\102\040\001\002\000\004\013\u021c\001\002\000\004\005" +
    "\u021a\001\002\000\006\100\041\102\040\001\002\000\032" +
    "\005\ufe96\011\ufe96\012\ufe96\013\ufe96\020\ufe96\023\ufe96\027" +
    "\ufe96\034\ufe96\035\ufe96\051\ufe96\102\ufe96\107\ufe96\001\002" +
    "\000\004\005\u021d\001\002\000\006\100\041\102\040\001" +
    "\002\000\032\005\ufe93\011\ufe93\012\ufe93\013\ufe93\020\ufe93" +
    "\023\ufe93\027\ufe93\034\ufe93\035\ufe93\051\ufe93\102\ufe93\107" +
    "\ufe93\001\002\000\022\005\221\011\230\012\205\020\u020f" +
    "\023\234\035\u020d\051\212\102\u0212\001\002\000\004\013" +
    "\u0221\001\002\000\004\005\u0222\001\002\000\006\100\041" +
    "\102\040\001\002\000\032\005\ufe94\011\ufe94\012\ufe94\013" +
    "\ufe94\020\ufe94\023\ufe94\027\ufe94\034\ufe94\035\ufe94\051\ufe94" +
    "\102\ufe94\107\ufe94\001\002\000\022\005\221\011\230\012" +
    "\205\020\u020f\023\234\035\u020d\051\212\102\u0212\001\002" +
    "\000\004\013\u0226\001\002\000\004\005\u0227\001\002\000" +
    "\006\100\041\102\040\001\002\000\032\005\ufe95\011\ufe95" +
    "\012\ufe95\013\ufe95\020\ufe95\023\ufe95\027\ufe95\034\ufe95\035" +
    "\ufe95\051\ufe95\102\ufe95\107\ufe95\001\002\000\004\026\u022a" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\221\011\230\012\205\020\u020f\023\234\035\u020d\051\212" +
    "\102\u0212\001\002\000\010\013\ufe90\027\u022d\107\u01b5\001" +
    "\002\000\010\005\u01c2\100\ufe92\102\ufe92\001\002\000\006" +
    "\100\ufe91\102\ufe91\001\002\000\004\013\ufe8f\001\002\000" +
    "\010\013\ufe9f\027\ufe9f\107\ufe9f\001\002\000\030\005\221" +
    "\011\230\012\205\013\ufea7\020\u020f\023\234\027\ufea7\035" +
    "\u020d\051\212\102\u0212\107\ufea7\001\002\000\010\013\ufea6" +
    "\027\ufea6\107\ufea6\001\002\000\030\005\221\011\230\012" +
    "\205\013\ufea2\020\u020f\023\234\027\ufea2\035\u020d\051\212" +
    "\102\u0212\107\ufea2\001\002\000\010\013\ufea1\027\ufea1\107" +
    "\ufea1\001\002\000\010\013\ufea3\027\ufea3\107\ufea3\001\002" +
    "\000\006\021\u0238\111\u0237\001\002\000\004\073\u0241\001" +
    "\002\000\004\073\u0239\001\002\000\022\042\162\043\164" +
    "\051\272\060\160\064\273\065\166\073\161\074\u023a\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\074\u023c" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\221\011\230\012\205\013\ufeaa\020\u020f\023\234\027\ufeaa" +
    "\035\u020d\051\212\102\u0212\107\ufeaa\001\002\000\010\013" +
    "\ufea5\027\ufea5\107\ufea5\001\002\000\030\005\221\011\230" +
    "\012\205\013\ufe9a\020\u020f\023\234\027\ufe9a\035\u020d\051" +
    "\212\102\u0212\107\ufe9a\001\002\000\010\013\ufe99\027\ufe99" +
    "\107\ufe99\001\002\000\004\074\u0242\001\002\000\006\100" +
    "\041\102\040\001\002\000\030\005\221\011\230\012\205" +
    "\013\ufe98\020\u020f\023\234\027\ufe98\035\u020d\051\212\102" +
    "\u0212\107\ufe98\001\002\000\010\013\ufe97\027\ufe97\107\ufe97" +
    "\001\002\000\010\013\ufea4\027\ufea4\107\ufea4\001\002\000" +
    "\006\100\041\102\040\001\002\000\006\100\041\102\040" +
    "\001\002\000\030\005\221\011\230\012\205\013\ufe9b\020" +
    "\u020f\023\234\027\ufe9b\035\u020d\051\212\102\u0212\107\ufe9b" +
    "\001\002\000\010\013\ufe9d\027\ufe9d\107\ufe9d\001\002\000" +
    "\030\005\221\011\230\012\205\013\ufe9c\020\u020f\023\234" +
    "\027\ufe9c\035\u020d\051\212\102\u0212\107\ufe9c\001\002\000" +
    "\010\013\ufe9e\027\ufe9e\107\ufe9e\001\002\000\006\100\041" +
    "\102\040\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\230" +
    "\012\205\020\225\023\234\034\ufde0\035\220\051\212\102" +
    "\231\001\002\000\004\034\ufde3\001\002\000\024\005\221" +
    "\011\230\012\205\020\225\023\234\034\ufddf\035\220\051" +
    "\212\102\231\001\002\000\004\034\ufde2\001\002\000\024" +
    "\005\221\011\230\012\205\020\225\023\234\034\ufde1\035" +
    "\220\051\212\102\231\001\002\000\004\034\ufde4\001\002" +
    "\000\020\042\162\043\164\051\310\060\302\065\166\073" +
    "\303\074\301\001\002\000\004\051\u0278\001\002\000\036" +
    "\003\uffb3\005\uffb3\011\uffb3\012\uffb3\013\uffb3\020\uffb3\023" +
    "\uffb3\027\uffb3\032\uffb3\034\uffb3\035\uffb3\051\uffb3\102\uffb3" +
    "\107\uffb3\001\002\000\004\100\u0277\001\002\000\010\100" +
    "\041\102\040\104\u026e\001\002\000\022\020\u025c\042\162" +
    "\043\164\051\u0263\060\160\064\u0262\065\166\073\161\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\070\u0269" +
    "\001\002\000\054\003\uff62\005\uff62\011\uff62\012\uff62\013" +
    "\uff62\020\uff62\023\uff62\027\uff62\032\uff62\034\uff62\035\uff62" +
    "\051\uff62\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073" +
    "\uff9f\102\uff62\107\uff62\110\uff9f\001\002\000\024\057\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\041\102" +
    "\040\110\uff9d\001\002\000\036\003\uff52\005\uff52\011\uff52" +
    "\012\uff52\013\uff52\020\uff52\023\uff52\027\uff52\032\uff52\034" +
    "\uff52\035\uff52\051\uff52\102\uff52\107\uff52\001\002\000\006" +
    "\100\041\102\040\001\002\000\010\073\327\100\041\102" +
    "\040\001\002\000\006\100\041\102\040\001\002\000\036" +
    "\003\u0258\042\162\043\164\051\310\057\uff9e\060\302\061" +
    "\uff9e\062\uff9e\063\uff9e\065\166\073\u0255\100\041\102\040" +
    "\110\uff9e\001\002\000\036\003\uff65\005\uff65\011\uff65\012" +
    "\uff65\013\uff65\020\uff65\023\uff65\027\uff65\032\uff65\034\uff65" +
    "\035\uff65\051\uff65\102\uff65\107\uff65\001\002\000\036\003" +
    "\uff60\005\uff60\011\uff60\012\uff60\013\uff60\020\uff60\023\uff60" +
    "\027\uff60\032\uff60\034\uff60\035\uff60\051\uff60\102\uff60\107" +
    "\uff60\001\002\000\036\003\uff63\005\uff63\011\uff63\012\uff63" +
    "\013\uff63\020\uff63\023\uff63\027\uff63\032\uff63\034\uff63\035" +
    "\uff63\051\uff63\102\uff63\107\uff63\001\002\000\036\003\uff5f" +
    "\005\uff5f\011\uff5f\012\uff5f\013\uff5f\020\uff5f\023\uff5f\027" +
    "\uff5f\032\uff5f\034\uff5f\035\uff5f\051\uff5f\102\uff5f\107\uff5f" +
    "\001\002\000\036\003\uff64\005\uff64\011\uff64\012\uff64\013" +
    "\uff64\020\uff64\023\uff64\027\uff64\032\uff64\034\uff64\035\uff64" +
    "\051\uff64\102\uff64\107\uff64\001\002\000\004\111\u026a\001" +
    "\002\000\004\073\u026b\001\002\000\004\074\u026c\001\002" +
    "\000\006\100\uff4c\102\uff4c\001\002\000\036\003\uff61\005" +
    "\uff61\011\uff61\012\uff61\013\uff61\020\uff61\023\uff61\027\uff61" +
    "\032\uff61\034\uff61\035\uff61\051\uff61\102\uff61\107\uff61\001" +
    "\002\000\016\042\162\043\164\051\310\060\302\065\166" +
    "\073\u0270\001\002\000\036\003\uffb1\005\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\020\uffb1\023\uffb1\027\uffb1\032\uffb1\034\uffb1" +
    "\035\uffb1\051\uffb1\102\uffb1\107\uffb1\001\002\000\014\042" +
    "\162\043\164\051\310\060\302\065\166\001\002\000\036" +
    "\003\uffb0\005\uffb0\011\uffb0\012\uffb0\013\uffb0\020\uffb0\023" +
    "\uffb0\027\uffb0\032\uffb0\034\uffb0\035\uffb0\051\uffb0\102\uffb0" +
    "\107\uffb0\001\002\000\004\074\u0273\001\002\000\010\100" +
    "\041\102\040\104\u0274\001\002\000\016\042\162\043\164" +
    "\051\310\060\302\065\166\073\u0270\001\002\000\036\003" +
    "\uffae\005\uffae\011\uffae\012\uffae\013\uffae\020\uffae\023\uffae" +
    "\027\uffae\032\uffae\034\uffae\035\uffae\051\uffae\102\uffae\107" +
    "\uffae\001\002\000\036\003\uffaf\005\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\020\uffaf\023\uffaf\027\uffaf\032\uffaf\034\uffaf\035" +
    "\uffaf\051\uffaf\102\uffaf\107\uffaf\001\002\000\036\003\uffb2" +
    "\005\uffb2\011\uffb2\012\uffb2\013\uffb2\020\uffb2\023\uffb2\027" +
    "\uffb2\032\uffb2\034\uffb2\035\uffb2\051\uffb2\102\uffb2\107\uffb2" +
    "\001\002\000\004\054\u0279\001\002\000\022\020\u025c\042" +
    "\162\043\164\051\u0281\060\160\064\u0280\065\166\073\161" +
    "\001\002\000\006\100\041\102\040\001\002\000\024\057" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\100\041" +
    "\102\040\110\uff9f\001\002\000\024\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\073\uff9d\100\041\102\040\110\uff9d" +
    "\001\002\000\036\003\uff53\005\uff53\011\uff53\012\uff53\013" +
    "\uff53\020\uff53\023\uff53\027\uff53\032\uff53\034\uff53\035\uff53" +
    "\051\uff53\102\uff53\107\uff53\001\002\000\006\100\041\102" +
    "\040\001\002\000\010\073\327\100\041\102\040\001\002" +
    "\000\006\100\041\102\040\001\002\000\036\003\u0258\042" +
    "\162\043\164\051\310\057\uff9e\060\302\061\uff9e\062\uff9e" +
    "\063\uff9e\065\166\073\u0255\100\041\102\040\110\uff9e\001" +
    "\002\000\036\003\uff5e\005\uff5e\011\uff5e\012\uff5e\013\uff5e" +
    "\020\uff5e\023\uff5e\027\uff5e\032\uff5e\034\uff5e\035\uff5e\051" +
    "\uff5e\102\uff5e\107\uff5e\001\002\000\036\003\uff58\005\uff58" +
    "\011\uff58\012\uff58\013\uff58\020\uff58\023\uff58\027\uff58\032" +
    "\uff58\034\uff58\035\uff58\051\uff58\102\uff58\107\uff58\001\002" +
    "\000\036\003\uff5c\005\uff5c\011\uff5c\012\uff5c\013\uff5c\020" +
    "\uff5c\023\uff5c\027\uff5c\032\uff5c\034\uff5c\035\uff5c\051\uff5c" +
    "\102\uff5c\107\uff5c\001\002\000\036\003\uff5b\005\uff5b\011" +
    "\uff5b\012\uff5b\013\uff5b\020\uff5b\023\uff5b\027\uff5b\032\uff5b" +
    "\034\uff5b\035\uff5b\051\uff5b\102\uff5b\107\uff5b\001\002\000" +
    "\036\003\uff5d\005\uff5d\011\uff5d\012\uff5d\013\uff5d\020\uff5d" +
    "\023\uff5d\027\uff5d\032\uff5d\034\uff5d\035\uff5d\051\uff5d\102" +
    "\uff5d\107\uff5d\001\002\000\036\003\uff5a\005\uff5a\011\uff5a" +
    "\012\uff5a\013\uff5a\020\uff5a\023\uff5a\027\uff5a\032\uff5a\034" +
    "\uff5a\035\uff5a\051\uff5a\102\uff5a\107\uff5a\001\002\000\036" +
    "\003\uff59\005\uff59\011\uff59\012\uff59\013\uff59\020\uff59\023" +
    "\uff59\027\uff59\032\uff59\034\uff59\035\uff59\051\uff59\102\uff59" +
    "\107\uff59\001\002\000\006\074\u028a\104\311\001\002\000" +
    "\026\057\ufe77\060\ufe77\061\ufe77\062\ufe77\063\ufe77\073\ufe77" +
    "\100\ufe77\102\ufe77\104\u0274\110\ufe77\001\002\000\004\034" +
    "\ufdd2\001\002\000\004\034\ufdce\001\002\000\024\005\200" +
    "\011\144\012\205\020\204\023\213\034\ufdd7\035\176\051" +
    "\212\102\207\001\002\000\004\034\ufdd6\001\002\000\024" +
    "\005\200\011\144\012\205\020\204\023\213\034\ufdd1\035" +
    "\176\051\212\102\207\001\002\000\004\034\ufdd0\001\002" +
    "\000\006\022\u0292\054\u0293\001\002\000\014\014\054\015" +
    "\053\016\056\046\055\051\052\001\002\000\022\020\u025c" +
    "\042\162\043\164\051\u029b\060\160\064\u029c\065\166\073" +
    "\161\001\002\000\006\100\uff49\102\uff49\001\002\000\024" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\100" +
    "\uff4a\102\uff4a\110\uff9f\001\002\000\024\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\041\102\040\110" +
    "\uff9d\001\002\000\036\003\uff55\005\uff55\011\uff55\012\uff55" +
    "\013\uff55\020\uff55\023\uff55\027\uff55\032\uff55\034\uff55\035" +
    "\uff55\051\uff55\102\uff55\107\uff55\001\002\000\006\100\041" +
    "\102\040\001\002\000\006\100\uff48\102\uff48\001\002\000" +
    "\010\073\327\100\041\102\040\001\002\000\036\003\u0258" +
    "\042\162\043\164\051\310\057\uff9e\060\302\061\uff9e\062" +
    "\uff9e\063\uff9e\065\166\073\u0255\100\041\102\040\110\uff9e" +
    "\001\002\000\006\100\uff4b\102\uff4b\001\002\000\036\003" +
    "\uff57\005\uff57\011\uff57\012\uff57\013\uff57\020\uff57\023\uff57" +
    "\027\uff57\032\uff57\034\uff57\035\uff57\051\uff57\102\uff57\107" +
    "\uff57\001\002\000\036\003\uff66\005\uff66\011\uff66\012\uff66" +
    "\013\uff66\020\uff66\023\uff66\027\uff66\032\uff66\034\uff66\035" +
    "\uff66\051\uff66\102\uff66\107\uff66\001\002\000\036\003\uff6a" +
    "\005\uff6a\011\uff6a\012\uff6a\013\uff6a\020\uff6a\023\uff6a\027" +
    "\uff6a\032\uff6a\034\uff6a\035\uff6a\051\uff6a\102\uff6a\107\uff6a" +
    "\001\002\000\036\003\uff69\005\uff69\011\uff69\012\uff69\013" +
    "\uff69\020\uff69\023\uff69\027\uff69\032\uff69\034\uff69\035\uff69" +
    "\051\uff69\102\uff69\107\uff69\001\002\000\010\054\u02a2\100" +
    "\041\102\040\001\002\000\022\020\u025c\042\162\043\164" +
    "\051\u02a8\060\160\064\u029c\065\166\073\161\001\002\000" +
    "\036\003\uff6c\005\uff6c\011\uff6c\012\uff6c\013\uff6c\020\uff6c" +
    "\023\uff6c\027\uff6c\032\uff6c\034\uff6c\035\uff6c\051\uff6c\102" +
    "\uff6c\107\uff6c\001\002\000\024\057\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\073\uff9d\100\041\102\040\110\uff9d\001" +
    "\002\000\036\003\uff54\005\uff54\011\uff54\012\uff54\013\uff54" +
    "\020\uff54\023\uff54\027\uff54\032\uff54\034\uff54\035\uff54\051" +
    "\uff54\102\uff54\107\uff54\001\002\000\006\100\041\102\040" +
    "\001\002\000\010\073\327\100\041\102\040\001\002\000" +
    "\036\003\u0258\042\162\043\164\051\310\057\uff9e\060\302" +
    "\061\uff9e\062\uff9e\063\uff9e\065\166\073\u0255\100\041\102" +
    "\040\110\uff9e\001\002\000\036\003\uff56\005\uff56\011\uff56" +
    "\012\uff56\013\uff56\020\uff56\023\uff56\027\uff56\032\uff56\034" +
    "\uff56\035\uff56\051\uff56\102\uff56\107\uff56\001\002\000\036" +
    "\003\uff67\005\uff67\011\uff67\012\uff67\013\uff67\020\uff67\023" +
    "\uff67\027\uff67\032\uff67\034\uff67\035\uff67\051\uff67\102\uff67" +
    "\107\uff67\001\002\000\036\003\uff6b\005\uff6b\011\uff6b\012" +
    "\uff6b\013\uff6b\020\uff6b\023\uff6b\027\uff6b\032\uff6b\034\uff6b" +
    "\035\uff6b\051\uff6b\102\uff6b\107\uff6b\001\002\000\036\003" +
    "\uff68\005\uff68\011\uff68\012\uff68\013\uff68\020\uff68\023\uff68" +
    "\027\uff68\032\uff68\034\uff68\035\uff68\051\uff68\102\uff68\107" +
    "\uff68\001\002\000\006\021\u02af\111\u02ae\001\002\000\004" +
    "\073\u02b8\001\002\000\004\073\u02b0\001\002\000\022\042" +
    "\162\043\164\051\272\060\160\064\273\065\166\073\161" +
    "\074\u02b1\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\074\u02b3\001\002\000\006\100\041\102\040\001\002" +
    "\000\024\005\200\011\144\012\205\020\204\023\213\034" +
    "\ufdd9\035\176\051\212\102\207\001\002\000\004\034\ufdd4" +
    "\001\002\000\024\005\200\011\144\012\205\020\204\023" +
    "\213\034\ufdc9\035\176\051\212\102\207\001\002\000\004" +
    "\034\ufdc8\001\002\000\004\074\u02b9\001\002\000\006\100" +
    "\041\102\040\001\002\000\024\005\200\011\144\012\205" +
    "\020\204\023\213\034\ufdc7\035\176\051\212\102\207\001" +
    "\002\000\004\034\ufdc6\001\002\000\004\034\ufdd3\001\002" +
    "\000\006\100\041\102\040\001\002\000\032\003\ufdda\005" +
    "\ufdda\011\ufdda\012\ufdda\013\ufdda\020\ufdda\023\ufdda\027\ufdda" +
    "\035\ufdda\051\ufdda\102\ufdda\107\ufdda\001\002\000\004\026" +
    "\u02c0\001\002\000\006\100\041\102\040\001\002\000\022" +
    "\005\200\011\144\012\205\020\u02c4\023\213\035\u02c2\051" +
    "\212\102\u02c7\001\002\000\006\011\u031c\030\u031b\001\002" +
    "\000\030\005\200\011\144\012\205\013\ufe08\020\u02c4\023" +
    "\213\027\ufe08\035\u02c2\051\212\102\u02c7\107\ufe08\001\002" +
    "\000\004\070\u030b\001\002\000\006\100\041\102\040\001" +
    "\002\000\030\005\200\011\144\012\205\013\ufdff\020\u02c4" +
    "\023\213\027\ufdff\035\u02c2\051\212\102\u02c7\107\ufdff\001" +
    "\002\000\004\100\u02e6\001\002\000\010\013\u02cf\027\u02cc" +
    "\107\u01b5\001\002\000\030\005\200\011\144\012\205\013" +
    "\ufe05\020\u02c4\023\213\027\ufe05\035\u02c2\051\212\102\u02c7" +
    "\107\ufe05\001\002\000\010\013\ufe02\027\ufe02\107\ufe02\001" +
    "\002\000\016\042\162\043\164\051\172\060\160\065\166" +
    "\073\161\001\002\000\010\005\u01c2\100\041\102\040\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\013\u02d2" +
    "\001\002\000\004\005\u02d0\001\002\000\006\100\041\102" +
    "\040\001\002\000\034\005\ufe0d\011\ufe0d\012\ufe0d\013\ufe0d" +
    "\020\ufe0d\023\ufe0d\027\ufe0d\032\ufe0d\034\ufe0d\035\ufe0d\051" +
    "\ufe0d\102\ufe0d\107\ufe0d\001\002\000\004\005\u02d3\001\002" +
    "\000\006\100\041\102\040\001\002\000\034\005\ufe0a\011" +
    "\ufe0a\012\ufe0a\013\ufe0a\020\ufe0a\023\ufe0a\027\ufe0a\032\ufe0a" +
    "\034\ufe0a\035\ufe0a\051\ufe0a\102\ufe0a\107\ufe0a\001\002\000" +
    "\022\005\200\011\144\012\205\020\u02c4\023\213\035\u02c2" +
    "\051\212\102\u02c7\001\002\000\004\013\u02d7\001\002\000" +
    "\004\005\u02d8\001\002\000\006\100\041\102\040\001\002" +
    "\000\034\005\ufe0b\011\ufe0b\012\ufe0b\013\ufe0b\020\ufe0b\023" +
    "\ufe0b\027\ufe0b\032\ufe0b\034\ufe0b\035\ufe0b\051\ufe0b\102\ufe0b" +
    "\107\ufe0b\001\002\000\022\005\200\011\144\012\205\020" +
    "\u02c4\023\213\035\u02c2\051\212\102\u02c7\001\002\000\004" +
    "\013\u02dc\001\002\000\004\005\u02dd\001\002\000\006\100" +
    "\041\102\040\001\002\000\034\005\ufe0c\011\ufe0c\012\ufe0c" +
    "\013\ufe0c\020\ufe0c\023\ufe0c\027\ufe0c\032\ufe0c\034\ufe0c\035" +
    "\ufe0c\051\ufe0c\102\ufe0c\107\ufe0c\001\002\000\004\026\u02e0" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\200\011\144\012\205\020\u02c4\023\213\035\u02c2\051\212" +
    "\102\u02c7\001\002\000\010\013\ufdf3\027\u02e3\107\u01b5\001" +
    "\002\000\010\005\u01c2\100\ufdf5\102\ufdf5\001\002\000\006" +
    "\100\ufdf4\102\ufdf4\001\002\000\004\013\ufdf2\001\002\000" +
    "\030\005\200\011\144\012\205\013\ufe07\020\u02c4\023\213" +
    "\027\ufe07\035\u02c2\051\212\102\u02c7\107\ufe07\001\002\000" +
    "\010\013\ufe06\027\ufe06\107\ufe06\001\002\000\010\013\ufdfe" +
    "\027\ufdfe\107\ufdfe\001\002\000\030\005\141\011\144\012" +
    "\205\013\ufe01\020\u02ed\023\154\027\ufe01\035\u02eb\051\212" +
    "\102\u02f0\107\ufe01\001\002\000\010\013\ufe00\027\ufe00\107" +
    "\ufe00\001\002\000\004\030\u0308\001\002\000\030\005\141" +
    "\011\144\012\205\013\ufe3a\020\u02ed\023\154\027\ufe3a\035" +
    "\u02eb\051\212\102\u02f0\107\ufe3a\001\002\000\004\070\u02f8" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\141\011\144\012\205\013\ufe31\020\u02ed\023\154\027\ufe31" +
    "\035\u02eb\051\212\102\u02f0\107\ufe31\001\002\000\004\100" +
    "\u02f3\001\002\000\030\005\141\011\144\012\205\013\ufe37" +
    "\020\u02ed\023\154\027\ufe37\035\u02eb\051\212\102\u02f0\107" +
    "\ufe37\001\002\000\010\013\ufe34\027\ufe34\107\ufe34\001\002" +
    "\000\030\005\141\011\144\012\205\013\ufe39\020\u02ed\023" +
    "\154\027\ufe39\035\u02eb\051\212\102\u02f0\107\ufe39\001\002" +
    "\000\010\013\ufe38\027\ufe38\107\ufe38\001\002\000\010\013" +
    "\ufe30\027\ufe30\107\ufe30\001\002\000\030\005\141\011\144" +
    "\012\205\013\ufe33\020\u02ed\023\154\027\ufe33\035\u02eb\051" +
    "\212\102\u02f0\107\ufe33\001\002\000\010\013\ufe32\027\ufe32" +
    "\107\ufe32\001\002\000\006\021\u02fa\111\u02f9\001\002\000" +
    "\004\073\u0303\001\002\000\004\073\u02fb\001\002\000\022" +
    "\042\162\043\164\051\272\060\160\064\273\065\166\073" +
    "\161\074\u02fc\001\002\000\006\100\041\102\040\001\002" +
    "\000\004\074\u02fe\001\002\000\006\100\041\102\040\001" +
    "\002\000\030\005\141\011\144\012\205\013\ufe3b\020\u02ed" +
    "\023\154\027\ufe3b\035\u02eb\051\212\102\u02f0\107\ufe3b\001" +
    "\002\000\010\013\ufe36\027\ufe36\107\ufe36\001\002\000\030" +
    "\005\141\011\144\012\205\013\ufe2d\020\u02ed\023\154\027" +
    "\ufe2d\035\u02eb\051\212\102\u02f0\107\ufe2d\001\002\000\010" +
    "\013\ufe2c\027\ufe2c\107\ufe2c\001\002\000\004\074\u0304\001" +
    "\002\000\006\100\041\102\040\001\002\000\030\005\141" +
    "\011\144\012\205\013\ufe2b\020\u02ed\023\154\027\ufe2b\035" +
    "\u02eb\051\212\102\u02f0\107\ufe2b\001\002\000\010\013\ufe2a" +
    "\027\ufe2a\107\ufe2a\001\002\000\010\013\ufe35\027\ufe35\107" +
    "\ufe35\001\002\000\006\100\041\102\040\001\002\000\030" +
    "\005\141\011\144\012\205\013\ufe2e\020\u02ed\023\154\027" +
    "\ufe2e\035\u02eb\051\212\102\u02f0\107\ufe2e\001\002\000\010" +
    "\013\ufe2f\027\ufe2f\107\ufe2f\001\002\000\006\021\u030d\111" +
    "\u030c\001\002\000\004\073\u0316\001\002\000\004\073\u030e" +
    "\001\002\000\022\042\162\043\164\051\272\060\160\064" +
    "\273\065\166\073\161\074\u030f\001\002\000\006\100\041" +
    "\102\040\001\002\000\004\074\u0311\001\002\000\006\100" +
    "\041\102\040\001\002\000\030\005\200\011\144\012\205" +
    "\013\ufe09\020\u02c4\023\213\027\ufe09\035\u02c2\051\212\102" +
    "\u02c7\107\ufe09\001\002\000\010\013\ufe04\027\ufe04\107\ufe04" +
    "\001\002\000\030\005\200\011\144\012\205\013\ufdf9\020" +
    "\u02c4\023\213\027\ufdf9\035\u02c2\051\212\102\u02c7\107\ufdf9" +
    "\001\002\000\010\013\ufdf8\027\ufdf8\107\ufdf8\001\002\000" +
    "\004\074\u0317\001\002\000\006\100\041\102\040\001\002" +
    "\000\030\005\200\011\144\012\205\013\ufdf7\020\u02c4\023" +
    "\213\027\ufdf7\035\u02c2\051\212\102\u02c7\107\ufdf7\001\002" +
    "\000\010\013\ufdf6\027\ufdf6\107\ufdf6\001\002\000\010\013" +
    "\ufe03\027\ufe03\107\ufe03\001\002\000\006\100\041\102\040" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\200\011\144\012\205\013\ufdfa\020\u02c4\023\213\027\ufdfa" +
    "\035\u02c2\051\212\102\u02c7\107\ufdfa\001\002\000\010\013" +
    "\ufdfb\027\ufdfb\107\ufdfb\001\002\000\030\005\200\011\144" +
    "\012\205\013\ufdfc\020\u02c4\023\213\027\ufdfc\035\u02c2\051" +
    "\212\102\u02c7\107\ufdfc\001\002\000\010\013\ufdfd\027\ufdfd" +
    "\107\ufdfd\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\200\011\144" +
    "\012\205\020\204\023\213\034\ufdca\035\176\051\212\102" +
    "\207\001\002\000\004\034\ufdcc\001\002\000\024\005\200" +
    "\011\144\012\205\020\204\023\213\034\ufdcb\035\176\051" +
    "\212\102\207\001\002\000\004\034\ufdcd\001\002\000\016" +
    "\042\uff0a\043\uff0a\051\uff0a\060\uff0a\065\uff0a\073\uff0a\001" +
    "\002\000\020\042\uff08\043\uff08\051\uff08\054\u0331\060\uff08" +
    "\065\uff08\073\uff08\001\002\000\020\042\uff09\043\uff09\051" +
    "\uff09\054\u0330\060\uff09\065\uff09\073\uff09\001\002\000\016" +
    "\042\162\043\164\051\u032f\060\160\065\166\073\161\001" +
    "\002\000\010\026\uff22\100\uff22\102\uff22\001\002\000\026" +
    "\026\uff23\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073" +
    "\uff9f\100\uff23\102\uff23\110\uff9f\001\002\000\026\026\uff13" +
    "\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100" +
    "\uff13\102\uff13\110\uff9d\001\002\000\012\026\uff21\073\327" +
    "\100\uff21\102\uff21\001\002\000\026\026\uff24\057\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\073\300\100\uff24\102\uff24" +
    "\110\uff9e\001\002\000\016\042\uff0c\043\uff0c\051\uff0c\060" +
    "\uff0c\065\uff0c\073\uff0c\001\002\000\016\042\uff0b\043\uff0b" +
    "\051\uff0b\060\uff0b\065\uff0b\073\uff0b\001\002\000\016\042" +
    "\162\043\164\051\u0337\060\160\065\166\073\161\001\002" +
    "\000\010\026\uff1d\100\uff1d\102\uff1d\001\002\000\026\026" +
    "\uff20\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f" +
    "\100\uff20\102\uff20\110\uff9f\001\002\000\026\026\uff11\057" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\uff11" +
    "\102\uff11\110\uff9d\001\002\000\012\026\uff1f\073\327\100" +
    "\uff1f\102\uff1f\001\002\000\026\026\uff1e\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\073\300\100\uff1e\102\uff1e\110" +
    "\uff9e\001\002\000\016\042\162\043\164\051\u033c\060\160" +
    "\065\166\073\161\001\002\000\010\026\uff10\100\uff10\102" +
    "\uff10\001\002\000\026\026\uff0e\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\073\uff9f\100\uff0e\102\uff0e\110\uff9f\001" +
    "\002\000\012\026\uff0d\073\327\100\uff0d\102\uff0d\001\002" +
    "\000\026\026\uff0f\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\073\300\100\uff0f\102\uff0f\110\uff9e\001\002\000\016" +
    "\042\162\043\164\051\u0342\060\160\065\166\073\161\001" +
    "\002\000\010\026\uff15\100\uff15\102\uff15\001\002\000\026" +
    "\026\uff18\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073" +
    "\uff9f\100\uff18\102\uff18\110\uff9f\001\002\000\026\026\uff12" +
    "\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100" +
    "\uff12\102\uff12\110\uff9d\001\002\000\012\026\uff16\073\327" +
    "\100\uff16\102\uff16\001\002\000\026\026\uff17\057\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\073\300\100\uff17\102\uff17" +
    "\110\uff9e\001\002\000\016\042\162\043\164\051\u0348\060" +
    "\160\065\166\073\161\001\002\000\010\026\uff1c\100\uff1c" +
    "\102\uff1c\001\002\000\026\026\uff1b\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\073\uff9f\100\uff1b\102\uff1b\110\uff9f" +
    "\001\002\000\026\026\uff14\057\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\073\uff9d\100\uff14\102\uff14\110\uff9d\001\002" +
    "\000\012\026\uff19\073\327\100\uff19\102\uff19\001\002\000" +
    "\026\026\uff1a\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\073\300\100\uff1a\102\uff1a\110\uff9e\001\002\000\010\051" +
    "\361\065\321\073\363\001\002\000\022\057\341\060\347" +
    "\061\342\062\336\063\335\073\351\074\u0352\110\343\001" +
    "\002\000\006\073\327\074\u034c\001\002\000\044\026\uff9b" +
    "\051\331\054\uff9b\055\uff9b\056\uff9b\057\341\060\337\061" +
    "\342\062\336\063\335\065\166\073\uff9b\074\uff9b\100\uff9b" +
    "\101\uff9b\102\uff9b\110\343\001\002\000\012\051\331\060" +
    "\160\065\166\073\161\001\002\000\024\026\uff99\054\uff99" +
    "\055\uff99\056\uff99\073\uff99\074\uff99\100\uff99\101\uff99\102" +
    "\uff99\001\002\000\040\026\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\341\060\347\061\342\062\336\063\335\073\uff94\074" +
    "\uff94\100\uff94\101\uff94\102\uff94\110\343\001\002\000\040" +
    "\026\uff93\054\uff93\055\uff93\056\uff93\057\341\060\347\061" +
    "\342\062\336\063\335\073\uff93\074\uff93\100\uff93\101\uff93" +
    "\102\uff93\110\343\001\002\000\024\026\uff97\054\uff97\055" +
    "\uff97\056\uff97\073\uff97\074\uff97\100\uff97\101\uff97\102\uff97" +
    "\001\002\000\044\026\uff8c\051\331\054\uff8c\055\uff8c\056" +
    "\uff8c\057\341\060\337\061\342\062\336\063\335\065\166" +
    "\073\uff8c\074\uff8c\100\uff8c\101\uff8c\102\uff8c\110\343\001" +
    "\002\000\012\051\331\060\160\065\166\073\161\001\002" +
    "\000\040\026\uff83\054\uff83\055\uff83\056\uff83\057\341\060" +
    "\347\061\342\062\336\063\335\073\uff83\074\uff83\100\uff83" +
    "\101\uff83\102\uff83\110\343\001\002\000\024\026\uff8a\054" +
    "\uff8a\055\uff8a\056\uff8a\073\uff8a\074\uff8a\100\uff8a\101\uff8a" +
    "\102\uff8a\001\002\000\040\026\uff86\054\uff86\055\uff86\056" +
    "\uff86\057\341\060\347\061\342\062\336\063\335\073\uff86" +
    "\074\uff86\100\uff86\101\uff86\102\uff86\110\343\001\002\000" +
    "\024\026\uff88\054\uff88\055\uff88\056\uff88\073\uff88\074\uff88" +
    "\100\uff88\101\uff88\102\uff88\001\002\000\026\051\331\057" +
    "\341\060\337\061\342\062\336\063\335\065\166\073\161" +
    "\074\u0359\110\343\001\002\000\024\026\uff79\054\uff79\055" +
    "\uff79\056\uff79\073\uff79\074\uff79\100\uff79\101\uff79\102\uff79" +
    "\001\002\000\006\003\ufe4c\013\ufe4c\001\002\000\024\003" +
    "\ufe50\005\141\011\144\013\ufe50\020\143\023\154\035\137" +
    "\051\153\102\147\001\002\000\006\003\ufe4f\013\ufe4f\001" +
    "\002\000\006\003\ufe49\013\ufe49\001\002\000\024\003\ufe4e" +
    "\005\141\011\144\013\ufe4e\020\143\023\154\035\137\051" +
    "\153\102\147\001\002\000\006\003\ufe4b\013\ufe4b\001\002" +
    "\000\004\054\u0361\001\002\000\006\060\302\065\166\001" +
    "\002\000\004\037\u0363\001\002\000\006\060\302\065\166" +
    "\001\002\000\004\047\u0365\001\002\000\006\060\302\065" +
    "\166\001\002\000\006\100\041\102\040\001\002\000\022" +
    "\005\200\011\144\012\205\020\u036a\023\213\035\u0368\051" +
    "\212\102\u036e\001\002\000\006\011\u038a\030\u0389\001\002" +
    "\000\024\005\200\011\144\012\205\020\u036a\023\213\032" +
    "\ufe23\035\u0368\051\212\102\u036e\001\002\000\004\070\u0379" +
    "\001\002\000\006\100\041\102\040\001\002\000\024\005" +
    "\200\011\144\012\205\020\u036a\023\213\032\ufe1a\035\u0368" +
    "\051\212\102\u036e\001\002\000\004\032\u0373\001\002\000" +
    "\004\100\u0371\001\002\000\024\005\200\011\144\012\205" +
    "\020\u036a\023\213\032\ufe20\035\u0368\051\212\102\u036e\001" +
    "\002\000\004\032\ufe1d\001\002\000\024\005\200\011\144" +
    "\012\205\020\u036a\023\213\032\ufe22\035\u0368\051\212\102" +
    "\u036e\001\002\000\004\032\ufe21\001\002\000\004\051\u0374" +
    "\001\002\000\006\100\041\102\040\001\002\000\036\003" +
    "\ufe25\005\ufe25\011\ufe25\012\ufe25\013\ufe25\020\ufe25\023\ufe25" +
    "\027\ufe25\032\ufe25\034\ufe25\035\ufe25\051\ufe25\102\ufe25\107" +
    "\ufe25\001\002\000\004\032\ufe19\001\002\000\024\005\200" +
    "\011\144\012\205\020\u036a\023\213\032\ufe1c\035\u0368\051" +
    "\212\102\u036e\001\002\000\004\032\ufe1b\001\002\000\006" +
    "\021\u037b\111\u037a\001\002\000\004\073\u0384\001\002\000" +
    "\004\073\u037c\001\002\000\022\042\162\043\164\051\272" +
    "\060\160\064\273\065\166\073\161\074\u037d\001\002\000" +
    "\006\100\041\102\040\001\002\000\004\074\u037f\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\200\011" +
    "\144\012\205\020\u036a\023\213\032\ufe24\035\u0368\051\212" +
    "\102\u036e\001\002\000\004\032\ufe1f\001\002\000\024\005" +
    "\200\011\144\012\205\020\u036a\023\213\032\ufe14\035\u0368" +
    "\051\212\102\u036e\001\002\000\004\032\ufe13\001\002\000" +
    "\004\074\u0385\001\002\000\006\100\041\102\040\001\002" +
    "\000\024\005\200\011\144\012\205\020\u036a\023\213\032" +
    "\ufe12\035\u0368\051\212\102\u036e\001\002\000\004\032\ufe11" +
    "\001\002\000\004\032\ufe1e\001\002\000\006\100\041\102" +
    "\040\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\200\011\144\012\205\020\u036a\023\213\032\ufe15\035" +
    "\u0368\051\212\102\u036e\001\002\000\004\032\ufe16\001\002" +
    "\000\024\005\200\011\144\012\205\020\u036a\023\213\032" +
    "\ufe17\035\u0368\051\212\102\u036e\001\002\000\004\032\ufe18" +
    "\001\002\000\006\021\u0391\111\u0390\001\002\000\004\073" +
    "\u039a\001\002\000\004\073\u0392\001\002\000\022\042\162" +
    "\043\164\051\272\060\160\064\273\065\166\073\161\074" +
    "\u0393\001\002\000\006\100\041\102\040\001\002\000\004" +
    "\074\u0395\001\002\000\006\100\041\102\040\001\002\000" +
    "\024\003\ufe52\005\141\011\144\013\ufe52\020\143\023\154" +
    "\035\137\051\153\102\147\001\002\000\006\003\ufe4d\013" +
    "\ufe4d\001\002\000\024\003\ufe46\005\141\011\144\013\ufe46" +
    "\020\143\023\154\035\137\051\153\102\147\001\002\000" +
    "\006\003\ufe45\013\ufe45\001\002\000\004\074\u039b\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\003\ufe44\005" +
    "\141\011\144\013\ufe44\020\143\023\154\035\137\051\153" +
    "\102\147\001\002\000\006\003\ufe43\013\ufe43\001\002\000" +
    "\004\026\u039f\001\002\000\006\100\041\102\040\001\002" +
    "\000\022\005\141\011\144\012\205\020\u02ed\023\154\035" +
    "\u02eb\051\212\102\u02f0\001\002\000\010\013\u03a6\027\u03a3" +
    "\107\u01b5\001\002\000\016\042\162\043\164\051\172\060" +
    "\160\065\166\073\161\001\002\000\010\005\u01c2\100\041" +
    "\102\040\001\002\000\004\013\u03ae\001\002\000\006\100" +
    "\041\102\040\001\002\000\004\005\u03a7\001\002\000\006" +
    "\100\041\102\040\001\002\000\032\003\ufe3f\005\ufe3f\011" +
    "\ufe3f\012\ufe3f\013\ufe3f\020\ufe3f\023\ufe3f\027\ufe3f\035\ufe3f" +
    "\051\ufe3f\102\ufe3f\107\ufe3f\001\002\000\022\005\141\011" +
    "\144\012\205\020\u02ed\023\154\035\u02eb\051\212\102\u02f0" +
    "\001\002\000\004\013\u03ab\001\002\000\004\005\u03ac\001" +
    "\002\000\006\100\041\102\040\001\002\000\032\003\ufe3d" +
    "\005\ufe3d\011\ufe3d\012\ufe3d\013\ufe3d\020\ufe3d\023\ufe3d\027" +
    "\ufe3d\035\ufe3d\051\ufe3d\102\ufe3d\107\ufe3d\001\002\000\004" +
    "\005\u03af\001\002\000\006\100\041\102\040\001\002\000" +
    "\032\003\ufe3c\005\ufe3c\011\ufe3c\012\ufe3c\013\ufe3c\020\ufe3c" +
    "\023\ufe3c\027\ufe3c\035\ufe3c\051\ufe3c\102\ufe3c\107\ufe3c\001" +
    "\002\000\022\005\141\011\144\012\205\020\u02ed\023\154" +
    "\035\u02eb\051\212\102\u02f0\001\002\000\004\013\u03b3\001" +
    "\002\000\004\005\u03b4\001\002\000\006\100\041\102\040" +
    "\001\002\000\032\003\ufe3e\005\ufe3e\011\ufe3e\012\ufe3e\013" +
    "\ufe3e\020\ufe3e\023\ufe3e\027\ufe3e\035\ufe3e\051\ufe3e\102\ufe3e" +
    "\107\ufe3e\001\002\000\004\026\u03b7\001\002\000\006\100" +
    "\041\102\040\001\002\000\022\005\141\011\144\012\205" +
    "\020\u02ed\023\154\035\u02eb\051\212\102\u02f0\001\002\000" +
    "\010\013\ufe27\027\u03ba\107\u01b5\001\002\000\010\005\u01c2" +
    "\100\ufe29\102\ufe29\001\002\000\004\013\ufe26\001\002\000" +
    "\006\100\ufe28\102\ufe28\001\002\000\004\030\u03c2\001\002" +
    "\000\014\003\ufe61\010\ufe61\013\ufe61\100\ufe61\102\ufe61\001" +
    "\002\000\006\003\u03c0\030\u03c1\001\002\000\014\003\ufe57" +
    "\010\ufe57\013\ufe57\100\ufe57\102\ufe57\001\002\000\014\003" +
    "\ufe59\010\ufe59\013\ufe59\100\ufe59\102\ufe59\001\002\000\014" +
    "\003\ufe58\010\ufe58\013\ufe58\100\ufe58\102\ufe58\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\003\ufe47\005\141" +
    "\011\144\013\ufe47\020\143\023\154\035\137\051\153\102" +
    "\147\001\002\000\006\003\ufe48\013\ufe48\001\002\000\004" +
    "\022\u03c7\001\002\000\014\014\054\015\053\016\056\046" +
    "\055\051\052\001\002\000\010\003\ufe53\074\ufe53\104\u03c9" +
    "\001\002\000\006\051\126\106\124\001\002\000\006\003" +
    "\ufe54\074\ufe54\001\002\000\006\051\126\106\124\001\002" +
    "\000\004\074\u03cd\001\002\000\006\100\u03cf\102\u03ce\001" +
    "\002\000\004\100\u0446\001\002\000\024\003\u03d7\005\u03da" +
    "\011\u0135\012\205\020\u03dc\023\234\035\u03d6\051\212\102" +
    "\u03d8\001\002\000\026\003\u03d7\005\u03da\011\u0135\012\205" +
    "\013\uffbc\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001" +
    "\002\000\026\003\u03d7\005\u03da\011\u0135\012\205\013\uffc0" +
    "\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001\002\000" +
    "\004\013\u0433\001\002\000\034\003\uff44\005\uff44\011\uff44" +
    "\012\uff44\013\uff44\020\uff44\023\uff44\027\uff44\035\uff44\051" +
    "\uff44\100\uff44\102\uff44\107\uff44\001\002\000\006\100\041" +
    "\102\040\001\002\000\004\013\uffce\001\002\000\006\003" +
    "\u043b\010\u043c\001\002\000\010\010\u0431\013\u0433\100\u0432" +
    "\001\002\000\004\100\u042e\001\002\000\034\003\uff43\005" +
    "\uff43\011\uff43\012\uff43\013\uff43\020\uff43\023\uff43\027\uff43" +
    "\035\uff43\051\uff43\100\uff43\102\uff43\107\uff43\001\002\000" +
    "\016\042\162\043\164\051\172\060\160\065\166\073\161" +
    "\001\002\000\026\003\u03d7\005\u03da\011\u0135\012\205\013" +
    "\uffbf\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001\002" +
    "\000\004\070\u03de\001\002\000\034\003\uff45\005\uff45\011" +
    "\uff45\012\uff45\013\uff45\020\uff45\023\uff45\027\uff45\035\uff45" +
    "\051\uff45\100\uff45\102\uff45\107\uff45\001\002\000\006\021" +
    "\u03e0\111\u03df\001\002\000\004\073\u03e9\001\002\000\004" +
    "\073\u03e1\001\002\000\022\042\162\043\164\051\272\060" +
    "\160\064\273\065\166\073\161\074\u03e2\001\002\000\006" +
    "\100\041\102\040\001\002\000\004\074\u03e4\001\002\000" +
    "\006\100\041\102\040\001\002\000\026\003\u03d7\005\u03da" +
    "\011\u0135\012\205\013\uffc1\020\u03dc\023\234\035\u03d6\051" +
    "\212\102\u03d8\001\002\000\004\013\uffcc\001\002\000\026" +
    "\003\u03d7\005\u03da\011\u0135\012\205\013\uffb9\020\u03dc\023" +
    "\234\035\u03d6\051\212\102\u03d8\001\002\000\004\013\uffc6" +
    "\001\002\000\004\074\u03ea\001\002\000\006\100\041\102" +
    "\040\001\002\000\026\003\u03d7\005\u03da\011\u0135\012\205" +
    "\013\uffb8\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001" +
    "\002\000\004\013\uffc5\001\002\000\004\013\uffca\001\002" +
    "\000\004\026\u03ef\001\002\000\006\100\041\102\040\001" +
    "\002\000\022\005\u03da\011\u0135\012\205\020\u03f3\023\234" +
    "\035\u03f1\051\212\102\u03f6\001\002\000\004\010\u042b\001" +
    "\002\000\030\005\u03da\011\u0135\012\205\013\uff39\020\u03f3" +
    "\023\234\027\uff39\035\u03f1\051\212\102\u03f6\107\uff39\001" +
    "\002\000\004\070\u041b\001\002\000\010\013\u0404\027\u0403" +
    "\107\u01b5\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\100\u03fc\001\002\000\030\005\u03da\011\u0135\012\205" +
    "\013\uff30\020\u03f3\023\234\027\uff30\035\u03f1\051\212\102" +
    "\u03f6\107\uff30\001\002\000\012\013\uff38\027\uff38\100\u03f9" +
    "\107\uff38\001\002\000\022\005\u03da\011\u0135\012\205\020" +
    "\u03f3\023\234\035\u03f1\051\212\102\u03f6\001\002\000\010" +
    "\013\uff32\027\uff32\107\uff32\001\002\000\010\013\uff2f\027" +
    "\uff2f\107\uff2f\001\002\000\030\005\u03da\011\u0135\012\205" +
    "\013\uff37\020\u03f3\023\234\027\uff37\035\u03f1\051\212\102" +
    "\u03f6\107\uff37\001\002\000\010\013\uff36\027\uff36\107\uff36" +
    "\001\002\000\030\005\u03da\011\u0135\012\205\013\uff35\020" +
    "\u03f3\023\234\027\uff35\035\u03f1\051\212\102\u03f6\107\uff35" +
    "\001\002\000\010\013\uff31\027\uff31\107\uff31\001\002\000" +
    "\004\013\u0418\001\002\000\016\042\162\043\164\051\172" +
    "\060\160\065\166\073\161\001\002\000\006\100\041\102" +
    "\040\001\002\000\010\005\u01c2\100\041\102\040\001\002" +
    "\000\004\005\u0405\001\002\000\006\100\041\102\040\001" +
    "\002\000\034\003\uff3e\005\uff3e\011\uff3e\012\uff3e\013\uff3e" +
    "\020\uff3e\023\uff3e\027\uff3e\035\uff3e\051\uff3e\100\uff3e\102" +
    "\uff3e\107\uff3e\001\002\000\022\005\u03da\011\u0135\012\205" +
    "\020\u03f3\023\234\035\u03f1\051\212\102\u03f6\001\002\000" +
    "\004\013\u0409\001\002\000\004\005\u040a\001\002\000\006" +
    "\100\041\102\040\001\002\000\034\003\uff3d\005\uff3d\011" +
    "\uff3d\012\uff3d\013\uff3d\020\uff3d\023\uff3d\027\uff3d\035\uff3d" +
    "\051\uff3d\100\uff3d\102\uff3d\107\uff3d\001\002\000\022\005" +
    "\u03da\011\u0135\012\205\020\u03f3\023\234\035\u03f1\051\212" +
    "\102\u03f6\001\002\000\004\013\u040e\001\002\000\004\005" +
    "\u040f\001\002\000\006\100\041\102\040\001\002\000\034" +
    "\003\uff3c\005\uff3c\011\uff3c\012\uff3c\013\uff3c\020\uff3c\023" +
    "\uff3c\027\uff3c\035\uff3c\051\uff3c\100\uff3c\102\uff3c\107\uff3c" +
    "\001\002\000\004\026\u0412\001\002\000\006\100\041\102" +
    "\040\001\002\000\022\005\u03da\011\u0135\012\205\020\u03f3" +
    "\023\234\035\u03f1\051\212\102\u03f6\001\002\000\010\013" +
    "\uff25\027\u0417\107\u01b5\001\002\000\004\013\uff26\001\002" +
    "\000\006\100\uff28\102\uff28\001\002\000\010\005\u01c2\100" +
    "\uff27\102\uff27\001\002\000\004\005\u0419\001\002\000\006" +
    "\100\041\102\040\001\002\000\034\003\uff3b\005\uff3b\011" +
    "\uff3b\012\uff3b\013\uff3b\020\uff3b\023\uff3b\027\uff3b\035\uff3b" +
    "\051\uff3b\100\uff3b\102\uff3b\107\uff3b\001\002\000\006\021" +
    "\u041d\111\u041c\001\002\000\004\073\u0426\001\002\000\004" +
    "\073\u041e\001\002\000\022\042\162\043\164\051\272\060" +
    "\160\064\273\065\166\073\161\074\u041f\001\002\000\006" +
    "\100\041\102\040\001\002\000\004\074\u0421\001\002\000" +
    "\006\100\041\102\040\001\002\000\030\005\u03da\011\u0135" +
    "\012\205\013\uff3a\020\u03f3\023\234\027\uff3a\035\u03f1\051" +
    "\212\102\u03f6\107\uff3a\001\002\000\010\013\uff34\027\uff34" +
    "\107\uff34\001\002\000\030\005\u03da\011\u0135\012\205\013" +
    "\uff2c\020\u03f3\023\234\027\uff2c\035\u03f1\051\212\102\u03f6" +
    "\107\uff2c\001\002\000\010\013\uff2b\027\uff2b\107\uff2b\001" +
    "\002\000\004\074\u0427\001\002\000\006\100\041\102\040" +
    "\001\002\000\030\005\u03da\011\u0135\012\205\013\uff2a\020" +
    "\u03f3\023\234\027\uff2a\035\u03f1\051\212\102\u03f6\107\uff2a" +
    "\001\002\000\010\013\uff29\027\uff29\107\uff29\001\002\000" +
    "\010\013\uff33\027\uff33\107\uff33\001\002\000\006\100\041" +
    "\102\040\001\002\000\030\005\u03da\011\u0135\012\205\013" +
    "\uff2d\020\u03f3\023\234\027\uff2d\035\u03f1\051\212\102\u03f6" +
    "\107\uff2d\001\002\000\010\013\uff2e\027\uff2e\107\uff2e\001" +
    "\002\000\026\003\u03d7\005\u03da\011\u0135\012\205\013\uffbe" +
    "\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001\002\000" +
    "\004\013\uffcd\001\002\000\004\013\uffb6\001\002\000\006" +
    "\100\041\102\040\001\002\000\026\003\u03d7\005\u03da\011" +
    "\u0135\012\205\013\uffb7\020\u03dc\023\234\035\u03d6\051\212" +
    "\102\u03d8\001\002\000\006\003\u0434\010\u0435\001\002\000" +
    "\006\100\041\102\040\001\002\000\006\100\041\102\040" +
    "\001\002\000\006\013\uffb5\100\uffb5\001\002\000\006\013" +
    "\uffb4\100\uffb4\001\002\000\004\013\uffc4\001\002\000\026" +
    "\003\u03d7\005\u03da\011\u0135\012\205\013\uffba\020\u03dc\023" +
    "\234\035\u03d6\051\212\102\u03d8\001\002\000\004\013\uffc2" +
    "\001\002\000\006\100\041\102\040\001\002\000\006\100" +
    "\041\102\040\001\002\000\026\003\u03d7\005\u03da\011\u0135" +
    "\012\205\013\uffbb\020\u03dc\023\234\035\u03d6\051\212\102" +
    "\u03d8\001\002\000\004\013\uffc7\001\002\000\024\003\u03d7" +
    "\005\u03da\011\u0135\012\205\020\u03dc\023\234\035\u03d6\051" +
    "\212\102\u03d8\001\002\000\004\013\uffc3\001\002\000\026" +
    "\003\u03d7\005\u03da\011\u0135\012\205\013\uffbd\020\u03dc\023" +
    "\234\035\u03d6\051\212\102\u03d8\001\002\000\004\013\uffc9" +
    "\001\002\000\006\013\uffe5\100\uffe5\001\002\000\004\013" +
    "\uffcb\001\002\000\004\013\uffc8\001\002\000\024\003\u03d7" +
    "\005\u03da\011\u0135\012\205\020\u03dc\023\234\035\u03d6\051" +
    "\212\102\u03d8\001\002\000\004\013\u0433\001\002\000\006" +
    "\013\uffda\100\uffda\001\002\000\004\074\u044a\001\002\000" +
    "\006\100\u044c\102\u044b\001\002\000\004\100\u044f\001\002" +
    "\000\024\003\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023" +
    "\234\035\u03d6\051\212\102\u03d8\001\002\000\004\013\u0433" +
    "\001\002\000\006\013\uffe9\100\uffe9\001\002\000\024\003" +
    "\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023\234\035\u03d6" +
    "\051\212\102\u03d8\001\002\000\004\013\u0433\001\002\000" +
    "\006\013\uffdf\100\uffdf\001\002\000\006\051\113\103\112" +
    "\001\002\000\004\013\ufff0\001\002\000\020\003\031\006" +
    "\033\010\023\013\uffd4\033\025\100\uffd4\102\032\001\002" +
    "\000\004\013\uffee\001\002\000\004\013\uffef\001\002\000" +
    "\020\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4" +
    "\102\032\001\002\000\004\013\uffed\001\002\000\006\002" +
    "\ufff9\102\ufff9\001\002\000\006\003\u045c\007\u045b\001\002" +
    "\000\006\002\ufff3\102\ufff3\001\002\000\006\002\ufff2\102" +
    "\ufff2\001\002\000\004\051\u048f\001\002\000\006\003\u045f" +
    "\051\u0460\001\002\000\004\073\u0487\001\002\000\006\003" +
    "\u0461\073\u0462\001\002\000\006\051\126\106\124\001\002" +
    "\000\010\003\u0463\051\126\106\124\001\002\000\004\074" +
    "\u047a\001\002\000\006\003\u0465\074\u0466\001\002\000\004" +
    "\022\u0475\001\002\000\006\003\u0468\022\u0467\001\002\000" +
    "\016\003\u046d\014\054\015\053\016\056\046\055\051\052" +
    "\001\002\000\014\014\054\015\053\016\056\046\055\051" +
    "\052\001\002\000\006\100\041\102\040\001\002\000\020" +
    "\005\141\011\144\020\143\023\154\035\137\051\153\102" +
    "\147\001\002\000\006\003\u03bd\013\u03bf\001\002\000\014" +
    "\003\ufe5b\010\ufe5b\013\ufe5b\100\ufe5b\102\ufe5b\001\002\000" +
    "\006\100\041\102\040\001\002\000\006\100\041\102\040" +
    "\001\002\000\020\005\141\011\144\020\143\023\154\035" +
    "\137\051\153\102\147\001\002\000\006\003\u03bd\013\u03bf" +
    "\001\002\000\014\003\ufe62\010\ufe62\013\ufe62\100\ufe62\102" +
    "\ufe62\001\002\000\020\005\141\011\144\020\143\023\154" +
    "\035\137\051\153\102\147\001\002\000\006\003\u03bd\013" +
    "\u03bf\001\002\000\014\003\ufe5a\010\ufe5a\013\ufe5a\100\ufe5a" +
    "\102\ufe5a\001\002\000\014\014\054\015\053\016\056\046" +
    "\055\051\052\001\002\000\006\100\041\102\040\001\002" +
    "\000\020\005\141\011\144\020\143\023\154\035\137\051" +
    "\153\102\147\001\002\000\006\003\u03bd\013\u03bf\001\002" +
    "\000\014\003\ufe5c\010\ufe5c\013\ufe5c\100\ufe5c\102\ufe5c\001" +
    "\002\000\004\022\u047b\001\002\000\014\014\054\015\053" +
    "\016\056\046\055\051\052\001\002\000\006\100\041\102" +
    "\040\001\002\000\020\005\141\011\144\020\143\023\154" +
    "\035\137\051\153\102\147\001\002\000\006\003\u03bd\013" +
    "\u03bf\001\002\000\014\003\ufe5d\010\ufe5d\013\ufe5d\100\ufe5d" +
    "\102\ufe5d\001\002\000\004\074\u0481\001\002\000\004\022" +
    "\u0482\001\002\000\014\014\054\015\053\016\056\046\055" +
    "\051\052\001\002\000\006\100\041\102\040\001\002\000" +
    "\020\005\141\011\144\020\143\023\154\035\137\051\153" +
    "\102\147\001\002\000\006\003\u03bd\013\u03bf\001\002\000" +
    "\014\003\ufe5e\010\ufe5e\013\ufe5e\100\ufe5e\102\ufe5e\001\002" +
    "\000\006\051\126\106\124\001\002\000\004\074\u0489\001" +
    "\002\000\004\022\u048a\001\002\000\014\014\054\015\053" +
    "\016\056\046\055\051\052\001\002\000\006\100\041\102" +
    "\040\001\002\000\020\005\141\011\144\020\143\023\154" +
    "\035\137\051\153\102\147\001\002\000\006\003\u03bd\013" +
    "\u03bf\001\002\000\014\003\ufe5f\010\ufe5f\013\ufe5f\100\ufe5f" +
    "\102\ufe5f\001\002\000\004\073\u0490\001\002\000\006\051" +
    "\126\106\124\001\002\000\004\074\u0492\001\002\000\004" +
    "\022\u0493\001\002\000\014\014\054\015\053\016\056\046" +
    "\055\051\052\001\002\000\006\100\041\102\040\001\002" +
    "\000\020\005\141\011\144\020\143\023\154\035\137\051" +
    "\153\102\147\001\002\000\006\003\u03bd\013\u03bf\001\002" +
    "\000\014\003\ufe60\010\ufe60\013\ufe60\100\ufe60\102\ufe60\001" +
    "\002\000\020\003\031\006\033\010\023\013\uffd4\033\025" +
    "\100\uffd4\102\032\001\002\000\004\013\uffec\001\002\000" +
    "\006\003\u04d0\073\u04d1\001\002\000\004\073\u04c6\001\002" +
    "\000\006\003\u049d\073\u049e\001\002\000\006\051\126\106" +
    "\124\001\002\000\010\003\u049f\051\126\106\124\001\002" +
    "\000\004\074\u04b5\001\002\000\006\003\u04a1\074\u04a2\001" +
    "\002\000\006\100\u04af\102\u04ae\001\002\000\010\003\u04a4" +
    "\100\u04a5\102\u04a3\001\002\000\004\100\u04ab\001\002\000" +
    "\004\100\u04a8\001\002\000\024\003\u03d7\005\u03da\011\u0135" +
    "\012\205\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001" +
    "\002\000\004\013\u0433\001\002\000\006\013\uffe6\100\uffe6" +
    "\001\002\000\024\003\u03d7\005\u03da\011\u0135\012\205\020" +
    "\u03dc\023\234\035\u03d6\051\212\102\u03d8\001\002\000\004" +
    "\013\u0433\001\002\000\006\013\uffd5\100\uffd5\001\002\000" +
    "\024\003\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023\234" +
    "\035\u03d6\051\212\102\u03d8\001\002\000\004\013\u0433\001" +
    "\002\000\006\013\uffdb\100\uffdb\001\002\000\004\100\u04b2" +
    "\001\002\000\024\003\u03d7\005\u03da\011\u0135\012\205\020" +
    "\u03dc\023\234\035\u03d6\051\212\102\u03d8\001\002\000\004" +
    "\013\u0433\001\002\000\006\013\uffe1\100\uffe1\001\002\000" +
    "\024\003\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023\234" +
    "\035\u03d6\051\212\102\u03d8\001\002\000\004\013\u0433\001" +
    "\002\000\006\013\uffd6\100\uffd6\001\002\000\006\100\u04b7" +
    "\102\u04b6\001\002\000\004\100\u04ba\001\002\000\024\003" +
    "\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023\234\035\u03d6" +
    "\051\212\102\u03d8\001\002\000\004\013\u0433\001\002\000" +
    "\006\013\uffe2\100\uffe2\001\002\000\024\003\u03d7\005\u03da" +
    "\011\u0135\012\205\020\u03dc\023\234\035\u03d6\051\212\102" +
    "\u03d8\001\002\000\004\013\u0433\001\002\000\006\013\uffd7" +
    "\100\uffd7\001\002\000\004\074\u04be\001\002\000\006\100" +
    "\u04c0\102\u04bf\001\002\000\004\100\u04c3\001\002\000\024" +
    "\003\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023\234\035" +
    "\u03d6\051\212\102\u03d8\001\002\000\004\013\u0433\001\002" +
    "\000\006\013\uffe3\100\uffe3\001\002\000\024\003\u03d7\005" +
    "\u03da\011\u0135\012\205\020\u03dc\023\234\035\u03d6\051\212" +
    "\102\u03d8\001\002\000\004\013\u0433\001\002\000\006\013" +
    "\uffd8\100\uffd8\001\002\000\006\051\126\106\124\001\002" +
    "\000\004\074\u04c8\001\002\000\006\100\u04ca\102\u04c9\001" +
    "\002\000\004\100\u04cd\001\002\000\024\003\u03d7\005\u03da" +
    "\011\u0135\012\205\020\u03dc\023\234\035\u03d6\051\212\102" +
    "\u03d8\001\002\000\004\013\u0433\001\002\000\006\013\uffe4" +
    "\100\uffe4\001\002\000\024\003\u03d7\005\u03da\011\u0135\012" +
    "\205\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001\002" +
    "\000\004\013\u0433\001\002\000\006\013\uffd9\100\uffd9\001" +
    "\002\000\004\074\u04e6\001\002\000\006\003\u04d2\074\u04d3" +
    "\001\002\000\006\100\u04e0\102\u04df\001\002\000\010\003" +
    "\u04d5\100\u04d6\102\u04d4\001\002\000\004\100\u04dc\001\002" +
    "\000\004\100\u04d9\001\002\000\024\003\u03d7\005\u03da\011" +
    "\u0135\012\205\020\u03dc\023\234\035\u03d6\051\212\102\u03d8" +
    "\001\002\000\004\013\u0433\001\002\000\006\013\uffea\100" +
    "\uffea\001\002\000\024\003\u03d7\005\u03da\011\u0135\012\205" +
    "\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001\002\000" +
    "\004\013\u0433\001\002\000\006\013\uffdc\100\uffdc\001\002" +
    "\000\024\003\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023" +
    "\234\035\u03d6\051\212\102\u03d8\001\002\000\004\013\u0433" +
    "\001\002\000\006\013\uffe0\100\uffe0\001\002\000\004\100" +
    "\u04e3\001\002\000\024\003\u03d7\005\u03da\011\u0135\012\205" +
    "\020\u03dc\023\234\035\u03d6\051\212\102\u03d8\001\002\000" +
    "\004\013\u0433\001\002\000\006\013\uffe7\100\uffe7\001\002" +
    "\000\024\003\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023" +
    "\234\035\u03d6\051\212\102\u03d8\001\002\000\004\013\u0433" +
    "\001\002\000\006\013\uffdd\100\uffdd\001\002\000\006\100" +
    "\u04e8\102\u04e7\001\002\000\004\100\u04eb\001\002\000\024" +
    "\003\u03d7\005\u03da\011\u0135\012\205\020\u03dc\023\234\035" +
    "\u03d6\051\212\102\u03d8\001\002\000\004\013\u0433\001\002" +
    "\000\006\013\uffe8\100\uffe8\001\002\000\024\003\u03d7\005" +
    "\u03da\011\u0135\012\205\020\u03dc\023\234\035\u03d6\051\212" +
    "\102\u03d8\001\002\000\004\013\u0433\001\002\000\006\013" +
    "\uffde\100\uffde\001\002\000\020\003\031\006\033\010\023" +
    "\013\uffd4\033\025\100\uffd4\102\032\001\002\000\004\013" +
    "\u045a\001\002\000\006\002\ufff4\102\ufff4\001\002\000\004" +
    "\002\001\001\002\000\004\051\u0508\001\002\000\006\003" +
    "\u04f4\051\u04f5\001\002\000\006\100\u0502\102\u0501\001\002" +
    "\000\010\003\u04f7\100\u04f8\102\u04f6\001\002\000\004\100" +
    "\u04fe\001\002\000\004\100\u04fb\001\002\000\020\003\031" +
    "\006\033\010\023\013\uffd4\033\025\100\uffd4\102\032\001" +
    "\002\000\004\013\u045a\001\002\000\006\002\ufffc\102\ufffc" +
    "\001\002\000\020\003\031\006\033\010\023\013\uffd4\033" +
    "\025\100\uffd4\102\032\001\002\000\004\013\u045a\001\002" +
    "\000\006\002\ufff7\102\ufff7\001\002\000\020\003\031\006" +
    "\033\010\023\013\uffd4\033\025\100\uffd4\102\032\001\002" +
    "\000\004\013\u045a\001\002\000\006\002\ufff8\102\ufff8\001" +
    "\002\000\004\100\u0505\001\002\000\020\003\031\006\033" +
    "\010\023\013\uffd4\033\025\100\uffd4\102\032\001\002\000" +
    "\004\013\u045a\001\002\000\006\002\ufffb\102\ufffb\001\002" +
    "\000\020\003\031\006\033\010\023\013\uffd4\033\025\100" +
    "\uffd4\102\032\001\002\000\004\013\u045a\001\002\000\006" +
    "\002\ufff6\102\ufff6\001\002\000\006\100\u050a\102\u0509\001" +
    "\002\000\004\100\u050d\001\002\000\020\003\031\006\033" +
    "\010\023\013\uffd4\033\025\100\uffd4\102\032\001\002\000" +
    "\004\013\u045a\001\002\000\006\002\ufffa\102\ufffa\001\002" +
    "\000\020\003\031\006\033\010\023\013\uffd4\033\025\100" +
    "\uffd4\102\032\001\002\000\004\013\u045a\001\002\000\006" +
    "\002\ufff5\102\ufff5\001\002\000\012\002\ufffd\003\010\006" +
    "\005\102\004\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u050f\000\010\002\005\003\010\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\004\125\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\023\021\025\053\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\130\u0458\001\001" +
    "\000\006\010\u0455\121\u0456\001\001\000\006\010\u0452\121" +
    "\u0453\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\100\001\001\000\004\121\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\042\001\001\000\004\132" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\061\001\001\000\004\012\050\001" +
    "\001\000\004\121\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\057\001\001\000\002\001\001\000\004" +
    "\121\064\001\001\000\004\121\062\001\001\000\004\052" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\066\001\001\000\004\121\067\001\001\000\004\052" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\101" +
    "\001\001\000\004\132\102\001\001\000\002\001\001\000" +
    "\004\121\104\001\001\000\004\052\105\001\001\000\004" +
    "\132\106\001\001\000\002\001\001\000\012\007\027\010" +
    "\023\021\110\053\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\116\001\001\000\004\052\117\001\001" +
    "\000\004\132\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\127\001\001\000" +
    "\002\001\001\000\004\011\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\134\001\001\000\004\121" +
    "\135\001\001\000\020\013\137\050\144\054\151\055\150" +
    "\057\141\066\147\114\145\001\001\000\002\001\001\000" +
    "\004\131\u03bd\001\001\000\016\017\167\024\162\030\u039d" +
    "\050\166\113\164\123\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u035d\001\001" +
    "\000\020\013\u035c\050\144\054\151\055\150\057\141\066" +
    "\147\114\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\u0359\050\144\054\151\055" +
    "\150\057\141\066\147\114\145\001\001\000\012\024\304" +
    "\113\305\115\u0258\122\u0256\001\001\000\004\116\154\001" +
    "\001\000\016\017\167\024\162\030\172\050\166\113\164" +
    "\123\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\361\001\001\000\012\017\u034a\050\267\113\327" +
    "\123\u0349\001\001\000\002\001\001\000\004\031\u0342\001" +
    "\001\000\002\001\001\000\004\031\u033c\001\001\000\002" +
    "\001\001\000\004\031\u0337\001\001\000\004\031\u0331\001" +
    "\001\000\004\020\347\001\001\000\004\031\u0329\001\001" +
    "\000\004\121\173\001\001\000\022\015\201\050\205\057" +
    "\202\061\210\062\174\064\176\067\200\114\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\167\024\162\030\u02be\050\166\113\164\123\170" +
    "\001\001\000\002\001\001\000\022\015\201\050\205\057" +
    "\202\061\210\062\174\064\176\067\u02bb\114\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u028e\001\001\000\002\001\001\000\022\015\201" +
    "\050\205\057\202\061\210\062\174\064\176\067\u028b\114" +
    "\207\001\001\000\022\015\201\050\205\057\202\061\210" +
    "\062\174\064\176\067\u028a\114\207\001\001\000\012\024" +
    "\304\113\305\115\u0258\122\u0256\001\001\000\004\116\213" +
    "\001\001\000\016\017\167\024\162\030\214\050\166\113" +
    "\164\123\170\001\001\000\004\121\215\001\001\000\022" +
    "\015\222\041\221\043\225\044\216\046\232\050\226\065" +
    "\223\114\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\167\024\162\030\u0209\050\166\113\164\123" +
    "\170\001\001\000\002\001\001\000\022\015\222\041\221" +
    "\043\225\044\216\046\232\050\226\065\u0208\114\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\222" +
    "\041\221\043\225\044\216\046\232\050\226\065\u01f6\114" +
    "\231\001\001\000\004\121\u01f4\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\222\041\221\043\225\044" +
    "\216\046\232\050\226\065\u0123\114\231\001\001\000\002" +
    "\001\001\000\004\116\234\001\001\000\016\017\167\024" +
    "\162\030\235\050\166\113\164\123\170\001\001\000\004" +
    "\121\236\001\001\000\022\015\240\041\221\042\242\043" +
    "\243\044\216\046\232\050\244\114\245\001\001\000\002" +
    "\001\001\000\022\015\240\041\221\042\u011f\043\243\044" +
    "\216\046\232\050\244\114\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\240\041\221\042\254\043" +
    "\243\044\216\046\232\050\244\114\245\001\001\000\004" +
    "\121\252\001\001\000\022\015\240\041\221\042\251\043" +
    "\243\044\216\046\232\050\244\114\245\001\001\000\002" +
    "\001\001\000\022\015\240\041\221\042\250\043\243\044" +
    "\216\046\232\050\244\114\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\240\041\221\042\253\043" +
    "\243\044\216\046\232\050\244\114\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\270\023\266\024\264\050\267\113" +
    "\265\123\170\001\001\000\004\121\u0119\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\270\023\274\024\264\050\267\113\265\123" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\270\023\321\024\264\050\267\113\265\123\170\001" +
    "\001\000\012\024\304\051\303\113\305\115\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\304\113" +
    "\305\115\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\304\051\312\113\305\115\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\304\051\317\113\305\115\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\270\023\324" +
    "\024\264\050\267\113\265\123\170\001\001\000\002\001" +
    "\001\000\016\017\270\023\u0111\024\264\050\267\113\265" +
    "\123\170\001\001\000\012\017\332\050\267\113\327\123" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\347\001\001\000\002\001\001\000\014\017\343\020" +
    "\337\050\267\113\327\123\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\361\001\001\000\012\017" +
    "\345\050\267\113\327\123\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\355\050\267\113\327\120\357\123\356\001" +
    "\001\000\012\017\352\050\267\113\327\123\351\001\001" +
    "\000\004\020\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\u0106\020\u0104\050\267\113\327\123\u0105\001\001\000\012" +
    "\017\365\050\267\113\327\123\364\001\001\000\004\050" +
    "\u0102\001\001\000\004\020\347\001\001\000\002\001\001" +
    "\000\014\017\371\020\367\050\267\113\327\123\370\001" +
    "\001\000\012\017\373\050\267\113\327\123\372\001\001" +
    "\000\004\020\347\001\001\000\002\001\001\000\004\020" +
    "\347\001\001\000\002\001\001\000\014\017\376\020\375" +
    "\050\267\113\327\123\377\001\001\000\012\017\u0101\050" +
    "\267\113\327\123\u0100\001\001\000\002\001\001\000\004" +
    "\020\347\001\001\000\004\020\347\001\001\000\002\001" +
    "\001\000\014\017\u0106\020\u0104\050\267\113\327\123\u0105" +
    "\001\001\000\014\017\u0109\020\u0108\050\267\113\327\123" +
    "\u010a\001\001\000\014\017\355\050\267\113\327\120\u0107" +
    "\123\356\001\001\000\004\020\347\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\u010b\050\267\113\327" +
    "\123\170\001\001\000\002\001\001\000\004\020\347\001" +
    "\001\000\002\001\001\000\014\017\u010e\020\u010d\050\267" +
    "\113\327\123\170\001\001\000\012\017\u0110\050\267\113" +
    "\327\123\u010f\001\001\000\002\001\001\000\004\020\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0113\001\001\000\022\015\240\041\221\042\u0114\043\243" +
    "\044\216\046\232\050\244\114\245\001\001\000\002\001" +
    "\001\000\016\017\270\023\u0116\024\264\050\267\113\265" +
    "\123\170\001\001\000\002\001\001\000\016\017\270\023" +
    "\u0118\024\264\050\267\113\265\123\170\001\001\000\002" +
    "\001\001\000\022\015\240\041\221\042\u011a\043\243\044" +
    "\216\046\232\050\244\114\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u011d\001\001\000\022\015" +
    "\240\041\221\042\u011e\043\243\044\216\046\232\050\244" +
    "\114\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0121\001\001\000\022\015\240\041\221\042\u0122" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\222\041\221" +
    "\043\225\044\216\046\232\050\226\065\u0125\114\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\113\u0128" +
    "\001\001\000\002\001\001\000\004\113\u012a\001\001\000" +
    "\002\001\001\000\004\113\u012c\001\001\000\004\121\u012d" +
    "\001\001\000\022\015\u0131\032\u0132\034\u012e\035\u0137\037" +
    "\u013a\047\u0139\050\u0135\114\u0138\001\001\000\022\015\u0131" +
    "\032\u0132\034\u012e\035\u0137\037\u013a\047\u01f3\050\u0135\114" +
    "\u0138\001\001\000\002\001\001\000\016\017\167\024\162" +
    "\030\u01a9\050\166\113\164\123\170\001\001\000\022\015" +
    "\u0131\032\u0132\034\u012e\035\u0137\037\u013a\047\u01a8\050\u0135" +
    "\114\u0138\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u016b\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0131\032\u0132\034\u012e\035" +
    "\u0137\037\u013a\047\u0168\050\u0135\114\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\116\u013c\001\001\000" +
    "\016\017\167\024\162\030\u013d\050\166\113\164\123\170" +
    "\001\001\000\004\121\u013e\001\001\000\022\015\u0140\040" +
    "\u0146\041\221\043\u0142\044\216\046\232\050\u0143\114\u0144" +
    "\001\001\000\002\001\001\000\022\015\u0140\040\u015e\041" +
    "\221\043\u0142\044\216\046\232\050\u0143\114\u0144\001\001" +
    "\000\002\001\001\000\022\015\u0140\040\u014e\041\221\043" +
    "\u0142\044\216\046\232\050\u0143\114\u0144\001\001\000\004" +
    "\121\u014c\001\001\000\022\015\u0140\040\u014b\041\221\043" +
    "\u0142\044\216\046\232\050\u0143\114\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0148\001\001\000" +
    "\002\001\001\000\022\015\u0140\040\u014a\041\221\043\u0142" +
    "\044\216\046\232\050\u0143\114\u0144\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u0140\040\u014d\041\221" +
    "\043\u0142\044\216\046\232\050\u0143\114\u0144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\270\023\u0154\024" +
    "\264\050\267\113\265\123\170\001\001\000\004\121\u0158" +
    "\001\001\000\002\001\001\000\004\121\u0156\001\001\000" +
    "\022\015\u0140\040\u0157\041\221\043\u0142\044\216\046\232" +
    "\050\u0143\114\u0144\001\001\000\002\001\001\000\022\015" +
    "\u0140\040\u0159\041\221\043\u0142\044\216\046\232\050\u0143" +
    "\114\u0144\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u015c\001\001\000\022\015\u0140\040\u015d\041\221" +
    "\043\u0142\044\216\046\232\050\u0143\114\u0144\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0163\001\001" +
    "\000\004\121\u0161\001\001\000\022\015\u0140\040\u0162\041" +
    "\221\043\u0142\044\216\046\232\050\u0143\114\u0144\001\001" +
    "\000\002\001\001\000\022\015\u0140\040\u0164\041\221\043" +
    "\u0142\044\216\046\232\050\u0143\114\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\u0131\032\u0132" +
    "\034\u012e\035\u0137\037\u013a\047\u016a\050\u0135\114\u0138\001" +
    "\001\000\002\001\001\000\022\015\u0131\032\u0132\034\u012e" +
    "\035\u0137\037\u013a\047\u016c\050\u0135\114\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\113\u016f\001\001" +
    "\000\002\001\001\000\004\113\u0171\001\001\000\002\001" +
    "\001\000\004\113\u0173\001\001\000\004\121\u0174\001\001" +
    "\000\022\015\u0178\032\u0132\033\u0177\034\u0175\035\u0137\037" +
    "\u013a\050\u017a\114\u017b\001\001\000\022\015\u0178\032\u0132" +
    "\033\u0198\034\u0175\035\u0137\037\u013a\050\u017a\114\u017b\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u0178" +
    "\032\u0132\033\u0191\034\u0175\035\u0137\037\u013a\050\u017a\114" +
    "\u017b\001\001\000\002\001\001\000\004\121\u0180\001\001" +
    "\000\022\015\u0178\032\u0132\033\u017f\034\u0175\035\u0137\037" +
    "\u013a\050\u017a\114\u017b\001\001\000\002\001\001\000\022" +
    "\015\u0178\032\u0132\033\u017e\034\u0175\035\u0137\037\u013a\050" +
    "\u017a\114\u017b\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\u0178\032\u0132\033\u0181\034\u0175\035\u0137\037" +
    "\u013a\050\u017a\114\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\270\023\u0187\024\264\050\267\113\265\123\170\001\001" +
    "\000\004\121\u018b\001\001\000\002\001\001\000\004\121" +
    "\u0189\001\001\000\022\015\u0178\032\u0132\033\u018a\034\u0175" +
    "\035\u0137\037\u013a\050\u017a\114\u017b\001\001\000\002\001" +
    "\001\000\022\015\u0178\032\u0132\033\u018c\034\u0175\035\u0137" +
    "\037\u013a\050\u017a\114\u017b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u018f\001\001\000\022\015\u0178" +
    "\032\u0132\033\u0190\034\u0175\035\u0137\037\u013a\050\u017a\114" +
    "\u017b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0194\001\001\000\002\001\001\000" +
    "\004\121\u0196\001\001\000\022\015\u0178\032\u0132\033\u0197" +
    "\034\u0175\035\u0137\037\u013a\050\u017a\114\u017b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\270\023\u019e\024" +
    "\264\050\267\113\265\123\170\001\001\000\004\121\u01a2" +
    "\001\001\000\002\001\001\000\004\121\u01a0\001\001\000" +
    "\022\015\u0131\032\u0132\034\u012e\035\u0137\037\u013a\047\u01a1" +
    "\050\u0135\114\u0138\001\001\000\002\001\001\000\022\015" +
    "\u0131\032\u0132\034\u012e\035\u0137\037\u013a\047\u01a3\050\u0135" +
    "\114\u0138\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u01a6\001\001\000\022\015\u0131\032\u0132\034\u012e" +
    "\035\u0137\037\u013a\047\u01a7\050\u0135\114\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u01ab\001\001\000\022\015\u01ae\032\u0132\034\u01ac\035" +
    "\u0137\037\u013a\050\u01b0\100\u01b3\114\u01b1\001\001\000\022" +
    "\015\u01ae\032\u0132\034\u01ac\035\u0137\037\u013a\050\u01b0\100" +
    "\u01ec\114\u01b1\001\001\000\002\001\001\000\022\015\u01ae" +
    "\032\u0132\034\u01ac\035\u0137\037\u013a\050\u01b0\100\u01e5\114" +
    "\u01b1\001\001\000\002\001\001\000\004\121\u01d4\001\001" +
    "\000\022\015\u01ae\032\u0132\034\u01ac\035\u0137\037\u013a\050" +
    "\u01b0\100\u01d3\114\u01b1\001\001\000\002\001\001\000\010" +
    "\036\u01b8\110\u01b6\117\u01b5\001\001\000\002\001\001\000" +
    "\016\017\167\024\162\030\u01ca\050\166\113\164\123\170" +
    "\001\001\000\002\001\001\000\004\121\u01c2\001\001\000" +
    "\004\121\u01bc\001\001\000\002\001\001\000\004\121\u01bb" +
    "\001\001\000\002\001\001\000\022\015\u01ae\032\u0132\034" +
    "\u01ac\035\u0137\037\u013a\050\u01b0\100\u01bd\114\u01b1\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u01c0\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u01ae" +
    "\032\u0132\034\u01ac\035\u0137\037\u013a\050\u01b0\100\u01c3\114" +
    "\u01b1\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u01c6\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u01c9\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u01cc\001\001\000\022\015\u01ae\032\u0132\034" +
    "\u01ac\035\u0137\037\u013a\050\u01b0\100\u01cd\114\u01b1\001\001" +
    "\000\010\036\u01d0\110\u01ce\117\u01b5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u01ae" +
    "\032\u0132\034\u01ac\035\u0137\037\u013a\050\u01b0\100\u01d2\114" +
    "\u01b1\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u01ae\032\u0132\034\u01ac\035\u0137\037\u013a\050\u01b0\100" +
    "\u01d5\114\u01b1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\270\023" +
    "\u01db\024\264\050\267\113\265\123\170\001\001\000\004" +
    "\121\u01df\001\001\000\002\001\001\000\004\121\u01dd\001" +
    "\001\000\022\015\u01ae\032\u0132\034\u01ac\035\u0137\037\u013a" +
    "\050\u01b0\100\u01de\114\u01b1\001\001\000\002\001\001\000" +
    "\022\015\u01ae\032\u0132\034\u01ac\035\u0137\037\u013a\050\u01b0" +
    "\100\u01e0\114\u01b1\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u01e3\001\001\000\022\015\u01ae\032\u0132" +
    "\034\u01ac\035\u0137\037\u013a\050\u01b0\100\u01e4\114\u01b1\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u01ea" +
    "\001\001\000\004\121\u01e8\001\001\000\022\015\u01ae\032" +
    "\u0132\034\u01ac\035\u0137\037\u013a\050\u01b0\100\u01e9\114\u01b1" +
    "\001\001\000\002\001\001\000\022\015\u01ae\032\u0132\034" +
    "\u01ac\035\u0137\037\u013a\050\u01b0\100\u01eb\114\u01b1\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u01f1\001" +
    "\001\000\004\121\u01ef\001\001\000\022\015\u0131\032\u0132" +
    "\034\u012e\035\u0137\037\u013a\047\u01f0\050\u0135\114\u0138\001" +
    "\001\000\002\001\001\000\022\015\u0131\032\u0132\034\u012e" +
    "\035\u0137\037\u013a\047\u01f2\050\u0135\114\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\222\041\221" +
    "\043\225\044\216\046\232\050\226\065\u01f5\114\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\270\023" +
    "\u01fc\024\264\050\267\113\265\123\170\001\001\000\004" +
    "\121\u0200\001\001\000\002\001\001\000\004\121\u01fe\001" +
    "\001\000\022\015\222\041\221\043\225\044\216\046\232" +
    "\050\226\065\u01ff\114\231\001\001\000\002\001\001\000" +
    "\022\015\222\041\221\043\225\044\216\046\232\050\226" +
    "\065\u0201\114\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0204\001\001\000\022\015\222\041\221" +
    "\043\225\044\216\046\232\050\226\065\u0205\114\231\001" +
    "\001\000\002\001\001\000\004\121\u0207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u020b\001\001\000\022\015\u020d\041\221\043\u020f\044\216" +
    "\046\232\050\u0210\101\u0213\114\u0212\001\001\000\002\001" +
    "\001\000\022\015\u020d\041\221\043\u020f\044\216\046\232" +
    "\050\u0210\101\u0244\114\u0212\001\001\000\002\001\001\000" +
    "\022\015\u020d\041\221\043\u020f\044\216\046\232\050\u0210" +
    "\101\u0234\114\u0212\001\001\000\004\121\u0232\001\001\000" +
    "\002\001\001\000\022\015\u020d\041\221\043\u020f\044\216" +
    "\046\232\050\u0210\101\u022f\114\u0212\001\001\000\010\045" +
    "\u0216\106\u0217\117\u0214\001\001\000\016\017\167\024\162" +
    "\030\u0228\050\166\113\164\123\170\001\001\000\004\121" +
    "\u0223\001\001\000\004\121\u021e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u021a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u021d\001\001\000\002" +
    "\001\001\000\022\015\u020d\041\221\043\u020f\044\216\046" +
    "\232\050\u0210\101\u021f\114\u0212\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0222\001\001\000\002\001" +
    "\001\000\022\015\u020d\041\221\043\u020f\044\216\046\232" +
    "\050\u0210\101\u0224\114\u0212\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0227\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u022a\001\001\000\022\015" +
    "\u020d\041\221\043\u020f\044\216\046\232\050\u0210\101\u022b" +
    "\114\u0212\001\001\000\010\045\u022d\106\u022e\117\u0214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u020d\041\221\043\u020f\044" +
    "\216\046\232\050\u0210\101\u0231\114\u0212\001\001\000\002" +
    "\001\001\000\022\015\u020d\041\221\043\u020f\044\216\046" +
    "\232\050\u0210\101\u0233\114\u0212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\270\023\u023a\024\264\050\267" +
    "\113\265\123\170\001\001\000\004\121\u023e\001\001\000" +
    "\002\001\001\000\004\121\u023c\001\001\000\022\015\u020d" +
    "\041\221\043\u020f\044\216\046\232\050\u0210\101\u023d\114" +
    "\u0212\001\001\000\002\001\001\000\022\015\u020d\041\221" +
    "\043\u020f\044\216\046\232\050\u0210\101\u023f\114\u0212\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0242" +
    "\001\001\000\022\015\u020d\041\221\043\u020f\044\216\046" +
    "\232\050\u0210\101\u0243\114\u0212\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0249\001\001\000\004\121" +
    "\u0247\001\001\000\022\015\u020d\041\221\043\u020f\044\216" +
    "\046\232\050\u0210\101\u0248\114\u0212\001\001\000\002\001" +
    "\001\000\022\015\u020d\041\221\043\u020f\044\216\046\232" +
    "\050\u0210\101\u024a\114\u0212\001\001\000\002\001\001\000" +
    "\004\121\u0252\001\001\000\004\121\u0250\001\001\000\004" +
    "\121\u024e\001\001\000\022\015\222\041\221\043\225\044" +
    "\216\046\232\050\226\065\u024f\114\231\001\001\000\002" +
    "\001\001\000\022\015\222\041\221\043\225\044\216\046" +
    "\232\050\226\065\u0251\114\231\001\001\000\002\001\001" +
    "\000\022\015\222\041\221\043\225\044\216\046\232\050" +
    "\226\065\u0253\114\231\001\001\000\002\001\001\000\012" +
    "\024\304\051\303\113\305\115\u0288\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u026e" +
    "\001\001\000\020\017\u0260\024\u025a\050\u025d\113\u025c\114" +
    "\u025e\123\170\124\u025f\001\001\000\004\121\u026c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0267\001" +
    "\001\000\002\001\001\000\004\121\u0266\001\001\000\004" +
    "\121\u0265\001\001\000\004\121\u0264\001\001\000\014\024" +
    "\304\113\305\115\u0258\121\u0263\122\u0256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\304\113\305\115\u0258\122\u0270\001\001\000\002" +
    "\001\001\000\010\024\304\113\305\115\u0271\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0274\001\001" +
    "\000\012\024\304\113\305\115\u0258\122\u0275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\u027e\024\u0279\050\u027b\113\u027a\114" +
    "\u027c\123\170\124\u027d\001\001\000\004\121\u0287\001\001" +
    "\000\004\121\u0286\001\001\000\004\121\u0285\001\001\000" +
    "\002\001\001\000\004\121\u0284\001\001\000\004\121\u0283" +
    "\001\001\000\004\121\u0282\001\001\000\014\024\304\113" +
    "\305\115\u0258\121\u0281\122\u0256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0274\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\201\050\205\057\202\061\210" +
    "\062\174\064\176\067\u028d\114\207\001\001\000\002\001" +
    "\001\000\022\015\201\050\205\057\202\061\210\062\174" +
    "\064\176\067\u028f\114\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u02a0\001\001\000\022\016\u0297" +
    "\017\u0299\024\u0293\050\u0295\113\u0294\114\u0296\123\170\124" +
    "\u0298\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u029f\001\001\000\002\001\001\000\004\121\u029e\001" +
    "\001\000\002\001\001\000\004\121\u029d\001\001\000\014" +
    "\024\304\113\305\115\u0258\121\u029c\122\u0256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u02a2\001\001\000" +
    "\022\016\u02a5\017\u02a6\024\u0293\050\u02a3\113\u0294\114\u02a4" +
    "\123\170\124\u0298\001\001\000\002\001\001\000\004\121" +
    "\u02ab\001\001\000\002\001\001\000\004\121\u02aa\001\001" +
    "\000\004\121\u02a9\001\001\000\014\024\304\113\305\115" +
    "\u0258\121\u02a8\122\u0256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\270" +
    "\023\u02b1\024\264\050\267\113\265\123\170\001\001\000" +
    "\004\121\u02b5\001\001\000\002\001\001\000\004\121\u02b3" +
    "\001\001\000\022\015\201\050\205\057\202\061\210\062" +
    "\174\064\176\067\u02b4\114\207\001\001\000\002\001\001" +
    "\000\022\015\201\050\205\057\202\061\210\062\174\064" +
    "\176\067\u02b6\114\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u02b9\001\001\000\022\015\201\050" +
    "\205\057\202\061\210\062\174\064\176\067\u02ba\114\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u02bd\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u02c0\001\001\000\022\015\u02c2\050\u02c4\057\202\061" +
    "\u02c8\062\174\064\176\103\u02c7\114\u02c5\001\001\000\002" +
    "\001\001\000\022\015\u02c2\050\u02c4\057\202\061\u02c8\062" +
    "\174\064\176\103\u0319\114\u02c5\001\001\000\002\001\001" +
    "\000\004\121\u02e8\001\001\000\022\015\u02c2\050\u02c4\057" +
    "\202\061\u02c8\062\174\064\176\103\u02e7\114\u02c5\001\001" +
    "\000\002\001\001\000\010\063\u02cc\112\u02cd\117\u02ca\001" +
    "\001\000\022\015\u02c2\050\u02c4\057\202\061\u02c8\062\174" +
    "\064\176\103\u02c9\114\u02c5\001\001\000\002\001\001\000" +
    "\016\017\167\024\162\030\u02de\050\166\113\164\123\170" +
    "\001\001\000\004\121\u02d9\001\001\000\004\121\u02d4\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u02d0" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u02d3\001\001\000\002\001\001\000\022\015\u02c2\050\u02c4" +
    "\057\202\061\u02c8\062\174\064\176\103\u02d5\114\u02c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u02d8" +
    "\001\001\000\002\001\001\000\022\015\u02c2\050\u02c4\057" +
    "\202\061\u02c8\062\174\064\176\103\u02da\114\u02c5\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u02dd\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u02e0" +
    "\001\001\000\022\015\u02c2\050\u02c4\057\202\061\u02c8\062" +
    "\174\064\176\103\u02e1\114\u02c5\001\001\000\010\063\u02e3" +
    "\112\u02e4\117\u02ca\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u02c2\050\u02c4\057\202" +
    "\061\u02c8\062\174\064\176\103\u02e6\114\u02c5\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\u02eb\050\u02ed" +
    "\054\u02f0\055\150\057\141\066\147\102\u02e9\114\u02ee\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u02eb" +
    "\050\u02ed\054\u02f0\055\150\057\141\066\147\102\u0306\114" +
    "\u02ee\001\001\000\002\001\001\000\004\121\u02f5\001\001" +
    "\000\022\015\u02eb\050\u02ed\054\u02f0\055\150\057\141\066" +
    "\147\102\u02f4\114\u02ee\001\001\000\002\001\001\000\022" +
    "\015\u02eb\050\u02ed\054\u02f0\055\150\057\141\066\147\102" +
    "\u02f1\114\u02ee\001\001\000\002\001\001\000\022\015\u02eb" +
    "\050\u02ed\054\u02f0\055\150\057\141\066\147\102\u02f3\114" +
    "\u02ee\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u02eb\050\u02ed\054\u02f0\055\150\057\141\066\147\102" +
    "\u02f6\114\u02ee\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\270\023" +
    "\u02fc\024\264\050\267\113\265\123\170\001\001\000\004" +
    "\121\u0300\001\001\000\002\001\001\000\004\121\u02fe\001" +
    "\001\000\022\015\u02eb\050\u02ed\054\u02f0\055\150\057\141" +
    "\066\147\102\u02ff\114\u02ee\001\001\000\002\001\001\000" +
    "\022\015\u02eb\050\u02ed\054\u02f0\055\150\057\141\066\147" +
    "\102\u0301\114\u02ee\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0304\001\001\000\022\015\u02eb\050\u02ed" +
    "\054\u02f0\055\150\057\141\066\147\102\u0305\114\u02ee\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0308" +
    "\001\001\000\022\015\u02eb\050\u02ed\054\u02f0\055\150\057" +
    "\141\066\147\102\u0309\114\u02ee\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\270\023\u030f\024\264\050\267\113\265\123\170" +
    "\001\001\000\004\121\u0313\001\001\000\002\001\001\000" +
    "\004\121\u0311\001\001\000\022\015\u02c2\050\u02c4\057\202" +
    "\061\u02c8\062\174\064\176\103\u0312\114\u02c5\001\001\000" +
    "\002\001\001\000\022\015\u02c2\050\u02c4\057\202\061\u02c8" +
    "\062\174\064\176\103\u0314\114\u02c5\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0317\001\001\000\022" +
    "\015\u02c2\050\u02c4\057\202\061\u02c8\062\174\064\176\103" +
    "\u0318\114\u02c5\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u031e\001\001\000\004\121\u031c\001\001\000" +
    "\022\015\u02c2\050\u02c4\057\202\061\u02c8\062\174\064\176" +
    "\103\u031d\114\u02c5\001\001\000\002\001\001\000\022\015" +
    "\u02c2\050\u02c4\057\202\061\u02c8\062\174\064\176\103\u031f" +
    "\114\u02c5\001\001\000\002\001\001\000\004\121\u0324\001" +
    "\001\000\004\121\u0322\001\001\000\022\015\201\050\205" +
    "\057\202\061\210\062\174\064\176\067\u0323\114\207\001" +
    "\001\000\002\001\001\000\022\015\201\050\205\057\202" +
    "\061\210\062\174\064\176\067\u0325\114\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\u032d\024\u032a\050\u032c\113\u032b\123" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u0335\024\u0332\050\u0334" +
    "\113\u0333\123\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\u033a\024\u0338\050\267\113\u0339\123\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\u0340\024\u033d\050\u033f\113" +
    "\u033e\123\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u0346\024\u0343\050\u0345\113\u0344\123\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u0357\001\001" +
    "\000\004\020\347\001\001\000\002\001\001\000\014\017" +
    "\u034d\020\u034c\050\267\113\327\123\u034e\001\001\000\012" +
    "\017\u0350\050\267\113\327\123\u034f\001\001\000\002\001" +
    "\001\000\004\020\347\001\001\000\004\020\347\001\001" +
    "\000\002\001\001\000\014\017\u0354\020\u0352\050\267\113" +
    "\327\123\u0353\001\001\000\012\017\u0356\050\267\113\327" +
    "\123\u0355\001\001\000\004\020\347\001\001\000\002\001" +
    "\001\000\004\020\347\001\001\000\002\001\001\000\014" +
    "\017\u0106\020\u0104\050\267\113\327\123\u0105\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\u035b\050\144" +
    "\054\151\055\150\057\141\066\147\114\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\u035e\050\144" +
    "\054\151\055\150\057\141\066\147\114\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\113\u0361\001\001" +
    "\000\002\001\001\000\004\113\u0363\001\001\000\002\001" +
    "\001\000\004\113\u0365\001\001\000\004\121\u0366\001\001" +
    "\000\022\015\u0368\050\u036a\057\202\060\u036c\061\u036e\062" +
    "\174\064\176\114\u036b\001\001\000\002\001\001\000\022" +
    "\015\u0368\050\u036a\057\202\060\u0387\061\u036e\062\174\064" +
    "\176\114\u036b\001\001\000\002\001\001\000\004\121\u0376" +
    "\001\001\000\022\015\u0368\050\u036a\057\202\060\u0375\061" +
    "\u036e\062\174\064\176\114\u036b\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0368\050\u036a\057\202\060" +
    "\u036f\061\u036e\062\174\064\176\114\u036b\001\001\000\002" +
    "\001\001\000\022\015\u0368\050\u036a\057\202\060\u0371\061" +
    "\u036e\062\174\064\176\114\u036b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0374\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u0368\050\u036a\057\202" +
    "\060\u0377\061\u036e\062\174\064\176\114\u036b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\270\023\u037d\024\264\050\267\113" +
    "\265\123\170\001\001\000\004\121\u0381\001\001\000\002" +
    "\001\001\000\004\121\u037f\001\001\000\022\015\u0368\050" +
    "\u036a\057\202\060\u0380\061\u036e\062\174\064\176\114\u036b" +
    "\001\001\000\002\001\001\000\022\015\u0368\050\u036a\057" +
    "\202\060\u0382\061\u036e\062\174\064\176\114\u036b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0385\001" +
    "\001\000\022\015\u0368\050\u036a\057\202\060\u0386\061\u036e" +
    "\062\174\064\176\114\u036b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u038c\001\001\000\004\121\u038a" +
    "\001\001\000\022\015\u0368\050\u036a\057\202\060\u038b\061" +
    "\u036e\062\174\064\176\114\u036b\001\001\000\002\001\001" +
    "\000\022\015\u0368\050\u036a\057\202\060\u038d\061\u036e\062" +
    "\174\064\176\114\u036b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\270\023\u0393\024\264\050\267\113\265\123\170\001\001" +
    "\000\004\121\u0397\001\001\000\002\001\001\000\004\121" +
    "\u0395\001\001\000\020\013\u0396\050\144\054\151\055\150" +
    "\057\141\066\147\114\145\001\001\000\002\001\001\000" +
    "\020\013\u0398\050\144\054\151\055\150\057\141\066\147" +
    "\114\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u039b\001\001\000\020\013\u039c\050\144\054\151" +
    "\055\150\057\141\066\147\114\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u039f\001\001\000\022" +
    "\015\u02eb\050\u02ed\054\u02f0\055\150\057\141\066\147\102" +
    "\u03a0\114\u02ee\001\001\000\010\056\u03a4\111\u03a3\117\u03a1" +
    "\001\001\000\016\017\167\024\162\030\u03b5\050\166\113" +
    "\164\123\170\001\001\000\004\121\u03b0\001\001\000\002" +
    "\001\001\000\004\121\u03a8\001\001\000\002\001\001\000" +
    "\004\121\u03a7\001\001\000\002\001\001\000\022\015\u02eb" +
    "\050\u02ed\054\u02f0\055\150\057\141\066\147\102\u03a9\114" +
    "\u02ee\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u03ac\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u03af\001\001\000\002\001\001\000\022\015\u02eb" +
    "\050\u02ed\054\u02f0\055\150\057\141\066\147\102\u03b1\114" +
    "\u02ee\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u03b4\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u03b7\001\001\000\022\015\u02eb\050\u02ed\054\u02f0" +
    "\055\150\057\141\066\147\102\u03b8\114\u02ee\001\001\000" +
    "\010\056\u03bb\111\u03ba\117\u03a1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u03c3\001\001\000" +
    "\020\013\u03c4\050\144\054\151\055\150\057\141\066\147" +
    "\114\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u03c7\001\001\000\002\001\001\000\004\011\u03c9" +
    "\001\001\000\002\001\001\000\004\011\u03cb\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\015\u03d0\022\u03d1\025\u03da\026\u03dc\032\u03d2\041\u03d8\050" +
    "\u03d3\114\u03cf\126\u03d4\001\001\000\024\015\u03d0\022\u0444" +
    "\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126" +
    "\u03d4\001\001\000\024\015\u03d0\022\u0443\025\u03da\026\u03dc" +
    "\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000" +
    "\004\127\u0442\001\001\000\002\001\001\000\004\121\u0440" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\127" +
    "\u042f\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\167\024\162\030\u03ed\050\166\113\164\123\170\001" +
    "\001\000\024\015\u03d0\022\u03ec\025\u03da\026\u03dc\032\u03d2" +
    "\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\270\023\u03e2\024\264\050" +
    "\267\113\265\123\170\001\001\000\004\121\u03e6\001\001" +
    "\000\002\001\001\000\004\121\u03e4\001\001\000\024\015" +
    "\u03d0\022\u03e5\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3" +
    "\114\u03cf\126\u03d4\001\001\000\002\001\001\000\024\015" +
    "\u03d0\022\u03e7\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3" +
    "\114\u03cf\126\u03d4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u03ea\001\001\000\024\015\u03d0\022\u03eb" +
    "\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126" +
    "\u03d4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u03ef\001\001\000\022\015\u03f1\025" +
    "\u03f7\026\u03dc\032\u03d2\041\u03d8\050\u03f4\077\u03f3\114\u03f6" +
    "\001\001\000\002\001\001\000\022\015\u03f1\025\u03f7\026" +
    "\u03dc\032\u03d2\041\u03d8\050\u03f4\077\u0429\114\u03f6\001\001" +
    "\000\002\001\001\000\010\027\u0401\107\u03ff\117\u0400\001" +
    "\001\000\004\121\u03fd\001\001\000\002\001\001\000\022" +
    "\015\u03f1\025\u03f7\026\u03dc\032\u03d2\041\u03d8\050\u03f4\077" +
    "\u03fa\114\u03f6\001\001\000\002\001\001\000\022\015\u03f1" +
    "\025\u03f7\026\u03dc\032\u03d2\041\u03d8\050\u03f4\077\u03f9\114" +
    "\u03f6\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u03f1\025\u03f7\026\u03dc\032\u03d2\041\u03d8\050\u03f4\077" +
    "\u03fc\114\u03f6\001\001\000\002\001\001\000\022\015\u03f1" +
    "\025\u03f7\026\u03dc\032\u03d2\041\u03d8\050\u03f4\077\u03fe\114" +
    "\u03f6\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\167\024\162\030\u0410\050\166\113\164\123\170\001" +
    "\001\000\004\121\u040b\001\001\000\004\121\u0406\001\001" +
    "\000\002\001\001\000\004\121\u0405\001\001\000\002\001" +
    "\001\000\022\015\u03f1\025\u03f7\026\u03dc\032\u03d2\041\u03d8" +
    "\050\u03f4\077\u0407\114\u03f6\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u040a\001\001\000\002\001\001" +
    "\000\022\015\u03f1\025\u03f7\026\u03dc\032\u03d2\041\u03d8\050" +
    "\u03f4\077\u040c\114\u03f6\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u040f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0412\001\001\000\022\015\u03f1" +
    "\025\u03f7\026\u03dc\032\u03d2\041\u03d8\050\u03f4\077\u0413\114" +
    "\u03f6\001\001\000\010\027\u0415\107\u0414\117\u0400\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0419\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\270\023\u041f\024\264\050\267\113\265\123\170" +
    "\001\001\000\004\121\u0423\001\001\000\002\001\001\000" +
    "\004\121\u0421\001\001\000\022\015\u03f1\025\u03f7\026\u03dc" +
    "\032\u03d2\041\u03d8\050\u03f4\077\u0422\114\u03f6\001\001\000" +
    "\002\001\001\000\022\015\u03f1\025\u03f7\026\u03dc\032\u03d2" +
    "\041\u03d8\050\u03f4\077\u0424\114\u03f6\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0427\001\001\000\022" +
    "\015\u03f1\025\u03f7\026\u03dc\032\u03d2\041\u03d8\050\u03f4\077" +
    "\u0428\114\u03f6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u042b\001\001\000\022\015\u03f1\025\u03f7\026" +
    "\u03dc\032\u03d2\041\u03d8\050\u03f4\077\u042c\114\u03f6\001\001" +
    "\000\002\001\001\000\024\015\u03d0\022\u042e\025\u03da\026" +
    "\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0438\001" +
    "\001\000\024\015\u03d0\022\u0437\025\u03da\026\u03dc\032\u03d2" +
    "\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000\002\001" +
    "\001\000\004\121\u0436\001\001\000\004\121\u0435\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\u03d0\022\u0439\025\u03da\026\u03dc\032\u03d2\041\u03d8" +
    "\050\u03d3\114\u03cf\126\u03d4\001\001\000\002\001\001\000" +
    "\004\121\u043e\001\001\000\004\121\u043c\001\001\000\024" +
    "\015\u03d0\022\u043d\025\u03da\026\u03dc\032\u03d2\041\u03d8\050" +
    "\u03d3\114\u03cf\126\u03d4\001\001\000\002\001\001\000\024" +
    "\015\u03d0\022\u043f\025\u03da\026\u03dc\032\u03d2\041\u03d8\050" +
    "\u03d3\114\u03cf\126\u03d4\001\001\000\002\001\001\000\024" +
    "\015\u03d0\022\u0441\025\u03da\026\u03dc\032\u03d2\041\u03d8\050" +
    "\u03d3\114\u03cf\126\u03d4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\u03d0\022\u0446\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3" +
    "\114\u03cf\126\u03d4\001\001\000\004\127\u0447\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\u03d0\022\u044c\025\u03da\026\u03dc\032" +
    "\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000\004" +
    "\127\u044d\001\001\000\002\001\001\000\024\015\u03d0\022" +
    "\u044f\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf" +
    "\126\u03d4\001\001\000\004\127\u0450\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\023\021\u0454\053\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\027\010\023\021\u0457\053\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u047f\001\001\000\004\011\u0463\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u046d\001\001\000\004\012\u0468\001\001" +
    "\000\004\121\u0469\001\001\000\020\013\u046a\050\144\054" +
    "\151\055\150\057\141\066\147\114\145\001\001\000\004" +
    "\131\u046b\001\001\000\002\001\001\000\004\121\u0471\001" +
    "\001\000\004\121\u046e\001\001\000\020\013\u046f\050\144" +
    "\054\151\055\150\057\141\066\147\114\145\001\001\000" +
    "\004\131\u0470\001\001\000\002\001\001\000\020\013\u0472" +
    "\050\144\054\151\055\150\057\141\066\147\114\145\001" +
    "\001\000\004\131\u0473\001\001\000\002\001\001\000\004" +
    "\012\u0475\001\001\000\004\121\u0476\001\001\000\020\013" +
    "\u0477\050\144\054\151\055\150\057\141\066\147\114\145" +
    "\001\001\000\004\131\u0478\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u047b\001\001\000\004\121\u047c" +
    "\001\001\000\020\013\u047d\050\144\054\151\055\150\057" +
    "\141\066\147\114\145\001\001\000\004\131\u047e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0482\001\001\000\004\121\u0483\001\001\000\020" +
    "\013\u0484\050\144\054\151\055\150\057\141\066\147\114" +
    "\145\001\001\000\004\131\u0485\001\001\000\002\001\001" +
    "\000\004\011\u0487\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u048a\001\001\000\004\121\u048b\001\001" +
    "\000\020\013\u048c\050\144\054\151\055\150\057\141\066" +
    "\147\114\145\001\001\000\004\131\u048d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0490\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0493\001\001" +
    "\000\004\121\u0494\001\001\000\020\013\u0495\050\144\054" +
    "\151\055\150\057\141\066\147\114\145\001\001\000\004" +
    "\131\u0496\001\001\000\002\001\001\000\012\007\027\010" +
    "\023\021\u0498\053\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u04bc\001\001\000\004\011\u049f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\u03d0\022\u04a5" +
    "\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126" +
    "\u03d4\001\001\000\004\127\u04a6\001\001\000\002\001\001" +
    "\000\024\015\u03d0\022\u04a8\025\u03da\026\u03dc\032\u03d2\041" +
    "\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000\004\127\u04a9" +
    "\001\001\000\002\001\001\000\024\015\u03d0\022\u04ab\025" +
    "\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4" +
    "\001\001\000\004\127\u04ac\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\u03d0\022\u04af\025\u03da\026\u03dc" +
    "\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000" +
    "\004\127\u04b0\001\001\000\002\001\001\000\024\015\u03d0" +
    "\022\u04b2\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114" +
    "\u03cf\126\u03d4\001\001\000\004\127\u04b3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\u03d0\022\u04b7\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3" +
    "\114\u03cf\126\u03d4\001\001\000\004\127\u04b8\001\001\000" +
    "\002\001\001\000\024\015\u03d0\022\u04ba\025\u03da\026\u03dc" +
    "\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000" +
    "\004\127\u04bb\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\015\u03d0\022" +
    "\u04c0\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf" +
    "\126\u03d4\001\001\000\004\127\u04c1\001\001\000\002\001" +
    "\001\000\024\015\u03d0\022\u04c3\025\u03da\026\u03dc\032\u03d2" +
    "\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000\004\127" +
    "\u04c4\001\001\000\002\001\001\000\004\011\u04c6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\u03d0\022\u04ca\025\u03da\026\u03dc\032\u03d2\041\u03d8" +
    "\050\u03d3\114\u03cf\126\u03d4\001\001\000\004\127\u04cb\001" +
    "\001\000\002\001\001\000\024\015\u03d0\022\u04cd\025\u03da" +
    "\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001" +
    "\001\000\004\127\u04ce\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\u03d0" +
    "\022\u04d6\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114" +
    "\u03cf\126\u03d4\001\001\000\004\127\u04d7\001\001\000\002" +
    "\001\001\000\024\015\u03d0\022\u04d9\025\u03da\026\u03dc\032" +
    "\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001\001\000\004" +
    "\127\u04da\001\001\000\002\001\001\000\024\015\u03d0\022" +
    "\u04dc\025\u03da\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf" +
    "\126\u03d4\001\001\000\004\127\u04dd\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\u03d0\022\u04e0\025\u03da" +
    "\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001" +
    "\001\000\004\127\u04e1\001\001\000\002\001\001\000\024" +
    "\015\u03d0\022\u04e3\025\u03da\026\u03dc\032\u03d2\041\u03d8\050" +
    "\u03d3\114\u03cf\126\u03d4\001\001\000\004\127\u04e4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\u03d0\022\u04e8\025\u03da\026\u03dc\032\u03d2\041\u03d8" +
    "\050\u03d3\114\u03cf\126\u03d4\001\001\000\004\127\u04e9\001" +
    "\001\000\002\001\001\000\024\015\u03d0\022\u04eb\025\u03da" +
    "\026\u03dc\032\u03d2\041\u03d8\050\u03d3\114\u03cf\126\u03d4\001" +
    "\001\000\004\127\u04ec\001\001\000\002\001\001\000\012" +
    "\007\027\010\023\021\u04ee\053\026\001\001\000\004\130" +
    "\u04ef\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\023\021\u04f8\053\026\001\001\000\004\130\u04f9\001" +
    "\001\000\002\001\001\000\012\007\027\010\023\021\u04fb" +
    "\053\026\001\001\000\004\130\u04fc\001\001\000\002\001" +
    "\001\000\012\007\027\010\023\021\u04fe\053\026\001\001" +
    "\000\004\130\u04ff\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\027\010\023\021\u0502\053\026\001\001" +
    "\000\004\130\u0503\001\001\000\002\001\001\000\012\007" +
    "\027\010\023\021\u0505\053\026\001\001\000\004\130\u0506" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\027\010\023\021\u050a\053\026\001\001" +
    "\000\004\130\u050b\001\001\000\002\001\001\000\012\007" +
    "\027\010\023\021\u050d\053\026\001\001\000\004\130\u050e" +
    "\001\001\000\002\001\001\000\010\002\u0510\003\010\004" +
    "\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol symbol;
    public String token;
    public Symbol irrecuperable;
    ArrayList<String> lista = new ArrayList<String>();

 @Override
    public void syntax_error(Symbol symbol){
        if(symbol.value.toString().startsWith("\n")){symbol.value = " salto de linea ";}
        if(!symbol.value.toString().startsWith("Error irrecuperable")){
        lista.add("Error en la linea: " + (symbol.left+1)  + " ,Columna: " + (symbol.right+1) + ". NO SE ESPARABA UN: " + symbol.value);
        irrecuperable = symbol;
        }
    }
 @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
        token = "Error irrecuperable en la linea: " + (irrecuperable.left+1)  + " ,Columna: " + (irrecuperable.right+1) + ". NO SE ESPARABA UN: " + irrecuperable.value;
    }
    public ArrayList<String> getError(){
        return  lista;
    }

    public String getUnrecovery(){
        return token;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 626: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 625: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 624: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 623: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 622: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 621: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 620: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 619: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 618: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 617: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 616: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 615: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // INFOR_WHILE_FUNCION ::= DECLARACION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // INFOR_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // INIF_WHILE_FUNCION ::= LLAMAR_SUB INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // INIF_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // INIF_WHILE_FUNCION ::= DECLARACION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // INIF_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // INWHILE_FUNCION ::= LLAMAR_SUB INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // INWHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // INWHILE_FUNCION ::= DECLARACION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // INWHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // INWHILE_FOR_FUNCION ::= DECLARACION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // INWHILE_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // INIF_FOR_FUNCION ::= LLAMAR_SUB INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // INIF_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // INIF_FOR_FUNCION ::= DECLARACION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // INIF_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // INFOR_FUNCION ::= LLAMAR_SUB INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // INFOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // INFOR_FUNCION ::= DECLARACION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // INFOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // INIF_FUNCION ::= LLAMAR_SUB INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // INIF_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // INIF_FUNCION ::= DECLARACION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // INIF_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION else_ FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // INFUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // INFUNCION ::= exit function_ FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // INFUNCION ::= LLAMAR_SUB INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // INFUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // PIE_FUNCION ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // PIE_FUNCION ::= error function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // PIE_FUNCION ::= end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as error FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC error TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO error as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // FUNCION_ ::= private_ function_ identificador parentesisA error parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // FUNCION_ ::= private_ function_ identificador error PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // FUNCION_ ::= private_ function_ error parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // FUNCION_ ::= private_ error identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // FUNCION_ ::= error function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // PIE_STRUCT ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // PIE_STRUCT ::= error struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // PIE_STRUCT ::= end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // STRUCT_ ::= Public_ struct_ error FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // STRUCT_ ::= Public_ error identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // STRUCT_ ::= error struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // STRUCT_ ::= Public_ struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // DECLARACIONSENCILLA ::= dim identificador error TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // DECLARACIONSENCILLA ::= dim error as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // DECLARACIONSENCILLA ::= dim identificador as error FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // DECLARACIONSENCILLA ::= dim identificador error TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // DECLARACIONSENCILLA ::= dim error as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // INFOR_WHILE ::= LLAMAR_SUB INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // INFOR_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // INFOR_WHILE ::= DECLARACION INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // INFOR_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE else_ FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INIF_WHILE ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INIF_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INIF_WHILE ::= exit sub FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INIF_WHILE ::= exit do_ FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INIF_WHILE ::= LLAMAR_SUB INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // INIF_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // INIF_WHILE ::= DECLARACION INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INIF_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // INWHILE_MAIN ::= LLAMAR_SUB INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // INWHILE_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // INWHILE_MAIN ::= DECLARACION INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INWHILE_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_MAIN loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // INWHILE_FOR ::= LLAMAR_SUB INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // INWHILE_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INWHILE_FOR ::= DECLARACION INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INWHILE_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR else_ FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // INIF_FOR ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // INIF_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // INIF_FOR ::= exit sub FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INIF_FOR ::= exit for_ FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INIF_FOR ::= LLAMAR_SUB INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INIF_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // INIF_FOR ::= DECLARACION INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // INIF_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INFOR_MAIN ::= LLAMAR_SUB INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INFOR_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INFOR_MAIN ::= DECLARACION INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INFOR_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_MAIN next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INIF ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INIF ::= exit sub FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // INIF ::= LLAMAR_SUB INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INIF ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INIF ::= DECLARACION INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INIF ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF else_ FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TYPEDECLARE ::= READLINE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // READLINE_FUNCION ::= console_ punto readline parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READLINE_FUNCION",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DECLARACION ::= identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION ::= identificador punto identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION ::= dim identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLARACION ::= dim identificador as TYPE_ igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION ::= dim identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACION ::= identificador punto identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION ::= identificador punto identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION ::= identificador punto identificador igual NUMERO FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION ::= identificador punto identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION ::= identificador punto identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACION ::= identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARACION ::= identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION ::= identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECLARACION ::= identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECLARACION ::= identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECLARACION ::= identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DECLARACION ::= identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARACION ::= dim identificador igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACION ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERACION_AR ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERACION_AR ::= OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERADOR_ARITMETICO ::= mod_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERADOR_ARITMETICO ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERADOR_ARITMETICO ::= div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERADOR_ARITMETICO ::= mult 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERADOR_ARITMETICO ::= resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERADOR_ARITMETICO ::= suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION_ARITMETICA ::= parentesisA resta LLAMAR_FUNCION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERANDOS_TYPE ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERANDOS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERANDOS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETROS_SUB ::= PARAMETROS_TYPE coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMETROS_SUB ::= PARAMETROS_TYPE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LLAMAR_SUB ::= identificador error findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LLAMAR_SUB ::= identificador PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PIE_SUB ::= end_ error FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_SUB",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PIE_SUB ::= end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_SUB",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ULTIMO ::= error PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ULTIMO ::= error findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ULTIMO ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ULTIMO ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ULTIMO ::= error sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ULTIMO ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ULTIMO ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ULTIMO ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ULTIMO ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ULTIMO ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ULTIMO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ULTIMO ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INMAIN ::= error sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INMAIN ::= exit error FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INMAIN ::= error findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INMAIN ::= exit sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INMAIN ::= LLAMAR_SUB INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INMAIN ::= DECLARACION INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INMAIN ::= ULTIMO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMENTARIO_ILIMITADO ::= comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMENTARIO_ILIMITADO ::= comentario findelinea COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMENTARIO_ILIMITADO ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FIN_CON_COMENT ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FIN_CON_COMENT ::= findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MAIN ::= sub identificador parentesisA PARAMETRO error comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MAIN ::= sub identificador parentesisA error parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAIN ::= sub identificador error PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MAIN ::= sub error parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MAIN ::= error identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MAIN ::= sub main_ parentesisA parentesisC error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MAIN ::= sub main_ parentesisA error comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MAIN ::= sub main_ error parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MAIN ::= error main_ parentesisA parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MAIN ::= sub main_ parentesisA parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MAIN ::= sub identificador parentesisA PARAMETRO error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MAIN ::= sub identificador parentesisA error parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MAIN ::= sub identificador error PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MAIN ::= sub error parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MAIN ::= error identificador parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MAIN ::= sub main_ parentesisA error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN ::= sub main_ error parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= error main_ parentesisA parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= sub main_ parentesisA parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NEXT_MODULE ::= comentario findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NEXT_MODULE ::= FUNCION_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NEXT_MODULE ::= STRUCT_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PIE_MODULE ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_MODULE",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PIE_MODULE ::= end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_MODULE",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODULE ::= error Module identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODULE ::= Public_ error identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODULE ::= Public_ Module error comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODULE ::= Public_ Module identificador error findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODULE ::= Public_ Module identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODULE ::= error Module identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MODULE ::= Public_ error identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MODULE ::= Public_ Module error findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // UC ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // UC ::= comentario findelinea UC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

