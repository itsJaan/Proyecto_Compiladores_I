
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 16 21:01:56 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 16 21:01:56 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01ab\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\003\005\000\002\003\006\000\002\005\003" +
    "\000\002\005\005\000\002\005\003\000\002\005\005\000" +
    "\002\004\011\000\002\020\003\000\002\020\004\000\002" +
    "\020\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\010\014\000\002\010\014\000\002\021\011" +
    "\000\002\021\004\000\002\021\003\000\002\021\004\000" +
    "\002\021\005\000\002\021\004\000\002\021\012\000\002" +
    "\021\005\000\002\021\004\000\002\021\005\000\002\021" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\006" +
    "\000\002\120\004\000\002\117\003\000\002\117\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\003\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\007\000\002\017\004\000" +
    "\002\017\003\000\002\017\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\004\000\002\024\005\000\002\024\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\026\004\000\002\026\003\000\002\027\005\000\002\015" +
    "\006\000\002\015\010\000\002\015\006\000\002\015\006" +
    "\000\002\015\010\000\002\015\010\000\002\015\006\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\006\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\006\000" +
    "\002\015\010\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\122\003\000\002\122\003\000\002" +
    "\123\004\000\002\123\003\000\002\032\012\000\002\032" +
    "\015\000\002\032\015\000\002\032\013\000\002\103\011" +
    "\000\002\103\004\000\002\103\003\000\002\103\004\000" +
    "\002\103\005\000\002\103\004\000\002\103\012\000\002" +
    "\103\005\000\002\103\005\000\002\103\005\000\002\103" +
    "\006\000\002\103\005\000\002\033\010\000\002\033\010" +
    "\000\002\113\010\000\002\113\007\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\035\004\000\002\035\004\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\017\000\002" +
    "\037\011\000\002\037\004\000\002\037\003\000\002\037" +
    "\012\000\002\037\005\000\002\037\004\000\002\037\005" +
    "\000\002\037\004\000\002\037\004\000\002\037\005\000" +
    "\002\037\006\000\002\037\005\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\104\011\000\002\104" +
    "\004\000\002\104\003\000\002\104\012\000\002\104\005" +
    "\000\002\104\004\000\002\104\005\000\002\104\004\000" +
    "\002\104\004\000\002\104\005\000\002\104\006\000\002" +
    "\104\006\000\002\104\005\000\002\104\005\000\002\041" +
    "\012\000\002\041\015\000\002\041\015\000\002\041\013" +
    "\000\002\042\010\000\002\042\010\000\002\114\007\000" +
    "\002\114\010\000\002\043\011\000\002\044\011\000\002" +
    "\044\004\000\002\044\003\000\002\044\004\000\002\044" +
    "\005\000\002\044\012\000\002\044\005\000\002\044\004" +
    "\000\002\044\004\000\002\044\005\000\002\044\006\000" +
    "\002\044\006\000\002\044\005\000\002\044\005\000\002" +
    "\045\011\000\002\046\011\000\002\046\004\000\002\046" +
    "\003\000\002\046\004\000\002\046\005\000\002\046\012" +
    "\000\002\046\005\000\002\046\004\000\002\046\004\000" +
    "\002\046\005\000\002\046\006\000\002\046\005\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\105" +
    "\011\000\002\105\004\000\002\105\003\000\002\105\004" +
    "\000\002\105\005\000\002\105\012\000\002\105\005\000" +
    "\002\105\004\000\002\105\004\000\002\105\005\000\002" +
    "\105\006\000\002\105\006\000\002\105\005\000\002\105" +
    "\005\000\002\050\012\000\002\050\015\000\002\050\015" +
    "\000\002\050\013\000\002\051\010\000\002\051\010\000" +
    "\002\112\007\000\002\112\010\000\002\052\017\000\002" +
    "\053\011\000\002\053\004\000\002\053\004\000\002\053" +
    "\005\000\002\053\003\000\002\053\012\000\002\053\005" +
    "\000\002\053\004\000\002\053\004\000\002\053\005\000" +
    "\002\053\006\000\002\053\006\000\002\053\005\000\002" +
    "\053\005\000\002\054\005\000\002\054\005\000\002\055" +
    "\004\000\002\055\005\000\002\055\007\000\002\055\006" +
    "\000\002\121\003\000\002\121\003\000\002\121\003\000" +
    "\002\056\007\000\002\056\010\000\002\007\011\000\002" +
    "\057\016\000\002\011\005\000\002\011\007\000\002\011" +
    "\010\000\002\011\006\000\002\013\011\000\002\013\004" +
    "\000\002\013\003\000\002\013\004\000\002\013\005\000" +
    "\002\013\004\000\002\013\012\000\002\013\005\000\002" +
    "\013\004\000\002\013\005\000\002\013\006\000\002\013" +
    "\005\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\061\012\000\002\061\015\000\002\061\015\000" +
    "\002\061\013\000\002\106\011\000\002\106\004\000\002" +
    "\106\004\000\002\106\005\000\002\106\003\000\002\106" +
    "\012\000\002\106\005\000\002\106\004\000\002\106\004" +
    "\000\002\106\005\000\002\106\006\000\002\106\005\000" +
    "\002\062\010\000\002\062\010\000\002\115\007\000\002" +
    "\115\010\000\002\063\017\000\002\064\011\000\002\064" +
    "\004\000\002\064\004\000\002\064\005\000\002\064\003" +
    "\000\002\064\012\000\002\064\005\000\002\064\004\000" +
    "\002\064\004\000\002\064\005\000\002\064\006\000\002" +
    "\064\005\000\002\064\006\000\002\064\005\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\066\012" +
    "\000\002\066\015\000\002\066\015\000\002\066\013\000" +
    "\002\107\011\000\002\107\004\000\002\107\004\000\002" +
    "\107\005\000\002\107\003\000\002\107\012\000\002\107" +
    "\005\000\002\107\004\000\002\107\004\000\002\107\005" +
    "\000\002\107\006\000\002\107\005\000\002\107\006\000" +
    "\002\107\005\000\002\067\010\000\002\067\010\000\002" +
    "\116\007\000\002\116\010\000\002\070\011\000\002\071" +
    "\011\000\002\071\004\000\002\071\003\000\002\071\004" +
    "\000\002\071\005\000\002\071\012\000\002\071\005\000" +
    "\002\071\004\000\002\071\004\000\002\071\005\000\002" +
    "\071\006\000\002\071\006\000\002\071\006\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\072\011" +
    "\000\002\073\011\000\002\073\004\000\002\073\004\000" +
    "\002\073\005\000\002\073\003\000\002\073\012\000\002" +
    "\073\005\000\002\073\004\000\002\073\004\000\002\073" +
    "\005\000\002\073\006\000\002\073\006\000\002\073\005" +
    "\000\002\073\005\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\075\010\000\002\075\012\000\002" +
    "\075\013\000\002\075\010\000\002\075\013\000\002\110" +
    "\011\000\002\110\004\000\002\110\004\000\002\110\005" +
    "\000\002\110\003\000\002\110\012\000\002\110\005\000" +
    "\002\110\004\000\002\110\004\000\002\110\005\000\002" +
    "\110\006\000\002\110\006\000\002\110\005\000\002\110" +
    "\005\000\002\100\010\000\002\100\010\000\002\111\007" +
    "\000\002\111\010\000\002\076\017\000\002\077\011\000" +
    "\002\077\004\000\002\077\003\000\002\077\004\000\002" +
    "\077\005\000\002\077\012\000\002\077\005\000\002\077" +
    "\004\000\002\077\004\000\002\077\005\000\002\077\006" +
    "\000\002\077\006\000\002\077\006\000\002\077\005\000" +
    "\002\077\005\000\002\077\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u034a\000\004\004\004\001\002\000\006\017\u0346\051" +
    "\u0344\001\002\000\004\002\u0343\001\002\000\004\006\007" +
    "\001\002\000\004\007\012\001\002\000\006\002\000\100" +
    "\011\001\002\000\004\002\uffff\001\002\000\004\051\013" +
    "\001\002\000\004\100\014\001\002\000\006\006\015\033" +
    "\017\001\002\000\006\010\027\025\u0337\001\002\000\006" +
    "\013\ufff7\100\u0335\001\002\000\004\030\u0230\001\002\000" +
    "\006\006\023\100\u022e\001\002\000\004\013\u022b\001\002" +
    "\000\006\006\023\100\025\001\002\000\004\010\027\001" +
    "\002\000\004\013\ufff5\001\002\000\006\006\015\033\017" +
    "\001\002\000\004\013\ufff3\001\002\000\006\051\031\103" +
    "\030\001\002\000\004\073\u0224\001\002\000\004\073\032" +
    "\001\002\000\006\051\035\106\033\001\002\000\004\051" +
    "\u021f\001\002\000\004\074\047\001\002\000\004\022\036" +
    "\001\002\000\014\014\042\015\041\016\044\046\043\051" +
    "\040\001\002\000\006\074\ufef0\104\045\001\002\000\012" +
    "\054\uffa5\074\uffa5\100\uffa5\104\uffa5\001\002\000\012\054" +
    "\uffa8\074\uffa8\100\uffa8\104\uffa8\001\002\000\012\054\uffa7" +
    "\074\uffa7\100\uffa7\104\uffa7\001\002\000\012\054\uffa6\074" +
    "\uffa6\100\uffa6\104\uffa6\001\002\000\012\054\uffa9\074\uffa9" +
    "\100\uffa9\104\uffa9\001\002\000\006\051\035\106\033\001" +
    "\002\000\004\074\ufeef\001\002\000\004\100\050\001\002" +
    "\000\022\005\053\011\061\012\060\020\057\023\070\035" +
    "\052\051\067\102\063\001\002\000\032\005\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\020\uff9f\023\uff9f\027\uff9f\035\uff9f\051" +
    "\uff9f\100\uff9f\102\uff9f\107\uff9f\001\002\000\004\010\u021c" +
    "\001\002\000\016\042\076\043\101\051\106\060\074\065" +
    "\103\073\075\001\002\000\032\005\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\020\uff9d\023\uff9d\027\uff9d\035\uff9d\051\uff9d\100" +
    "\uff9d\102\uff9d\107\uff9d\001\002\000\004\100\u01e3\001\002" +
    "\000\032\005\uff9e\011\uff9e\012\uff9e\013\uff9e\020\uff9e\023" +
    "\uff9e\027\uff9e\035\uff9e\051\uff9e\100\uff9e\102\uff9e\107\uff9e" +
    "\001\002\000\004\070\u01dc\001\002\000\004\051\u01cc\001" +
    "\002\000\004\051\u01a9\001\002\000\004\100\u01a7\001\002" +
    "\000\004\100\u01a5\001\002\000\004\100\u01a3\001\002\000" +
    "\024\005\053\011\061\012\060\013\uffed\020\057\023\070" +
    "\035\052\051\067\102\063\001\002\000\004\013\u01a0\001" +
    "\002\000\022\042\076\043\101\051\140\054\127\060\074" +
    "\065\136\070\126\073\u019c\001\002\000\006\024\072\036" +
    "\073\001\002\000\016\042\076\043\101\051\106\060\074" +
    "\065\103\073\075\001\002\000\016\042\uff9b\043\uff9b\051" +
    "\uff9b\060\uff9b\065\uff9b\073\uff9b\001\002\000\016\042\uff9c" +
    "\043\uff9c\051\uff9c\060\uff9c\065\uff9c\073\uff9c\001\002\000" +
    "\004\065\u019b\001\002\000\006\065\u0198\073\075\001\002" +
    "\000\022\026\uffa1\054\uffa1\055\uffa1\056\uffa1\074\uffa1\100" +
    "\uffa1\101\uffa1\104\uffa1\001\002\000\010\054\u015d\055\u015f" +
    "\056\u015e\001\002\000\036\026\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\u0176\060\u0175\061\u0177\062\u0174\063\u0173\073\075" +
    "\074\uffd1\100\uffd1\101\uffd1\110\u017b\001\002\000\022\026" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\074\uffa0\100\uffa0\101\uffa0" +
    "\104\uffa0\001\002\000\010\054\u015d\055\u015f\056\u015e\001" +
    "\002\000\036\026\uffe0\054\uffe0\055\uffe0\056\uffe0\057\u0176" +
    "\060\u0175\061\u0177\062\u0174\063\u0173\073\075\074\uffe0\100" +
    "\uffe0\101\uffe0\110\u017b\001\002\000\010\054\u015d\055\u015f" +
    "\056\u015e\001\002\000\010\054\u015d\055\u015f\056\u015e\001" +
    "\002\000\012\054\u015d\055\u015f\056\u015e\073\130\001\002" +
    "\000\004\100\110\001\002\000\022\005\113\011\122\012" +
    "\060\020\116\023\070\035\112\051\125\102\123\001\002" +
    "\000\032\005\uff25\011\uff25\012\uff25\013\uff25\020\uff25\023" +
    "\uff25\027\uff25\034\uff25\035\uff25\051\uff25\102\uff25\107\uff25" +
    "\001\002\000\004\023\u015a\001\002\000\016\042\076\043" +
    "\101\051\106\060\074\065\103\073\075\001\002\000\032" +
    "\005\uff23\011\uff23\012\uff23\013\uff23\020\uff23\023\uff23\027" +
    "\uff23\034\uff23\035\uff23\051\uff23\102\uff23\107\uff23\001\002" +
    "\000\004\100\u011f\001\002\000\004\070\u0118\001\002\000" +
    "\004\034\u0116\001\002\000\024\005\113\011\122\012\060" +
    "\020\116\023\070\034\uff2f\035\112\051\125\102\123\001" +
    "\002\000\004\100\u0113\001\002\000\004\051\172\001\002" +
    "\000\004\100\170\001\002\000\032\005\uff24\011\uff24\012" +
    "\uff24\013\uff24\020\uff24\023\uff24\027\uff24\034\uff24\035\uff24" +
    "\051\uff24\102\uff24\107\uff24\001\002\000\010\054\127\070" +
    "\126\073\130\001\002\000\004\051\160\001\002\000\020" +
    "\042\076\043\101\051\155\060\074\064\156\065\103\073" +
    "\075\001\002\000\020\042\076\043\101\051\140\060\074" +
    "\065\136\073\132\074\131\001\002\000\014\026\ufefd\054" +
    "\ufefd\055\ufefd\056\ufefd\100\ufefd\001\002\000\014\042\076" +
    "\043\101\051\140\060\074\065\136\001\002\000\014\026" +
    "\ufefc\054\ufefc\055\ufefc\056\ufefc\100\ufefc\001\002\000\006" +
    "\074\ufef6\104\ufef6\001\002\000\006\074\ufef5\104\ufef5\001" +
    "\002\000\014\037\uffe0\047\uffe0\074\uffe0\100\uffe0\104\uffe0" +
    "\001\002\000\006\074\142\104\141\001\002\000\006\074" +
    "\ufef7\104\ufef7\001\002\000\016\042\076\043\101\051\140" +
    "\060\074\065\136\073\132\001\002\000\014\026\ufefb\054" +
    "\ufefb\055\ufefb\056\ufefb\100\ufefb\001\002\000\014\026\ufefa" +
    "\054\ufefa\055\ufefa\056\ufefa\100\ufefa\001\002\000\004\074" +
    "\145\001\002\000\006\074\147\104\146\001\002\000\016" +
    "\042\076\043\101\051\140\060\074\065\136\073\132\001" +
    "\002\000\014\026\ufef8\054\ufef8\055\ufef8\056\ufef8\100\ufef8" +
    "\001\002\000\014\026\ufef9\054\ufef9\055\ufef9\056\ufef9\100" +
    "\ufef9\001\002\000\004\100\uffb3\001\002\000\004\100\uffb4" +
    "\001\002\000\004\100\uffb6\001\002\000\004\100\uffb5\001" +
    "\002\000\006\073\130\100\uffb7\001\002\000\004\100\157" +
    "\001\002\000\004\100\uffb2\001\002\000\004\054\161\001" +
    "\002\000\020\042\076\043\101\051\166\060\074\064\167" +
    "\065\103\073\075\001\002\000\004\100\uffad\001\002\000" +
    "\004\100\uffae\001\002\000\004\100\uffb0\001\002\000\004" +
    "\100\uffaf\001\002\000\006\073\130\100\uffb1\001\002\000" +
    "\004\100\uffac\001\002\000\024\005\113\011\122\012\060" +
    "\020\116\023\070\034\uff2e\035\112\051\125\102\123\001" +
    "\002\000\004\034\uff2d\001\002\000\004\054\173\001\002" +
    "\000\006\060\074\065\136\001\002\000\004\037\175\001" +
    "\002\000\006\060\074\065\136\001\002\000\004\047\177" +
    "\001\002\000\006\060\074\065\136\001\002\000\004\100" +
    "\201\001\002\000\022\005\204\011\061\012\060\020\206" +
    "\023\214\035\203\051\125\102\212\001\002\000\024\005" +
    "\204\011\061\012\060\020\206\023\214\032\uff07\035\203" +
    "\051\125\102\212\001\002\000\006\011\u010d\023\u010c\001" +
    "\002\000\016\042\076\043\101\051\106\060\074\065\103" +
    "\073\075\001\002\000\004\100\317\001\002\000\004\070" +
    "\310\001\002\000\032\005\uff59\011\uff59\012\uff59\013\uff59" +
    "\020\uff59\023\uff59\027\uff59\032\uff59\035\uff59\051\uff59\102" +
    "\uff59\107\uff59\001\002\000\004\100\306\001\002\000\032" +
    "\005\uff5a\011\uff5a\012\uff5a\013\uff5a\020\uff5a\023\uff5a\027" +
    "\uff5a\032\uff5a\035\uff5a\051\uff5a\102\uff5a\107\uff5a\001\002" +
    "\000\004\100\304\001\002\000\004\032\301\001\002\000" +
    "\006\024\072\036\073\001\002\000\032\005\uff58\011\uff58" +
    "\012\uff58\013\uff58\020\uff58\023\uff58\027\uff58\032\uff58\035" +
    "\uff58\051\uff58\102\uff58\107\uff58\001\002\000\016\042\076" +
    "\043\101\051\106\060\074\065\103\073\075\001\002\000" +
    "\004\100\220\001\002\000\022\005\113\011\122\012\060" +
    "\020\223\023\070\035\221\051\125\102\226\001\002\000" +
    "\006\011\274\023\273\001\002\000\004\100\271\001\002" +
    "\000\004\070\237\001\002\000\024\005\113\011\122\012" +
    "\060\020\223\023\070\034\uff3e\035\221\051\125\102\226" +
    "\001\002\000\004\100\234\001\002\000\004\100\232\001" +
    "\002\000\004\034\230\001\002\000\004\100\231\001\002" +
    "\000\032\005\uff41\011\uff41\012\uff41\013\uff41\020\uff41\023" +
    "\uff41\027\uff41\032\uff41\035\uff41\051\uff41\102\uff41\107\uff41" +
    "\001\002\000\024\005\113\011\122\012\060\020\223\023" +
    "\070\034\uff3d\035\221\051\125\102\226\001\002\000\004" +
    "\034\uff3c\001\002\000\024\005\113\011\122\012\060\020" +
    "\223\023\070\034\uff38\035\221\051\125\102\226\001\002" +
    "\000\004\034\uff37\001\002\000\004\034\uff39\001\002\000" +
    "\004\021\240\001\002\000\004\073\241\001\002\000\020" +
    "\042\076\043\101\051\246\060\074\064\247\065\103\073" +
    "\075\001\002\000\006\074\uffdc\101\267\001\002\000\006" +
    "\074\uffdd\101\265\001\002\000\004\074\262\001\002\000" +
    "\006\074\uffd9\101\260\001\002\000\010\070\252\074\uffdb" +
    "\101\253\001\002\000\006\074\uffde\101\250\001\002\000" +
    "\020\042\076\043\101\051\246\060\074\064\247\065\103" +
    "\073\075\001\002\000\004\074\uffd8\001\002\000\004\051" +
    "\255\001\002\000\020\042\076\043\101\051\246\060\074" +
    "\064\247\065\103\073\075\001\002\000\004\074\uffd4\001" +
    "\002\000\006\074\uffda\101\256\001\002\000\020\042\076" +
    "\043\101\051\246\060\074\064\247\065\103\073\075\001" +
    "\002\000\004\074\uffd3\001\002\000\020\042\076\043\101" +
    "\051\246\060\074\064\247\065\103\073\075\001\002\000" +
    "\004\074\uffd6\001\002\000\004\100\263\001\002\000\024" +
    "\005\113\011\122\012\060\020\223\023\070\034\uff40\035" +
    "\221\051\125\102\226\001\002\000\004\034\uff3b\001\002" +
    "\000\020\042\076\043\101\051\246\060\074\064\247\065" +
    "\103\073\075\001\002\000\004\074\uffd7\001\002\000\020" +
    "\042\076\043\101\051\246\060\074\064\247\065\103\073" +
    "\075\001\002\000\004\074\uffd5\001\002\000\024\005\113" +
    "\011\122\012\060\020\223\023\070\034\uff3f\035\221\051" +
    "\125\102\226\001\002\000\004\034\uff3a\001\002\000\004" +
    "\100\277\001\002\000\004\100\275\001\002\000\024\005" +
    "\113\011\122\012\060\020\223\023\070\034\uff33\035\221" +
    "\051\125\102\226\001\002\000\004\034\uff35\001\002\000" +
    "\024\005\113\011\122\012\060\020\223\023\070\034\uff34" +
    "\035\221\051\125\102\226\001\002\000\004\034\uff36\001" +
    "\002\000\004\051\302\001\002\000\004\100\303\001\002" +
    "\000\032\005\uff0c\011\uff0c\012\uff0c\013\uff0c\020\uff0c\023" +
    "\uff0c\027\uff0c\034\uff0c\035\uff0c\051\uff0c\102\uff0c\107\uff0c" +
    "\001\002\000\024\005\204\011\061\012\060\020\206\023" +
    "\214\032\uff09\035\203\051\125\102\212\001\002\000\004" +
    "\032\uff08\001\002\000\024\005\204\011\061\012\060\020" +
    "\206\023\214\032\uff03\035\203\051\125\102\212\001\002" +
    "\000\004\032\uff02\001\002\000\004\021\311\001\002\000" +
    "\004\073\312\001\002\000\020\042\076\043\101\051\246" +
    "\060\074\064\247\065\103\073\075\001\002\000\004\074" +
    "\314\001\002\000\004\100\315\001\002\000\024\005\204" +
    "\011\061\012\060\020\206\023\214\032\uff0b\035\203\051" +
    "\125\102\212\001\002\000\004\032\uff06\001\002\000\024" +
    "\005\204\011\061\012\060\020\206\023\214\032\uff0a\035" +
    "\203\051\125\102\212\001\002\000\004\032\uff05\001\002" +
    "\000\004\026\322\001\002\000\004\100\323\001\002\000" +
    "\022\005\204\011\061\012\060\020\327\023\214\035\325" +
    "\051\125\102\331\001\002\000\030\005\204\011\061\012" +
    "\060\013\uff55\020\327\023\214\027\uff55\035\325\051\125" +
    "\102\331\107\uff55\001\002\000\006\010\u0105\011\u0106\001" +
    "\002\000\004\100\u0103\001\002\000\004\070\374\001\002" +
    "\000\004\100\372\001\002\000\004\100\370\001\002\000" +
    "\010\013\340\027\336\107\333\001\002\000\016\042\uff99" +
    "\043\uff99\051\uff99\060\uff99\065\uff99\073\uff99\001\002\000" +
    "\016\042\076\043\101\051\106\060\074\065\103\073\075" +
    "\001\002\000\004\013\356\001\002\000\006\005\350\100" +
    "\351\001\002\000\004\100\343\001\002\000\004\005\341" +
    "\001\002\000\004\100\342\001\002\000\032\005\uff49\011" +
    "\uff49\012\uff49\013\uff49\020\uff49\023\uff49\027\uff49\032\uff49" +
    "\035\uff49\051\uff49\102\uff49\107\uff49\001\002\000\022\005" +
    "\204\011\061\012\060\020\327\023\214\035\325\051\125" +
    "\102\331\001\002\000\004\013\345\001\002\000\004\005" +
    "\346\001\002\000\004\100\347\001\002\000\032\005\uff47" +
    "\011\uff47\012\uff47\013\uff47\020\uff47\023\uff47\027\uff47\032" +
    "\uff47\035\uff47\051\uff47\102\uff47\107\uff47\001\002\000\016" +
    "\042\uff9a\043\uff9a\051\uff9a\060\uff9a\065\uff9a\073\uff9a\001" +
    "\002\000\022\005\204\011\061\012\060\020\327\023\214" +
    "\035\325\051\125\102\331\001\002\000\004\013\353\001" +
    "\002\000\004\005\354\001\002\000\004\100\355\001\002" +
    "\000\032\005\uff48\011\uff48\012\uff48\013\uff48\020\uff48\023" +
    "\uff48\027\uff48\032\uff48\035\uff48\051\uff48\102\uff48\107\uff48" +
    "\001\002\000\004\005\357\001\002\000\004\100\360\001" +
    "\002\000\032\005\uff46\011\uff46\012\uff46\013\uff46\020\uff46" +
    "\023\uff46\027\uff46\032\uff46\035\uff46\051\uff46\102\uff46\107" +
    "\uff46\001\002\000\004\026\362\001\002\000\004\100\363" +
    "\001\002\000\022\005\204\011\061\012\060\020\327\023" +
    "\214\035\325\051\125\102\331\001\002\000\010\013\uff43" +
    "\027\366\107\333\001\002\000\004\013\uff42\001\002\000" +
    "\006\005\350\100\uff45\001\002\000\004\100\uff44\001\002" +
    "\000\030\005\204\011\061\012\060\013\uff52\020\327\023" +
    "\214\027\uff52\035\325\051\125\102\331\107\uff52\001\002" +
    "\000\010\013\uff51\027\uff51\107\uff51\001\002\000\030\005" +
    "\204\011\061\012\060\013\uff4f\020\327\023\214\027\uff4f" +
    "\035\325\051\125\102\331\107\uff4f\001\002\000\010\013" +
    "\uff4e\027\uff4e\107\uff4e\001\002\000\004\021\375\001\002" +
    "\000\004\073\376\001\002\000\020\042\076\043\101\051" +
    "\246\060\074\064\247\065\103\073\075\001\002\000\004" +
    "\074\u0100\001\002\000\004\100\u0101\001\002\000\030\005" +
    "\204\011\061\012\060\013\uff57\020\327\023\214\027\uff57" +
    "\035\325\051\125\102\331\107\uff57\001\002\000\010\013" +
    "\uff54\027\uff54\107\uff54\001\002\000\030\005\204\011\061" +
    "\012\060\013\uff56\020\327\023\214\027\uff56\035\325\051" +
    "\125\102\331\107\uff56\001\002\000\010\013\uff53\027\uff53" +
    "\107\uff53\001\002\000\004\100\u0109\001\002\000\004\100" +
    "\u0107\001\002\000\030\005\204\011\061\012\060\013\uff4b" +
    "\020\327\023\214\027\uff4b\035\325\051\125\102\331\107" +
    "\uff4b\001\002\000\010\013\uff4d\027\uff4d\107\uff4d\001\002" +
    "\000\030\005\204\011\061\012\060\013\uff4a\020\327\023" +
    "\214\027\uff4a\035\325\051\125\102\331\107\uff4a\001\002" +
    "\000\010\013\uff4c\027\uff4c\107\uff4c\001\002\000\010\013" +
    "\uff50\027\uff50\107\uff50\001\002\000\004\100\u0110\001\002" +
    "\000\004\100\u010e\001\002\000\024\005\204\011\061\012" +
    "\060\020\206\023\214\032\ufeff\035\203\051\125\102\212" +
    "\001\002\000\004\032\uff01\001\002\000\024\005\204\011" +
    "\061\012\060\020\206\023\214\032\ufefe\035\203\051\125" +
    "\102\212\001\002\000\004\032\uff00\001\002\000\004\032" +
    "\uff04\001\002\000\024\005\113\011\122\012\060\020\116" +
    "\023\070\034\uff29\035\112\051\125\102\123\001\002\000" +
    "\004\034\uff28\001\002\000\004\034\uff2a\001\002\000\004" +
    "\100\u0117\001\002\000\034\005\uff32\011\uff32\012\uff32\013" +
    "\uff32\020\uff32\023\uff32\027\uff32\034\uff32\035\uff32\051\uff32" +
    "\100\uff32\102\uff32\107\uff32\001\002\000\004\021\u0119\001" +
    "\002\000\004\073\u011a\001\002\000\020\042\076\043\101" +
    "\051\246\060\074\064\247\065\103\073\075\001\002\000" +
    "\004\074\u011c\001\002\000\004\100\u011d\001\002\000\024" +
    "\005\113\011\122\012\060\020\116\023\070\034\uff31\035" +
    "\112\051\125\102\123\001\002\000\004\034\uff2c\001\002" +
    "\000\024\005\113\011\122\012\060\020\116\023\070\034" +
    "\uff30\035\112\051\125\102\123\001\002\000\004\034\uff2b" +
    "\001\002\000\004\026\u0122\001\002\000\004\100\u0123\001" +
    "\002\000\022\005\113\011\122\012\060\020\u0126\023\070" +
    "\035\u0124\051\125\102\u0129\001\002\000\006\010\u0155\023" +
    "\u0154\001\002\000\004\100\u0152\001\002\000\004\070\u014b" +
    "\001\002\000\030\005\113\011\122\012\060\013\uff20\020" +
    "\u0126\023\070\027\uff20\035\u0124\051\125\102\u0129\107\uff20" +
    "\001\002\000\004\100\u0148\001\002\000\004\100\u0146\001" +
    "\002\000\010\013\u012f\027\u012c\107\333\001\002\000\016" +
    "\042\076\043\101\051\106\060\074\065\103\073\075\001" +
    "\002\000\006\005\350\100\u013a\001\002\000\004\100\u0135" +
    "\001\002\000\004\013\u0132\001\002\000\004\005\u0130\001" +
    "\002\000\004\100\u0131\001\002\000\032\005\uff14\011\uff14" +
    "\012\uff14\013\uff14\020\uff14\023\uff14\027\uff14\034\uff14\035" +
    "\uff14\051\uff14\102\uff14\107\uff14\001\002\000\004\005\u0133" +
    "\001\002\000\004\100\u0134\001\002\000\032\005\uff11\011" +
    "\uff11\012\uff11\013\uff11\020\uff11\023\uff11\027\uff11\034\uff11" +
    "\035\uff11\051\uff11\102\uff11\107\uff11\001\002\000\022\005" +
    "\113\011\122\012\060\020\u0126\023\070\035\u0124\051\125" +
    "\102\u0129\001\002\000\004\013\u0137\001\002\000\004\005" +
    "\u0138\001\002\000\004\100\u0139\001\002\000\032\005\uff12" +
    "\011\uff12\012\uff12\013\uff12\020\uff12\023\uff12\027\uff12\034" +
    "\uff12\035\uff12\051\uff12\102\uff12\107\uff12\001\002\000\022" +
    "\005\113\011\122\012\060\020\u0126\023\070\035\u0124\051" +
    "\125\102\u0129\001\002\000\004\013\u013c\001\002\000\004" +
    "\005\u013d\001\002\000\004\100\u013e\001\002\000\032\005" +
    "\uff13\011\uff13\012\uff13\013\uff13\020\uff13\023\uff13\027\uff13" +
    "\034\uff13\035\uff13\051\uff13\102\uff13\107\uff13\001\002\000" +
    "\004\026\u0140\001\002\000\004\100\u0141\001\002\000\022" +
    "\005\113\011\122\012\060\020\u0126\023\070\035\u0124\051" +
    "\125\102\u0129\001\002\000\010\013\uff0e\027\u0143\107\333" +
    "\001\002\000\006\005\350\100\uff10\001\002\000\004\100" +
    "\uff0f\001\002\000\004\013\uff0d\001\002\000\030\005\113" +
    "\011\122\012\060\013\uff1f\020\u0126\023\070\027\uff1f\035" +
    "\u0124\051\125\102\u0129\107\uff1f\001\002\000\010\013\uff1e" +
    "\027\uff1e\107\uff1e\001\002\000\030\005\113\011\122\012" +
    "\060\013\uff1a\020\u0126\023\070\027\uff1a\035\u0124\051\125" +
    "\102\u0129\107\uff1a\001\002\000\010\013\uff19\027\uff19\107" +
    "\uff19\001\002\000\010\013\uff1b\027\uff1b\107\uff1b\001\002" +
    "\000\004\021\u014c\001\002\000\004\073\u014d\001\002\000" +
    "\020\042\076\043\101\051\246\060\074\064\247\065\103" +
    "\073\075\001\002\000\004\074\u014f\001\002\000\004\100" +
    "\u0150\001\002\000\030\005\113\011\122\012\060\013\uff22" +
    "\020\u0126\023\070\027\uff22\035\u0124\051\125\102\u0129\107" +
    "\uff22\001\002\000\010\013\uff1d\027\uff1d\107\uff1d\001\002" +
    "\000\030\005\113\011\122\012\060\013\uff21\020\u0126\023" +
    "\070\027\uff21\035\u0124\051\125\102\u0129\107\uff21\001\002" +
    "\000\010\013\uff1c\027\uff1c\107\uff1c\001\002\000\004\100" +
    "\u0158\001\002\000\004\100\u0156\001\002\000\030\005\113" +
    "\011\122\012\060\013\uff15\020\u0126\023\070\027\uff15\035" +
    "\u0124\051\125\102\u0129\107\uff15\001\002\000\010\013\uff17" +
    "\027\uff17\107\uff17\001\002\000\030\005\113\011\122\012" +
    "\060\013\uff16\020\u0126\023\070\027\uff16\035\u0124\051\125" +
    "\102\u0129\107\uff16\001\002\000\010\013\uff18\027\uff18\107" +
    "\uff18\001\002\000\004\100\u015b\001\002\000\024\005\113" +
    "\011\122\012\060\020\116\023\070\034\uff26\035\112\051" +
    "\125\102\123\001\002\000\004\034\uff27\001\002\000\016" +
    "\042\uff6a\043\uff6a\051\uff6a\060\uff6a\065\uff6a\073\uff6a\001" +
    "\002\000\020\042\uff68\043\uff68\051\uff68\054\u0167\060\uff68" +
    "\065\uff68\073\uff68\001\002\000\020\042\uff69\043\uff69\051" +
    "\uff69\054\u0166\060\uff69\065\uff69\073\uff69\001\002\000\016" +
    "\042\076\043\101\051\u0165\060\074\065\103\073\075\001" +
    "\002\000\006\026\uff82\100\uff82\001\002\000\006\026\uff83" +
    "\100\uff83\001\002\000\006\026\uff73\100\uff73\001\002\000" +
    "\006\026\uff81\100\uff81\001\002\000\010\026\uff84\073\130" +
    "\100\uff84\001\002\000\016\042\uff6c\043\uff6c\051\uff6c\060" +
    "\uff6c\065\uff6c\073\uff6c\001\002\000\016\042\uff6b\043\uff6b" +
    "\051\uff6b\060\uff6b\065\uff6b\073\uff6b\001\002\000\016\042" +
    "\076\043\101\051\u016d\060\074\065\103\073\075\001\002" +
    "\000\006\026\uff7d\100\uff7d\001\002\000\006\026\uff80\100" +
    "\uff80\001\002\000\006\026\uff71\100\uff71\001\002\000\006" +
    "\026\uff7f\100\uff7f\001\002\000\010\026\uff7e\073\130\100" +
    "\uff7e\001\002\000\016\042\076\043\101\051\u0172\060\074" +
    "\065\103\073\075\001\002\000\006\026\uff70\100\uff70\001" +
    "\002\000\006\026\uff6e\100\uff6e\001\002\000\006\026\uff6d" +
    "\100\uff6d\001\002\000\006\026\uff6f\100\uff6f\001\002\000" +
    "\004\065\u0189\001\002\000\004\065\u0187\001\002\000\004" +
    "\065\u0185\001\002\000\006\060\074\065\u0183\001\002\000" +
    "\004\065\u0180\001\002\000\020\026\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\074\uffc0\100\uffc0\101\uffc0\001\002\000\020\026" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\074\uffc8\100\uffc8\101\uffc8" +
    "\001\002\000\020\026\uffc3\054\uffc3\055\uffc3\056\uffc3\074" +
    "\uffc3\100\uffc3\101\uffc3\001\002\000\004\065\u017e\001\002" +
    "\000\020\026\uffd2\054\uffd2\055\uffd2\056\uffd2\074\uffd2\100" +
    "\uffd2\101\uffd2\001\002\000\020\026\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\074\uffcb\100\uffcb\101\uffcb\001\002\000\032\026" +
    "\uffca\054\uffca\055\uffca\056\uffca\061\u0177\062\u0174\063\u0173" +
    "\073\075\074\uffca\100\uffca\101\uffca\110\u017b\001\002\000" +
    "\020\026\uffc9\054\uffc9\055\uffc9\056\uffc9\074\uffc9\100\uffc9" +
    "\101\uffc9\001\002\000\030\026\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\061\u0177\062\u0174\063\u0173\073\075\074\uffc7\100\uffc7" +
    "\101\uffc7\001\002\000\020\026\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\074\uffc5\100\uffc5\101\uffc5\001\002\000\020\057\u0176" +
    "\060\u0175\061\u0177\062\u0174\063\u0173\073\075\110\u017b\001" +
    "\002\000\036\026\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\073\uffe0\074\uffcf\100" +
    "\uffcf\101\uffcf\110\uffe0\001\002\000\020\026\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\074\uffcd\100\uffcd\101\uffcd\001\002\000" +
    "\036\026\uffce\054\uffce\055\uffce\056\uffce\057\u0176\060\u0175" +
    "\061\u0177\062\u0174\063\u0173\073\075\074\uffce\100\uffce\101" +
    "\uffce\110\u017b\001\002\000\020\026\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\074\uffcc\100\uffcc\101\uffcc\001\002\000\030\026" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\061\u0177\062\u0174\063\u0173" +
    "\073\075\074\uffc6\100\uffc6\101\uffc6\001\002\000\020\026" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\074\uffc4\100\uffc4\101\uffc4" +
    "\001\002\000\024\026\uffc1\054\uffc1\055\uffc1\056\uffc1\063" +
    "\u0173\073\075\074\uffc1\100\uffc1\101\uffc1\001\002\000\020" +
    "\026\uffc2\054\uffc2\055\uffc2\056\uffc2\074\uffc2\100\uffc2\101" +
    "\uffc2\001\002\000\016\042\076\043\101\051\u0190\060\074" +
    "\065\103\073\075\001\002\000\006\026\uff75\100\uff75\001" +
    "\002\000\006\026\uff78\100\uff78\001\002\000\006\026\uff72" +
    "\100\uff72\001\002\000\006\026\uff76\100\uff76\001\002\000" +
    "\010\026\uff77\073\130\100\uff77\001\002\000\020\026\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\074\uffd0\100\uffd0\101\uffd0\001" +
    "\002\000\016\042\076\043\101\051\u0197\060\074\065\103" +
    "\073\075\001\002\000\006\026\uff7c\100\uff7c\001\002\000" +
    "\006\026\uff7b\100\uff7b\001\002\000\006\026\uff74\100\uff74" +
    "\001\002\000\006\026\uff79\100\uff79\001\002\000\010\026" +
    "\uff7a\073\130\100\uff7a\001\002\000\020\057\u0176\060\u0175" +
    "\061\u0177\062\u0174\063\u0173\073\075\110\u017b\001\002\000" +
    "\004\074\u019a\001\002\000\036\026\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\073" +
    "\uffbf\074\uffbf\100\uffbf\101\uffbf\110\uffbf\001\002\000\044" +
    "\026\uffdf\037\uffdf\047\uffdf\054\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\073\uffdf\074\uffdf" +
    "\100\uffdf\101\uffdf\104\uffdf\110\uffdf\001\002\000\020\042" +
    "\076\043\101\051\140\060\074\065\136\073\132\074\131" +
    "\001\002\000\004\100\uffe1\001\002\000\006\074\u019f\104" +
    "\141\001\002\000\010\074\147\100\ufefb\104\146\001\002" +
    "\000\004\010\u01a1\001\002\000\006\013\ufff0\100\ufff0\001" +
    "\002\000\004\013\uffe7\001\002\000\024\005\053\011\061" +
    "\012\060\013\uffe5\020\057\023\070\035\052\051\067\102" +
    "\063\001\002\000\004\013\uffe4\001\002\000\024\005\053" +
    "\011\061\012\060\013\uffec\020\057\023\070\035\052\051" +
    "\067\102\063\001\002\000\004\013\uffeb\001\002\000\024" +
    "\005\053\011\061\012\060\013\uffea\020\057\023\070\035" +
    "\052\051\067\102\063\001\002\000\004\013\uffe6\001\002" +
    "\000\004\054\u01aa\001\002\000\006\060\074\065\136\001" +
    "\002\000\004\037\u01ac\001\002\000\006\060\074\065\136" +
    "\001\002\000\004\047\u01ae\001\002\000\006\060\074\065" +
    "\136\001\002\000\004\100\u01b0\001\002\000\022\005\204" +
    "\011\061\012\060\020\u01b5\023\214\035\u01b2\051\125\102" +
    "\u01b7\001\002\000\024\005\204\011\061\012\060\020\u01b5" +
    "\023\214\032\uff64\035\u01b2\051\125\102\u01b7\001\002\000" +
    "\004\011\u01c8\001\002\000\004\032\u01c5\001\002\000\004" +
    "\100\u01c3\001\002\000\004\070\u01bc\001\002\000\004\100" +
    "\u01ba\001\002\000\004\100\u01b8\001\002\000\024\005\204" +
    "\011\061\012\060\020\u01b5\023\214\032\uff61\035\u01b2\051" +
    "\125\102\u01b7\001\002\000\004\032\uff60\001\002\000\024" +
    "\005\204\011\061\012\060\020\u01b5\023\214\032\uff5e\035" +
    "\u01b2\051\125\102\u01b7\001\002\000\004\032\uff5d\001\002" +
    "\000\004\021\u01bd\001\002\000\004\073\u01be\001\002\000" +
    "\020\042\076\043\101\051\246\060\074\064\247\065\103" +
    "\073\075\001\002\000\004\074\u01c0\001\002\000\004\100" +
    "\u01c1\001\002\000\024\005\204\011\061\012\060\020\u01b5" +
    "\023\214\032\uff66\035\u01b2\051\125\102\u01b7\001\002\000" +
    "\004\032\uff63\001\002\000\024\005\204\011\061\012\060" +
    "\020\u01b5\023\214\032\uff65\035\u01b2\051\125\102\u01b7\001" +
    "\002\000\004\032\uff62\001\002\000\004\051\u01c6\001\002" +
    "\000\004\100\u01c7\001\002\000\034\005\uff67\011\uff67\012" +
    "\uff67\013\uff67\020\uff67\023\uff67\027\uff67\032\uff67\035\uff67" +
    "\051\uff67\100\uff67\102\uff67\107\uff67\001\002\000\004\100" +
    "\u01c9\001\002\000\024\005\204\011\061\012\060\020\u01b5" +
    "\023\214\032\uff5b\035\u01b2\051\125\102\u01b7\001\002\000" +
    "\004\032\uff5c\001\002\000\004\032\uff5f\001\002\000\006" +
    "\022\u01cd\054\u01ce\001\002\000\014\014\042\015\041\016" +
    "\044\046\043\051\040\001\002\000\020\042\076\043\101" +
    "\051\u01d5\060\074\064\u01d4\065\103\073\075\001\002\000" +
    "\004\100\uffa2\001\002\000\004\100\uffa3\001\002\000\004" +
    "\100\uffbb\001\002\000\004\100\uffbc\001\002\000\004\100" +
    "\uffb8\001\002\000\004\100\uffa4\001\002\000\006\073\130" +
    "\100\uffab\001\002\000\006\054\u01d7\100\uffbe\001\002\000" +
    "\020\042\076\043\101\051\u01db\060\074\064\u01d4\065\103" +
    "\073\075\001\002\000\004\100\uffba\001\002\000\004\100" +
    "\uffbd\001\002\000\004\100\uffb9\001\002\000\006\073\130" +
    "\100\uffaa\001\002\000\004\021\u01dd\001\002\000\004\073" +
    "\u01de\001\002\000\020\042\076\043\101\051\246\060\074" +
    "\064\247\065\103\073\075\001\002\000\004\074\u01e0\001" +
    "\002\000\004\100\u01e1\001\002\000\024\005\053\011\061" +
    "\012\060\013\uffef\020\057\023\070\035\052\051\067\102" +
    "\063\001\002\000\004\013\uffe9\001\002\000\024\005\053" +
    "\011\061\012\060\013\uffee\020\057\023\070\035\052\051" +
    "\067\102\063\001\002\000\004\013\uffe8\001\002\000\004" +
    "\026\u01e6\001\002\000\004\100\u01e7\001\002\000\022\005" +
    "\053\011\061\012\060\020\u01ea\023\070\035\u01e8\051\125" +
    "\102\u01ed\001\002\000\004\010\u0219\001\002\000\004\100" +
    "\u0217\001\002\000\004\070\u0210\001\002\000\010\013\u01f9" +
    "\027\u01f8\107\333\001\002\000\004\100\u01f3\001\002\000" +
    "\004\100\u01f1\001\002\000\012\013\uff92\027\uff92\100\u01ef" +
    "\107\uff92\001\002\000\022\005\053\011\061\012\060\020" +
    "\u01ea\023\070\035\u01e8\051\125\102\u01ed\001\002\000\010" +
    "\013\uff8c\027\uff8c\107\uff8c\001\002\000\030\005\053\011" +
    "\061\012\060\013\uff91\020\u01ea\023\070\027\uff91\035\u01e8" +
    "\051\125\102\u01ed\107\uff91\001\002\000\010\013\uff90\027" +
    "\uff90\107\uff90\001\002\000\030\005\053\011\061\012\060" +
    "\013\uff8f\020\u01ea\023\070\027\uff8f\035\u01e8\051\125\102" +
    "\u01ed\107\uff8f\001\002\000\010\013\uff8b\027\uff8b\107\uff8b" +
    "\001\002\000\016\042\076\043\101\051\106\060\074\065" +
    "\103\073\075\001\002\000\004\013\u0206\001\002\000\004" +
    "\100\u0201\001\002\000\006\005\350\100\u01fc\001\002\000" +
    "\004\005\u01fa\001\002\000\004\100\u01fb\001\002\000\032" +
    "\005\uff98\011\uff98\012\uff98\013\uff98\020\uff98\023\uff98\027" +
    "\uff98\035\uff98\051\uff98\100\uff98\102\uff98\107\uff98\001\002" +
    "\000\022\005\053\011\061\012\060\020\u01ea\023\070\035" +
    "\u01e8\051\125\102\u01ed\001\002\000\004\013\u01fe\001\002" +
    "\000\004\005\u01ff\001\002\000\004\100\u0200\001\002\000" +
    "\032\005\uff97\011\uff97\012\uff97\013\uff97\020\uff97\023\uff97" +
    "\027\uff97\035\uff97\051\uff97\100\uff97\102\uff97\107\uff97\001" +
    "\002\000\022\005\053\011\061\012\060\020\u01ea\023\070" +
    "\035\u01e8\051\125\102\u01ed\001\002\000\004\013\u0203\001" +
    "\002\000\004\005\u0204\001\002\000\004\100\u0205\001\002" +
    "\000\032\005\uff96\011\uff96\012\uff96\013\uff96\020\uff96\023" +
    "\uff96\027\uff96\035\uff96\051\uff96\100\uff96\102\uff96\107\uff96" +
    "\001\002\000\004\005\u0207\001\002\000\004\100\u0208\001" +
    "\002\000\032\005\uff95\011\uff95\012\uff95\013\uff95\020\uff95" +
    "\023\uff95\027\uff95\035\uff95\051\uff95\100\uff95\102\uff95\107" +
    "\uff95\001\002\000\004\026\u020a\001\002\000\004\100\u020b" +
    "\001\002\000\022\005\053\011\061\012\060\020\u01ea\023" +
    "\070\035\u01e8\051\125\102\u01ed\001\002\000\010\013\uff85" +
    "\027\u020f\107\333\001\002\000\004\013\uff86\001\002\000" +
    "\004\100\uff88\001\002\000\006\005\350\100\uff87\001\002" +
    "\000\004\021\u0211\001\002\000\004\073\u0212\001\002\000" +
    "\020\042\076\043\101\051\246\060\074\064\247\065\103" +
    "\073\075\001\002\000\004\074\u0214\001\002\000\004\100" +
    "\u0215\001\002\000\030\005\053\011\061\012\060\013\uff94" +
    "\020\u01ea\023\070\027\uff94\035\u01e8\051\125\102\u01ed\107" +
    "\uff94\001\002\000\010\013\uff8e\027\uff8e\107\uff8e\001\002" +
    "\000\030\005\053\011\061\012\060\013\uff93\020\u01ea\023" +
    "\070\027\uff93\035\u01e8\051\125\102\u01ed\107\uff93\001\002" +
    "\000\010\013\uff8d\027\uff8d\107\uff8d\001\002\000\004\100" +
    "\u021a\001\002\000\030\005\053\011\061\012\060\013\uff89" +
    "\020\u01ea\023\070\027\uff89\035\u01e8\051\125\102\u01ed\107" +
    "\uff89\001\002\000\010\013\uff8a\027\uff8a\107\uff8a\001\002" +
    "\000\004\100\u021d\001\002\000\024\005\053\011\061\012" +
    "\060\013\uffe3\020\057\023\070\035\052\051\067\102\063" +
    "\001\002\000\004\013\uffe2\001\002\000\004\022\u0220\001" +
    "\002\000\014\014\042\015\041\016\044\046\043\051\040" +
    "\001\002\000\006\074\ufeed\104\u0222\001\002\000\006\051" +
    "\035\106\033\001\002\000\004\074\ufeee\001\002\000\004" +
    "\074\u0225\001\002\000\004\100\u0226\001\002\000\022\005" +
    "\053\011\061\012\060\020\057\023\070\035\052\051\067" +
    "\102\063\001\002\000\004\013\u0228\001\002\000\004\010" +
    "\u0229\001\002\000\004\100\u022a\001\002\000\006\013\ufff1" +
    "\100\ufff1\001\002\000\004\007\u022c\001\002\000\006\002" +
    "\ufff8\100\ufff8\001\002\000\004\013\ufff6\001\002\000\006" +
    "\006\015\033\017\001\002\000\004\013\ufff4\001\002\000" +
    "\004\051\u0231\001\002\000\004\073\u0232\001\002\000\006" +
    "\051\035\106\033\001\002\000\004\074\u0234\001\002\000" +
    "\004\022\u0235\001\002\000\014\014\042\015\041\016\044" +
    "\046\043\051\040\001\002\000\004\100\u0237\001\002\000" +
    "\022\005\u0239\011\u023e\012\060\020\u023d\023\u0244\035\u0238" +
    "\051\125\102\u0240\001\002\000\004\030\u0332\001\002\000" +
    "\016\042\076\043\101\051\106\060\074\065\103\073\075" +
    "\001\002\000\004\013\u0311\001\002\000\004\100\u030f\001" +
    "\002\000\032\005\ufedf\011\ufedf\012\ufedf\013\ufedf\020\ufedf" +
    "\023\ufedf\027\ufedf\034\ufedf\035\ufedf\051\ufedf\102\ufedf\107" +
    "\ufedf\001\002\000\004\070\u0308\001\002\000\004\051\u02e2" +
    "\001\002\000\004\100\u02e0\001\002\000\004\100\u02de\001" +
    "\002\000\032\005\ufede\011\ufede\012\ufede\013\ufede\020\ufede" +
    "\023\ufede\027\ufede\034\ufede\035\ufede\051\ufede\102\ufede\107" +
    "\ufede\001\002\000\032\005\ufee0\011\ufee0\012\ufee0\013\ufee0" +
    "\020\ufee0\023\ufee0\027\ufee0\034\ufee0\035\ufee0\051\ufee0\102" +
    "\ufee0\107\ufee0\001\002\000\024\005\u0239\011\u023e\012\060" +
    "\013\ufeea\020\u023d\023\u0244\035\u0238\051\125\102\u0240\001" +
    "\002\000\006\024\072\036\073\001\002\000\016\042\076" +
    "\043\101\051\106\060\074\065\103\073\075\001\002\000" +
    "\004\100\u0247\001\002\000\022\005\u024b\011\u023e\012\060" +
    "\020\u024f\023\u0253\035\u0249\051\125\102\u0251\001\002\000" +
    "\034\005\ufeba\011\ufeba\012\ufeba\013\ufeba\020\ufeba\023\ufeba" +
    "\027\ufeba\032\ufeba\034\ufeba\035\ufeba\051\ufeba\102\ufeba\107" +
    "\ufeba\001\002\000\006\023\u02d7\030\u02d8\001\002\000\034" +
    "\005\ufeb8\011\ufeb8\012\ufeb8\013\ufeb8\020\ufeb8\023\ufeb8\027" +
    "\ufeb8\032\ufeb8\034\ufeb8\035\ufeb8\051\ufeb8\102\ufeb8\107\ufeb8" +
    "\001\002\000\016\042\076\043\101\051\106\060\074\065" +
    "\103\073\075\001\002\000\004\034\u029c\001\002\000\004" +
    "\100\u029a\001\002\000\034\005\ufeb9\011\ufeb9\012\ufeb9\013" +
    "\ufeb9\020\ufeb9\023\ufeb9\027\ufeb9\032\ufeb9\034\ufeb9\035\ufeb9" +
    "\051\ufeb9\102\ufeb9\107\ufeb9\001\002\000\004\070\u0293\001" +
    "\002\000\004\100\u027a\001\002\000\004\100\u0278\001\002" +
    "\000\024\005\u024b\011\u023e\012\060\020\u024f\023\u0253\034" +
    "\ufe8b\035\u0249\051\125\102\u0251\001\002\000\006\024\072" +
    "\036\073\001\002\000\016\042\076\043\101\051\106\060" +
    "\074\065\103\073\075\001\002\000\004\100\u0256\001\002" +
    "\000\022\005\113\011\122\012\060\020\u025a\023\070\035" +
    "\u0257\051\125\102\u025d\001\002\000\010\011\u0270\023\u026e" +
    "\030\u026f\001\002\000\004\100\u026c\001\002\000\004\034" +
    "\u026a\001\002\000\004\070\u0263\001\002\000\024\005\113" +
    "\011\122\012\060\020\116\023\070\034\ufe9e\035\112\051" +
    "\125\102\123\001\002\000\004\100\u0260\001\002\000\004" +
    "\100\u025e\001\002\000\024\005\113\011\122\012\060\020" +
    "\u025a\023\070\034\ufe9d\035\u0257\051\125\102\u025d\001\002" +
    "\000\004\034\ufe9c\001\002\000\024\005\113\011\122\012" +
    "\060\020\116\023\070\034\ufe98\035\112\051\125\102\123" +
    "\001\002\000\004\034\ufe97\001\002\000\004\034\ufe99\001" +
    "\002\000\004\021\u0264\001\002\000\004\073\u0265\001\002" +
    "\000\020\042\076\043\101\051\246\060\074\064\247\065" +
    "\103\073\075\001\002\000\004\074\u0267\001\002\000\004" +
    "\100\u0268\001\002\000\024\005\113\011\122\012\060\020" +
    "\116\023\070\034\ufea0\035\112\051\125\102\123\001\002" +
    "\000\004\034\ufe9b\001\002\000\004\100\u026b\001\002\000" +
    "\034\005\ufea1\011\ufea1\012\ufea1\013\ufea1\020\ufea1\023\ufea1" +
    "\027\ufea1\032\ufea1\034\ufea1\035\ufea1\051\ufea1\102\ufea1\107" +
    "\ufea1\001\002\000\024\005\113\011\122\012\060\020\116" +
    "\023\070\034\ufe9f\035\112\051\125\102\123\001\002\000" +
    "\004\034\ufe9a\001\002\000\004\100\u0275\001\002\000\004" +
    "\100\u0273\001\002\000\004\100\u0271\001\002\000\024\005" +
    "\113\011\122\012\060\020\116\023\070\034\ufe92\035\112" +
    "\051\125\102\123\001\002\000\004\034\ufe95\001\002\000" +
    "\024\005\113\011\122\012\060\020\116\023\070\034\ufe91" +
    "\035\112\051\125\102\123\001\002\000\004\034\ufe94\001" +
    "\002\000\024\005\113\011\122\012\060\020\116\023\070" +
    "\034\ufe93\035\112\051\125\102\123\001\002\000\004\034" +
    "\ufe96\001\002\000\004\034\ufe88\001\002\000\024\005\u024b" +
    "\011\u023e\012\060\020\u024f\023\u0253\034\ufe8d\035\u0249\051" +
    "\125\102\u0251\001\002\000\004\034\ufe8c\001\002\000\024" +
    "\005\u0239\011\u023e\012\060\020\u027e\023\u0244\034\ufe87\035" +
    "\u027c\051\125\102\u0280\001\002\000\004\034\ufe86\001\002" +
    "\000\004\030\u0290\001\002\000\004\100\u028e\001\002\000" +
    "\004\070\u0287\001\002\000\004\100\u0285\001\002\000\004" +
    "\100\u0283\001\002\000\032\005\u0239\011\u023e\012\060\013" +
    "\ufed5\020\u027e\023\u0244\027\ufed5\034\ufed5\035\u027c\051\125" +
    "\102\u0280\107\ufed5\001\002\000\012\013\ufed2\027\ufed2\034" +
    "\ufed2\107\ufed2\001\002\000\032\005\u0239\011\u023e\012\060" +
    "\013\ufed7\020\u027e\023\u0244\027\ufed7\034\ufed7\035\u027c\051" +
    "\125\102\u0280\107\ufed7\001\002\000\012\013\ufed6\027\ufed6" +
    "\034\ufed6\107\ufed6\001\002\000\032\005\u0239\011\u023e\012" +
    "\060\013\ufed1\020\u027e\023\u0244\027\ufed1\034\ufed1\035\u027c" +
    "\051\125\102\u0280\107\ufed1\001\002\000\012\013\ufed0\027" +
    "\ufed0\034\ufed0\107\ufed0\001\002\000\004\021\u0288\001\002" +
    "\000\004\073\u0289\001\002\000\020\042\076\043\101\051" +
    "\246\060\074\064\247\065\103\073\075\001\002\000\004" +
    "\074\u028b\001\002\000\004\100\u028c\001\002\000\032\005" +
    "\u0239\011\u023e\012\060\013\ufed9\020\u027e\023\u0244\027\ufed9" +
    "\034\ufed9\035\u027c\051\125\102\u0280\107\ufed9\001\002\000" +
    "\012\013\ufed4\027\ufed4\034\ufed4\107\ufed4\001\002\000\032" +
    "\005\u0239\011\u023e\012\060\013\ufed8\020\u027e\023\u0244\027" +
    "\ufed8\034\ufed8\035\u027c\051\125\102\u0280\107\ufed8\001\002" +
    "\000\012\013\ufed3\027\ufed3\034\ufed3\107\ufed3\001\002\000" +
    "\004\100\u0291\001\002\000\032\005\u0239\011\u023e\012\060" +
    "\013\ufece\020\u027e\023\u0244\027\ufece\034\ufece\035\u027c\051" +
    "\125\102\u0280\107\ufece\001\002\000\012\013\ufecf\027\ufecf" +
    "\034\ufecf\107\ufecf\001\002\000\004\021\u0294\001\002\000" +
    "\004\073\u0295\001\002\000\020\042\076\043\101\051\246" +
    "\060\074\064\247\065\103\073\075\001\002\000\004\074" +
    "\u0297\001\002\000\004\100\u0298\001\002\000\024\005\u024b" +
    "\011\u023e\012\060\020\u024f\023\u0253\034\ufe8f\035\u0249\051" +
    "\125\102\u0251\001\002\000\004\034\ufe8a\001\002\000\024" +
    "\005\u024b\011\u023e\012\060\020\u024f\023\u0253\034\ufe8e\035" +
    "\u0249\051\125\102\u0251\001\002\000\004\034\ufe89\001\002" +
    "\000\004\100\u029d\001\002\000\032\005\ufe90\011\ufe90\012" +
    "\ufe90\013\ufe90\020\ufe90\023\ufe90\027\ufe90\034\ufe90\035\ufe90" +
    "\051\ufe90\102\ufe90\107\ufe90\001\002\000\004\026\u029f\001" +
    "\002\000\004\100\u02a0\001\002\000\022\005\u024b\011\u023e" +
    "\012\060\020\u02a3\023\u0253\035\u02a1\051\125\102\u02a5\001" +
    "\002\000\006\011\u02d2\030\u02d1\001\002\000\004\100\u02cf" +
    "\001\002\000\004\070\u02c8\001\002\000\004\100\u02c6\001" +
    "\002\000\004\100\u02c4\001\002\000\010\013\u02ad\027\u02aa" +
    "\107\333\001\002\000\030\005\u024b\011\u023e\012\060\013" +
    "\ufeaf\020\u02a3\023\u0253\027\ufeaf\035\u02a1\051\125\102\u02a5" +
    "\107\ufeaf\001\002\000\010\013\ufeac\027\ufeac\107\ufeac\001" +
    "\002\000\016\042\076\043\101\051\106\060\074\065\103" +
    "\073\075\001\002\000\006\005\350\100\u02b8\001\002\000" +
    "\004\100\u02b3\001\002\000\004\013\u02b0\001\002\000\004" +
    "\005\u02ae\001\002\000\004\100\u02af\001\002\000\034\005" +
    "\ufeb7\011\ufeb7\012\ufeb7\013\ufeb7\020\ufeb7\023\ufeb7\027\ufeb7" +
    "\032\ufeb7\034\ufeb7\035\ufeb7\051\ufeb7\102\ufeb7\107\ufeb7\001" +
    "\002\000\004\005\u02b1\001\002\000\004\100\u02b2\001\002" +
    "\000\034\005\ufeb4\011\ufeb4\012\ufeb4\013\ufeb4\020\ufeb4\023" +
    "\ufeb4\027\ufeb4\032\ufeb4\034\ufeb4\035\ufeb4\051\ufeb4\102\ufeb4" +
    "\107\ufeb4\001\002\000\022\005\u024b\011\u023e\012\060\020" +
    "\u02a3\023\u0253\035\u02a1\051\125\102\u02a5\001\002\000\004" +
    "\013\u02b5\001\002\000\004\005\u02b6\001\002\000\004\100" +
    "\u02b7\001\002\000\034\005\ufeb5\011\ufeb5\012\ufeb5\013\ufeb5" +
    "\020\ufeb5\023\ufeb5\027\ufeb5\032\ufeb5\034\ufeb5\035\ufeb5\051" +
    "\ufeb5\102\ufeb5\107\ufeb5\001\002\000\022\005\u024b\011\u023e" +
    "\012\060\020\u02a3\023\u0253\035\u02a1\051\125\102\u02a5\001" +
    "\002\000\004\013\u02ba\001\002\000\004\005\u02bb\001\002" +
    "\000\004\100\u02bc\001\002\000\034\005\ufeb6\011\ufeb6\012" +
    "\ufeb6\013\ufeb6\020\ufeb6\023\ufeb6\027\ufeb6\032\ufeb6\034\ufeb6" +
    "\035\ufeb6\051\ufeb6\102\ufeb6\107\ufeb6\001\002\000\004\026" +
    "\u02be\001\002\000\004\100\u02bf\001\002\000\022\005\u024b" +
    "\011\u023e\012\060\020\u02a3\023\u0253\035\u02a1\051\125\102" +
    "\u02a5\001\002\000\010\013\ufea3\027\u02c1\107\333\001\002" +
    "\000\006\005\350\100\ufea5\001\002\000\004\100\ufea4\001" +
    "\002\000\004\013\ufea2\001\002\000\030\005\u024b\011\u023e" +
    "\012\060\013\ufeb1\020\u02a3\023\u0253\027\ufeb1\035\u02a1\051" +
    "\125\102\u02a5\107\ufeb1\001\002\000\010\013\ufeb0\027\ufeb0" +
    "\107\ufeb0\001\002\000\030\005\u0239\011\u023e\012\060\013" +
    "\ufeab\020\u027e\023\u0244\027\ufeab\035\u027c\051\125\102\u0280" +
    "\107\ufeab\001\002\000\010\013\ufeaa\027\ufeaa\107\ufeaa\001" +
    "\002\000\004\021\u02c9\001\002\000\004\073\u02ca\001\002" +
    "\000\020\042\076\043\101\051\246\060\074\064\247\065" +
    "\103\073\075\001\002\000\004\074\u02cc\001\002\000\004" +
    "\100\u02cd\001\002\000\030\005\u024b\011\u023e\012\060\013" +
    "\ufeb3\020\u02a3\023\u0253\027\ufeb3\035\u02a1\051\125\102\u02a5" +
    "\107\ufeb3\001\002\000\010\013\ufeae\027\ufeae\107\ufeae\001" +
    "\002\000\030\005\u024b\011\u023e\012\060\013\ufeb2\020\u02a3" +
    "\023\u0253\027\ufeb2\035\u02a1\051\125\102\u02a5\107\ufeb2\001" +
    "\002\000\010\013\ufead\027\ufead\107\ufead\001\002\000\004" +
    "\100\u02d5\001\002\000\004\100\u02d3\001\002\000\030\005" +
    "\u024b\011\u023e\012\060\013\ufea6\020\u02a3\023\u0253\027\ufea6" +
    "\035\u02a1\051\125\102\u02a5\107\ufea6\001\002\000\010\013" +
    "\ufea7\027\ufea7\107\ufea7\001\002\000\030\005\u024b\011\u023e" +
    "\012\060\013\ufea8\020\u02a3\023\u0253\027\ufea8\035\u02a1\051" +
    "\125\102\u02a5\107\ufea8\001\002\000\010\013\ufea9\027\ufea9" +
    "\107\ufea9\001\002\000\004\100\u02db\001\002\000\004\100" +
    "\u02d9\001\002\000\024\005\u0239\011\u023e\012\060\020\u027e" +
    "\023\u0244\034\ufe82\035\u027c\051\125\102\u0280\001\002\000" +
    "\004\034\ufe84\001\002\000\024\005\u0239\011\u023e\012\060" +
    "\020\u027e\023\u0244\034\ufe83\035\u027c\051\125\102\u0280\001" +
    "\002\000\004\034\ufe85\001\002\000\004\013\ufee4\001\002" +
    "\000\024\005\u0239\011\u023e\012\060\013\ufee9\020\u023d\023" +
    "\u0244\035\u0238\051\125\102\u0240\001\002\000\004\013\ufee8" +
    "\001\002\000\024\005\u0239\011\u023e\012\060\013\ufee7\020" +
    "\u023d\023\u0244\035\u0238\051\125\102\u0240\001\002\000\004" +
    "\013\ufee3\001\002\000\004\054\u02e3\001\002\000\006\060" +
    "\074\065\136\001\002\000\004\037\u02e5\001\002\000\006" +
    "\060\074\065\136\001\002\000\004\047\u02e7\001\002\000" +
    "\006\060\074\065\136\001\002\000\004\100\u02e9\001\002" +
    "\000\022\005\u024b\011\u023e\012\060\020\u02ec\023\u0253\035" +
    "\u02ea\051\125\102\u02ef\001\002\000\006\011\u0303\030\u0302" +
    "\001\002\000\004\100\u0300\001\002\000\004\070\u02f9\001" +
    "\002\000\004\100\u02f7\001\002\000\004\032\u02f4\001\002" +
    "\000\004\100\u02f2\001\002\000\024\005\u024b\011\u023e\012" +
    "\060\020\u02ec\023\u0253\032\ufec4\035\u02ea\051\125\102\u02ef" +
    "\001\002\000\004\032\ufec1\001\002\000\024\005\u024b\011" +
    "\u023e\012\060\020\u02ec\023\u0253\032\ufec6\035\u02ea\051\125" +
    "\102\u02ef\001\002\000\004\032\ufec5\001\002\000\004\051" +
    "\u02f5\001\002\000\004\100\u02f6\001\002\000\034\005\ufec9" +
    "\011\ufec9\012\ufec9\013\ufec9\020\ufec9\023\ufec9\027\ufec9\032" +
    "\ufec9\034\ufec9\035\ufec9\051\ufec9\102\ufec9\107\ufec9\001\002" +
    "\000\024\005\u024b\011\u023e\012\060\020\u02ec\023\u0253\032" +
    "\ufec0\035\u02ea\051\125\102\u02ef\001\002\000\004\032\ufebf" +
    "\001\002\000\004\021\u02fa\001\002\000\004\073\u02fb\001" +
    "\002\000\020\042\076\043\101\051\246\060\074\064\247" +
    "\065\103\073\075\001\002\000\004\074\u02fd\001\002\000" +
    "\004\100\u02fe\001\002\000\024\005\u024b\011\u023e\012\060" +
    "\020\u02ec\023\u0253\032\ufec8\035\u02ea\051\125\102\u02ef\001" +
    "\002\000\004\032\ufec3\001\002\000\024\005\u024b\011\u023e" +
    "\012\060\020\u02ec\023\u0253\032\ufec7\035\u02ea\051\125\102" +
    "\u02ef\001\002\000\004\032\ufec2\001\002\000\004\100\u0306" +
    "\001\002\000\004\100\u0304\001\002\000\024\005\u024b\011" +
    "\u023e\012\060\020\u02ec\023\u0253\032\ufebb\035\u02ea\051\125" +
    "\102\u02ef\001\002\000\004\032\ufebc\001\002\000\024\005" +
    "\u024b\011\u023e\012\060\020\u02ec\023\u0253\032\ufebd\035\u02ea" +
    "\051\125\102\u02ef\001\002\000\004\032\ufebe\001\002\000" +
    "\004\021\u0309\001\002\000\004\073\u030a\001\002\000\020" +
    "\042\076\043\101\051\246\060\074\064\247\065\103\073" +
    "\075\001\002\000\004\074\u030c\001\002\000\004\100\u030d" +
    "\001\002\000\024\005\u0239\011\u023e\012\060\013\ufeec\020" +
    "\u023d\023\u0244\035\u0238\051\125\102\u0240\001\002\000\004" +
    "\013\ufee6\001\002\000\024\005\u0239\011\u023e\012\060\013" +
    "\ufeeb\020\u023d\023\u0244\035\u0238\051\125\102\u0240\001\002" +
    "\000\004\013\ufee5\001\002\000\004\030\u0312\001\002\000" +
    "\006\006\ufef1\100\ufef1\001\002\000\004\026\u0314\001\002" +
    "\000\004\100\u0315\001\002\000\022\005\u0239\011\u023e\012" +
    "\060\020\u027e\023\u0244\035\u027c\051\125\102\u0280\001\002" +
    "\000\010\013\u031b\027\u0319\107\333\001\002\000\016\042" +
    "\076\043\101\051\106\060\074\065\103\073\075\001\002" +
    "\000\004\013\u0328\001\002\000\006\005\350\100\u0323\001" +
    "\002\000\004\100\u031e\001\002\000\004\005\u031c\001\002" +
    "\000\004\100\u031d\001\002\000\032\005\ufedd\011\ufedd\012" +
    "\ufedd\013\ufedd\020\ufedd\023\ufedd\027\ufedd\034\ufedd\035\ufedd" +
    "\051\ufedd\102\ufedd\107\ufedd\001\002\000\022\005\u0239\011" +
    "\u023e\012\060\020\u027e\023\u0244\035\u027c\051\125\102\u0280" +
    "\001\002\000\004\013\u0320\001\002\000\004\005\u0321\001" +
    "\002\000\004\100\u0322\001\002\000\032\005\ufedb\011\ufedb" +
    "\012\ufedb\013\ufedb\020\ufedb\023\ufedb\027\ufedb\034\ufedb\035" +
    "\ufedb\051\ufedb\102\ufedb\107\ufedb\001\002\000\022\005\u0239" +
    "\011\u023e\012\060\020\u027e\023\u0244\035\u027c\051\125\102" +
    "\u0280\001\002\000\004\013\u0325\001\002\000\004\005\u0326" +
    "\001\002\000\004\100\u0327\001\002\000\032\005\ufedc\011" +
    "\ufedc\012\ufedc\013\ufedc\020\ufedc\023\ufedc\027\ufedc\034\ufedc" +
    "\035\ufedc\051\ufedc\102\ufedc\107\ufedc\001\002\000\004\005" +
    "\u0329\001\002\000\004\100\u032a\001\002\000\032\005\ufeda" +
    "\011\ufeda\012\ufeda\013\ufeda\020\ufeda\023\ufeda\027\ufeda\034" +
    "\ufeda\035\ufeda\051\ufeda\102\ufeda\107\ufeda\001\002\000\004" +
    "\026\u032c\001\002\000\004\100\u032d\001\002\000\022\005" +
    "\u0239\011\u023e\012\060\020\u027e\023\u0244\035\u027c\051\125" +
    "\102\u0280\001\002\000\010\013\ufecb\027\u0330\107\333\001" +
    "\002\000\004\013\ufeca\001\002\000\006\005\350\100\ufecd" +
    "\001\002\000\004\100\ufecc\001\002\000\004\100\u0333\001" +
    "\002\000\024\005\u0239\011\u023e\012\060\013\ufee1\020\u023d" +
    "\023\u0244\035\u0238\051\125\102\u0240\001\002\000\004\013" +
    "\ufee2\001\002\000\006\006\015\033\017\001\002\000\004" +
    "\013\ufff2\001\002\000\004\051\u0338\001\002\000\004\100" +
    "\u0339\001\002\000\004\012\u033b\001\002\000\004\013\u0341" +
    "\001\002\000\004\051\u033c\001\002\000\004\022\u033d\001" +
    "\002\000\014\014\042\015\041\016\044\046\043\051\040" +
    "\001\002\000\004\100\u033f\001\002\000\006\012\u033b\013" +
    "\ufef4\001\002\000\004\013\ufef3\001\002\000\004\025\u0342" +
    "\001\002\000\006\006\ufef2\100\ufef2\001\002\000\004\002" +
    "\001\001\002\000\006\070\u034b\100\ufffc\001\002\000\004" +
    "\100\u0349\001\002\000\006\070\u0347\100\ufffa\001\002\000" +
    "\006\017\u0346\051\u0344\001\002\000\004\100\ufff9\001\002" +
    "\000\006\004\004\006\ufffe\001\002\000\004\006\ufffd\001" +
    "\002\000\006\017\u0346\051\u0344\001\002\000\004\100\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u034a\000\006\002\004\003\005\001\001\000\004\005" +
    "\u0344\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\017\010\015" +
    "\020\020\057\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u022c\001\001\000\002" +
    "\001\001\000\004\010\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\017\010\015\020\025\057\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\054\021\065\031\064\032\050\036" +
    "\055\045\053\054\061\120\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\104\027\077\030\076\034" +
    "\u01e4\054\103\117\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\054\021\u01a1\031\064\032" +
    "\050\036\055\045\053\054\061\120\063\001\001\000\002" +
    "\001\001\000\012\030\133\055\u019c\117\134\121\136\001" +
    "\001\000\004\122\070\001\001\000\016\017\104\027\077" +
    "\030\076\034\106\054\103\117\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u0198" +
    "\027\077\001\001\000\002\001\001\000\004\035\u0191\001" +
    "\001\000\014\023\u0190\024\u017c\025\u0178\026\u0179\027\u0177" +
    "\001\001\000\002\001\001\000\004\035\u018a\001\001\000" +
    "\014\023\u017b\024\u017c\025\u0178\026\u0179\027\u0177\001\001" +
    "\000\004\035\u016d\001\001\000\004\035\u0167\001\001\000" +
    "\004\035\u015f\001\001\000\002\001\001\000\020\015\114" +
    "\045\113\046\116\047\117\050\110\052\123\054\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\104" +
    "\027\077\030\076\034\u0120\054\103\117\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\114\045\113\046\u0114\047\117\050" +
    "\110\052\123\054\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\153\027\077\030\150" +
    "\054\152\117\151\001\001\000\012\030\133\055\132\117" +
    "\134\121\136\001\001\000\002\001\001\000\010\030\133" +
    "\117\134\121\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\030\133\055\142\117\134\121" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\133\055\147\117" +
    "\134\121\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\164\027\077\030" +
    "\161\054\163\117\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\114\045\113\046\170" +
    "\047\117\050\110\052\123\054\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\173\001\001\000\002" +
    "\001\001\000\004\117\175\001\001\000\002\001\001\000" +
    "\004\117\177\001\001\000\002\001\001\000\020\015\204" +
    "\036\206\040\201\041\210\043\214\053\212\054\207\001" +
    "\001\000\020\015\204\036\206\040\201\041\210\043\214" +
    "\053\u0111\054\207\001\001\000\002\001\001\000\016\017" +
    "\104\027\077\030\076\034\320\054\103\117\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\215\001\001\000\002\001\001\000" +
    "\016\017\104\027\077\030\076\034\216\054\103\117\101" +
    "\001\001\000\002\001\001\000\020\015\221\044\226\045" +
    "\113\047\223\050\110\052\123\054\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\221\044\235\045\113\047\223\050\110\052\123\054\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\221" +
    "\044\232\045\113\047\223\050\110\052\123\054\224\001" +
    "\001\000\002\001\001\000\020\015\221\044\234\045\113" +
    "\047\223\050\110\052\123\054\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\244\022\243\027\077\030\241\117\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\244\022\250\027\077\030\241\117\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\244\022" +
    "\253\027\077\030\241\117\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\244\022\256\027\077\030" +
    "\241\117\242\001\001\000\002\001\001\000\014\017\244" +
    "\022\260\027\077\030\241\117\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\221\044\263\045\113" +
    "\047\223\050\110\052\123\054\224\001\001\000\002\001" +
    "\001\000\014\017\244\022\265\027\077\030\241\117\242" +
    "\001\001\000\002\001\001\000\014\017\244\022\267\027" +
    "\077\030\241\117\242\001\001\000\002\001\001\000\020" +
    "\015\221\044\271\045\113\047\223\050\110\052\123\054" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\221\044\275\045\113\047\223\050" +
    "\110\052\123\054\224\001\001\000\002\001\001\000\020" +
    "\015\221\044\277\045\113\047\223\050\110\052\123\054" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\204\036\206\040" +
    "\201\041\210\043\214\053\304\054\207\001\001\000\002" +
    "\001\001\000\020\015\204\036\206\040\201\041\210\043" +
    "\214\053\306\054\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\244\022\312\027" +
    "\077\030\241\117\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\204\036\206\040\201\041\210\043" +
    "\214\053\315\054\207\001\001\000\002\001\001\000\020" +
    "\015\204\036\206\040\201\041\210\043\214\053\317\054" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\325\036\206\040\323\041\210\043" +
    "\214\054\327\104\331\001\001\000\020\015\325\036\206" +
    "\040\323\041\210\043\214\054\327\104\u010a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\336\114\334\123" +
    "\333\001\001\000\002\001\001\000\016\017\104\027\077" +
    "\030\076\034\360\054\103\117\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\325\036" +
    "\206\040\323\041\210\043\214\054\327\104\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\325\036\206" +
    "\040\323\041\210\043\214\054\327\104\351\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\325" +
    "\036\206\040\323\041\210\043\214\054\327\104\363\001" +
    "\001\000\010\042\366\114\364\123\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\325\036\206\040\323\041\210\043\214\054\327\104\370" +
    "\001\001\000\002\001\001\000\020\015\325\036\206\040" +
    "\323\041\210\043\214\054\327\104\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\244\022\376\027\077\030\241\117\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\325\036\206\040" +
    "\323\041\210\043\214\054\327\104\u0101\001\001\000\002" +
    "\001\001\000\020\015\325\036\206\040\323\041\210\043" +
    "\214\054\327\104\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\325\036\206\040" +
    "\323\041\210\043\214\054\327\104\u0107\001\001\000\002" +
    "\001\001\000\020\015\325\036\206\040\323\041\210\043" +
    "\214\054\327\104\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\204\036\206\040\201\041\210\043\214\053\u010e\054\207" +
    "\001\001\000\002\001\001\000\020\015\204\036\206\040" +
    "\201\041\210\043\214\053\u0110\054\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\114\045\113\046" +
    "\u0113\047\117\050\110\052\123\054\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\244" +
    "\022\u011a\027\077\030\241\117\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\114\045\113\046\u011d" +
    "\047\117\050\110\052\123\054\120\001\001\000\002\001" +
    "\001\000\020\015\114\045\113\046\u011f\047\117\050\110" +
    "\052\123\054\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u0124\045\113\047\u0126" +
    "\050\110\052\123\054\u0127\105\u0129\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u0124" +
    "\045\113\047\u0126\050\110\052\123\054\u0127\105\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\051\u012c" +
    "\112\u012d\123\u012a\001\001\000\016\017\104\027\077\030" +
    "\076\034\u013e\054\103\117\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\u0124\045\113\047" +
    "\u0126\050\110\052\123\054\u0127\105\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\u0124\045\113\047\u0126\050\110\052\123" +
    "\054\u0127\105\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\u0124\045\113\047\u0126\050" +
    "\110\052\123\054\u0127\105\u0141\001\001\000\010\051\u0143" +
    "\112\u0144\123\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u0124\045\113\047\u0126" +
    "\050\110\052\123\054\u0127\105\u0146\001\001\000\002\001" +
    "\001\000\020\015\u0124\045\113\047\u0126\050\110\052\123" +
    "\054\u0127\105\u0148\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\244" +
    "\022\u014d\027\077\030\241\117\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u0124\045\113\047\u0126" +
    "\050\110\052\123\054\u0127\105\u0150\001\001\000\002\001" +
    "\001\000\020\015\u0124\045\113\047\u0126\050\110\052\123" +
    "\054\u0127\105\u0152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u0124\045\113\047\u0126" +
    "\050\110\052\123\054\u0127\105\u0156\001\001\000\002\001" +
    "\001\000\020\015\u0124\045\113\047\u0126\050\110\052\123" +
    "\054\u0127\105\u0158\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\114\045\113\046\u015b\047\117\050\110" +
    "\052\123\054\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\u0163" +
    "\027\077\030\u0160\054\u0162\117\u0161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u016b\027\077\030\u0168\054\u016a\117\u0169\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\u0170\027\077" +
    "\030\u016e\117\u016f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\u0181\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\u017e\025\u0178\026\u0179\027\u0177" +
    "\001\001\000\002\001\001\000\010\025\u0180\026\u0179\027" +
    "\u0177\001\001\000\002\001\001\000\014\023\u0183\024\u017c" +
    "\025\u0178\026\u0179\027\u0177\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\u0185\024\u017c\025\u0178\026\u0179" +
    "\027\u0177\001\001\000\002\001\001\000\010\025\u0187\026" +
    "\u0179\027\u0177\001\001\000\002\001\001\000\006\026\u0189" +
    "\027\u0177\001\001\000\002\001\001\000\014\017\u018e\027" +
    "\077\030\u018b\054\u018d\117\u018c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\u0195\027\077" +
    "\030\u0192\054\u0194\117\u0193\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\023\u017b\024\u017c\025\u0178\026\u0179\027" +
    "\u0177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\133\055\132\117\134\121\u019d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\054\021\u01a3\031\064\032\050\036\055\045\053" +
    "\054\061\120\063\001\001\000\002\001\001\000\022\015" +
    "\054\021\u01a5\031\064\032\050\036\055\045\053\054\061" +
    "\120\063\001\001\000\002\001\001\000\022\015\054\021" +
    "\u01a7\031\064\032\050\036\055\045\053\054\061\120\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\u01aa\001\001\000\002\001\001\000\004\117\u01ac\001\001" +
    "\000\002\001\001\000\004\117\u01ae\001\001\000\002\001" +
    "\001\000\020\015\u01b3\036\206\037\u01b2\040\u01b0\041\210" +
    "\043\214\054\u01b5\001\001\000\020\015\u01b3\036\206\037" +
    "\u01ca\040\u01b0\041\210\043\214\054\u01b5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u01b3" +
    "\036\206\037\u01b8\040\u01b0\041\210\043\214\054\u01b5\001" +
    "\001\000\002\001\001\000\020\015\u01b3\036\206\037\u01ba" +
    "\040\u01b0\041\210\043\214\054\u01b5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\244" +
    "\022\u01be\027\077\030\241\117\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u01b3\036\206\037\u01c1" +
    "\040\u01b0\041\210\043\214\054\u01b5\001\001\000\002\001" +
    "\001\000\020\015\u01b3\036\206\037\u01c3\040\u01b0\041\210" +
    "\043\214\054\u01b5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u01b3\036\206\037\u01c9\040\u01b0\041\210\043" +
    "\214\054\u01b5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u01d5\001\001\000\016\016" +
    "\u01d1\017\u01d2\027\077\030\u01ce\054\u01d0\117\u01cf\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\u01d8\017\u01d9\027" +
    "\077\030\u01ce\054\u01d7\117\u01cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\244\022\u01de" +
    "\027\077\030\241\117\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\054\021\u01e1\031\064\032\050" +
    "\036\055\045\053\054\061\120\063\001\001\000\002\001" +
    "\001\000\022\015\054\021\u01e3\031\064\032\050\036\055" +
    "\045\053\054\061\120\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u01e8\031\u01ed" +
    "\032\050\036\055\045\053\054\u01eb\103\u01ea\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\u01f6\113\u01f5\123\u01f4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u01e8\031\u01ed" +
    "\032\050\036\055\045\053\054\u01eb\103\u01ef\001\001\000" +
    "\002\001\001\000\020\015\u01e8\031\u01ed\032\050\036\055" +
    "\045\053\054\u01eb\103\u01f1\001\001\000\002\001\001\000" +
    "\020\015\u01e8\031\u01ed\032\050\036\055\045\053\054\u01eb" +
    "\103\u01f3\001\001\000\002\001\001\000\016\017\104\027" +
    "\077\030\076\034\u0208\054\103\117\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u01e8" +
    "\031\u01ed\032\050\036\055\045\053\054\u01eb\103\u01fc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\u01e8\031\u01ed\032\050\036" +
    "\055\045\053\054\u01eb\103\u0201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\u01e8\031\u01ed\032" +
    "\050\036\055\045\053\054\u01eb\103\u020b\001\001\000\010" +
    "\033\u020d\113\u020c\123\u01f4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\244\022\u0212\027\077\030\241\117" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u01e8\031\u01ed\032\050\036\055\045\053\054\u01eb\103" +
    "\u0215\001\001\000\002\001\001\000\020\015\u01e8\031\u01ed" +
    "\032\050\036\055\045\053\054\u01eb\103\u0217\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u01e8\031\u01ed" +
    "\032\050\036\055\045\053\054\u01eb\103\u021a\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\054\021\u021d" +
    "\031\064\032\050\036\055\045\053\054\061\120\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0220" +
    "\001\001\000\002\001\001\000\004\011\u0222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\054\021\u0226\031\064\032\050\036\055\045\053\054" +
    "\061\120\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\017\010\015" +
    "\020\u022e\057\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0232\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0235\001\001\000" +
    "\002\001\001\000\020\013\u0239\015\u023a\054\u023e\060\u0242" +
    "\061\u0241\063\u023b\072\u0240\001\001\000\002\001\001\000" +
    "\016\017\104\027\077\030\076\034\u0312\054\103\117\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\u02dc\015\u023a\054\u023e\060\u0242\061\u0241\063\u023b" +
    "\072\u0240\001\001\000\004\122\u0244\001\001\000\016\017" +
    "\104\027\077\030\076\034\u0245\054\103\117\101\001\001" +
    "\000\002\001\001\000\020\015\u024c\054\u024f\063\u024d\065" +
    "\u0251\066\u0247\070\u0249\073\u024b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\104\027" +
    "\077\030\076\034\u029d\054\103\117\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u024c" +
    "\054\u024f\063\u024d\065\u0251\066\u0247\070\u0249\073\u0276\001" +
    "\001\000\004\122\u0253\001\001\000\016\017\104\027\077" +
    "\030\076\034\u0254\054\103\117\101\001\001\000\002\001" +
    "\001\000\020\015\u0257\045\113\047\u025a\050\110\052\123" +
    "\054\u025b\071\u0258\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\114" +
    "\045\113\046\u0261\047\117\050\110\052\123\054\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u0257" +
    "\045\113\047\u025a\050\110\052\123\054\u025b\071\u025e\001" +
    "\001\000\002\001\001\000\020\015\114\045\113\046\u0260" +
    "\047\117\050\110\052\123\054\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\244\022\u0265\027\077\030\241\117\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\114" +
    "\045\113\046\u0268\047\117\050\110\052\123\054\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\114\045\113\046\u026c\047\117\050\110\052" +
    "\123\054\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\114\045" +
    "\113\046\u0271\047\117\050\110\052\123\054\120\001\001" +
    "\000\002\001\001\000\020\015\114\045\113\046\u0273\047" +
    "\117\050\110\052\123\054\120\001\001\000\002\001\001" +
    "\000\020\015\114\045\113\046\u0275\047\117\050\110\052" +
    "\123\054\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u024c\054\u024f\063\u024d\065\u0251\066\u0247\070" +
    "\u0249\073\u0278\001\001\000\002\001\001\000\020\015\u027c" +
    "\054\u027e\060\u0280\061\u0241\063\u023b\072\u0240\106\u027a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\u027c\054\u027e\060\u0280\061\u0241\063\u023b\072\u0240" +
    "\106\u0281\001\001\000\002\001\001\000\020\015\u027c\054" +
    "\u027e\060\u0280\061\u0241\063\u023b\072\u0240\106\u0283\001\001" +
    "\000\002\001\001\000\020\015\u027c\054\u027e\060\u0280\061" +
    "\u0241\063\u023b\072\u0240\106\u0285\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\244\022" +
    "\u0289\027\077\030\241\117\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\u027c\054\u027e\060\u0280\061" +
    "\u0241\063\u023b\072\u0240\106\u028c\001\001\000\002\001\001" +
    "\000\020\015\u027c\054\u027e\060\u0280\061\u0241\063\u023b\072" +
    "\u0240\106\u028e\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u027c\054\u027e\060\u0280\061\u0241\063\u023b\072" +
    "\u0240\106\u0291\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\244\022\u0295\027\077\030" +
    "\241\117\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u024c\054\u024f\063\u024d\065\u0251\066\u0247\070" +
    "\u0249\073\u0298\001\001\000\002\001\001\000\020\015\u024c" +
    "\054\u024f\063\u024d\065\u0251\066\u0247\070\u0249\073\u029a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u02a1\054" +
    "\u02a3\063\u024d\065\u02a6\066\u0247\070\u0249\107\u02a5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\067\u02aa\116\u02ab" +
    "\123\u02a8\001\001\000\020\015\u02a1\054\u02a3\063\u024d\065" +
    "\u02a6\066\u0247\070\u0249\107\u02a7\001\001\000\002\001\001" +
    "\000\016\017\104\027\077\030\076\034\u02bc\054\103\117" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u02a1\054\u02a3\063\u024d\065\u02a6\066\u0247\070" +
    "\u0249\107\u02b3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u02a1\054" +
    "\u02a3\063\u024d\065\u02a6\066\u0247\070\u0249\107\u02b8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u02a1\054\u02a3\063\u024d\065\u02a6\066\u0247\070\u0249\107" +
    "\u02bf\001\001\000\010\067\u02c1\116\u02c2\123\u02a8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\u02a1\054\u02a3\063\u024d\065\u02a6\066\u0247\070\u0249" +
    "\107\u02c4\001\001\000\002\001\001\000\020\015\u027c\054" +
    "\u027e\060\u0280\061\u0241\063\u023b\072\u0240\106\u02c6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\244\022\u02ca\027\077\030\241\117\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u02a1\054" +
    "\u02a3\063\u024d\065\u02a6\066\u0247\070\u0249\107\u02cd\001\001" +
    "\000\002\001\001\000\020\015\u02a1\054\u02a3\063\u024d\065" +
    "\u02a6\066\u0247\070\u0249\107\u02cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u02a1\054" +
    "\u02a3\063\u024d\065\u02a6\066\u0247\070\u0249\107\u02d3\001\001" +
    "\000\002\001\001\000\020\015\u02a1\054\u02a3\063\u024d\065" +
    "\u02a6\066\u0247\070\u0249\107\u02d5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u027c\054" +
    "\u027e\060\u0280\061\u0241\063\u023b\072\u0240\106\u02d9\001\001" +
    "\000\002\001\001\000\020\015\u027c\054\u027e\060\u0280\061" +
    "\u0241\063\u023b\072\u0240\106\u02db\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\u02de\015\u023a\054\u023e\060" +
    "\u0242\061\u0241\063\u023b\072\u0240\001\001\000\002\001\001" +
    "\000\020\013\u02e0\015\u023a\054\u023e\060\u0242\061\u0241\063" +
    "\u023b\072\u0240\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\u02e3\001\001\000\002\001\001\000\004\117" +
    "\u02e5\001\001\000\002\001\001\000\004\117\u02e7\001\001" +
    "\000\002\001\001\000\020\015\u02ea\054\u02ec\063\u024d\064" +
    "\u02ed\065\u02ef\066\u0247\070\u0249\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u02ea\054\u02ec" +
    "\063\u024d\064\u02f0\065\u02ef\066\u0247\070\u0249\001\001\000" +
    "\002\001\001\000\020\015\u02ea\054\u02ec\063\u024d\064\u02f2" +
    "\065\u02ef\066\u0247\070\u0249\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u02ea\054\u02ec\063\u024d\064\u02f7\065\u02ef\066\u0247\070" +
    "\u0249\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\244\022\u02fb\027\077\030\241\117" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u02ea\054\u02ec\063\u024d\064\u02fe\065\u02ef\066\u0247\070" +
    "\u0249\001\001\000\002\001\001\000\020\015\u02ea\054\u02ec" +
    "\063\u024d\064\u0300\065\u02ef\066\u0247\070\u0249\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u02ea\054\u02ec\063\u024d\064\u0304\065\u02ef\066\u0247\070" +
    "\u0249\001\001\000\002\001\001\000\020\015\u02ea\054\u02ec" +
    "\063\u024d\064\u0306\065\u02ef\066\u0247\070\u0249\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\244\022\u030a\027\077\030\241\117\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\u030d\015\u023a" +
    "\054\u023e\060\u0242\061\u0241\063\u023b\072\u0240\001\001\000" +
    "\002\001\001\000\020\013\u030f\015\u023a\054\u023e\060\u0242" +
    "\061\u0241\063\u023b\072\u0240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u027c\054\u027e\060\u0280\061\u0241\063" +
    "\u023b\072\u0240\106\u0315\001\001\000\010\062\u0319\115\u0317" +
    "\123\u0316\001\001\000\016\017\104\027\077\030\076\034" +
    "\u032a\054\103\117\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u027c\054\u027e\060\u0280" +
    "\061\u0241\063\u023b\072\u0240\106\u031e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u027c\054\u027e\060\u0280\061\u0241\063\u023b\072" +
    "\u0240\106\u0323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u027c\054\u027e\060\u0280\061\u0241\063" +
    "\u023b\072\u0240\106\u032d\001\001\000\010\062\u0330\115\u032e" +
    "\123\u0316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\u0333\015\u023a" +
    "\054\u023e\060\u0242\061\u0241\063\u023b\072\u0240\001\001\000" +
    "\002\001\001\000\012\007\017\010\015\020\u0335\057\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\u0339\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u033d\001\001\000" +
    "\002\001\001\000\004\056\u033f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0347\001\001\000\002\001\001\000\004\003\u0349\001" +
    "\001\000\002\001\001\000\004\005\u034b\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // INFOR_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // INFOR_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // INFOR_WHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // INFOR_WHILE_FUNCION ::= exit function_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // INFOR_WHILE_FUNCION ::= exit for_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INFOR_WHILE_FUNCION ::= exit do_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INFOR_WHILE_FUNCION ::= DECLARACION findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // INFOR_WHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_WHILE_FUNCION next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // INIF_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // INIF_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // INIF_WHILE_FUNCION ::= exit for_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // INIF_WHILE_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // INIF_WHILE_FUNCION ::= DECLARACION findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // INIF_WHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // IF_WHILE_FUNCION ::= if_ CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // INWHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // INWHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // INWHILE_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // INWHILE_FUNCION ::= exit do_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // INWHILE_FUNCION ::= DECLARACION findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // INWHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION findelinea INWHILE_FUNCION loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // INWHILE_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // INWHILE_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // INWHILE_FOR_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // INWHILE_FOR_FUNCION ::= exit function_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // INWHILE_FOR_FUNCION ::= exit for_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INWHILE_FOR_FUNCION ::= exit do_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INWHILE_FOR_FUNCION ::= DECLARACION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INWHILE_FOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION findelinea INWHILE_FOR_FUNCION loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // INIF_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // INIF_FOR_FUNCION ::= exit for_ findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // INIF_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INIF_FOR_FUNCION ::= exit function_ findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // INIF_FOR_FUNCION ::= DECLARACION findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // INIF_FOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION else_ findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INFOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INFOR_FUNCION ::= exit for_ findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INFOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INFOR_FUNCION ::= exit function_ findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INFOR_FUNCION ::= DECLARACION findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // INFOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_FUNCION next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INIF_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INIF_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INIF_FUNCION ::= DECLARACION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INIF_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION else_ findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INFUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // INFUNCION ::= exit function_ findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // INFUNCION ::= LLAMAR_FUNCION findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INFUNCION ::= DECLARACION findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INFUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INFUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ findelinea INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // STRUCT_ ::= Public_ struct_ identificador findelinea DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INFOR_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INFOR_WHILE ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INFOR_WHILE ::= exit do_ findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INFOR_WHILE ::= exit for_ findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INFOR_WHILE ::= DECLARACION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INFOR_WHILE ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_WHILE next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE else_ findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INIF_WHILE ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INIF_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INIF_WHILE ::= exit sub findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INIF_WHILE ::= exit do_ findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INIF_WHILE ::= LLAMAR_FUNCION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INIF_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INIF_WHILE ::= DECLARACION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INIF_WHILE ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INWHILE_MAIN ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INWHILE_MAIN ::= exit do_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INWHILE_MAIN ::= DECLARACION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INWHILE_MAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION findelinea INWHILE_MAIN loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INWHILE_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INWHILE_FOR ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INWHILE_FOR ::= exit for_ findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INWHILE_FOR ::= exit do_ findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INWHILE_FOR ::= DECLARACION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // INWHILE_FOR ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION findelinea INWHILE_FOR loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR else_ findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INIF_FOR ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INIF_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INIF_FOR ::= exit sub findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INIF_FOR ::= exit for_ findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INIF_FOR ::= LLAMAR_FUNCION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INIF_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INIF_FOR ::= DECLARACION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INIF_FOR ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INFOR_MAIN ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // INFOR_MAIN ::= exit for_ findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INFOR_MAIN ::= DECLARACION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INFOR_MAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_MAIN next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then findelinea INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then findelinea INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then findelinea INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INIF ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INIF ::= exit sub findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INIF ::= LLAMAR_FUNCION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INIF ::= DECLARACION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INIF ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INIF ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IF_MAIN ::= if_ CONDICION then findelinea INIF else_ findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IF_MAIN ::= if_ CONDICION then findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= dim identificador as TYPE_ igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= dim identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= identificador punto identificador igual texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= identificador punto identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= identificador punto identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= identificador punto identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= identificador igual texto_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= dim identificador igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= dim identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_PARENTESIS ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_POTENCIA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_POTENCIA ::= potencia numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_POTENCIA ::= potencia numero OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION_MULT_DIV ::= OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_MULT_DIV ::= div numero OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_MULT_DIV ::= mult numero OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_MULT_DIV ::= div numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION_MULT_DIV ::= mult numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION_MOD ::= OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION_MOD ::= mod_ numero OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION_MOD ::= mod_ numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION_ARITMETICA_MAS_MENOS ::= OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION_ARITMETICA_MAS_MENOS ::= resta numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_ARITMETICA_MAS_MENOS ::= suma NUMERO OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION_ARITMETICA_MAS_MENOS ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_ARITMETICA_MAS_MENOS ::= suma numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_ARITMETICA ::= OPERACION_PARENTESIS OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_ARITMETICA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_ARITMETICA ::= numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LLAMAR_SUB ::= identificador PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INMAIN ::= exit sub findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INMAIN ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INMAIN ::= LLAMAR_SUB findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INMAIN ::= LLAMAR_SUB findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INMAIN ::= LLAMAR_FUNCION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INMAIN ::= DECLARACION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INMAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INMAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INMAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN end_ sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NEXT_MODULE ::= FUNCION_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NEXT_MODULE ::= STRUCT_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

