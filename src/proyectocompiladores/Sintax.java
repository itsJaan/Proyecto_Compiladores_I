
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 17 23:27:50 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 17 23:27:50 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0228\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\003\005\000\002\003\006" +
    "\000\002\005\003\000\002\005\005\000\002\005\003\000" +
    "\002\005\005\000\002\004\011\000\002\004\012\000\002" +
    "\021\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\010\014\000\002\010\015\000\002\010\015\000" +
    "\002\010\016\000\002\121\003\000\002\121\004\000\002" +
    "\022\011\000\002\022\003\000\002\022\003\000\002\022" +
    "\004\000\002\022\005\000\002\022\004\000\002\022\012" +
    "\000\002\022\004\000\002\022\004\000\002\022\005\000" +
    "\002\022\003\000\002\022\004\000\002\022\005\000\002" +
    "\022\006\000\002\022\010\000\002\022\011\000\002\022" +
    "\010\000\002\022\011\000\002\114\004\000\002\122\004" +
    "\000\002\122\005\000\002\122\007\000\002\122\006\000" +
    "\002\113\003\000\002\113\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\007\000\002\123\003\000\002\123\003\000\002" +
    "\123\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\006\000\002\017\006\000\002\017\007\000\002\017\007" +
    "\000\002\017\010\000\002\017\006\000\002\017\006\000" +
    "\002\017\007\000\002\017\010\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\017\007\000\002\017" +
    "\007\000\002\017\010\000\002\017\007\000\002\017\010" +
    "\000\002\017\006\000\002\017\006\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\120\003\000\002\120" +
    "\003\000\002\015\007\000\002\015\011\000\002\015\007" +
    "\000\002\015\007\000\002\015\011\000\002\015\011\000" +
    "\002\015\007\000\002\015\006\000\002\015\006\000\002" +
    "\015\006\000\002\015\005\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\010\000\002\015\010" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\007\000\002" +
    "\015\011\000\002\015\006\000\002\015\010\000\002\015" +
    "\007\000\002\015\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\124\007\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\116\003\000\002\116\003\000\002\117\004\000" +
    "\002\117\003\000\002\026\012\000\002\026\015\000\002" +
    "\026\015\000\002\026\013\000\002\077\011\000\002\077" +
    "\003\000\002\077\003\000\002\077\004\000\002\077\005" +
    "\000\002\077\004\000\002\077\012\000\002\077\004\000" +
    "\002\077\005\000\002\077\005\000\002\077\003\000\002" +
    "\077\004\000\002\077\006\000\002\077\005\000\002\077" +
    "\010\000\002\077\011\000\002\077\010\000\002\077\011" +
    "\000\002\027\010\000\002\027\010\000\002\107\010\000" +
    "\002\107\007\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\031\004\000" +
    "\002\031\004\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\017\000\002\033\011\000\002\033" +
    "\003\000\002\033\003\000\002\033\012\000\002\033\004" +
    "\000\002\033\004\000\002\033\005\000\002\033\004\000" +
    "\002\033\004\000\002\033\005\000\002\033\003\000\002" +
    "\033\004\000\002\033\006\000\002\033\005\000\002\033" +
    "\010\000\002\033\011\000\002\033\010\000\002\033\011" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\100\011\000\002\100\003\000\002\100\003\000\002" +
    "\100\012\000\002\100\004\000\002\100\004\000\002\100" +
    "\005\000\002\100\004\000\002\100\004\000\002\100\005" +
    "\000\002\100\003\000\002\100\004\000\002\100\006\000" +
    "\002\100\006\000\002\100\005\000\002\100\005\000\002" +
    "\100\010\000\002\100\011\000\002\100\010\000\002\100" +
    "\011\000\002\035\012\000\002\035\015\000\002\035\015" +
    "\000\002\035\013\000\002\036\010\000\002\036\010\000" +
    "\002\110\007\000\002\110\010\000\002\037\011\000\002" +
    "\040\011\000\002\040\003\000\002\040\003\000\002\040" +
    "\004\000\002\040\005\000\002\040\012\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\005\000" +
    "\002\040\003\000\002\040\004\000\002\040\006\000\002" +
    "\040\006\000\002\040\005\000\002\040\005\000\002\040" +
    "\010\000\002\040\011\000\002\040\010\000\002\040\011" +
    "\000\002\041\011\000\002\042\011\000\002\042\003\000" +
    "\002\042\003\000\002\042\004\000\002\042\005\000\002" +
    "\042\012\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\005\000\002\042\003\000\002\042\004" +
    "\000\002\042\006\000\002\042\005\000\002\042\010\000" +
    "\002\042\011\000\002\042\010\000\002\042\011\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\101" +
    "\011\000\002\101\003\000\002\101\003\000\002\101\004" +
    "\000\002\101\005\000\002\101\012\000\002\101\004\000" +
    "\002\101\004\000\002\101\004\000\002\101\005\000\002" +
    "\101\003\000\002\101\004\000\002\101\006\000\002\101" +
    "\006\000\002\101\005\000\002\101\005\000\002\101\010" +
    "\000\002\101\011\000\002\101\010\000\002\101\011\000" +
    "\002\044\012\000\002\044\015\000\002\044\015\000\002" +
    "\044\013\000\002\045\010\000\002\045\010\000\002\106" +
    "\007\000\002\106\010\000\002\046\017\000\002\047\011" +
    "\000\002\047\003\000\002\047\004\000\002\047\005\000" +
    "\002\047\003\000\002\047\012\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\005\000\002\047" +
    "\003\000\002\047\004\000\002\047\006\000\002\047\006" +
    "\000\002\047\005\000\002\047\005\000\002\047\010\000" +
    "\002\047\011\000\002\047\010\000\002\047\011\000\002" +
    "\050\005\000\002\050\005\000\002\051\004\000\002\051" +
    "\005\000\002\051\007\000\002\051\006\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\052\007\000" +
    "\002\052\010\000\002\007\011\000\002\053\016\000\002" +
    "\011\005\000\002\011\007\000\002\011\010\000\002\011" +
    "\006\000\002\013\011\000\002\013\003\000\002\013\003" +
    "\000\002\013\004\000\002\013\005\000\002\013\004\000" +
    "\002\013\012\000\002\013\004\000\002\013\004\000\002" +
    "\013\005\000\002\013\003\000\002\013\004\000\002\013" +
    "\006\000\002\013\005\000\002\013\010\000\002\013\011" +
    "\000\002\013\010\000\002\013\011\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\055\012\000\002" +
    "\055\015\000\002\055\015\000\002\055\013\000\002\102" +
    "\011\000\002\102\003\000\002\102\004\000\002\102\005" +
    "\000\002\102\003\000\002\102\012\000\002\102\004\000" +
    "\002\102\004\000\002\102\004\000\002\102\005\000\002" +
    "\102\003\000\002\102\004\000\002\102\006\000\002\102" +
    "\005\000\002\102\010\000\002\102\011\000\002\102\010" +
    "\000\002\102\011\000\002\056\010\000\002\056\010\000" +
    "\002\111\007\000\002\111\010\000\002\057\017\000\002" +
    "\060\011\000\002\060\003\000\002\060\004\000\002\060" +
    "\005\000\002\060\003\000\002\060\012\000\002\060\004" +
    "\000\002\060\004\000\002\060\004\000\002\060\005\000" +
    "\002\060\003\000\002\060\004\000\002\060\006\000\002" +
    "\060\005\000\002\060\006\000\002\060\005\000\002\060" +
    "\010\000\002\060\011\000\002\060\010\000\002\060\011" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\062\012\000\002\062\015\000\002\062\015\000\002" +
    "\062\013\000\002\103\011\000\002\103\003\000\002\103" +
    "\004\000\002\103\005\000\002\103\003\000\002\103\012" +
    "\000\002\103\004\000\002\103\004\000\002\103\004\000" +
    "\002\103\005\000\002\103\003\000\002\103\004\000\002" +
    "\103\006\000\002\103\005\000\002\103\006\000\002\103" +
    "\005\000\002\103\010\000\002\103\011\000\002\103\010" +
    "\000\002\103\011\000\002\063\010\000\002\063\010\000" +
    "\002\112\007\000\002\112\010\000\002\064\011\000\002" +
    "\065\011\000\002\065\003\000\002\065\003\000\002\065" +
    "\004\000\002\065\005\000\002\065\012\000\002\065\004" +
    "\000\002\065\004\000\002\065\004\000\002\065\005\000" +
    "\002\065\003\000\002\065\004\000\002\065\006\000\002" +
    "\065\006\000\002\065\006\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\010\000\002\065\011" +
    "\000\002\065\010\000\002\065\011\000\002\066\011\000" +
    "\002\067\011\000\002\067\003\000\002\067\004\000\002" +
    "\067\005\000\002\067\003\000\002\067\012\000\002\067" +
    "\004\000\002\067\004\000\002\067\004\000\002\067\005" +
    "\000\002\067\003\000\002\067\004\000\002\067\006\000" +
    "\002\067\006\000\002\067\005\000\002\067\005\000\002" +
    "\067\010\000\002\067\011\000\002\067\010\000\002\067" +
    "\011\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\071\012\000\002\071\014\000\002\071\016\000" +
    "\002\071\011\000\002\071\013\000\002\104\011\000\002" +
    "\104\003\000\002\104\004\000\002\104\005\000\002\104" +
    "\003\000\002\104\012\000\002\104\004\000\002\104\004" +
    "\000\002\104\004\000\002\104\005\000\002\104\003\000" +
    "\002\104\004\000\002\104\006\000\002\104\006\000\002" +
    "\104\005\000\002\104\005\000\002\104\010\000\002\104" +
    "\011\000\002\104\010\000\002\104\011\000\002\074\010" +
    "\000\002\074\010\000\002\105\007\000\002\105\010\000" +
    "\002\072\017\000\002\073\011\000\002\073\003\000\002" +
    "\073\003\000\002\073\004\000\002\073\005\000\002\073" +
    "\012\000\002\073\004\000\002\073\004\000\002\073\004" +
    "\000\002\073\005\000\002\073\003\000\002\073\004\000" +
    "\002\073\006\000\002\073\006\000\002\073\006\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\010\000\002\073\011\000\002\073\010\000\002\073\011" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0419\000\004\004\004\001\002\000\006\017\u0415\051" +
    "\u0413\001\002\000\004\002\u0412\001\002\000\004\006\007" +
    "\001\002\000\004\007\015\001\002\000\010\002\000\100" +
    "\012\102\011\001\002\000\006\002\ufffe\100\014\001\002" +
    "\000\046\002\uffea\004\uffea\005\uffea\006\uffea\011\uffea\012" +
    "\uffea\013\uffea\020\uffea\023\uffea\027\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\051\uffea\100\uffea\102\uffea\107\uffea\001" +
    "\002\000\004\002\uffff\001\002\000\046\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\011\uffe9\012\uffe9\013\uffe9\020\uffe9\023" +
    "\uffe9\027\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\051\uffe9" +
    "\100\uffe9\102\uffe9\107\uffe9\001\002\000\004\051\016\001" +
    "\002\000\006\100\020\102\017\001\002\000\004\100\u040e" +
    "\001\002\000\010\006\022\033\023\102\021\001\002\000" +
    "\004\100\u040c\001\002\000\006\010\035\025\u0400\001\002" +
    "\000\004\030\u02c5\001\002\000\006\013\ufff5\100\u02c3\001" +
    "\002\000\010\006\031\100\012\102\030\001\002\000\004" +
    "\013\u02be\001\002\000\010\006\031\100\012\102\030\001" +
    "\002\000\004\100\014\001\002\000\004\010\035\001\002" +
    "\000\004\013\ufff3\001\002\000\010\006\022\033\023\102" +
    "\021\001\002\000\004\013\ufff1\001\002\000\006\051\037" +
    "\103\036\001\002\000\004\073\u02b1\001\002\000\004\073" +
    "\040\001\002\000\006\051\043\106\041\001\002\000\004" +
    "\051\u02ac\001\002\000\004\074\055\001\002\000\004\022" +
    "\044\001\002\000\014\014\050\015\047\016\052\046\051" +
    "\051\046\001\002\000\006\074\ufea3\104\053\001\002\000" +
    "\014\054\uff84\074\uff84\100\uff84\102\uff84\104\uff84\001\002" +
    "\000\014\054\uff87\074\uff87\100\uff87\102\uff87\104\uff87\001" +
    "\002\000\014\054\uff86\074\uff86\100\uff86\102\uff86\104\uff86" +
    "\001\002\000\014\054\uff85\074\uff85\100\uff85\102\uff85\104" +
    "\uff85\001\002\000\014\054\uff88\074\uff88\100\uff88\102\uff88" +
    "\104\uff88\001\002\000\006\051\043\106\041\001\002\000" +
    "\004\074\ufea2\001\002\000\006\100\057\102\056\001\002" +
    "\000\004\100\u02a7\001\002\000\022\005\062\011\071\012" +
    "\067\020\066\023\077\035\061\051\076\102\073\001\002" +
    "\000\032\005\uff7c\011\uff7c\012\uff7c\013\uff7c\020\uff7c\023" +
    "\uff7c\027\uff7c\035\uff7c\051\uff7c\100\uff7c\102\uff7c\107\uff7c" +
    "\001\002\000\004\010\u02a4\001\002\000\016\042\105\043" +
    "\107\051\115\060\103\065\111\073\104\001\002\000\032" +
    "\005\uff7a\011\uff7a\012\uff7a\013\uff7a\020\uff7a\023\uff7a\027" +
    "\uff7a\035\uff7a\051\uff7a\100\uff7a\102\uff7a\107\uff7a\001\002" +
    "\000\024\005\062\011\071\012\067\013\uffe7\020\066\023" +
    "\077\035\061\051\076\102\073\001\002\000\032\005\uff7b" +
    "\011\uff7b\012\uff7b\013\uff7b\020\uff7b\023\uff7b\027\uff7b\035" +
    "\uff7b\051\uff7b\100\uff7b\102\uff7b\107\uff7b\001\002\000\004" +
    "\070\u0254\001\002\000\004\051\u0238\001\002\000\006\100" +
    "\012\102\030\001\002\000\004\051\u020a\001\002\000\024" +
    "\005\062\011\071\012\067\013\uffde\020\066\023\077\035" +
    "\061\051\076\102\073\001\002\000\004\100\u0207\001\002" +
    "\000\024\005\062\011\071\012\067\013\uffe6\020\066\023" +
    "\077\035\061\051\076\102\073\001\002\000\004\013\u0203" +
    "\001\002\000\022\042\105\043\107\051\241\054\u01d3\060" +
    "\103\065\111\070\u01d0\073\u01cf\001\002\000\006\024\102" +
    "\036\101\001\002\000\016\042\105\043\107\051\115\060" +
    "\103\065\111\073\104\001\002\000\016\042\uff79\043\uff79" +
    "\051\uff79\060\uff79\065\uff79\073\uff79\001\002\000\016\042" +
    "\uff78\043\uff78\051\uff78\060\uff78\065\uff78\073\uff78\001\002" +
    "\000\004\065\311\001\002\000\012\051\261\060\103\065" +
    "\111\073\104\001\002\000\024\026\uff7e\054\uff7e\055\uff7e" +
    "\056\uff7e\074\uff7e\100\uff7e\101\uff7e\102\uff7e\104\uff7e\001" +
    "\002\000\010\054\u019f\055\u01a1\056\u01a0\001\002\000\024" +
    "\026\uff7d\054\uff7d\055\uff7d\056\uff7d\074\uff7d\100\uff7d\101" +
    "\uff7d\102\uff7d\104\uff7d\001\002\000\026\054\u019f\055\u01a1" +
    "\056\u01a0\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\073" +
    "\uffc3\110\uffc3\001\002\000\076\005\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\020\uffd1\023\uffd1\026\uffd1\027\uffd1\032\uffd1\034" +
    "\uffd1\035\uffd1\037\uffd1\047\uffd1\051\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\073" +
    "\uffd1\074\uffd1\100\uffd1\101\uffd1\102\uffd1\104\uffd1\107\uffd1" +
    "\110\uffd1\001\002\000\026\054\u019f\055\u01a1\056\u01a0\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\073\uffc1\110\uffc1" +
    "\001\002\000\012\054\u019f\055\u01a1\056\u01a0\073\257\001" +
    "\002\000\020\057\271\060\277\061\272\062\266\063\265" +
    "\073\301\110\273\001\002\000\026\054\u019f\055\u01a1\056" +
    "\u01a0\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\073\232" +
    "\110\uffc2\001\002\000\006\100\012\102\030\001\002\000" +
    "\022\005\122\011\130\012\067\020\125\023\077\035\121" +
    "\051\076\102\132\001\002\000\032\005\ufee4\011\ufee4\012" +
    "\ufee4\013\ufee4\020\ufee4\023\ufee4\027\ufee4\034\ufee4\035\ufee4" +
    "\051\ufee4\102\ufee4\107\ufee4\001\002\000\004\023\u019c\001" +
    "\002\000\016\042\105\043\107\051\115\060\103\065\111" +
    "\073\104\001\002\000\032\005\ufee2\011\ufee2\012\ufee2\013" +
    "\ufee2\020\ufee2\023\ufee2\027\ufee2\034\ufee2\035\ufee2\051\ufee2" +
    "\102\ufee2\107\ufee2\001\002\000\024\005\122\011\130\012" +
    "\067\020\125\023\077\034\ufef5\035\121\051\076\102\132" +
    "\001\002\000\004\070\u014a\001\002\000\004\034\u0148\001" +
    "\002\000\024\005\122\011\130\012\067\020\125\023\077" +
    "\034\ufef4\035\121\051\076\102\132\001\002\000\004\051" +
    "\142\001\002\000\006\100\012\102\030\001\002\000\004" +
    "\100\136\001\002\000\024\005\122\011\130\012\067\020" +
    "\125\023\077\034\ufeec\035\121\051\076\102\132\001\002" +
    "\000\032\005\ufee3\011\ufee3\012\ufee3\013\ufee3\020\ufee3\023" +
    "\ufee3\027\ufee3\034\ufee3\035\ufee3\051\ufee3\102\ufee3\107\ufee3" +
    "\001\002\000\004\034\ufeeb\001\002\000\024\005\122\011" +
    "\130\012\067\020\125\023\077\034\ufef3\035\121\051\076" +
    "\102\132\001\002\000\004\034\ufef2\001\002\000\024\005" +
    "\122\011\130\012\067\020\125\023\077\034\ufeee\035\121" +
    "\051\076\102\132\001\002\000\004\034\ufeed\001\002\000" +
    "\004\054\143\001\002\000\006\060\103\065\111\001\002" +
    "\000\004\037\145\001\002\000\006\060\103\065\111\001" +
    "\002\000\004\047\147\001\002\000\006\060\103\065\111" +
    "\001\002\000\006\100\012\102\030\001\002\000\022\005" +
    "\154\011\071\012\067\020\157\023\166\035\153\051\076" +
    "\102\161\001\002\000\024\005\154\011\071\012\067\020" +
    "\157\023\166\032\ufec0\035\153\051\076\102\161\001\002" +
    "\000\006\011\u0141\023\u0140\001\002\000\016\042\105\043" +
    "\107\051\115\060\103\065\111\073\104\001\002\000\024" +
    "\005\154\011\071\012\067\020\157\023\166\032\ufec3\035" +
    "\153\051\076\102\161\001\002\000\032\005\uff2a\011\uff2a" +
    "\012\uff2a\013\uff2a\020\uff2a\023\uff2a\027\uff2a\032\uff2a\035" +
    "\uff2a\051\uff2a\102\uff2a\107\uff2a\001\002\000\004\070\354" +
    "\001\002\000\006\100\012\102\030\001\002\000\004\100" +
    "\350\001\002\000\032\005\uff2b\011\uff2b\012\uff2b\013\uff2b" +
    "\020\uff2b\023\uff2b\027\uff2b\032\uff2b\035\uff2b\051\uff2b\102" +
    "\uff2b\107\uff2b\001\002\000\024\005\154\011\071\012\067" +
    "\020\157\023\166\032\ufeba\035\153\051\076\102\161\001" +
    "\002\000\004\032\344\001\002\000\032\005\uff29\011\uff29" +
    "\012\uff29\013\uff29\020\uff29\023\uff29\027\uff29\032\uff29\035" +
    "\uff29\051\uff29\102\uff29\107\uff29\001\002\000\006\024\102" +
    "\036\101\001\002\000\016\042\105\043\107\051\115\060" +
    "\103\065\111\073\104\001\002\000\006\100\012\102\030" +
    "\001\002\000\022\005\122\011\130\012\067\020\174\023" +
    "\077\035\172\051\076\102\200\001\002\000\006\011\337" +
    "\023\336\001\002\000\024\005\122\011\130\012\067\020" +
    "\174\023\077\034\uff0a\035\172\051\076\102\200\001\002" +
    "\000\004\070\212\001\002\000\024\005\122\011\130\012" +
    "\067\020\174\023\077\034\uff09\035\172\051\076\102\200" +
    "\001\002\000\006\100\012\102\030\001\002\000\024\005" +
    "\122\011\130\012\067\020\174\023\077\034\uff01\035\172" +
    "\051\076\102\200\001\002\000\004\100\204\001\002\000" +
    "\004\034\202\001\002\000\006\100\012\102\030\001\002" +
    "\000\032\005\uff0c\011\uff0c\012\uff0c\013\uff0c\020\uff0c\023" +
    "\uff0c\027\uff0c\032\uff0c\035\uff0c\051\uff0c\102\uff0c\107\uff0c" +
    "\001\002\000\024\005\122\011\130\012\067\020\174\023" +
    "\077\034\uff08\035\172\051\076\102\200\001\002\000\004" +
    "\034\uff07\001\002\000\004\034\uff00\001\002\000\024\005" +
    "\122\011\130\012\067\020\174\023\077\034\uff03\035\172" +
    "\051\076\102\200\001\002\000\004\034\uff02\001\002\000" +
    "\004\034\uff04\001\002\000\006\021\214\111\213\001\002" +
    "\000\004\073\331\001\002\000\004\073\215\001\002\000" +
    "\022\042\105\043\107\051\224\060\103\064\225\065\111" +
    "\073\104\074\216\001\002\000\006\100\012\102\030\001" +
    "\002\000\006\074\uffcd\101\325\001\002\000\024\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\073\uffc3\074\uffce\101" +
    "\323\110\uffc3\001\002\000\004\074\320\001\002\000\040" +
    "\026\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\073\uffc1\074\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\110\uffc1\001\002\000\010\073\257\074\uffca\101" +
    "\256\001\002\000\026\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\070\230\073\232\074\uffcc\101\231\110\uffc2\001" +
    "\002\000\006\074\uffcf\101\226\001\002\000\020\042\105" +
    "\043\107\051\224\060\103\064\225\065\111\073\104\001" +
    "\002\000\004\074\uffc9\001\002\000\004\051\253\001\002" +
    "\000\020\042\105\043\107\051\224\060\103\064\225\065" +
    "\111\073\104\001\002\000\020\042\105\043\107\051\241" +
    "\060\103\065\111\073\234\074\233\001\002\000\040\026" +
    "\ufeb0\054\ufeb0\055\ufeb0\056\ufeb0\057\ufeb0\060\ufeb0\061\ufeb0" +
    "\062\ufeb0\063\ufeb0\073\ufeb0\074\ufeb0\100\ufeb0\101\ufeb0\102" +
    "\ufeb0\110\ufeb0\001\002\000\014\042\105\043\107\051\241" +
    "\060\103\065\111\001\002\000\040\026\ufeaf\054\ufeaf\055" +
    "\ufeaf\056\ufeaf\057\ufeaf\060\ufeaf\061\ufeaf\062\ufeaf\063\ufeaf" +
    "\073\ufeaf\074\ufeaf\100\ufeaf\101\ufeaf\102\ufeaf\110\ufeaf\001" +
    "\002\000\012\074\ufea9\100\ufea9\102\ufea9\104\ufea9\001\002" +
    "\000\012\074\ufea8\100\ufea8\102\ufea8\104\ufea8\001\002\000" +
    "\006\074\243\104\242\001\002\000\012\074\ufeaa\100\ufeaa" +
    "\102\ufeaa\104\ufeaa\001\002\000\016\042\105\043\107\051" +
    "\241\060\103\065\111\073\234\001\002\000\040\026\ufeae" +
    "\054\ufeae\055\ufeae\056\ufeae\057\ufeae\060\ufeae\061\ufeae\062" +
    "\ufeae\063\ufeae\073\ufeae\074\ufeae\100\ufeae\101\ufeae\102\ufeae" +
    "\110\ufeae\001\002\000\040\026\ufead\054\ufead\055\ufead\056" +
    "\ufead\057\ufead\060\ufead\061\ufead\062\ufead\063\ufead\073\ufead" +
    "\074\ufead\100\ufead\101\ufead\102\ufead\110\ufead\001\002\000" +
    "\004\074\246\001\002\000\006\074\250\104\247\001\002" +
    "\000\016\042\105\043\107\051\241\060\103\065\111\073" +
    "\234\001\002\000\040\026\ufeab\054\ufeab\055\ufeab\056\ufeab" +
    "\057\ufeab\060\ufeab\061\ufeab\062\ufeab\063\ufeab\073\ufeab\074" +
    "\ufeab\100\ufeab\101\ufeab\102\ufeab\110\ufeab\001\002\000\040" +
    "\026\ufeac\054\ufeac\055\ufeac\056\ufeac\057\ufeac\060\ufeac\061" +
    "\ufeac\062\ufeac\063\ufeac\073\ufeac\074\ufeac\100\ufeac\101\ufeac" +
    "\102\ufeac\110\ufeac\001\002\000\004\074\uffc5\001\002\000" +
    "\006\074\uffcb\101\254\001\002\000\020\042\105\043\107" +
    "\051\224\060\103\064\225\065\111\073\104\001\002\000" +
    "\004\074\uffc4\001\002\000\020\042\105\043\107\051\224" +
    "\060\103\064\225\065\111\073\104\001\002\000\012\051" +
    "\261\060\103\065\111\073\104\001\002\000\040\026\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\073\uffc3\074\uffc3\100\uffc3\101\uffc3\102\uffc3" +
    "\110\uffc3\001\002\000\040\026\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\073\232" +
    "\074\uffc2\100\uffc2\101\uffc2\102\uffc2\110\uffc2\001\002\000" +
    "\022\057\271\060\277\061\272\062\266\063\265\073\301" +
    "\074\312\110\273\001\002\000\006\073\257\074\264\001" +
    "\002\000\044\026\uffbe\051\261\054\uffbe\055\uffbe\056\uffbe" +
    "\057\271\060\267\061\272\062\266\063\265\065\111\073" +
    "\uffbe\074\uffbe\100\uffbe\101\uffbe\102\uffbe\110\273\001\002" +
    "\000\012\051\uffa7\060\uffa7\065\uffa7\073\uffa7\001\002\000" +
    "\012\051\uffa8\060\uffa8\065\uffa8\073\uffa8\001\002\000\012" +
    "\051\uffaa\060\uffaa\065\uffaa\073\uffaa\001\002\000\012\051" +
    "\261\060\103\065\111\073\104\001\002\000\012\051\uffab" +
    "\060\uffab\065\uffab\073\uffab\001\002\000\012\051\uffa9\060" +
    "\uffa9\065\uffa9\073\uffa9\001\002\000\012\051\uffa6\060\uffa6" +
    "\065\uffa6\073\uffa6\001\002\000\024\026\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\073\uffbc\074\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\001\002\000\040\026\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\271\060\277\061\272\062\266\063\265\073\uffb6\074\uffb6" +
    "\100\uffb6\101\uffb6\102\uffb6\110\273\001\002\000\024\026" +
    "\uffba\054\uffba\055\uffba\056\uffba\073\uffba\074\uffba\100\uffba" +
    "\101\uffba\102\uffba\001\002\000\012\051\uffaa\060\uffaa\065" +
    "\uffaa\073\uffaa\001\002\000\012\051\261\060\103\065\111" +
    "\073\104\001\002\000\012\051\261\060\103\065\111\073" +
    "\104\001\002\000\022\057\271\060\277\061\272\062\266" +
    "\063\265\073\301\074\305\110\273\001\002\000\006\073" +
    "\257\074\304\001\002\000\024\026\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\073\uffb9\074\uffb9\100\uffb9\101\uffb9\102\uffb9\001" +
    "\002\000\024\026\uffad\054\uffad\055\uffad\056\uffad\073\uffad" +
    "\074\uffad\100\uffad\101\uffad\102\uffad\001\002\000\024\026" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\073\257\074\uffa4\100\uffa4" +
    "\101\uffa4\102\uffa4\001\002\000\040\026\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\271\060\277\061\272\062\266\063\265" +
    "\073\301\074\uffa5\100\uffa5\101\uffa5\102\uffa5\110\273\001" +
    "\002\000\024\026\uffc0\054\uffc0\055\uffc0\056\uffc0\073\uffc0" +
    "\074\uffc0\100\uffc0\101\uffc0\102\uffc0\001\002\000\076\005" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\020\uffd0\023\uffd0\026\uffd0" +
    "\027\uffd0\032\uffd0\034\uffd0\035\uffd0\037\uffd0\047\uffd0\051" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\073\uffd0\074\uffd0\100\uffd0\101\uffd0\102" +
    "\uffd0\104\uffd0\107\uffd0\110\uffd0\001\002\000\044\026\uffb4" +
    "\051\261\054\uffb4\055\uffb4\056\uffb4\057\271\060\267\061" +
    "\272\062\266\063\265\065\111\073\uffb4\074\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\110\273\001\002\000\012\051\261\060" +
    "\103\065\111\073\104\001\002\000\024\026\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\073\uffb2\074\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\001\002\000\040\026\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\271\060\277\061\272\062\266\063\265\073\uffae\074" +
    "\uffae\100\uffae\101\uffae\102\uffae\110\273\001\002\000\024" +
    "\026\uffb0\054\uffb0\055\uffb0\056\uffb0\073\uffb0\074\uffb0\100" +
    "\uffb0\101\uffb0\102\uffb0\001\002\000\004\074\uffc7\001\002" +
    "\000\006\100\012\102\030\001\002\000\024\005\122\011" +
    "\130\012\067\020\174\023\077\034\uff0b\035\172\051\076" +
    "\102\200\001\002\000\004\034\uff06\001\002\000\020\042" +
    "\105\043\107\051\224\060\103\064\225\065\111\073\104" +
    "\001\002\000\004\074\uffc8\001\002\000\020\042\105\043" +
    "\107\051\224\060\103\064\225\065\111\073\104\001\002" +
    "\000\004\074\uffc6\001\002\000\024\005\122\011\130\012" +
    "\067\020\174\023\077\034\ufefb\035\172\051\076\102\200" +
    "\001\002\000\004\034\ufefa\001\002\000\004\074\332\001" +
    "\002\000\006\100\012\102\030\001\002\000\024\005\122" +
    "\011\130\012\067\020\174\023\077\034\ufef9\035\172\051" +
    "\076\102\200\001\002\000\004\034\ufef8\001\002\000\004" +
    "\034\uff05\001\002\000\006\100\012\102\030\001\002\000" +
    "\006\100\012\102\030\001\002\000\024\005\122\011\130" +
    "\012\067\020\174\023\077\034\ufefc\035\172\051\076\102" +
    "\200\001\002\000\004\034\ufefe\001\002\000\024\005\122" +
    "\011\130\012\067\020\174\023\077\034\ufefd\035\172\051" +
    "\076\102\200\001\002\000\004\034\ufeff\001\002\000\004" +
    "\051\345\001\002\000\006\100\012\102\030\001\002\000" +
    "\032\005\ufec5\011\ufec5\012\ufec5\013\ufec5\020\ufec5\023\ufec5" +
    "\027\ufec5\034\ufec5\035\ufec5\051\ufec5\102\ufec5\107\ufec5\001" +
    "\002\000\004\032\ufeb9\001\002\000\024\005\154\011\071" +
    "\012\067\020\157\023\166\032\ufec2\035\153\051\076\102" +
    "\161\001\002\000\004\032\ufec1\001\002\000\024\005\154" +
    "\011\071\012\067\020\157\023\166\032\ufebc\035\153\051" +
    "\076\102\161\001\002\000\004\032\ufebb\001\002\000\006" +
    "\021\356\111\355\001\002\000\004\073\367\001\002\000" +
    "\004\073\357\001\002\000\022\042\105\043\107\051\224" +
    "\060\103\064\225\065\111\073\104\074\360\001\002\000" +
    "\006\100\012\102\030\001\002\000\004\074\362\001\002" +
    "\000\006\100\012\102\030\001\002\000\024\005\154\011" +
    "\071\012\067\020\157\023\166\032\ufec4\035\153\051\076" +
    "\102\161\001\002\000\004\032\ufebf\001\002\000\024\005" +
    "\154\011\071\012\067\020\157\023\166\032\ufeb4\035\153" +
    "\051\076\102\161\001\002\000\004\032\ufeb3\001\002\000" +
    "\004\074\370\001\002\000\006\100\012\102\030\001\002" +
    "\000\024\005\154\011\071\012\067\020\157\023\166\032" +
    "\ufeb2\035\153\051\076\102\161\001\002\000\004\032\ufeb1" +
    "\001\002\000\004\032\ufebe\001\002\000\004\026\375\001" +
    "\002\000\006\100\012\102\030\001\002\000\022\005\154" +
    "\011\071\012\067\020\u0102\023\166\035\u0100\051\076\102" +
    "\u0105\001\002\000\030\005\154\011\071\012\067\013\uff26" +
    "\020\u0102\023\166\027\uff26\035\u0100\051\076\102\u0105\107" +
    "\uff26\001\002\000\006\010\u0139\011\u013a\001\002\000\030" +
    "\005\154\011\071\012\067\013\uff27\020\u0102\023\166\027" +
    "\uff27\035\u0100\051\076\102\u0105\107\uff27\001\002\000\004" +
    "\070\u0129\001\002\000\006\100\012\102\030\001\002\000" +
    "\030\005\154\011\071\012\067\013\uff1e\020\u0102\023\166" +
    "\027\uff1e\035\u0100\051\076\102\u0105\107\uff1e\001\002\000" +
    "\004\100\u0124\001\002\000\010\013\u010c\027\u010a\107\u0107" +
    "\001\002\000\016\042\uff76\043\uff76\051\uff76\060\uff76\065" +
    "\uff76\073\uff76\001\002\000\016\042\105\043\107\051\115" +
    "\060\103\065\111\073\104\001\002\000\004\013\u011a\001" +
    "\002\000\010\005\u0114\100\012\102\030\001\002\000\006" +
    "\100\012\102\030\001\002\000\004\005\u010d\001\002\000" +
    "\006\100\012\102\030\001\002\000\032\005\uff14\011\uff14" +
    "\012\uff14\013\uff14\020\uff14\023\uff14\027\uff14\032\uff14\035" +
    "\uff14\051\uff14\102\uff14\107\uff14\001\002\000\022\005\154" +
    "\011\071\012\067\020\u0102\023\166\035\u0100\051\076\102" +
    "\u0105\001\002\000\004\013\u0111\001\002\000\004\005\u0112" +
    "\001\002\000\006\100\012\102\030\001\002\000\032\005" +
    "\uff12\011\uff12\012\uff12\013\uff12\020\uff12\023\uff12\027\uff12" +
    "\032\uff12\035\uff12\051\uff12\102\uff12\107\uff12\001\002\000" +
    "\016\042\uff77\043\uff77\051\uff77\060\uff77\065\uff77\073\uff77" +
    "\001\002\000\022\005\154\011\071\012\067\020\u0102\023" +
    "\166\035\u0100\051\076\102\u0105\001\002\000\004\013\u0117" +
    "\001\002\000\004\005\u0118\001\002\000\006\100\012\102" +
    "\030\001\002\000\032\005\uff13\011\uff13\012\uff13\013\uff13" +
    "\020\uff13\023\uff13\027\uff13\032\uff13\035\uff13\051\uff13\102" +
    "\uff13\107\uff13\001\002\000\004\005\u011b\001\002\000\006" +
    "\100\012\102\030\001\002\000\032\005\uff11\011\uff11\012" +
    "\uff11\013\uff11\020\uff11\023\uff11\027\uff11\032\uff11\035\uff11" +
    "\051\uff11\102\uff11\107\uff11\001\002\000\004\026\u011e\001" +
    "\002\000\006\100\012\102\030\001\002\000\022\005\154" +
    "\011\071\012\067\020\u0102\023\166\035\u0100\051\076\102" +
    "\u0105\001\002\000\010\013\uff0e\027\u0122\107\u0107\001\002" +
    "\000\004\013\uff0d\001\002\000\010\005\u0114\100\uff10\102" +
    "\uff10\001\002\000\006\100\uff0f\102\uff0f\001\002\000\030" +
    "\005\154\011\071\012\067\013\uff23\020\u0102\023\166\027" +
    "\uff23\035\u0100\051\076\102\u0105\107\uff23\001\002\000\010" +
    "\013\uff22\027\uff22\107\uff22\001\002\000\010\013\uff1d\027" +
    "\uff1d\107\uff1d\001\002\000\030\005\154\011\071\012\067" +
    "\013\uff20\020\u0102\023\166\027\uff20\035\u0100\051\076\102" +
    "\u0105\107\uff20\001\002\000\010\013\uff1f\027\uff1f\107\uff1f" +
    "\001\002\000\006\021\u012b\111\u012a\001\002\000\004\073" +
    "\u0134\001\002\000\004\073\u012c\001\002\000\022\042\105" +
    "\043\107\051\224\060\103\064\225\065\111\073\104\074" +
    "\u012d\001\002\000\006\100\012\102\030\001\002\000\004" +
    "\074\u012f\001\002\000\006\100\012\102\030\001\002\000" +
    "\030\005\154\011\071\012\067\013\uff28\020\u0102\023\166" +
    "\027\uff28\035\u0100\051\076\102\u0105\107\uff28\001\002\000" +
    "\010\013\uff25\027\uff25\107\uff25\001\002\000\030\005\154" +
    "\011\071\012\067\013\uff18\020\u0102\023\166\027\uff18\035" +
    "\u0100\051\076\102\u0105\107\uff18\001\002\000\010\013\uff17" +
    "\027\uff17\107\uff17\001\002\000\004\074\u0135\001\002\000" +
    "\006\100\012\102\030\001\002\000\030\005\154\011\071" +
    "\012\067\013\uff16\020\u0102\023\166\027\uff16\035\u0100\051" +
    "\076\102\u0105\107\uff16\001\002\000\010\013\uff15\027\uff15" +
    "\107\uff15\001\002\000\010\013\uff24\027\uff24\107\uff24\001" +
    "\002\000\006\100\012\102\030\001\002\000\006\100\012" +
    "\102\030\001\002\000\030\005\154\011\071\012\067\013" +
    "\uff1a\020\u0102\023\166\027\uff1a\035\u0100\051\076\102\u0105" +
    "\107\uff1a\001\002\000\010\013\uff1c\027\uff1c\107\uff1c\001" +
    "\002\000\030\005\154\011\071\012\067\013\uff19\020\u0102" +
    "\023\166\027\uff19\035\u0100\051\076\102\u0105\107\uff19\001" +
    "\002\000\010\013\uff1b\027\uff1b\107\uff1b\001\002\000\010" +
    "\013\uff21\027\uff21\107\uff21\001\002\000\006\100\012\102" +
    "\030\001\002\000\006\100\012\102\030\001\002\000\024" +
    "\005\154\011\071\012\067\020\157\023\166\032\ufeb6\035" +
    "\153\051\076\102\161\001\002\000\004\032\ufeb8\001\002" +
    "\000\024\005\154\011\071\012\067\020\157\023\166\032" +
    "\ufeb5\035\153\051\076\102\161\001\002\000\004\032\ufeb7" +
    "\001\002\000\004\032\ufebd\001\002\000\004\034\ufeef\001" +
    "\002\000\006\100\012\102\030\001\002\000\034\005\ufef7" +
    "\011\ufef7\012\ufef7\013\ufef7\020\ufef7\023\ufef7\027\ufef7\034" +
    "\ufef7\035\ufef7\051\ufef7\100\ufef7\102\ufef7\107\ufef7\001\002" +
    "\000\006\021\u014c\111\u014b\001\002\000\004\073\u0155\001" +
    "\002\000\004\073\u014d\001\002\000\022\042\105\043\107" +
    "\051\224\060\103\064\225\065\111\073\104\074\u014e\001" +
    "\002\000\006\100\012\102\030\001\002\000\004\074\u0150" +
    "\001\002\000\006\100\012\102\030\001\002\000\024\005" +
    "\122\011\130\012\067\020\125\023\077\034\ufef6\035\121" +
    "\051\076\102\132\001\002\000\004\034\ufef1\001\002\000" +
    "\024\005\122\011\130\012\067\020\125\023\077\034\ufee8" +
    "\035\121\051\076\102\132\001\002\000\004\034\ufee7\001" +
    "\002\000\004\074\u0156\001\002\000\006\100\012\102\030" +
    "\001\002\000\024\005\122\011\130\012\067\020\125\023" +
    "\077\034\ufee6\035\121\051\076\102\132\001\002\000\004" +
    "\034\ufee5\001\002\000\004\034\ufef0\001\002\000\004\026" +
    "\u015b\001\002\000\006\100\012\102\030\001\002\000\022" +
    "\005\122\011\130\012\067\020\u015f\023\077\035\u015d\051" +
    "\076\102\u0162\001\002\000\006\010\u0197\023\u0196\001\002" +
    "\000\030\005\122\011\130\012\067\013\ufee0\020\u015f\023" +
    "\077\027\ufee0\035\u015d\051\076\102\u0162\107\ufee0\001\002" +
    "\000\004\070\u0186\001\002\000\030\005\122\011\130\012" +
    "\067\013\ufedf\020\u015f\023\077\027\ufedf\035\u015d\051\076" +
    "\102\u0162\107\ufedf\001\002\000\006\100\012\102\030\001" +
    "\002\000\004\100\u0181\001\002\000\030\005\122\011\130" +
    "\012\067\013\ufed7\020\u015f\023\077\027\ufed7\035\u015d\051" +
    "\076\102\u0162\107\ufed7\001\002\000\010\013\u0169\027\u0166" +
    "\107\u0107\001\002\000\016\042\105\043\107\051\115\060" +
    "\103\065\111\073\104\001\002\000\010\005\u0114\100\012" +
    "\102\030\001\002\000\006\100\012\102\030\001\002\000" +
    "\004\013\u016c\001\002\000\004\005\u016a\001\002\000\006" +
    "\100\012\102\030\001\002\000\032\005\ufecd\011\ufecd\012" +
    "\ufecd\013\ufecd\020\ufecd\023\ufecd\027\ufecd\034\ufecd\035\ufecd" +
    "\051\ufecd\102\ufecd\107\ufecd\001\002\000\004\005\u016d\001" +
    "\002\000\006\100\012\102\030\001\002\000\032\005\ufeca" +
    "\011\ufeca\012\ufeca\013\ufeca\020\ufeca\023\ufeca\027\ufeca\034" +
    "\ufeca\035\ufeca\051\ufeca\102\ufeca\107\ufeca\001\002\000\022" +
    "\005\122\011\130\012\067\020\u015f\023\077\035\u015d\051" +
    "\076\102\u0162\001\002\000\004\013\u0171\001\002\000\004" +
    "\005\u0172\001\002\000\006\100\012\102\030\001\002\000" +
    "\032\005\ufecb\011\ufecb\012\ufecb\013\ufecb\020\ufecb\023\ufecb" +
    "\027\ufecb\034\ufecb\035\ufecb\051\ufecb\102\ufecb\107\ufecb\001" +
    "\002\000\022\005\122\011\130\012\067\020\u015f\023\077" +
    "\035\u015d\051\076\102\u0162\001\002\000\004\013\u0176\001" +
    "\002\000\004\005\u0177\001\002\000\006\100\012\102\030" +
    "\001\002\000\032\005\ufecc\011\ufecc\012\ufecc\013\ufecc\020" +
    "\ufecc\023\ufecc\027\ufecc\034\ufecc\035\ufecc\051\ufecc\102\ufecc" +
    "\107\ufecc\001\002\000\004\026\u017a\001\002\000\006\100" +
    "\012\102\030\001\002\000\022\005\122\011\130\012\067" +
    "\020\u015f\023\077\035\u015d\051\076\102\u0162\001\002\000" +
    "\010\013\ufec7\027\u017d\107\u0107\001\002\000\010\005\u0114" +
    "\100\ufec9\102\ufec9\001\002\000\006\100\ufec8\102\ufec8\001" +
    "\002\000\004\013\ufec6\001\002\000\010\013\ufed6\027\ufed6" +
    "\107\ufed6\001\002\000\030\005\122\011\130\012\067\013" +
    "\ufede\020\u015f\023\077\027\ufede\035\u015d\051\076\102\u0162" +
    "\107\ufede\001\002\000\010\013\ufedd\027\ufedd\107\ufedd\001" +
    "\002\000\030\005\122\011\130\012\067\013\ufed9\020\u015f" +
    "\023\077\027\ufed9\035\u015d\051\076\102\u0162\107\ufed9\001" +
    "\002\000\010\013\ufed8\027\ufed8\107\ufed8\001\002\000\010" +
    "\013\ufeda\027\ufeda\107\ufeda\001\002\000\006\021\u0188\111" +
    "\u0187\001\002\000\004\073\u0191\001\002\000\004\073\u0189" +
    "\001\002\000\022\042\105\043\107\051\224\060\103\064" +
    "\225\065\111\073\104\074\u018a\001\002\000\006\100\012" +
    "\102\030\001\002\000\004\074\u018c\001\002\000\006\100" +
    "\012\102\030\001\002\000\030\005\122\011\130\012\067" +
    "\013\ufee1\020\u015f\023\077\027\ufee1\035\u015d\051\076\102" +
    "\u0162\107\ufee1\001\002\000\010\013\ufedc\027\ufedc\107\ufedc" +
    "\001\002\000\030\005\122\011\130\012\067\013\ufed1\020" +
    "\u015f\023\077\027\ufed1\035\u015d\051\076\102\u0162\107\ufed1" +
    "\001\002\000\010\013\ufed0\027\ufed0\107\ufed0\001\002\000" +
    "\004\074\u0192\001\002\000\006\100\012\102\030\001\002" +
    "\000\030\005\122\011\130\012\067\013\ufecf\020\u015f\023" +
    "\077\027\ufecf\035\u015d\051\076\102\u0162\107\ufecf\001\002" +
    "\000\010\013\ufece\027\ufece\107\ufece\001\002\000\010\013" +
    "\ufedb\027\ufedb\107\ufedb\001\002\000\006\100\012\102\030" +
    "\001\002\000\006\100\012\102\030\001\002\000\030\005" +
    "\122\011\130\012\067\013\ufed2\020\u015f\023\077\027\ufed2" +
    "\035\u015d\051\076\102\u0162\107\ufed2\001\002\000\010\013" +
    "\ufed4\027\ufed4\107\ufed4\001\002\000\030\005\122\011\130" +
    "\012\067\013\ufed3\020\u015f\023\077\027\ufed3\035\u015d\051" +
    "\076\102\u0162\107\ufed3\001\002\000\010\013\ufed5\027\ufed5" +
    "\107\ufed5\001\002\000\006\100\012\102\030\001\002\000" +
    "\024\005\122\011\130\012\067\020\125\023\077\034\ufee9" +
    "\035\121\051\076\102\132\001\002\000\004\034\ufeea\001" +
    "\002\000\016\042\uff41\043\uff41\051\uff41\060\uff41\065\uff41" +
    "\073\uff41\001\002\000\020\042\uff3f\043\uff3f\051\uff3f\054" +
    "\u01a9\060\uff3f\065\uff3f\073\uff3f\001\002\000\020\042\uff40" +
    "\043\uff40\051\uff40\054\u01a8\060\uff40\065\uff40\073\uff40\001" +
    "\002\000\016\042\105\043\107\051\u01a7\060\103\065\111" +
    "\073\104\001\002\000\010\026\uff59\100\uff59\102\uff59\001" +
    "\002\000\026\026\uff5a\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\073\uffc3\100\uff5a\102\uff5a\110\uffc3\001\002\000" +
    "\026\026\uff4a\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\073\uffc1\100\uff4a\102\uff4a\110\uffc1\001\002\000\012\026" +
    "\uff58\073\257\100\uff58\102\uff58\001\002\000\026\026\uff5b" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\073\232\100" +
    "\uff5b\102\uff5b\110\uffc2\001\002\000\016\042\uff43\043\uff43" +
    "\051\uff43\060\uff43\065\uff43\073\uff43\001\002\000\016\042" +
    "\uff42\043\uff42\051\uff42\060\uff42\065\uff42\073\uff42\001\002" +
    "\000\016\042\105\043\107\051\u01af\060\103\065\111\073" +
    "\104\001\002\000\010\026\uff54\100\uff54\102\uff54\001\002" +
    "\000\026\026\uff57\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\073\uffc3\100\uff57\102\uff57\110\uffc3\001\002\000\026" +
    "\026\uff48\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\073" +
    "\uffc1\100\uff48\102\uff48\110\uffc1\001\002\000\012\026\uff56" +
    "\073\257\100\uff56\102\uff56\001\002\000\026\026\uff55\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\073\232\100\uff55" +
    "\102\uff55\110\uffc2\001\002\000\016\042\105\043\107\051" +
    "\u01b4\060\103\065\111\073\104\001\002\000\010\026\uff47" +
    "\100\uff47\102\uff47\001\002\000\026\026\uff45\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\073\uffc3\100\uff45\102\uff45" +
    "\110\uffc3\001\002\000\012\026\uff44\073\257\100\uff44\102" +
    "\uff44\001\002\000\026\026\uff46\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\073\232\100\uff46\102\uff46\110\uffc2\001" +
    "\002\000\016\042\105\043\107\051\u01ba\060\103\065\111" +
    "\073\104\001\002\000\010\026\uff4c\100\uff4c\102\uff4c\001" +
    "\002\000\026\026\uff4f\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\073\uffc3\100\uff4f\102\uff4f\110\uffc3\001\002\000" +
    "\026\026\uff49\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\073\uffc1\100\uff49\102\uff49\110\uffc1\001\002\000\012\026" +
    "\uff4d\073\257\100\uff4d\102\uff4d\001\002\000\026\026\uff4e" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\073\232\100" +
    "\uff4e\102\uff4e\110\uffc2\001\002\000\016\042\105\043\107" +
    "\051\u01c0\060\103\065\111\073\104\001\002\000\010\026" +
    "\uff53\100\uff53\102\uff53\001\002\000\026\026\uff52\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\073\uffc3\100\uff52\102" +
    "\uff52\110\uffc3\001\002\000\026\026\uff4b\057\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\073\uffc1\100\uff4b\102\uff4b\110" +
    "\uffc1\001\002\000\012\026\uff50\073\257\100\uff50\102\uff50" +
    "\001\002\000\026\026\uff51\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\073\232\100\uff51\102\uff51\110\uffc2\001\002" +
    "\000\022\057\271\060\277\061\272\062\266\063\265\073" +
    "\301\074\u01c9\110\273\001\002\000\006\073\257\074\u01c3" +
    "\001\002\000\044\026\uffbf\051\261\054\uffbf\055\uffbf\056" +
    "\uffbf\057\271\060\267\061\272\062\266\063\265\065\111" +
    "\073\uffbf\074\uffbf\100\uffbf\101\uffbf\102\uffbf\110\273\001" +
    "\002\000\012\051\261\060\103\065\111\073\104\001\002" +
    "\000\024\026\uffbd\054\uffbd\055\uffbd\056\uffbd\073\uffbd\074" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\001\002\000\040\026\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\271\060\277\061\272\062" +
    "\266\063\265\073\uffb8\074\uffb8\100\uffb8\101\uffb8\102\uffb8" +
    "\110\273\001\002\000\040\026\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\271\060\277\061\272\062\266\063\265\073\uffb7" +
    "\074\uffb7\100\uffb7\101\uffb7\102\uffb7\110\273\001\002\000" +
    "\024\026\uffbb\054\uffbb\055\uffbb\056\uffbb\073\uffbb\074\uffbb" +
    "\100\uffbb\101\uffbb\102\uffbb\001\002\000\044\026\uffb5\051" +
    "\261\054\uffb5\055\uffb5\056\uffb5\057\271\060\267\061\272" +
    "\062\266\063\265\065\111\073\uffb5\074\uffb5\100\uffb5\101" +
    "\uffb5\102\uffb5\110\273\001\002\000\012\051\261\060\103" +
    "\065\111\073\104\001\002\000\024\026\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\073\uffb3\074\uffb3\100\uffb3\101\uffb3\102\uffb3" +
    "\001\002\000\040\026\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\271\060\277\061\272\062\266\063\265\073\uffac\074\uffac" +
    "\100\uffac\101\uffac\102\uffac\110\273\001\002\000\040\026" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\271\060\277\061\272" +
    "\062\266\063\265\073\uffaf\074\uffaf\100\uffaf\101\uffaf\102" +
    "\uffaf\110\273\001\002\000\024\026\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\073\uffb1\074\uffb1\100\uffb1\101\uffb1\102\uffb1\001" +
    "\002\000\020\042\105\043\107\051\241\060\103\065\111" +
    "\073\234\074\233\001\002\000\004\051\u01f0\001\002\000" +
    "\034\005\uffd6\011\uffd6\012\uffd6\013\uffd6\020\uffd6\023\uffd6" +
    "\027\uffd6\032\uffd6\034\uffd6\035\uffd6\051\uffd6\102\uffd6\107" +
    "\uffd6\001\002\000\010\100\012\102\030\104\u01e7\001\002" +
    "\000\022\020\u01d5\042\105\043\107\051\u01db\060\103\064" +
    "\u01dc\065\111\073\104\001\002\000\006\100\012\102\030" +
    "\001\002\000\004\070\u01e2\001\002\000\052\005\uff99\011" +
    "\uff99\012\uff99\013\uff99\020\uff99\023\uff99\027\uff99\032\uff99" +
    "\034\uff99\035\uff99\051\uff99\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\073\uffc3\102\uff99\107\uff99\110\uffc3\001\002" +
    "\000\024\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\073" +
    "\uffc1\100\012\102\030\110\uffc1\001\002\000\034\005\uff89" +
    "\011\uff89\012\uff89\013\uff89\020\uff89\023\uff89\027\uff89\032" +
    "\uff89\034\uff89\035\uff89\051\uff89\102\uff89\107\uff89\001\002" +
    "\000\006\100\012\102\030\001\002\000\010\073\257\100" +
    "\012\102\030\001\002\000\034\042\105\043\107\051\241" +
    "\057\uffc2\060\103\061\uffc2\062\uffc2\063\uffc2\065\111\073" +
    "\u01cf\100\012\102\030\110\uffc2\001\002\000\006\100\012" +
    "\102\030\001\002\000\034\005\uff97\011\uff97\012\uff97\013" +
    "\uff97\020\uff97\023\uff97\027\uff97\032\uff97\034\uff97\035\uff97" +
    "\051\uff97\102\uff97\107\uff97\001\002\000\034\005\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\020\uff9c\023\uff9c\027\uff9c\032\uff9c" +
    "\034\uff9c\035\uff9c\051\uff9c\102\uff9c\107\uff9c\001\002\000" +
    "\034\005\uff9a\011\uff9a\012\uff9a\013\uff9a\020\uff9a\023\uff9a" +
    "\027\uff9a\032\uff9a\034\uff9a\035\uff9a\051\uff9a\102\uff9a\107" +
    "\uff9a\001\002\000\034\005\uff96\011\uff96\012\uff96\013\uff96" +
    "\020\uff96\023\uff96\027\uff96\032\uff96\034\uff96\035\uff96\051" +
    "\uff96\102\uff96\107\uff96\001\002\000\034\005\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\020\uff9b\023\uff9b\027\uff9b\032\uff9b\034" +
    "\uff9b\035\uff9b\051\uff9b\102\uff9b\107\uff9b\001\002\000\004" +
    "\111\u01e3\001\002\000\004\073\u01e4\001\002\000\004\074" +
    "\u01e5\001\002\000\006\100\uff83\102\uff83\001\002\000\034" +
    "\005\uff98\011\uff98\012\uff98\013\uff98\020\uff98\023\uff98\027" +
    "\uff98\032\uff98\034\uff98\035\uff98\051\uff98\102\uff98\107\uff98" +
    "\001\002\000\016\042\105\043\107\051\241\060\103\065" +
    "\111\073\u01e9\001\002\000\034\005\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\020\uffd5\023\uffd5\027\uffd5\032\uffd5\034\uffd5\035" +
    "\uffd5\051\uffd5\102\uffd5\107\uffd5\001\002\000\014\042\105" +
    "\043\107\051\241\060\103\065\111\001\002\000\034\005" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\020\uffd4\023\uffd4\027\uffd4" +
    "\032\uffd4\034\uffd4\035\uffd4\051\uffd4\102\uffd4\107\uffd4\001" +
    "\002\000\004\074\u01ec\001\002\000\010\100\012\102\030" +
    "\104\u01ed\001\002\000\016\042\105\043\107\051\241\060" +
    "\103\065\111\073\u01e9\001\002\000\034\005\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\020\uffd2\023\uffd2\027\uffd2\032\uffd2\034" +
    "\uffd2\035\uffd2\051\uffd2\102\uffd2\107\uffd2\001\002\000\034" +
    "\005\uffd3\011\uffd3\012\uffd3\013\uffd3\020\uffd3\023\uffd3\027" +
    "\uffd3\032\uffd3\034\uffd3\035\uffd3\051\uffd3\102\uffd3\107\uffd3" +
    "\001\002\000\004\054\u01f1\001\002\000\022\020\u01d5\042" +
    "\105\043\107\051\u01f8\060\103\064\u01f9\065\111\073\104" +
    "\001\002\000\006\100\012\102\030\001\002\000\024\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\073\uffc3\100\012" +
    "\102\030\110\uffc3\001\002\000\024\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\073\uffc1\100\012\102\030\110\uffc1" +
    "\001\002\000\034\005\uff8a\011\uff8a\012\uff8a\013\uff8a\020" +
    "\uff8a\023\uff8a\027\uff8a\032\uff8a\034\uff8a\035\uff8a\051\uff8a" +
    "\102\uff8a\107\uff8a\001\002\000\006\100\012\102\030\001" +
    "\002\000\010\073\257\100\012\102\030\001\002\000\034" +
    "\042\105\043\107\051\241\057\uffc2\060\103\061\uffc2\062" +
    "\uffc2\063\uffc2\065\111\073\u01cf\100\012\102\030\110\uffc2" +
    "\001\002\000\006\100\012\102\030\001\002\000\034\005" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\020\uff8f\023\uff8f\027\uff8f" +
    "\032\uff8f\034\uff8f\035\uff8f\051\uff8f\102\uff8f\107\uff8f\001" +
    "\002\000\034\005\uff95\011\uff95\012\uff95\013\uff95\020\uff95" +
    "\023\uff95\027\uff95\032\uff95\034\uff95\035\uff95\051\uff95\102" +
    "\uff95\107\uff95\001\002\000\034\005\uff93\011\uff93\012\uff93" +
    "\013\uff93\020\uff93\023\uff93\027\uff93\032\uff93\034\uff93\035" +
    "\uff93\051\uff93\102\uff93\107\uff93\001\002\000\034\005\uff92" +
    "\011\uff92\012\uff92\013\uff92\020\uff92\023\uff92\027\uff92\032" +
    "\uff92\034\uff92\035\uff92\051\uff92\102\uff92\107\uff92\001\002" +
    "\000\034\005\uff94\011\uff94\012\uff94\013\uff94\020\uff94\023" +
    "\uff94\027\uff94\032\uff94\034\uff94\035\uff94\051\uff94\102\uff94" +
    "\107\uff94\001\002\000\034\005\uff91\011\uff91\012\uff91\013" +
    "\uff91\020\uff91\023\uff91\027\uff91\032\uff91\034\uff91\035\uff91" +
    "\051\uff91\102\uff91\107\uff91\001\002\000\034\005\uff90\011" +
    "\uff90\012\uff90\013\uff90\020\uff90\023\uff90\027\uff90\032\uff90" +
    "\034\uff90\035\uff90\051\uff90\102\uff90\107\uff90\001\002\000" +
    "\006\074\u0202\104\242\001\002\000\026\057\ufeae\060\ufeae" +
    "\061\ufeae\062\ufeae\063\ufeae\073\ufeae\100\ufeae\102\ufeae\104" +
    "\u01ed\110\ufeae\001\002\000\004\010\u0204\001\002\000\006" +
    "\100\012\102\030\001\002\000\006\013\uffed\100\uffed\001" +
    "\002\000\004\013\uffe0\001\002\000\024\005\062\011\071" +
    "\012\067\013\uffe5\020\066\023\077\035\061\051\076\102" +
    "\073\001\002\000\004\013\uffe4\001\002\000\004\013\uffdd" +
    "\001\002\000\004\054\u020b\001\002\000\006\060\103\065" +
    "\111\001\002\000\004\037\u020d\001\002\000\006\060\103" +
    "\065\111\001\002\000\004\047\u020f\001\002\000\006\060" +
    "\103\065\111\001\002\000\006\100\012\102\030\001\002" +
    "\000\022\005\154\011\071\012\067\020\u0216\023\166\035" +
    "\u0213\051\076\102\u0219\001\002\000\024\005\154\011\071" +
    "\012\067\020\u0216\023\166\032\uff3b\035\u0213\051\076\102" +
    "\u0219\001\002\000\004\011\u0232\001\002\000\004\032\u022f" +
    "\001\002\000\024\005\154\011\071\012\067\020\u0216\023" +
    "\166\032\uff3c\035\u0213\051\076\102\u0219\001\002\000\004" +
    "\070\u021f\001\002\000\006\100\012\102\030\001\002\000" +
    "\024\005\154\011\071\012\067\020\u0216\023\166\032\uff33" +
    "\035\u0213\051\076\102\u0219\001\002\000\004\100\u021a\001" +
    "\002\000\024\005\154\011\071\012\067\020\u0216\023\166" +
    "\032\uff38\035\u0213\051\076\102\u0219\001\002\000\004\032" +
    "\uff37\001\002\000\004\032\uff32\001\002\000\024\005\154" +
    "\011\071\012\067\020\u0216\023\166\032\uff35\035\u0213\051" +
    "\076\102\u0219\001\002\000\004\032\uff34\001\002\000\006" +
    "\021\u0221\111\u0220\001\002\000\004\073\u022a\001\002\000" +
    "\004\073\u0222\001\002\000\022\042\105\043\107\051\224" +
    "\060\103\064\225\065\111\073\104\074\u0223\001\002\000" +
    "\006\100\012\102\030\001\002\000\004\074\u0225\001\002" +
    "\000\006\100\012\102\030\001\002\000\024\005\154\011" +
    "\071\012\067\020\u0216\023\166\032\uff3d\035\u0213\051\076" +
    "\102\u0219\001\002\000\004\032\uff3a\001\002\000\024\005" +
    "\154\011\071\012\067\020\u0216\023\166\032\uff2f\035\u0213" +
    "\051\076\102\u0219\001\002\000\004\032\uff2e\001\002\000" +
    "\004\074\u022b\001\002\000\006\100\012\102\030\001\002" +
    "\000\024\005\154\011\071\012\067\020\u0216\023\166\032" +
    "\uff2d\035\u0213\051\076\102\u0219\001\002\000\004\032\uff2c" +
    "\001\002\000\004\032\uff39\001\002\000\004\051\u0230\001" +
    "\002\000\006\100\012\102\030\001\002\000\034\005\uff3e" +
    "\011\uff3e\012\uff3e\013\uff3e\020\uff3e\023\uff3e\027\uff3e\032" +
    "\uff3e\035\uff3e\051\uff3e\100\uff3e\102\uff3e\107\uff3e\001\002" +
    "\000\006\100\012\102\030\001\002\000\024\005\154\011" +
    "\071\012\067\020\u0216\023\166\032\uff30\035\u0213\051\076" +
    "\102\u0219\001\002\000\004\032\uff31\001\002\000\004\032" +
    "\uff36\001\002\000\024\005\062\011\071\012\067\013\uffe3" +
    "\020\066\023\077\035\061\051\076\102\073\001\002\000" +
    "\004\013\uffdf\001\002\000\006\022\u0239\054\u023a\001\002" +
    "\000\014\014\050\015\047\016\052\046\051\051\046\001" +
    "\002\000\022\020\u01d5\042\105\043\107\051\u0242\060\103" +
    "\064\u0243\065\111\073\104\001\002\000\006\100\uff80\102" +
    "\uff80\001\002\000\024\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\073\uffc3\100\uff81\102\uff81\110\uffc3\001\002\000" +
    "\024\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\073\uffc1" +
    "\100\012\102\030\110\uffc1\001\002\000\034\005\uff8c\011" +
    "\uff8c\012\uff8c\013\uff8c\020\uff8c\023\uff8c\027\uff8c\032\uff8c" +
    "\034\uff8c\035\uff8c\051\uff8c\102\uff8c\107\uff8c\001\002\000" +
    "\006\100\012\102\030\001\002\000\006\100\uff7f\102\uff7f" +
    "\001\002\000\010\073\257\100\012\102\030\001\002\000" +
    "\034\042\105\043\107\051\241\057\uffc2\060\103\061\uffc2" +
    "\062\uffc2\063\uffc2\065\111\073\u01cf\100\012\102\030\110" +
    "\uffc2\001\002\000\006\100\uff82\102\uff82\001\002\000\034" +
    "\005\uff8e\011\uff8e\012\uff8e\013\uff8e\020\uff8e\023\uff8e\027" +
    "\uff8e\032\uff8e\034\uff8e\035\uff8e\051\uff8e\102\uff8e\107\uff8e" +
    "\001\002\000\034\005\uff9d\011\uff9d\012\uff9d\013\uff9d\020" +
    "\uff9d\023\uff9d\027\uff9d\032\uff9d\034\uff9d\035\uff9d\051\uff9d" +
    "\102\uff9d\107\uff9d\001\002\000\034\005\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\020\uffa1\023\uffa1\027\uffa1\032\uffa1\034\uffa1" +
    "\035\uffa1\051\uffa1\102\uffa1\107\uffa1\001\002\000\034\005" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\020\uffa0\023\uffa0\027\uffa0" +
    "\032\uffa0\034\uffa0\035\uffa0\051\uffa0\102\uffa0\107\uffa0\001" +
    "\002\000\010\054\u0249\100\012\102\030\001\002\000\022" +
    "\020\u01d5\042\105\043\107\051\u024f\060\103\064\u0243\065" +
    "\111\073\104\001\002\000\034\005\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\020\uffa3\023\uffa3\027\uffa3\032\uffa3\034\uffa3\035" +
    "\uffa3\051\uffa3\102\uffa3\107\uffa3\001\002\000\024\057\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\063\uffc1\073\uffc1\100\012\102" +
    "\030\110\uffc1\001\002\000\034\005\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\020\uff8b\023\uff8b\027\uff8b\032\uff8b\034\uff8b\035" +
    "\uff8b\051\uff8b\102\uff8b\107\uff8b\001\002\000\006\100\012" +
    "\102\030\001\002\000\010\073\257\100\012\102\030\001" +
    "\002\000\034\042\105\043\107\051\241\057\uffc2\060\103" +
    "\061\uffc2\062\uffc2\063\uffc2\065\111\073\u01cf\100\012\102" +
    "\030\110\uffc2\001\002\000\034\005\uff8d\011\uff8d\012\uff8d" +
    "\013\uff8d\020\uff8d\023\uff8d\027\uff8d\032\uff8d\034\uff8d\035" +
    "\uff8d\051\uff8d\102\uff8d\107\uff8d\001\002\000\034\005\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\020\uff9e\023\uff9e\027\uff9e\032" +
    "\uff9e\034\uff9e\035\uff9e\051\uff9e\102\uff9e\107\uff9e\001\002" +
    "\000\034\005\uffa2\011\uffa2\012\uffa2\013\uffa2\020\uffa2\023" +
    "\uffa2\027\uffa2\032\uffa2\034\uffa2\035\uffa2\051\uffa2\102\uffa2" +
    "\107\uffa2\001\002\000\034\005\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\020\uff9f\023\uff9f\027\uff9f\032\uff9f\034\uff9f\035\uff9f" +
    "\051\uff9f\102\uff9f\107\uff9f\001\002\000\006\021\u0256\111" +
    "\u0255\001\002\000\004\073\u025f\001\002\000\004\073\u0257" +
    "\001\002\000\022\042\105\043\107\051\224\060\103\064" +
    "\225\065\111\073\104\074\u0258\001\002\000\006\100\012" +
    "\102\030\001\002\000\004\074\u025a\001\002\000\006\100" +
    "\012\102\030\001\002\000\024\005\062\011\071\012\067" +
    "\013\uffe8\020\066\023\077\035\061\051\076\102\073\001" +
    "\002\000\004\013\uffe2\001\002\000\024\005\062\011\071" +
    "\012\067\013\uffda\020\066\023\077\035\061\051\076\102" +
    "\073\001\002\000\004\013\uffd9\001\002\000\004\074\u0260" +
    "\001\002\000\006\100\012\102\030\001\002\000\024\005" +
    "\062\011\071\012\067\013\uffd8\020\066\023\077\035\061" +
    "\051\076\102\073\001\002\000\004\013\uffd7\001\002\000" +
    "\004\013\uffe1\001\002\000\004\026\u0265\001\002\000\006" +
    "\100\012\102\030\001\002\000\022\005\062\011\071\012" +
    "\067\020\u0269\023\077\035\u0267\051\076\102\u026c\001\002" +
    "\000\004\010\u02a1\001\002\000\030\005\062\011\071\012" +
    "\067\013\uff70\020\u0269\023\077\027\uff70\035\u0267\051\076" +
    "\102\u026c\107\uff70\001\002\000\004\070\u0291\001\002\000" +
    "\010\013\u027a\027\u0279\107\u0107\001\002\000\006\100\012" +
    "\102\030\001\002\000\004\100\u0272\001\002\000\030\005" +
    "\062\011\071\012\067\013\uff67\020\u0269\023\077\027\uff67" +
    "\035\u0267\051\076\102\u026c\107\uff67\001\002\000\012\013" +
    "\uff6f\027\uff6f\100\u026f\107\uff6f\001\002\000\022\005\062" +
    "\011\071\012\067\020\u0269\023\077\035\u0267\051\076\102" +
    "\u026c\001\002\000\010\013\uff69\027\uff69\107\uff69\001\002" +
    "\000\010\013\uff66\027\uff66\107\uff66\001\002\000\030\005" +
    "\062\011\071\012\067\013\uff6e\020\u0269\023\077\027\uff6e" +
    "\035\u0267\051\076\102\u026c\107\uff6e\001\002\000\010\013" +
    "\uff6d\027\uff6d\107\uff6d\001\002\000\030\005\062\011\071" +
    "\012\067\013\uff6c\020\u0269\023\077\027\uff6c\035\u0267\051" +
    "\076\102\u026c\107\uff6c\001\002\000\010\013\uff68\027\uff68" +
    "\107\uff68\001\002\000\016\042\105\043\107\051\115\060" +
    "\103\065\111\073\104\001\002\000\004\013\u0287\001\002" +
    "\000\006\100\012\102\030\001\002\000\010\005\u0114\100" +
    "\012\102\030\001\002\000\004\005\u027b\001\002\000\006" +
    "\100\012\102\030\001\002\000\032\005\uff75\011\uff75\012" +
    "\uff75\013\uff75\020\uff75\023\uff75\027\uff75\035\uff75\051\uff75" +
    "\100\uff75\102\uff75\107\uff75\001\002\000\022\005\062\011" +
    "\071\012\067\020\u0269\023\077\035\u0267\051\076\102\u026c" +
    "\001\002\000\004\013\u027f\001\002\000\004\005\u0280\001" +
    "\002\000\006\100\012\102\030\001\002\000\032\005\uff74" +
    "\011\uff74\012\uff74\013\uff74\020\uff74\023\uff74\027\uff74\035" +
    "\uff74\051\uff74\100\uff74\102\uff74\107\uff74\001\002\000\022" +
    "\005\062\011\071\012\067\020\u0269\023\077\035\u0267\051" +
    "\076\102\u026c\001\002\000\004\013\u0284\001\002\000\004" +
    "\005\u0285\001\002\000\006\100\012\102\030\001\002\000" +
    "\032\005\uff73\011\uff73\012\uff73\013\uff73\020\uff73\023\uff73" +
    "\027\uff73\035\uff73\051\uff73\100\uff73\102\uff73\107\uff73\001" +
    "\002\000\004\005\u0288\001\002\000\006\100\012\102\030" +
    "\001\002\000\032\005\uff72\011\uff72\012\uff72\013\uff72\020" +
    "\uff72\023\uff72\027\uff72\035\uff72\051\uff72\100\uff72\102\uff72" +
    "\107\uff72\001\002\000\004\026\u028b\001\002\000\006\100" +
    "\012\102\030\001\002\000\022\005\062\011\071\012\067" +
    "\020\u0269\023\077\035\u0267\051\076\102\u026c\001\002\000" +
    "\010\013\uff5c\027\u0290\107\u0107\001\002\000\004\013\uff5d" +
    "\001\002\000\006\100\uff5f\102\uff5f\001\002\000\010\005" +
    "\u0114\100\uff5e\102\uff5e\001\002\000\006\021\u0293\111\u0292" +
    "\001\002\000\004\073\u029c\001\002\000\004\073\u0294\001" +
    "\002\000\022\042\105\043\107\051\224\060\103\064\225" +
    "\065\111\073\104\074\u0295\001\002\000\006\100\012\102" +
    "\030\001\002\000\004\074\u0297\001\002\000\006\100\012" +
    "\102\030\001\002\000\030\005\062\011\071\012\067\013" +
    "\uff71\020\u0269\023\077\027\uff71\035\u0267\051\076\102\u026c" +
    "\107\uff71\001\002\000\010\013\uff6b\027\uff6b\107\uff6b\001" +
    "\002\000\030\005\062\011\071\012\067\013\uff63\020\u0269" +
    "\023\077\027\uff63\035\u0267\051\076\102\u026c\107\uff63\001" +
    "\002\000\010\013\uff62\027\uff62\107\uff62\001\002\000\004" +
    "\074\u029d\001\002\000\006\100\012\102\030\001\002\000" +
    "\030\005\062\011\071\012\067\013\uff61\020\u0269\023\077" +
    "\027\uff61\035\u0267\051\076\102\u026c\107\uff61\001\002\000" +
    "\010\013\uff60\027\uff60\107\uff60\001\002\000\010\013\uff6a" +
    "\027\uff6a\107\uff6a\001\002\000\006\100\012\102\030\001" +
    "\002\000\030\005\062\011\071\012\067\013\uff64\020\u0269" +
    "\023\077\027\uff64\035\u0267\051\076\102\u026c\107\uff64\001" +
    "\002\000\010\013\uff65\027\uff65\107\uff65\001\002\000\006" +
    "\100\012\102\030\001\002\000\024\005\062\011\071\012" +
    "\067\013\uffdc\020\066\023\077\035\061\051\076\102\073" +
    "\001\002\000\004\013\uffdb\001\002\000\022\005\062\011" +
    "\071\012\067\020\066\023\077\035\061\051\076\102\073" +
    "\001\002\000\004\013\u02a9\001\002\000\004\010\u02aa\001" +
    "\002\000\006\100\012\102\030\001\002\000\006\013\uffeb" +
    "\100\uffeb\001\002\000\004\022\u02ad\001\002\000\014\014" +
    "\050\015\047\016\052\046\051\051\046\001\002\000\006" +
    "\074\ufea0\104\u02af\001\002\000\006\051\043\106\041\001" +
    "\002\000\004\074\ufea1\001\002\000\004\074\u02b2\001\002" +
    "\000\006\100\u02b4\102\u02b3\001\002\000\004\100\u02b9\001" +
    "\002\000\022\005\062\011\071\012\067\020\066\023\077" +
    "\035\061\051\076\102\073\001\002\000\004\013\u02b6\001" +
    "\002\000\004\010\u02b7\001\002\000\006\100\012\102\030" +
    "\001\002\000\006\013\uffee\100\uffee\001\002\000\022\005" +
    "\062\011\071\012\067\020\066\023\077\035\061\051\076" +
    "\102\073\001\002\000\004\013\u02bb\001\002\000\004\010" +
    "\u02bc\001\002\000\006\100\012\102\030\001\002\000\006" +
    "\013\uffec\100\uffec\001\002\000\004\007\u02bf\001\002\000" +
    "\010\002\ufff7\100\ufff7\102\ufff7\001\002\000\004\013\ufff4" +
    "\001\002\000\010\006\022\033\023\102\021\001\002\000" +
    "\004\013\ufff2\001\002\000\010\006\022\033\023\102\021" +
    "\001\002\000\004\013\ufff0\001\002\000\004\051\u02c6\001" +
    "\002\000\004\073\u02c7\001\002\000\006\051\043\106\041" +
    "\001\002\000\004\074\u02c9\001\002\000\004\022\u02ca\001" +
    "\002\000\014\014\050\015\047\016\052\046\051\051\046" +
    "\001\002\000\006\100\012\102\030\001\002\000\022\005" +
    "\u02ce\011\u02d3\012\067\020\u02d2\023\u02da\035\u02cd\051\076" +
    "\102\u02d6\001\002\000\004\030\u03fd\001\002\000\016\042" +
    "\105\043\107\051\115\060\103\065\111\073\104\001\002" +
    "\000\004\013\u03dc\001\002\000\024\005\u02ce\011\u02d3\012" +
    "\067\013\ufe9e\020\u02d2\023\u02da\035\u02cd\051\076\102\u02d6" +
    "\001\002\000\030\005\ufe8c\011\ufe8c\012\ufe8c\013\ufe8c\020" +
    "\ufe8c\023\ufe8c\027\ufe8c\035\ufe8c\051\ufe8c\102\ufe8c\107\ufe8c" +
    "\001\002\000\004\070\u03cc\001\002\000\004\051\u039d\001" +
    "\002\000\006\100\012\102\030\001\002\000\024\005\u02ce" +
    "\011\u02d3\012\067\013\ufe95\020\u02d2\023\u02da\035\u02cd\051" +
    "\076\102\u02d6\001\002\000\004\100\u0398\001\002\000\030" +
    "\005\ufe8b\011\ufe8b\012\ufe8b\013\ufe8b\020\ufe8b\023\ufe8b\027" +
    "\ufe8b\035\ufe8b\051\ufe8b\102\ufe8b\107\ufe8b\001\002\000\030" +
    "\005\ufe8d\011\ufe8d\012\ufe8d\013\ufe8d\020\ufe8d\023\ufe8d\027" +
    "\ufe8d\035\ufe8d\051\ufe8d\102\ufe8d\107\ufe8d\001\002\000\024" +
    "\005\u02ce\011\u02d3\012\067\013\ufe9d\020\u02d2\023\u02da\035" +
    "\u02cd\051\076\102\u02d6\001\002\000\006\024\102\036\101" +
    "\001\002\000\016\042\105\043\107\051\115\060\103\065" +
    "\111\073\104\001\002\000\006\100\012\102\030\001\002" +
    "\000\022\005\u02e1\011\u02d3\012\067\020\u02e5\023\u02ea\035" +
    "\u02df\051\076\102\u02e8\001\002\000\034\005\ufe5b\011\ufe5b" +
    "\012\ufe5b\013\ufe5b\020\ufe5b\023\ufe5b\027\ufe5b\032\ufe5b\034" +
    "\ufe5b\035\ufe5b\051\ufe5b\102\ufe5b\107\ufe5b\001\002\000\006" +
    "\023\u0391\030\u0392\001\002\000\034\005\ufe59\011\ufe59\012" +
    "\ufe59\013\ufe59\020\ufe59\023\ufe59\027\ufe59\032\ufe59\034\ufe59" +
    "\035\ufe59\051\ufe59\102\ufe59\107\ufe59\001\002\000\016\042" +
    "\105\043\107\051\115\060\103\065\111\073\104\001\002" +
    "\000\024\005\u02e1\011\u02d3\012\067\020\u02e5\023\u02ea\034" +
    "\ufe23\035\u02df\051\076\102\u02e8\001\002\000\004\034\u032c" +
    "\001\002\000\034\005\ufe5a\011\ufe5a\012\ufe5a\013\ufe5a\020" +
    "\ufe5a\023\ufe5a\027\ufe5a\032\ufe5a\034\ufe5a\035\ufe5a\051\ufe5a" +
    "\102\ufe5a\107\ufe5a\001\002\000\004\070\u031d\001\002\000" +
    "\006\100\012\102\030\001\002\000\024\005\u02e1\011\u02d3" +
    "\012\067\020\u02e5\023\u02ea\034\ufe1a\035\u02df\051\076\102" +
    "\u02e8\001\002\000\004\100\u0318\001\002\000\024\005\u02e1" +
    "\011\u02d3\012\067\020\u02e5\023\u02ea\034\ufe20\035\u02df\051" +
    "\076\102\u02e8\001\002\000\006\024\102\036\101\001\002" +
    "\000\016\042\105\043\107\051\115\060\103\065\111\073" +
    "\104\001\002\000\006\100\012\102\030\001\002\000\022" +
    "\005\122\011\130\012\067\020\u02f1\023\077\035\u02ee\051" +
    "\076\102\u02f5\001\002\000\010\011\u0310\023\u030e\030\u030f" +
    "\001\002\000\024\005\122\011\130\012\067\020\u02f1\023" +
    "\077\034\ufe3a\035\u02ee\051\076\102\u02f5\001\002\000\004" +
    "\034\u030b\001\002\000\004\070\u02fc\001\002\000\024\005" +
    "\122\011\130\012\067\020\u02f1\023\077\034\ufe39\035\u02ee" +
    "\051\076\102\u02f5\001\002\000\006\100\012\102\030\001" +
    "\002\000\024\005\122\011\130\012\067\020\u02f1\023\077" +
    "\034\ufe31\035\u02ee\051\076\102\u02f5\001\002\000\004\100" +
    "\u02f6\001\002\000\024\005\122\011\130\012\067\020\u02f1" +
    "\023\077\034\ufe38\035\u02ee\051\076\102\u02f5\001\002\000" +
    "\004\034\ufe37\001\002\000\004\034\ufe30\001\002\000\024" +
    "\005\122\011\130\012\067\020\u02f1\023\077\034\ufe33\035" +
    "\u02ee\051\076\102\u02f5\001\002\000\004\034\ufe32\001\002" +
    "\000\004\034\ufe34\001\002\000\006\021\u02fe\111\u02fd\001" +
    "\002\000\004\073\u0307\001\002\000\004\073\u02ff\001\002" +
    "\000\022\042\105\043\107\051\224\060\103\064\225\065" +
    "\111\073\104\074\u0300\001\002\000\006\100\012\102\030" +
    "\001\002\000\004\074\u0302\001\002\000\006\100\012\102" +
    "\030\001\002\000\024\005\122\011\130\012\067\020\u02f1" +
    "\023\077\034\ufe3b\035\u02ee\051\076\102\u02f5\001\002\000" +
    "\004\034\ufe36\001\002\000\024\005\122\011\130\012\067" +
    "\020\u02f1\023\077\034\ufe29\035\u02ee\051\076\102\u02f5\001" +
    "\002\000\004\034\ufe28\001\002\000\004\074\u0308\001\002" +
    "\000\006\100\012\102\030\001\002\000\024\005\122\011" +
    "\130\012\067\020\u02f1\023\077\034\ufe27\035\u02ee\051\076" +
    "\102\u02f5\001\002\000\004\034\ufe26\001\002\000\006\100" +
    "\012\102\030\001\002\000\034\005\ufe3c\011\ufe3c\012\ufe3c" +
    "\013\ufe3c\020\ufe3c\023\ufe3c\027\ufe3c\032\ufe3c\034\ufe3c\035" +
    "\ufe3c\051\ufe3c\102\ufe3c\107\ufe3c\001\002\000\004\034\ufe35" +
    "\001\002\000\006\100\012\102\030\001\002\000\006\100" +
    "\012\102\030\001\002\000\006\100\012\102\030\001\002" +
    "\000\024\005\122\011\130\012\067\020\u02f1\023\077\034" +
    "\ufe2b\035\u02ee\051\076\102\u02f5\001\002\000\004\034\ufe2e" +
    "\001\002\000\024\005\122\011\130\012\067\020\u02f1\023" +
    "\077\034\ufe2a\035\u02ee\051\076\102\u02f5\001\002\000\004" +
    "\034\ufe2d\001\002\000\024\005\122\011\130\012\067\020" +
    "\u02f1\023\077\034\ufe2c\035\u02ee\051\076\102\u02f5\001\002" +
    "\000\004\034\ufe2f\001\002\000\004\034\ufe1d\001\002\000" +
    "\024\005\u02e1\011\u02d3\012\067\020\u02e5\023\u02ea\034\ufe22" +
    "\035\u02df\051\076\102\u02e8\001\002\000\004\034\ufe21\001" +
    "\002\000\004\034\ufe19\001\002\000\024\005\u02e1\011\u02d3" +
    "\012\067\020\u02e5\023\u02ea\034\ufe1c\035\u02df\051\076\102" +
    "\u02e8\001\002\000\004\034\ufe1b\001\002\000\006\021\u031f" +
    "\111\u031e\001\002\000\004\073\u0328\001\002\000\004\073" +
    "\u0320\001\002\000\022\042\105\043\107\051\224\060\103" +
    "\064\225\065\111\073\104\074\u0321\001\002\000\006\100" +
    "\012\102\030\001\002\000\004\074\u0323\001\002\000\006" +
    "\100\012\102\030\001\002\000\024\005\u02e1\011\u02d3\012" +
    "\067\020\u02e5\023\u02ea\034\ufe24\035\u02df\051\076\102\u02e8" +
    "\001\002\000\004\034\ufe1f\001\002\000\024\005\u02e1\011" +
    "\u02d3\012\067\020\u02e5\023\u02ea\034\ufe14\035\u02df\051\076" +
    "\102\u02e8\001\002\000\004\034\ufe13\001\002\000\004\074" +
    "\u0329\001\002\000\006\100\012\102\030\001\002\000\024" +
    "\005\u02e1\011\u02d3\012\067\020\u02e5\023\u02ea\034\ufe12\035" +
    "\u02df\051\076\102\u02e8\001\002\000\004\034\ufe11\001\002" +
    "\000\006\100\012\102\030\001\002\000\030\005\ufe25\011" +
    "\ufe25\012\ufe25\013\ufe25\020\ufe25\023\ufe25\027\ufe25\035\ufe25" +
    "\051\ufe25\102\ufe25\107\ufe25\001\002\000\004\034\ufe1e\001" +
    "\002\000\004\026\u0330\001\002\000\006\100\012\102\030" +
    "\001\002\000\022\005\u02e1\011\u02d3\012\067\020\u0334\023" +
    "\u02ea\035\u0332\051\076\102\u0336\001\002\000\006\011\u038c" +
    "\030\u038b\001\002\000\030\005\u02e1\011\u02d3\012\067\013" +
    "\ufe53\020\u0334\023\u02ea\027\ufe53\035\u0332\051\076\102\u0336" +
    "\107\ufe53\001\002\000\004\070\u037b\001\002\000\006\100" +
    "\012\102\030\001\002\000\004\100\u0357\001\002\000\030" +
    "\005\u02e1\011\u02d3\012\067\013\ufe4a\020\u0334\023\u02ea\027" +
    "\ufe4a\035\u0332\051\076\102\u0336\107\ufe4a\001\002\000\010" +
    "\013\u033f\027\u033c\107\u0107\001\002\000\030\005\u02e1\011" +
    "\u02d3\012\067\013\ufe50\020\u0334\023\u02ea\027\ufe50\035\u0332" +
    "\051\076\102\u0336\107\ufe50\001\002\000\010\013\ufe4d\027" +
    "\ufe4d\107\ufe4d\001\002\000\016\042\105\043\107\051\115" +
    "\060\103\065\111\073\104\001\002\000\010\005\u0114\100" +
    "\012\102\030\001\002\000\006\100\012\102\030\001\002" +
    "\000\004\013\u0342\001\002\000\004\005\u0340\001\002\000" +
    "\006\100\012\102\030\001\002\000\034\005\ufe58\011\ufe58" +
    "\012\ufe58\013\ufe58\020\ufe58\023\ufe58\027\ufe58\032\ufe58\034" +
    "\ufe58\035\ufe58\051\ufe58\102\ufe58\107\ufe58\001\002\000\004" +
    "\005\u0343\001\002\000\006\100\012\102\030\001\002\000" +
    "\034\005\ufe55\011\ufe55\012\ufe55\013\ufe55\020\ufe55\023\ufe55" +
    "\027\ufe55\032\ufe55\034\ufe55\035\ufe55\051\ufe55\102\ufe55\107" +
    "\ufe55\001\002\000\022\005\u02e1\011\u02d3\012\067\020\u0334" +
    "\023\u02ea\035\u0332\051\076\102\u0336\001\002\000\004\013" +
    "\u0347\001\002\000\004\005\u0348\001\002\000\006\100\012" +
    "\102\030\001\002\000\034\005\ufe56\011\ufe56\012\ufe56\013" +
    "\ufe56\020\ufe56\023\ufe56\027\ufe56\032\ufe56\034\ufe56\035\ufe56" +
    "\051\ufe56\102\ufe56\107\ufe56\001\002\000\022\005\u02e1\011" +
    "\u02d3\012\067\020\u0334\023\u02ea\035\u0332\051\076\102\u0336" +
    "\001\002\000\004\013\u034c\001\002\000\004\005\u034d\001" +
    "\002\000\006\100\012\102\030\001\002\000\034\005\ufe57" +
    "\011\ufe57\012\ufe57\013\ufe57\020\ufe57\023\ufe57\027\ufe57\032" +
    "\ufe57\034\ufe57\035\ufe57\051\ufe57\102\ufe57\107\ufe57\001\002" +
    "\000\004\026\u0350\001\002\000\006\100\012\102\030\001" +
    "\002\000\022\005\u02e1\011\u02d3\012\067\020\u0334\023\u02ea" +
    "\035\u0332\051\076\102\u0336\001\002\000\010\013\ufe3e\027" +
    "\u0353\107\u0107\001\002\000\010\005\u0114\100\ufe40\102\ufe40" +
    "\001\002\000\006\100\ufe3f\102\ufe3f\001\002\000\004\013" +
    "\ufe3d\001\002\000\010\013\ufe49\027\ufe49\107\ufe49\001\002" +
    "\000\030\005\u02e1\011\u02d3\012\067\013\ufe52\020\u0334\023" +
    "\u02ea\027\ufe52\035\u0332\051\076\102\u0336\107\ufe52\001\002" +
    "\000\010\013\ufe51\027\ufe51\107\ufe51\001\002\000\030\005" +
    "\u02ce\011\u02d3\012\067\013\ufe4c\020\u035d\023\u02da\027\ufe4c" +
    "\035\u035b\051\076\102\u0360\107\ufe4c\001\002\000\010\013" +
    "\ufe4b\027\ufe4b\107\ufe4b\001\002\000\004\030\u0378\001\002" +
    "\000\030\005\u02ce\011\u02d3\012\067\013\ufe85\020\u035d\023" +
    "\u02da\027\ufe85\035\u035b\051\076\102\u0360\107\ufe85\001\002" +
    "\000\004\070\u0368\001\002\000\006\100\012\102\030\001" +
    "\002\000\030\005\u02ce\011\u02d3\012\067\013\ufe7c\020\u035d" +
    "\023\u02da\027\ufe7c\035\u035b\051\076\102\u0360\107\ufe7c\001" +
    "\002\000\004\100\u0363\001\002\000\030\005\u02ce\011\u02d3" +
    "\012\067\013\ufe82\020\u035d\023\u02da\027\ufe82\035\u035b\051" +
    "\076\102\u0360\107\ufe82\001\002\000\010\013\ufe7f\027\ufe7f" +
    "\107\ufe7f\001\002\000\030\005\u02ce\011\u02d3\012\067\013" +
    "\ufe84\020\u035d\023\u02da\027\ufe84\035\u035b\051\076\102\u0360" +
    "\107\ufe84\001\002\000\010\013\ufe83\027\ufe83\107\ufe83\001" +
    "\002\000\010\013\ufe7b\027\ufe7b\107\ufe7b\001\002\000\030" +
    "\005\u02ce\011\u02d3\012\067\013\ufe7e\020\u035d\023\u02da\027" +
    "\ufe7e\035\u035b\051\076\102\u0360\107\ufe7e\001\002\000\010" +
    "\013\ufe7d\027\ufe7d\107\ufe7d\001\002\000\006\021\u036a\111" +
    "\u0369\001\002\000\004\073\u0373\001\002\000\004\073\u036b" +
    "\001\002\000\022\042\105\043\107\051\224\060\103\064" +
    "\225\065\111\073\104\074\u036c\001\002\000\006\100\012" +
    "\102\030\001\002\000\004\074\u036e\001\002\000\006\100" +
    "\012\102\030\001\002\000\030\005\u02ce\011\u02d3\012\067" +
    "\013\ufe86\020\u035d\023\u02da\027\ufe86\035\u035b\051\076\102" +
    "\u0360\107\ufe86\001\002\000\010\013\ufe81\027\ufe81\107\ufe81" +
    "\001\002\000\030\005\u02ce\011\u02d3\012\067\013\ufe78\020" +
    "\u035d\023\u02da\027\ufe78\035\u035b\051\076\102\u0360\107\ufe78" +
    "\001\002\000\010\013\ufe77\027\ufe77\107\ufe77\001\002\000" +
    "\004\074\u0374\001\002\000\006\100\012\102\030\001\002" +
    "\000\030\005\u02ce\011\u02d3\012\067\013\ufe76\020\u035d\023" +
    "\u02da\027\ufe76\035\u035b\051\076\102\u0360\107\ufe76\001\002" +
    "\000\010\013\ufe75\027\ufe75\107\ufe75\001\002\000\010\013" +
    "\ufe80\027\ufe80\107\ufe80\001\002\000\006\100\012\102\030" +
    "\001\002\000\030\005\u02ce\011\u02d3\012\067\013\ufe79\020" +
    "\u035d\023\u02da\027\ufe79\035\u035b\051\076\102\u0360\107\ufe79" +
    "\001\002\000\010\013\ufe7a\027\ufe7a\107\ufe7a\001\002\000" +
    "\006\021\u037d\111\u037c\001\002\000\004\073\u0386\001\002" +
    "\000\004\073\u037e\001\002\000\022\042\105\043\107\051" +
    "\224\060\103\064\225\065\111\073\104\074\u037f\001\002" +
    "\000\006\100\012\102\030\001\002\000\004\074\u0381\001" +
    "\002\000\006\100\012\102\030\001\002\000\030\005\u02e1" +
    "\011\u02d3\012\067\013\ufe54\020\u0334\023\u02ea\027\ufe54\035" +
    "\u0332\051\076\102\u0336\107\ufe54\001\002\000\010\013\ufe4f" +
    "\027\ufe4f\107\ufe4f\001\002\000\030\005\u02e1\011\u02d3\012" +
    "\067\013\ufe44\020\u0334\023\u02ea\027\ufe44\035\u0332\051\076" +
    "\102\u0336\107\ufe44\001\002\000\010\013\ufe43\027\ufe43\107" +
    "\ufe43\001\002\000\004\074\u0387\001\002\000\006\100\012" +
    "\102\030\001\002\000\030\005\u02e1\011\u02d3\012\067\013" +
    "\ufe42\020\u0334\023\u02ea\027\ufe42\035\u0332\051\076\102\u0336" +
    "\107\ufe42\001\002\000\010\013\ufe41\027\ufe41\107\ufe41\001" +
    "\002\000\010\013\ufe4e\027\ufe4e\107\ufe4e\001\002\000\006" +
    "\100\012\102\030\001\002\000\006\100\012\102\030\001" +
    "\002\000\030\005\u02e1\011\u02d3\012\067\013\ufe45\020\u0334" +
    "\023\u02ea\027\ufe45\035\u0332\051\076\102\u0336\107\ufe45\001" +
    "\002\000\010\013\ufe46\027\ufe46\107\ufe46\001\002\000\030" +
    "\005\u02e1\011\u02d3\012\067\013\ufe47\020\u0334\023\u02ea\027" +
    "\ufe47\035\u0332\051\076\102\u0336\107\ufe47\001\002\000\010" +
    "\013\ufe48\027\ufe48\107\ufe48\001\002\000\006\100\012\102" +
    "\030\001\002\000\006\100\012\102\030\001\002\000\024" +
    "\005\u02e1\011\u02d3\012\067\020\u02e5\023\u02ea\034\ufe15\035" +
    "\u02df\051\076\102\u02e8\001\002\000\004\034\ufe17\001\002" +
    "\000\024\005\u02e1\011\u02d3\012\067\020\u02e5\023\u02ea\034" +
    "\ufe16\035\u02df\051\076\102\u02e8\001\002\000\004\034\ufe18" +
    "\001\002\000\004\013\ufe97\001\002\000\024\005\u02ce\011" +
    "\u02d3\012\067\013\ufe9c\020\u02d2\023\u02da\035\u02cd\051\076" +
    "\102\u02d6\001\002\000\004\013\ufe9b\001\002\000\004\013" +
    "\ufe94\001\002\000\024\005\u02ce\011\u02d3\012\067\013\ufe9a" +
    "\020\u02d2\023\u02da\035\u02cd\051\076\102\u02d6\001\002\000" +
    "\004\013\ufe96\001\002\000\004\054\u039e\001\002\000\006" +
    "\060\103\065\111\001\002\000\004\037\u03a0\001\002\000" +
    "\006\060\103\065\111\001\002\000\004\047\u03a2\001\002" +
    "\000\006\060\103\065\111\001\002\000\006\100\012\102" +
    "\030\001\002\000\022\005\u02e1\011\u02d3\012\067\020\u03a7" +
    "\023\u02ea\035\u03a5\051\076\102\u03aa\001\002\000\006\011" +
    "\u03c7\030\u03c6\001\002\000\024\005\u02e1\011\u02d3\012\067" +
    "\020\u03a7\023\u02ea\032\ufe6e\035\u03a5\051\076\102\u03aa\001" +
    "\002\000\004\070\u03b6\001\002\000\006\100\012\102\030" +
    "\001\002\000\004\032\u03b1\001\002\000\004\100\u03af\001" +
    "\002\000\024\005\u02e1\011\u02d3\012\067\020\u03a7\023\u02ea" +
    "\032\ufe65\035\u03a5\051\076\102\u03aa\001\002\000\024\005" +
    "\u02e1\011\u02d3\012\067\020\u03a7\023\u02ea\032\ufe6b\035\u03a5" +
    "\051\076\102\u03aa\001\002\000\004\032\ufe68\001\002\000" +
    "\004\032\ufe64\001\002\000\024\005\u02e1\011\u02d3\012\067" +
    "\020\u03a7\023\u02ea\032\ufe6d\035\u03a5\051\076\102\u03aa\001" +
    "\002\000\004\032\ufe6c\001\002\000\004\051\u03b2\001\002" +
    "\000\006\100\012\102\030\001\002\000\034\005\ufe70\011" +
    "\ufe70\012\ufe70\013\ufe70\020\ufe70\023\ufe70\027\ufe70\032\ufe70" +
    "\034\ufe70\035\ufe70\051\ufe70\102\ufe70\107\ufe70\001\002\000" +
    "\024\005\u02e1\011\u02d3\012\067\020\u03a7\023\u02ea\032\ufe67" +
    "\035\u03a5\051\076\102\u03aa\001\002\000\004\032\ufe66\001" +
    "\002\000\006\021\u03b8\111\u03b7\001\002\000\004\073\u03c1" +
    "\001\002\000\004\073\u03b9\001\002\000\022\042\105\043" +
    "\107\051\224\060\103\064\225\065\111\073\104\074\u03ba" +
    "\001\002\000\006\100\012\102\030\001\002\000\004\074" +
    "\u03bc\001\002\000\006\100\012\102\030\001\002\000\024" +
    "\005\u02e1\011\u02d3\012\067\020\u03a7\023\u02ea\032\ufe6f\035" +
    "\u03a5\051\076\102\u03aa\001\002\000\004\032\ufe6a\001\002" +
    "\000\024\005\u02e1\011\u02d3\012\067\020\u03a7\023\u02ea\032" +
    "\ufe5f\035\u03a5\051\076\102\u03aa\001\002\000\004\032\ufe5e" +
    "\001\002\000\004\074\u03c2\001\002\000\006\100\012\102" +
    "\030\001\002\000\024\005\u02e1\011\u02d3\012\067\020\u03a7" +
    "\023\u02ea\032\ufe5d\035\u03a5\051\076\102\u03aa\001\002\000" +
    "\004\032\ufe5c\001\002\000\004\032\ufe69\001\002\000\006" +
    "\100\012\102\030\001\002\000\006\100\012\102\030\001" +
    "\002\000\024\005\u02e1\011\u02d3\012\067\020\u03a7\023\u02ea" +
    "\032\ufe60\035\u03a5\051\076\102\u03aa\001\002\000\004\032" +
    "\ufe61\001\002\000\024\005\u02e1\011\u02d3\012\067\020\u03a7" +
    "\023\u02ea\032\ufe62\035\u03a5\051\076\102\u03aa\001\002\000" +
    "\004\032\ufe63\001\002\000\006\021\u03ce\111\u03cd\001\002" +
    "\000\004\073\u03d7\001\002\000\004\073\u03cf\001\002\000" +
    "\022\042\105\043\107\051\224\060\103\064\225\065\111" +
    "\073\104\074\u03d0\001\002\000\006\100\012\102\030\001" +
    "\002\000\004\074\u03d2\001\002\000\006\100\012\102\030" +
    "\001\002\000\024\005\u02ce\011\u02d3\012\067\013\ufe9f\020" +
    "\u02d2\023\u02da\035\u02cd\051\076\102\u02d6\001\002\000\004" +
    "\013\ufe99\001\002\000\024\005\u02ce\011\u02d3\012\067\013" +
    "\ufe91\020\u02d2\023\u02da\035\u02cd\051\076\102\u02d6\001\002" +
    "\000\004\013\ufe90\001\002\000\004\074\u03d8\001\002\000" +
    "\006\100\012\102\030\001\002\000\024\005\u02ce\011\u02d3" +
    "\012\067\013\ufe8f\020\u02d2\023\u02da\035\u02cd\051\076\102" +
    "\u02d6\001\002\000\004\013\ufe8e\001\002\000\004\013\ufe98" +
    "\001\002\000\004\030\u03dd\001\002\000\010\006\ufea4\100" +
    "\ufea4\102\ufea4\001\002\000\004\026\u03df\001\002\000\006" +
    "\100\012\102\030\001\002\000\022\005\u02ce\011\u02d3\012" +
    "\067\020\u035d\023\u02da\035\u035b\051\076\102\u0360\001\002" +
    "\000\010\013\u03e6\027\u03e3\107\u0107\001\002\000\016\042" +
    "\105\043\107\051\115\060\103\065\111\073\104\001\002" +
    "\000\010\005\u0114\100\012\102\030\001\002\000\004\013" +
    "\u03ee\001\002\000\006\100\012\102\030\001\002\000\004" +
    "\005\u03e7\001\002\000\006\100\012\102\030\001\002\000" +
    "\030\005\ufe8a\011\ufe8a\012\ufe8a\013\ufe8a\020\ufe8a\023\ufe8a" +
    "\027\ufe8a\035\ufe8a\051\ufe8a\102\ufe8a\107\ufe8a\001\002\000" +
    "\022\005\u02ce\011\u02d3\012\067\020\u035d\023\u02da\035\u035b" +
    "\051\076\102\u0360\001\002\000\004\013\u03eb\001\002\000" +
    "\004\005\u03ec\001\002\000\006\100\012\102\030\001\002" +
    "\000\030\005\ufe88\011\ufe88\012\ufe88\013\ufe88\020\ufe88\023" +
    "\ufe88\027\ufe88\035\ufe88\051\ufe88\102\ufe88\107\ufe88\001\002" +
    "\000\004\005\u03ef\001\002\000\006\100\012\102\030\001" +
    "\002\000\030\005\ufe87\011\ufe87\012\ufe87\013\ufe87\020\ufe87" +
    "\023\ufe87\027\ufe87\035\ufe87\051\ufe87\102\ufe87\107\ufe87\001" +
    "\002\000\022\005\u02ce\011\u02d3\012\067\020\u035d\023\u02da" +
    "\035\u035b\051\076\102\u0360\001\002\000\004\013\u03f3\001" +
    "\002\000\004\005\u03f4\001\002\000\006\100\012\102\030" +
    "\001\002\000\030\005\ufe89\011\ufe89\012\ufe89\013\ufe89\020" +
    "\ufe89\023\ufe89\027\ufe89\035\ufe89\051\ufe89\102\ufe89\107\ufe89" +
    "\001\002\000\004\026\u03f7\001\002\000\006\100\012\102" +
    "\030\001\002\000\022\005\u02ce\011\u02d3\012\067\020\u035d" +
    "\023\u02da\035\u035b\051\076\102\u0360\001\002\000\010\013" +
    "\ufe72\027\u03fa\107\u0107\001\002\000\010\005\u0114\100\ufe74" +
    "\102\ufe74\001\002\000\004\013\ufe71\001\002\000\006\100" +
    "\ufe73\102\ufe73\001\002\000\006\100\012\102\030\001\002" +
    "\000\024\005\u02ce\011\u02d3\012\067\013\ufe92\020\u02d2\023" +
    "\u02da\035\u02cd\051\076\102\u02d6\001\002\000\004\013\ufe93" +
    "\001\002\000\004\051\u0401\001\002\000\006\100\012\102" +
    "\030\001\002\000\004\012\u0404\001\002\000\004\013\u040a" +
    "\001\002\000\004\051\u0405\001\002\000\004\022\u0406\001" +
    "\002\000\014\014\050\015\047\016\052\046\051\051\046" +
    "\001\002\000\006\100\012\102\030\001\002\000\006\012" +
    "\u0404\013\ufea7\001\002\000\004\013\ufea6\001\002\000\004" +
    "\025\u040b\001\002\000\010\006\ufea5\100\ufea5\102\ufea5\001" +
    "\002\000\010\006\022\033\023\102\021\001\002\000\004" +
    "\013\uffef\001\002\000\010\006\022\033\023\102\021\001" +
    "\002\000\004\013\u0410\001\002\000\004\007\u0411\001\002" +
    "\000\010\002\ufff6\100\ufff6\102\ufff6\001\002\000\004\002" +
    "\001\001\002\000\010\070\u041a\100\ufffb\102\ufffb\001\002" +
    "\000\006\100\012\102\030\001\002\000\010\070\u0416\100" +
    "\ufff9\102\ufff9\001\002\000\006\017\u0415\051\u0413\001\002" +
    "\000\006\100\ufff8\102\ufff8\001\002\000\006\004\004\006" +
    "\ufffd\001\002\000\004\006\ufffc\001\002\000\006\017\u0415" +
    "\051\u0413\001\002\000\006\100\ufffa\102\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0419\000\006\002\004\003\005\001\001\000\004\005" +
    "\u0413\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\004\121\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\024\010\023\021\025\053\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\u02bf\121\u02c0\001\001\000\002\001\001" +
    "\000\006\010\031\121\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\024\010\023" +
    "\021\033\053\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\063\022\074\025\073\026\057\032\064\041\062\050\067" +
    "\114\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\112\024\105\030\u0263\050\111\113\107\123\113" +
    "\001\001\000\002\001\001\000\022\015\063\022\u0262\025" +
    "\073\026\057\032\064\041\062\050\067\114\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0235\001\001\000\002\001\001\000\022\015\063" +
    "\022\u0208\025\073\026\057\032\064\041\062\050\067\114" +
    "\071\001\001\000\002\001\001\000\022\015\063\022\u0205" +
    "\025\073\026\057\032\064\041\062\050\067\114\071\001" +
    "\001\000\002\001\001\000\012\024\235\113\236\115\u01d1" +
    "\122\u01d0\001\001\000\004\116\077\001\001\000\016\017" +
    "\112\024\105\030\115\050\111\113\107\123\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\u01c1\050\221\113\257\123\u01c0\001\001\000\002" +
    "\001\001\000\004\031\u01ba\001\001\000\002\001\001\000" +
    "\004\031\u01b4\001\001\000\002\001\001\000\004\031\u01af" +
    "\001\001\000\004\031\u01a9\001\001\000\004\020\277\001" +
    "\001\000\004\031\u01a1\001\001\000\004\121\116\001\001" +
    "\000\022\015\123\041\122\042\125\043\126\044\117\046" +
    "\133\050\130\114\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\112\024\105\030\u0159\050\111\113" +
    "\107\123\113\001\001\000\002\001\001\000\022\015\123" +
    "\041\122\042\u0158\043\126\044\117\046\133\050\130\114" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\123\041\122\042\u0146\043\126\044\117\046\133\050" +
    "\130\114\132\001\001\000\002\001\001\000\004\121\137" +
    "\001\001\000\002\001\001\000\022\015\123\041\122\042" +
    "\134\043\126\044\117\046\133\050\130\114\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\123\041" +
    "\122\042\136\043\126\044\117\046\133\050\130\114\132" +
    "\001\001\000\002\001\001\000\022\015\123\041\122\042" +
    "\140\043\126\044\117\046\133\050\130\114\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\143\001" +
    "\001\000\002\001\001\000\004\113\145\001\001\000\002" +
    "\001\001\000\004\113\147\001\001\000\004\121\150\001" +
    "\001\000\022\015\154\032\155\034\151\035\161\037\164" +
    "\047\163\050\157\114\162\001\001\000\022\015\154\032" +
    "\155\034\151\035\161\037\164\047\u0145\050\157\114\162" +
    "\001\001\000\002\001\001\000\016\017\112\024\105\030" +
    "\373\050\111\113\107\123\113\001\001\000\022\015\154" +
    "\032\155\034\151\035\161\037\164\047\372\050\157\114" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\154\032\155\034\151\035\161\037\164\047\346" +
    "\050\157\114\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\116\166\001\001\000\016\017\112\024\105" +
    "\030\167\050\111\113\107\123\113\001\001\000\004\121" +
    "\170\001\001\000\022\015\172\040\200\041\122\043\174" +
    "\044\117\046\133\050\175\114\176\001\001\000\002\001" +
    "\001\000\022\015\172\040\334\041\122\043\174\044\117" +
    "\046\133\050\175\114\176\001\001\000\002\001\001\000" +
    "\022\015\172\040\210\041\122\043\174\044\117\046\133" +
    "\050\175\114\176\001\001\000\004\121\206\001\001\000" +
    "\022\015\172\040\205\041\122\043\174\044\117\046\133" +
    "\050\175\114\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\202\001\001\000\002\001\001\000\022" +
    "\015\172\040\204\041\122\043\174\044\117\046\133\050" +
    "\175\114\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\172\040\207\041\122\043\174\044\117\046" +
    "\133\050\175\114\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\222\023\220\024\216\050\221\113\217" +
    "\123\113\001\001\000\004\121\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\222\023\226\024\216\050\221\113\217\123\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\222\023\251\024\216\050\221\113\217\123\113\001\001" +
    "\000\012\024\235\051\234\113\236\115\237\001\001\000" +
    "\002\001\001\000\010\024\235\113\236\115\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\235\051\243" +
    "\113\236\115\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\235" +
    "\051\250\113\236\115\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\222\023\254\024\216\050\221\113\217\123\113\001" +
    "\001\000\002\001\001\000\016\017\222\023\316\024\216" +
    "\050\221\113\217\123\113\001\001\000\012\017\262\050" +
    "\221\113\257\123\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\277\001\001\000\002\001\001\000" +
    "\014\017\273\020\267\050\221\113\257\123\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\275\050\221\113\257\123\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\305\050\221\113\257\120\307\123" +
    "\306\001\001\000\012\017\302\050\221\113\257\123\301" +
    "\001\001\000\004\020\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\313\020\312\050\221\113\257\123\113\001\001" +
    "\000\012\017\315\050\221\113\257\123\314\001\001\000" +
    "\002\001\001\000\004\020\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\320\001\001\000\022\015" +
    "\172\040\321\041\122\043\174\044\117\046\133\050\175" +
    "\114\176\001\001\000\002\001\001\000\016\017\222\023" +
    "\323\024\216\050\221\113\217\123\113\001\001\000\002" +
    "\001\001\000\016\017\222\023\325\024\216\050\221\113" +
    "\217\123\113\001\001\000\002\001\001\000\022\015\172" +
    "\040\327\041\122\043\174\044\117\046\133\050\175\114" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\332\001\001\000\022\015\172\040\333\041\122\043" +
    "\174\044\117\046\133\050\175\114\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\341\001\001\000" +
    "\004\121\337\001\001\000\022\015\172\040\340\041\122" +
    "\043\174\044\117\046\133\050\175\114\176\001\001\000" +
    "\002\001\001\000\022\015\172\040\342\041\122\043\174" +
    "\044\117\046\133\050\175\114\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\154\032\155\034" +
    "\151\035\161\037\164\047\350\050\157\114\162\001\001" +
    "\000\002\001\001\000\022\015\154\032\155\034\151\035" +
    "\161\037\164\047\352\050\157\114\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\222\023\360\024\216\050\221\113\217" +
    "\123\113\001\001\000\004\121\364\001\001\000\002\001" +
    "\001\000\004\121\362\001\001\000\022\015\154\032\155" +
    "\034\151\035\161\037\164\047\363\050\157\114\162\001" +
    "\001\000\002\001\001\000\022\015\154\032\155\034\151" +
    "\035\161\037\164\047\365\050\157\114\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\370\001\001" +
    "\000\022\015\154\032\155\034\151\035\161\037\164\047" +
    "\371\050\157\114\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\375\001\001\000" +
    "\022\015\u0100\032\155\034\376\035\161\037\164\050\u0102" +
    "\100\u0105\114\u0103\001\001\000\022\015\u0100\032\155\034" +
    "\376\035\161\037\164\050\u0102\100\u013e\114\u0103\001\001" +
    "\000\002\001\001\000\022\015\u0100\032\155\034\376\035" +
    "\161\037\164\050\u0102\100\u0137\114\u0103\001\001\000\002" +
    "\001\001\000\004\121\u0126\001\001\000\022\015\u0100\032" +
    "\155\034\376\035\161\037\164\050\u0102\100\u0125\114\u0103" +
    "\001\001\000\002\001\001\000\010\036\u010a\110\u0108\117" +
    "\u0107\001\001\000\002\001\001\000\016\017\112\024\105" +
    "\030\u011c\050\111\113\107\123\113\001\001\000\002\001" +
    "\001\000\004\121\u0114\001\001\000\004\121\u010e\001\001" +
    "\000\002\001\001\000\004\121\u010d\001\001\000\002\001" +
    "\001\000\022\015\u0100\032\155\034\376\035\161\037\164" +
    "\050\u0102\100\u010f\114\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0112\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0100\032\155\034\376\035" +
    "\161\037\164\050\u0102\100\u0115\114\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0118\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u011b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u011e\001" +
    "\001\000\022\015\u0100\032\155\034\376\035\161\037\164" +
    "\050\u0102\100\u011f\114\u0103\001\001\000\010\036\u0122\110" +
    "\u0120\117\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0100\032\155\034\376\035" +
    "\161\037\164\050\u0102\100\u0124\114\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\u0100\032\155\034" +
    "\376\035\161\037\164\050\u0102\100\u0127\114\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\222\023\u012d\024\216\050\221" +
    "\113\217\123\113\001\001\000\004\121\u0131\001\001\000" +
    "\002\001\001\000\004\121\u012f\001\001\000\022\015\u0100" +
    "\032\155\034\376\035\161\037\164\050\u0102\100\u0130\114" +
    "\u0103\001\001\000\002\001\001\000\022\015\u0100\032\155" +
    "\034\376\035\161\037\164\050\u0102\100\u0132\114\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0135" +
    "\001\001\000\022\015\u0100\032\155\034\376\035\161\037" +
    "\164\050\u0102\100\u0136\114\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u013c\001\001\000\004\121" +
    "\u013a\001\001\000\022\015\u0100\032\155\034\376\035\161" +
    "\037\164\050\u0102\100\u013b\114\u0103\001\001\000\002\001" +
    "\001\000\022\015\u0100\032\155\034\376\035\161\037\164" +
    "\050\u0102\100\u013d\114\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0143\001\001\000\004\121\u0141" +
    "\001\001\000\022\015\154\032\155\034\151\035\161\037" +
    "\164\047\u0142\050\157\114\162\001\001\000\002\001\001" +
    "\000\022\015\154\032\155\034\151\035\161\037\164\047" +
    "\u0144\050\157\114\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0148\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\222\023\u014e\024\216\050\221\113" +
    "\217\123\113\001\001\000\004\121\u0152\001\001\000\002" +
    "\001\001\000\004\121\u0150\001\001\000\022\015\123\041" +
    "\122\042\u0151\043\126\044\117\046\133\050\130\114\132" +
    "\001\001\000\002\001\001\000\022\015\123\041\122\042" +
    "\u0153\043\126\044\117\046\133\050\130\114\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0156\001" +
    "\001\000\022\015\123\041\122\042\u0157\043\126\044\117" +
    "\046\133\050\130\114\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u015b\001\001" +
    "\000\022\015\u015d\041\122\043\u015f\044\117\046\133\050" +
    "\u0160\101\u0163\114\u0162\001\001\000\002\001\001\000\022" +
    "\015\u015d\041\122\043\u015f\044\117\046\133\050\u0160\101" +
    "\u0194\114\u0162\001\001\000\002\001\001\000\022\015\u015d" +
    "\041\122\043\u015f\044\117\046\133\050\u0160\101\u0184\114" +
    "\u0162\001\001\000\004\121\u0182\001\001\000\002\001\001" +
    "\000\022\015\u015d\041\122\043\u015f\044\117\046\133\050" +
    "\u0160\101\u017f\114\u0162\001\001\000\010\045\u0166\106\u0167" +
    "\117\u0164\001\001\000\016\017\112\024\105\030\u0178\050" +
    "\111\113\107\123\113\001\001\000\004\121\u0173\001\001" +
    "\000\004\121\u016e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u016a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u016d\001\001\000\002\001\001\000" +
    "\022\015\u015d\041\122\043\u015f\044\117\046\133\050\u0160" +
    "\101\u016f\114\u0162\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0172\001\001\000\002\001\001\000\022" +
    "\015\u015d\041\122\043\u015f\044\117\046\133\050\u0160\101" +
    "\u0174\114\u0162\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u017a\001\001\000\022\015\u015d\041\122" +
    "\043\u015f\044\117\046\133\050\u0160\101\u017b\114\u0162\001" +
    "\001\000\010\045\u017d\106\u017e\117\u0164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u015d\041\122\043\u015f\044\117\046\133" +
    "\050\u0160\101\u0181\114\u0162\001\001\000\002\001\001\000" +
    "\022\015\u015d\041\122\043\u015f\044\117\046\133\050\u0160" +
    "\101\u0183\114\u0162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\222\023\u018a\024\216\050\221\113\217\123" +
    "\113\001\001\000\004\121\u018e\001\001\000\002\001\001" +
    "\000\004\121\u018c\001\001\000\022\015\u015d\041\122\043" +
    "\u015f\044\117\046\133\050\u0160\101\u018d\114\u0162\001\001" +
    "\000\002\001\001\000\022\015\u015d\041\122\043\u015f\044" +
    "\117\046\133\050\u0160\101\u018f\114\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0192\001\001\000" +
    "\022\015\u015d\041\122\043\u015f\044\117\046\133\050\u0160" +
    "\101\u0193\114\u0162\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0199\001\001\000\004\121\u0197\001\001" +
    "\000\022\015\u015d\041\122\043\u015f\044\117\046\133\050" +
    "\u0160\101\u0198\114\u0162\001\001\000\002\001\001\000\022" +
    "\015\u015d\041\122\043\u015f\044\117\046\133\050\u0160\101" +
    "\u019a\114\u0162\001\001\000\002\001\001\000\004\121\u019c" +
    "\001\001\000\022\015\123\041\122\042\u019d\043\126\044" +
    "\117\046\133\050\130\114\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u01a5\024\u01a2\050\u01a4\113\u01a3\123\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\u01ad\024\u01aa\050\u01ac\113\u01ab\123" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\u01b2\024\u01b0\050\221\113\u01b1\123\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\u01b8\024\u01b5\050\u01b7\113\u01b6\123\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\u01be" +
    "\024\u01bb\050\u01bd\113\u01bc\123\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\277\001\001\000\002\001" +
    "\001\000\014\017\u01c4\020\u01c3\050\221\113\257\123\u01c5" +
    "\001\001\000\012\017\u01c7\050\221\113\257\123\u01c6\001" +
    "\001\000\002\001\001\000\004\020\277\001\001\000\004" +
    "\020\277\001\001\000\002\001\001\000\014\017\u01ca\020" +
    "\u01c9\050\221\113\257\123\u01cb\001\001\000\012\017\u01cd" +
    "\050\221\113\257\123\u01cc\001\001\000\002\001\001\000" +
    "\004\020\277\001\001\000\004\020\277\001\001\000\002" +
    "\001\001\000\012\024\235\051\234\113\236\115\u0200\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u01e7" +
    "\001\001\000\020\017\u01d9\024\u01d3\050\u01d6\113\u01d5\114" +
    "\u01d7\123\113\124\u01d8\001\001\000\004\121\u01e5\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u01e0\001" +
    "\001\000\002\001\001\000\004\121\u01df\001\001\000\004" +
    "\121\u01de\001\001\000\014\024\235\113\236\115\u01d1\121" +
    "\u01dd\122\u01d0\001\001\000\004\121\u01dc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\235\113\236\115\u01d1\122\u01e9\001\001\000\002" +
    "\001\001\000\010\024\235\113\236\115\u01ea\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u01ed\001\001" +
    "\000\012\024\235\113\236\115\u01d1\122\u01ee\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\u01f6\024\u01f1\050\u01f3\113\u01f2\114\u01f4\123\113\124" +
    "\u01f5\001\001\000\004\121\u01ff\001\001\000\004\121\u01fe" +
    "\001\001\000\004\121\u01fd\001\001\000\002\001\001\000" +
    "\004\121\u01fc\001\001\000\004\121\u01fb\001\001\000\014" +
    "\024\235\113\236\115\u01d1\121\u01fa\122\u01d0\001\001\000" +
    "\004\121\u01f9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u01ed\001\001\000\002\001\001\000\004\121\u0204\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\063" +
    "\022\u0207\025\073\026\057\032\064\041\062\050\067\114" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\113\u020b\001\001\000\002\001\001\000" +
    "\004\113\u020d\001\001\000\002\001\001\000\004\113\u020f" +
    "\001\001\000\004\121\u0210\001\001\000\022\015\u0214\032" +
    "\155\033\u0213\034\u0211\035\161\037\164\050\u0216\114\u0217" +
    "\001\001\000\022\015\u0214\032\155\033\u0234\034\u0211\035" +
    "\161\037\164\050\u0216\114\u0217\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0214\032\155\033\u022d\034" +
    "\u0211\035\161\037\164\050\u0216\114\u0217\001\001\000\002" +
    "\001\001\000\004\121\u021c\001\001\000\022\015\u0214\032" +
    "\155\033\u021b\034\u0211\035\161\037\164\050\u0216\114\u0217" +
    "\001\001\000\002\001\001\000\022\015\u0214\032\155\033" +
    "\u021a\034\u0211\035\161\037\164\050\u0216\114\u0217\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u0214\032" +
    "\155\033\u021d\034\u0211\035\161\037\164\050\u0216\114\u0217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\222\023\u0223\024\216" +
    "\050\221\113\217\123\113\001\001\000\004\121\u0227\001" +
    "\001\000\002\001\001\000\004\121\u0225\001\001\000\022" +
    "\015\u0214\032\155\033\u0226\034\u0211\035\161\037\164\050" +
    "\u0216\114\u0217\001\001\000\002\001\001\000\022\015\u0214" +
    "\032\155\033\u0228\034\u0211\035\161\037\164\050\u0216\114" +
    "\u0217\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u022b\001\001\000\022\015\u0214\032\155\033\u022c\034" +
    "\u0211\035\161\037\164\050\u0216\114\u0217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0230\001\001\000\002\001\001\000\004\121\u0232\001\001" +
    "\000\022\015\u0214\032\155\033\u0233\034\u0211\035\161\037" +
    "\164\050\u0216\114\u0217\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\063\022\u0236\025\073\026\057\032" +
    "\064\041\062\050\067\114\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0247\001\001\000\022\016" +
    "\u023e\017\u0240\024\u023a\050\u023c\113\u023b\114\u023d\123\113" +
    "\124\u023f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0246\001\001\000\002\001\001\000\004\121\u0245" +
    "\001\001\000\002\001\001\000\004\121\u0244\001\001\000" +
    "\014\024\235\113\236\115\u01d1\121\u0243\122\u01d0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0249\001\001" +
    "\000\022\016\u024c\017\u024d\024\u023a\050\u024a\113\u023b\114" +
    "\u024b\123\113\124\u023f\001\001\000\002\001\001\000\004" +
    "\121\u0252\001\001\000\002\001\001\000\004\121\u0251\001" +
    "\001\000\004\121\u0250\001\001\000\014\024\235\113\236" +
    "\115\u01d1\121\u024f\122\u01d0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\222\023\u0258\024\216\050\221\113\217\123\113\001\001" +
    "\000\004\121\u025c\001\001\000\002\001\001\000\004\121" +
    "\u025a\001\001\000\022\015\063\022\u025b\025\073\026\057" +
    "\032\064\041\062\050\067\114\071\001\001\000\002\001" +
    "\001\000\022\015\063\022\u025d\025\073\026\057\032\064" +
    "\041\062\050\067\114\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0260\001\001\000\022\015\063" +
    "\022\u0261\025\073\026\057\032\064\041\062\050\067\114" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0265\001\001\000\022\015\u0267\025" +
    "\u026d\026\057\032\064\041\062\050\u026a\077\u0269\114\u026c" +
    "\001\001\000\002\001\001\000\022\015\u0267\025\u026d\026" +
    "\057\032\064\041\062\050\u026a\077\u029f\114\u026c\001\001" +
    "\000\002\001\001\000\010\027\u0277\107\u0276\117\u0275\001" +
    "\001\000\004\121\u0273\001\001\000\002\001\001\000\022" +
    "\015\u0267\025\u026d\026\057\032\064\041\062\050\u026a\077" +
    "\u0270\114\u026c\001\001\000\002\001\001\000\022\015\u0267" +
    "\025\u026d\026\057\032\064\041\062\050\u026a\077\u026f\114" +
    "\u026c\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u0267\025\u026d\026\057\032\064\041\062\050\u026a\077" +
    "\u0272\114\u026c\001\001\000\002\001\001\000\022\015\u0267" +
    "\025\u026d\026\057\032\064\041\062\050\u026a\077\u0274\114" +
    "\u026c\001\001\000\002\001\001\000\016\017\112\024\105" +
    "\030\u0289\050\111\113\107\123\113\001\001\000\002\001" +
    "\001\000\004\121\u0281\001\001\000\004\121\u027c\001\001" +
    "\000\002\001\001\000\004\121\u027b\001\001\000\002\001" +
    "\001\000\022\015\u0267\025\u026d\026\057\032\064\041\062" +
    "\050\u026a\077\u027d\114\u026c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0280\001\001\000\002\001\001" +
    "\000\022\015\u0267\025\u026d\026\057\032\064\041\062\050" +
    "\u026a\077\u0282\114\u026c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0285\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0288\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u028b\001\001\000\022\015" +
    "\u0267\025\u026d\026\057\032\064\041\062\050\u026a\077\u028c" +
    "\114\u026c\001\001\000\010\027\u028e\107\u028d\117\u0275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\222\023\u0295\024\216\050\221\113\217\123\113" +
    "\001\001\000\004\121\u0299\001\001\000\002\001\001\000" +
    "\004\121\u0297\001\001\000\022\015\u0267\025\u026d\026\057" +
    "\032\064\041\062\050\u026a\077\u0298\114\u026c\001\001\000" +
    "\002\001\001\000\022\015\u0267\025\u026d\026\057\032\064" +
    "\041\062\050\u026a\077\u029a\114\u026c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u029d\001\001\000\022" +
    "\015\u0267\025\u026d\026\057\032\064\041\062\050\u026a\077" +
    "\u029e\114\u026c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u02a1\001\001\000\022\015\u0267\025\u026d\026" +
    "\057\032\064\041\062\050\u026a\077\u02a2\114\u026c\001\001" +
    "\000\002\001\001\000\004\121\u02a4\001\001\000\022\015" +
    "\063\022\u02a5\025\073\026\057\032\064\041\062\050\067" +
    "\114\071\001\001\000\002\001\001\000\022\015\063\022" +
    "\u02a7\025\073\026\057\032\064\041\062\050\067\114\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u02aa\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u02ad\001\001\000\002\001\001\000\004\011\u02af\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\063\022\u02b4\025\073\026" +
    "\057\032\064\041\062\050\067\114\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u02b7\001\001\000" +
    "\002\001\001\000\022\015\063\022\u02b9\025\073\026\057" +
    "\032\064\041\062\050\067\114\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u02bc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\024\010\023\021\u02c1\053\026\001\001" +
    "\000\002\001\001\000\012\007\024\010\023\021\u02c3\053" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u02c7\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u02ca\001\001\000\004\121\u02cb" +
    "\001\001\000\022\013\u02ce\015\u02cf\050\u02d3\054\u02d8\055" +
    "\u02d7\057\u02d0\066\u02d6\114\u02d4\001\001\000\002\001\001" +
    "\000\016\017\112\024\105\030\u03dd\050\111\113\107\123" +
    "\113\001\001\000\002\001\001\000\022\013\u03da\015\u02cf" +
    "\050\u02d3\054\u02d8\055\u02d7\057\u02d0\066\u02d6\114\u02d4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u039a\001\001\000\022\013\u0399\015\u02cf\050" +
    "\u02d3\054\u02d8\055\u02d7\057\u02d0\066\u02d6\114\u02d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\u0396\015\u02cf\050\u02d3\054\u02d8\055\u02d7\057\u02d0" +
    "\066\u02d6\114\u02d4\001\001\000\004\116\u02da\001\001\000" +
    "\016\017\112\024\105\030\u02db\050\111\113\107\123\113" +
    "\001\001\000\004\121\u02dc\001\001\000\022\015\u02e1\050" +
    "\u02e5\057\u02e3\061\u02e8\062\u02dd\064\u02df\067\u02e2\114\u02e6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\112\024\105\030\u032e\050\111\113\107" +
    "\123\113\001\001\000\022\015\u02e1\050\u02e5\057\u02e3\061" +
    "\u02e8\062\u02dd\064\u02df\067\u032d\114\u02e6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u031a\001\001\000\022\015\u02e1\050\u02e5\057\u02e3\061\u02e8" +
    "\062\u02dd\064\u02df\067\u0319\114\u02e6\001\001\000\002\001" +
    "\001\000\022\015\u02e1\050\u02e5\057\u02e3\061\u02e8\062\u02dd" +
    "\064\u02df\067\u0316\114\u02e6\001\001\000\004\116\u02ea\001" +
    "\001\000\016\017\112\024\105\030\u02eb\050\111\113\107" +
    "\123\113\001\001\000\004\121\u02ec\001\001\000\022\015" +
    "\u02ee\041\122\043\u02f1\044\117\046\133\050\u02f2\065\u02ef" +
    "\114\u02f3\001\001\000\002\001\001\000\022\015\u02ee\041" +
    "\122\043\u02f1\044\117\046\133\050\u02f2\065\u030c\114\u02f3" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\u02ee\041\122\043\u02f1\044\117\046\133\050\u02f2\065\u02fa" +
    "\114\u02f3\001\001\000\004\121\u02f8\001\001\000\022\015" +
    "\u02ee\041\122\043\u02f1\044\117\046\133\050\u02f2\065\u02f7" +
    "\114\u02f3\001\001\000\002\001\001\000\022\015\u02ee\041" +
    "\122\043\u02f1\044\117\046\133\050\u02f2\065\u02f6\114\u02f3" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\u02ee\041\122\043\u02f1\044\117\046\133\050\u02f2\065\u02f9" +
    "\114\u02f3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\222\023\u0300\024\216\050\221\113\217\123\113\001" +
    "\001\000\004\121\u0304\001\001\000\002\001\001\000\004" +
    "\121\u0302\001\001\000\022\015\u02ee\041\122\043\u02f1\044" +
    "\117\046\133\050\u02f2\065\u0303\114\u02f3\001\001\000\002" +
    "\001\001\000\022\015\u02ee\041\122\043\u02f1\044\117\046" +
    "\133\050\u02f2\065\u0305\114\u02f3\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0308\001\001\000\022\015" +
    "\u02ee\041\122\043\u02f1\044\117\046\133\050\u02f2\065\u0309" +
    "\114\u02f3\001\001\000\002\001\001\000\004\121\u030b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0314" +
    "\001\001\000\004\121\u0312\001\001\000\004\121\u0310\001" +
    "\001\000\022\015\u02ee\041\122\043\u02f1\044\117\046\133" +
    "\050\u02f2\065\u0311\114\u02f3\001\001\000\002\001\001\000" +
    "\022\015\u02ee\041\122\043\u02f1\044\117\046\133\050\u02f2" +
    "\065\u0313\114\u02f3\001\001\000\002\001\001\000\022\015" +
    "\u02ee\041\122\043\u02f1\044\117\046\133\050\u02f2\065\u0315" +
    "\114\u02f3\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\u02e1\050\u02e5\057\u02e3\061\u02e8\062\u02dd\064\u02df" +
    "\067\u0318\114\u02e6\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u02e1\050\u02e5\057\u02e3\061\u02e8\062\u02dd" +
    "\064\u02df\067\u031b\114\u02e6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\222\023\u0321\024\216\050\221\113\217\123\113\001" +
    "\001\000\004\121\u0325\001\001\000\002\001\001\000\004" +
    "\121\u0323\001\001\000\022\015\u02e1\050\u02e5\057\u02e3\061" +
    "\u02e8\062\u02dd\064\u02df\067\u0324\114\u02e6\001\001\000\002" +
    "\001\001\000\022\015\u02e1\050\u02e5\057\u02e3\061\u02e8\062" +
    "\u02dd\064\u02df\067\u0326\114\u02e6\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0329\001\001\000\022\015" +
    "\u02e1\050\u02e5\057\u02e3\061\u02e8\062\u02dd\064\u02df\067\u032a" +
    "\114\u02e6\001\001\000\002\001\001\000\004\121\u032c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0330\001\001\000\022\015\u0332\050\u0334\057" +
    "\u02e3\061\u0338\062\u02dd\064\u02df\103\u0337\114\u0336\001\001" +
    "\000\002\001\001\000\022\015\u0332\050\u0334\057\u02e3\061" +
    "\u0338\062\u02dd\064\u02df\103\u0389\114\u0336\001\001\000\002" +
    "\001\001\000\004\121\u0358\001\001\000\002\001\001\000" +
    "\022\015\u0332\050\u0334\057\u02e3\061\u0338\062\u02dd\064\u02df" +
    "\103\u0355\114\u0336\001\001\000\010\063\u033c\112\u033d\117" +
    "\u033a\001\001\000\022\015\u0332\050\u0334\057\u02e3\061\u0338" +
    "\062\u02dd\064\u02df\103\u0339\114\u0336\001\001\000\002\001" +
    "\001\000\016\017\112\024\105\030\u034e\050\111\113\107" +
    "\123\113\001\001\000\004\121\u0349\001\001\000\004\121" +
    "\u0344\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0340\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0343\001\001\000\002\001\001\000\022\015\u0332" +
    "\050\u0334\057\u02e3\061\u0338\062\u02dd\064\u02df\103\u0345\114" +
    "\u0336\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0348\001\001\000\002\001\001\000\022\015\u0332\050" +
    "\u0334\057\u02e3\061\u0338\062\u02dd\064\u02df\103\u034a\114\u0336" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u034d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0350\001\001\000\022\015\u0332\050\u0334\057\u02e3\061" +
    "\u0338\062\u02dd\064\u02df\103\u0351\114\u0336\001\001\000\010" +
    "\063\u0353\112\u0354\117\u033a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u0332\050\u0334\057\u02e3\061\u0338\062\u02dd\064\u02df\103" +
    "\u0357\114\u0336\001\001\000\002\001\001\000\022\015\u035b" +
    "\050\u035d\054\u0360\055\u02d7\057\u02d0\066\u02d6\102\u0359\114" +
    "\u035e\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u035b\050\u035d\054\u0360\055\u02d7\057\u02d0\066\u02d6\102" +
    "\u0376\114\u035e\001\001\000\002\001\001\000\004\121\u0365" +
    "\001\001\000\022\015\u035b\050\u035d\054\u0360\055\u02d7\057" +
    "\u02d0\066\u02d6\102\u0364\114\u035e\001\001\000\002\001\001" +
    "\000\022\015\u035b\050\u035d\054\u0360\055\u02d7\057\u02d0\066" +
    "\u02d6\102\u0361\114\u035e\001\001\000\002\001\001\000\022" +
    "\015\u035b\050\u035d\054\u0360\055\u02d7\057\u02d0\066\u02d6\102" +
    "\u0363\114\u035e\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\u035b\050\u035d\054\u0360\055\u02d7\057\u02d0\066" +
    "\u02d6\102\u0366\114\u035e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\222\023\u036c\024\216\050\221\113\217\123\113\001\001" +
    "\000\004\121\u0370\001\001\000\002\001\001\000\004\121" +
    "\u036e\001\001\000\022\015\u035b\050\u035d\054\u0360\055\u02d7" +
    "\057\u02d0\066\u02d6\102\u036f\114\u035e\001\001\000\002\001" +
    "\001\000\022\015\u035b\050\u035d\054\u0360\055\u02d7\057\u02d0" +
    "\066\u02d6\102\u0371\114\u035e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0374\001\001\000\022\015\u035b" +
    "\050\u035d\054\u0360\055\u02d7\057\u02d0\066\u02d6\102\u0375\114" +
    "\u035e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0378\001\001\000\022\015\u035b\050\u035d\054\u0360\055" +
    "\u02d7\057\u02d0\066\u02d6\102\u0379\114\u035e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\222\023\u037f\024\216\050\221\113\217" +
    "\123\113\001\001\000\004\121\u0383\001\001\000\002\001" +
    "\001\000\004\121\u0381\001\001\000\022\015\u0332\050\u0334" +
    "\057\u02e3\061\u0338\062\u02dd\064\u02df\103\u0382\114\u0336\001" +
    "\001\000\002\001\001\000\022\015\u0332\050\u0334\057\u02e3" +
    "\061\u0338\062\u02dd\064\u02df\103\u0384\114\u0336\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0387\001\001" +
    "\000\022\015\u0332\050\u0334\057\u02e3\061\u0338\062\u02dd\064" +
    "\u02df\103\u0388\114\u0336\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u038e\001\001\000\004\121\u038c\001" +
    "\001\000\022\015\u0332\050\u0334\057\u02e3\061\u0338\062\u02dd" +
    "\064\u02df\103\u038d\114\u0336\001\001\000\002\001\001\000" +
    "\022\015\u0332\050\u0334\057\u02e3\061\u0338\062\u02dd\064\u02df" +
    "\103\u038f\114\u0336\001\001\000\002\001\001\000\004\121" +
    "\u0394\001\001\000\004\121\u0392\001\001\000\022\015\u02e1" +
    "\050\u02e5\057\u02e3\061\u02e8\062\u02dd\064\u02df\067\u0393\114" +
    "\u02e6\001\001\000\002\001\001\000\022\015\u02e1\050\u02e5" +
    "\057\u02e3\061\u02e8\062\u02dd\064\u02df\067\u0395\114\u02e6\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\u0398" +
    "\015\u02cf\050\u02d3\054\u02d8\055\u02d7\057\u02d0\066\u02d6\114" +
    "\u02d4\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\u039b\015\u02cf\050\u02d3\054\u02d8\055\u02d7\057\u02d0\066" +
    "\u02d6\114\u02d4\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u039e\001\001\000\002\001\001\000\004\113" +
    "\u03a0\001\001\000\002\001\001\000\004\113\u03a2\001\001" +
    "\000\004\121\u03a3\001\001\000\022\015\u03a5\050\u03a7\057" +
    "\u02e3\060\u03a8\061\u03ab\062\u02dd\064\u02df\114\u03aa\001\001" +
    "\000\002\001\001\000\022\015\u03a5\050\u03a7\057\u02e3\060" +
    "\u03c4\061\u03ab\062\u02dd\064\u02df\114\u03aa\001\001\000\002" +
    "\001\001\000\004\121\u03b3\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\u03a5\050\u03a7\057\u02e3\060\u03ad" +
    "\061\u03ab\062\u02dd\064\u02df\114\u03aa\001\001\000\022\015" +
    "\u03a5\050\u03a7\057\u02e3\060\u03ac\061\u03ab\062\u02dd\064\u02df" +
    "\114\u03aa\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\u03a5\050\u03a7\057\u02e3\060\u03af\061\u03ab\062\u02dd" +
    "\064\u02df\114\u03aa\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u03b2\001\001\000\002\001\001\000\022" +
    "\015\u03a5\050\u03a7\057\u02e3\060\u03b4\061\u03ab\062\u02dd\064" +
    "\u02df\114\u03aa\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\222\023" +
    "\u03ba\024\216\050\221\113\217\123\113\001\001\000\004" +
    "\121\u03be\001\001\000\002\001\001\000\004\121\u03bc\001" +
    "\001\000\022\015\u03a5\050\u03a7\057\u02e3\060\u03bd\061\u03ab" +
    "\062\u02dd\064\u02df\114\u03aa\001\001\000\002\001\001\000" +
    "\022\015\u03a5\050\u03a7\057\u02e3\060\u03bf\061\u03ab\062\u02dd" +
    "\064\u02df\114\u03aa\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u03c2\001\001\000\022\015\u03a5\050\u03a7" +
    "\057\u02e3\060\u03c3\061\u03ab\062\u02dd\064\u02df\114\u03aa\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u03c9" +
    "\001\001\000\004\121\u03c7\001\001\000\022\015\u03a5\050" +
    "\u03a7\057\u02e3\060\u03c8\061\u03ab\062\u02dd\064\u02df\114\u03aa" +
    "\001\001\000\002\001\001\000\022\015\u03a5\050\u03a7\057" +
    "\u02e3\060\u03ca\061\u03ab\062\u02dd\064\u02df\114\u03aa\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\222\023\u03d0\024\216\050\221" +
    "\113\217\123\113\001\001\000\004\121\u03d4\001\001\000" +
    "\002\001\001\000\004\121\u03d2\001\001\000\022\013\u03d3" +
    "\015\u02cf\050\u02d3\054\u02d8\055\u02d7\057\u02d0\066\u02d6\114" +
    "\u02d4\001\001\000\002\001\001\000\022\013\u03d5\015\u02cf" +
    "\050\u02d3\054\u02d8\055\u02d7\057\u02d0\066\u02d6\114\u02d4\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u03d8" +
    "\001\001\000\022\013\u03d9\015\u02cf\050\u02d3\054\u02d8\055" +
    "\u02d7\057\u02d0\066\u02d6\114\u02d4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u03df\001\001\000\022\015\u035b" +
    "\050\u035d\054\u0360\055\u02d7\057\u02d0\066\u02d6\102\u03e0\114" +
    "\u035e\001\001\000\010\056\u03e4\111\u03e3\117\u03e1\001\001" +
    "\000\016\017\112\024\105\030\u03f5\050\111\113\107\123" +
    "\113\001\001\000\004\121\u03f0\001\001\000\002\001\001" +
    "\000\004\121\u03e8\001\001\000\002\001\001\000\004\121" +
    "\u03e7\001\001\000\002\001\001\000\022\015\u035b\050\u035d" +
    "\054\u0360\055\u02d7\057\u02d0\066\u02d6\102\u03e9\114\u035e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u03ec" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u03ef\001\001\000\002\001\001\000\022\015\u035b\050\u035d" +
    "\054\u0360\055\u02d7\057\u02d0\066\u02d6\102\u03f1\114\u035e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u03f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u03f7\001\001\000\022\015\u035b\050\u035d\054\u0360\055\u02d7" +
    "\057\u02d0\066\u02d6\102\u03f8\114\u035e\001\001\000\010\056" +
    "\u03fb\111\u03fa\117\u03e1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u03fd\001\001\000" +
    "\022\013\u03fe\015\u02cf\050\u02d3\054\u02d8\055\u02d7\057\u02d0" +
    "\066\u02d6\114\u02d4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0401\001\001\000\004\052\u0402\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0406\001\001\000\004\121\u0407\001\001\000\004" +
    "\052\u0408\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\024\010\023\021\u040c\053\026" +
    "\001\001\000\002\001\001\000\012\007\024\010\023\021" +
    "\u040e\053\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0417\001\001\000\002\001\001\000\004\005\u0416" +
    "\001\001\000\002\001\001\000\004\003\u0418\001\001\000" +
    "\002\001\001\000\004\005\u041a\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // INFOR_WHILE_FUNCION ::= DECLARACION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // INFOR_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // INIF_WHILE_FUNCION ::= LLAMAR_SUB INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // INIF_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // INIF_WHILE_FUNCION ::= DECLARACION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // INIF_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // INWHILE_FUNCION ::= LLAMAR_SUB INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // INWHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // INWHILE_FUNCION ::= DECLARACION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // INWHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // INWHILE_FOR_FUNCION ::= DECLARACION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // INWHILE_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // INIF_FOR_FUNCION ::= LLAMAR_SUB INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // INIF_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // INIF_FOR_FUNCION ::= DECLARACION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // INIF_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // INFOR_FUNCION ::= LLAMAR_SUB INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // INFOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // INFOR_FUNCION ::= DECLARACION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // INFOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // INIF_FUNCION ::= LLAMAR_SUB INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // INIF_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // INIF_FUNCION ::= DECLARACION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // INIF_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION else_ FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // INFUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // INFUNCION ::= exit function_ FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // INFUNCION ::= LLAMAR_SUB INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // INFUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INFUNCION ::= DECLARACION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INFUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // STRUCT_ ::= Public_ struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // INFOR_WHILE ::= LLAMAR_SUB INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INFOR_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INFOR_WHILE ::= DECLARACION INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INFOR_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE else_ FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INIF_WHILE ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INIF_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INIF_WHILE ::= exit sub FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INIF_WHILE ::= exit do_ FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INIF_WHILE ::= LLAMAR_SUB INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INIF_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INIF_WHILE ::= DECLARACION INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // INIF_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INWHILE_MAIN ::= LLAMAR_SUB INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INWHILE_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // INWHILE_MAIN ::= DECLARACION INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // INWHILE_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_MAIN loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INWHILE_FOR ::= LLAMAR_SUB INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INWHILE_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INWHILE_FOR ::= DECLARACION INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INWHILE_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR else_ FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INIF_FOR ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INIF_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INIF_FOR ::= exit sub FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INIF_FOR ::= exit for_ FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INIF_FOR ::= LLAMAR_SUB INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INIF_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INIF_FOR ::= DECLARACION INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INIF_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INFOR_MAIN ::= LLAMAR_SUB INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INFOR_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INFOR_MAIN ::= DECLARACION INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // INFOR_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_MAIN next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INIF ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INIF ::= exit sub FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INIF ::= LLAMAR_SUB INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INIF ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INIF ::= DECLARACION INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INIF ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF else_ FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TYPEDECLARE ::= READLINE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // READLINE_FUNCION ::= console_ punto readline parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READLINE_FUNCION",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION ::= identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION ::= identificador punto identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION ::= dim identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION ::= dim identificador as TYPE_ igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION ::= dim identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= identificador punto identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= identificador punto identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= identificador punto identificador igual NUMERO FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= identificador punto identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= identificador punto identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= dim identificador igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACION_AR ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERACION_AR ::= OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADOR_ARITMETICO ::= mod_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADOR_ARITMETICO ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR_ARITMETICO ::= div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR_ARITMETICO ::= mult 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADOR_ARITMETICO ::= resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADOR_ARITMETICO ::= suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERANDOS_TYPE ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERANDOS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERANDOS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETROS_SUB ::= PARAMETROS_TYPE coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROS_SUB ::= PARAMETROS_TYPE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAMAR_SUB ::= identificador PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INMAIN ::= exit sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INMAIN ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INMAIN ::= LLAMAR_SUB INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INMAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INMAIN ::= DECLARACION INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INMAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INMAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FIN_CON_COMENT ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FIN_CON_COMENT ::= findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= Public_ sub main_ parentesisA parentesisC comentario findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEXT_MODULE ::= comentario findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEXT_MODULE ::= FUNCION_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEXT_MODULE ::= STRUCT_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODULE ::= Public_ Module identificador comentario findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= imports IDENTIFICADOR_IMPORT FIN_CON_COMENT IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= imports IDENTIFICADOR_IMPORT FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // UC ::= IMPORTS MODULE comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

