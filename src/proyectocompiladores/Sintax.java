
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 12 00:07:54 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 12 00:07:54 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\006\000\002\005\003\000\002\005\005" +
    "\000\002\004\010\000\002\020\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\010\012\000\002\021\010\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\011\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\017\004" +
    "\000\002\017\003\000\002\023\004\000\002\023\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\024\004\000\002\024\005\000\002\024\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\004\000" +
    "\002\026\003\000\002\027\005\000\002\027\004\000\002" +
    "\015\006\000\002\015\010\000\002\015\010\000\002\015" +
    "\012\000\002\015\006\000\002\015\010\000\002\015\012" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\016\003\000\002\016\004\000\002" +
    "\016\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\010" +
    "\000\002\032\012\000\002\032\014\000\002\032\010\000" +
    "\002\033\012\000\002\033\013\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\015\000\002\037" +
    "\010\000\002\037\003\000\002\037\003\000\002\037\011" +
    "\000\002\037\005\000\002\037\004\000\002\037\003\000" +
    "\002\037\004\000\002\037\004\000\002\040\003\000\002" +
    "\040\004\000\002\040\003\000\002\041\011\000\002\041" +
    "\013\000\002\041\014\000\002\041\011\000\002\042\011" +
    "\000\002\042\012\000\002\043\007\000\002\044\010\000" +
    "\002\044\003\000\002\044\004\000\002\044\011\000\002" +
    "\044\005\000\002\044\006\000\002\044\003\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\045\007" +
    "\000\002\046\011\000\002\046\004\000\002\046\003\000" +
    "\002\046\011\000\002\046\005\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\005\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\050\010" +
    "\000\002\050\012\000\002\050\013\000\002\050\010\000" +
    "\002\051\012\000\002\051\012\000\002\052\015\000\002" +
    "\053\010\000\002\053\003\000\002\053\003\000\002\053" +
    "\011\000\002\053\004\000\002\053\004\000\002\053\003" +
    "\000\002\053\004\000\002\053\005\000\002\053\005\000" +
    "\002\054\005\000\002\054\006\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\056\006\000\002\056\007" +
    "\000\002\007\010\000\002\057\015\000\002\011\005\000" +
    "\002\011\007\000\002\013\010\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\011\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\061\010\000\002\061\012\000\002\061\013\000\002" +
    "\061\010\000\002\076\012\000\002\076\012\000\002\063" +
    "\015\000\002\064\010\000\002\064\003\000\002\064\003" +
    "\000\002\064\011\000\002\064\004\000\002\064\004\000" +
    "\002\064\003\000\002\064\004\000\002\064\004\000\002" +
    "\064\004\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\066\010\000\002\066\012\000\002\066\013" +
    "\000\002\066\010\000\002\067\012\000\002\067\012\000" +
    "\002\070\007\000\002\071\010\000\002\071\003\000\002" +
    "\071\003\000\002\071\011\000\002\071\004\000\002\071" +
    "\004\000\002\071\003\000\002\071\004\000\002\071\004" +
    "\000\002\071\004\000\002\071\004\000\002\072\007\000" +
    "\002\073\010\000\002\073\003\000\002\073\003\000\002" +
    "\073\011\000\002\073\004\000\002\073\004\000\002\073" +
    "\003\000\002\073\004\000\002\073\004\000\002\073\004" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\075\010\000\002\075\012\000\002\075\013\000\002" +
    "\075\010\000\002\101\012\000\002\101\012\000\002\077" +
    "\015\000\002\100\010\000\002\100\003\000\002\100\003" +
    "\000\002\100\011\000\002\100\004\000\002\100\004\000" +
    "\002\100\003\000\002\100\004\000\002\100\005\000\002" +
    "\100\005\000\002\100\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0281\000\004\004\004\001\002\000\004\051\u027e\001" +
    "\002\000\004\002\u027d\001\002\000\004\006\010\001\002" +
    "\000\004\002\000\001\002\000\004\007\011\001\002\000" +
    "\004\051\012\001\002\000\006\006\013\033\014\001\002" +
    "\000\006\010\026\025\u0273\001\002\000\004\030\u01a7\001" +
    "\002\000\004\013\ufffa\001\002\000\006\066\u01a3\100\u01a4" +
    "\001\002\000\004\013\u01a1\001\002\000\006\066\021\100" +
    "\022\001\002\000\004\006\024\001\002\000\006\006\013" +
    "\033\014\001\002\000\004\013\ufff6\001\002\000\004\010" +
    "\026\001\002\000\004\013\ufff8\001\002\000\004\103\027" +
    "\001\002\000\004\073\030\001\002\000\004\074\031\001" +
    "\002\000\016\005\033\011\041\012\040\020\037\023\046" +
    "\051\045\001\002\000\030\005\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\020\uffbe\023\uffbe\027\uffbe\035\uffbe\051\uffbe\066\uffbe" +
    "\100\uffbe\001\002\000\016\042\053\043\055\051\061\065" +
    "\056\066\051\073\050\001\002\000\030\005\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\020\uffbc\023\uffbc\027\uffbc\035\uffbc\051" +
    "\uffbc\066\uffbc\100\uffbc\001\002\000\010\013\ufff3\027\ufff3" +
    "\100\u019e\001\002\000\030\005\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\020\uffbd\023\uffbd\027\uffbd\035\uffbd\051\uffbd\066\uffbd" +
    "\100\uffbd\001\002\000\004\070\u0199\001\002\000\004\051" +
    "\u0182\001\002\000\004\051\345\001\002\000\010\013\ufff1" +
    "\027\ufff1\100\343\001\002\000\010\013\ufff2\027\ufff2\100" +
    "\341\001\002\000\004\013\337\001\002\000\004\073\262" +
    "\001\002\000\004\036\047\001\002\000\016\042\053\043" +
    "\055\051\061\065\056\066\051\073\050\001\002\000\010" +
    "\065\334\066\051\073\050\001\002\000\022\045\150\057" +
    "\142\060\141\061\144\062\140\063\137\066\051\073\050" +
    "\001\002\000\014\052\257\053\256\054\254\055\260\056" +
    "\255\001\002\000\056\005\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\020\uffc0\023\uffc0\026\uffc0\027\uffc0\032\uffc0\034\uffc0\035" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\066\uffc0\074\uffc0\100\uffc0\101\uffc0\104\uffc0\001\002\000" +
    "\042\005\uffe1\011\uffe1\012\uffe1\020\uffe1\023\uffe1\026\uffe1" +
    "\035\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\074\uffe1\100\uffe1\101\uffe1\001\002\000\056\005\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\020\uffbf\023\uffbf\026\uffbf\027" +
    "\uffbf\032\uffbf\034\uffbf\035\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\066\uffbf\074\uffbf\100\uffbf\101" +
    "\uffbf\104\uffbf\001\002\000\034\045\150\052\257\053\256" +
    "\054\254\055\260\056\255\057\142\060\141\061\144\062" +
    "\140\063\137\066\051\073\050\001\002\000\014\052\257" +
    "\053\256\054\254\055\260\056\255\001\002\000\014\052" +
    "\257\053\256\054\254\055\260\056\255\001\002\000\016" +
    "\052\257\053\256\054\254\055\260\056\255\073\262\001" +
    "\002\000\022\005\065\011\075\012\040\020\070\023\046" +
    "\035\064\051\045\100\073\001\002\000\032\005\uff70\011" +
    "\uff70\012\uff70\013\uff70\020\uff70\023\uff70\027\uff70\032\uff70" +
    "\034\uff70\035\uff70\051\uff70\100\uff70\001\002\000\004\023" +
    "\252\001\002\000\016\042\053\043\055\051\061\065\056" +
    "\066\051\073\050\001\002\000\004\100\215\001\002\000" +
    "\032\005\uff6e\011\uff6e\012\uff6e\013\uff6e\020\uff6e\023\uff6e" +
    "\027\uff6e\032\uff6e\034\uff6e\035\uff6e\051\uff6e\100\uff6e\001" +
    "\002\000\004\070\206\001\002\000\004\034\205\001\002" +
    "\000\030\005\065\011\075\012\040\013\uff77\020\070\023" +
    "\046\027\uff77\034\uff77\035\064\051\045\100\073\001\002" +
    "\000\004\012\040\001\002\000\024\005\065\011\075\012" +
    "\040\020\070\023\046\035\064\051\045\066\201\100\073" +
    "\001\002\000\004\051\077\001\002\000\032\005\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\020\uff6f\023\uff6f\027\uff6f\032\uff6f" +
    "\034\uff6f\035\uff6f\051\uff6f\100\uff6f\001\002\000\004\054" +
    "\100\001\002\000\004\065\101\001\002\000\004\037\102" +
    "\001\002\000\004\065\103\001\002\000\004\047\104\001" +
    "\002\000\004\065\105\001\002\000\020\005\065\011\075" +
    "\012\040\020\110\023\046\035\106\051\045\001\002\000" +
    "\006\011\176\023\175\001\002\000\022\005\065\011\075" +
    "\012\040\020\110\023\046\032\uff65\035\106\051\045\001" +
    "\002\000\004\070\120\001\002\000\022\005\065\011\075" +
    "\012\040\020\110\023\046\032\uff64\035\106\051\045\001" +
    "\002\000\022\005\065\011\075\012\040\020\110\023\046" +
    "\032\uff60\035\106\051\045\001\002\000\004\032\114\001" +
    "\002\000\004\051\115\001\002\000\032\005\uff67\011\uff67" +
    "\012\uff67\013\uff67\020\uff67\023\uff67\027\uff67\032\uff67\034" +
    "\uff67\035\uff67\051\uff67\100\uff67\001\002\000\004\032\uff5f" +
    "\001\002\000\004\032\uff61\001\002\000\004\021\121\001" +
    "\002\000\004\073\122\001\002\000\020\042\053\043\055" +
    "\051\127\064\130\065\125\066\051\073\050\001\002\000" +
    "\006\074\uffea\101\172\001\002\000\004\074\170\001\002" +
    "\000\026\045\150\057\142\060\141\061\144\062\140\063" +
    "\137\066\051\073\050\074\uffeb\101\143\001\002\000\006" +
    "\074\uffe8\101\135\001\002\000\006\074\uffe9\101\133\001" +
    "\002\000\006\074\uffec\101\131\001\002\000\020\042\053" +
    "\043\055\051\127\064\130\065\125\066\051\073\050\001" +
    "\002\000\004\074\uffe7\001\002\000\020\042\053\043\055" +
    "\051\127\064\130\065\125\066\051\073\050\001\002\000" +
    "\004\074\uffe3\001\002\000\020\042\053\043\055\051\127" +
    "\064\130\065\125\066\051\073\050\001\002\000\004\074" +
    "\uffe5\001\002\000\004\065\166\001\002\000\004\065\164" +
    "\001\002\000\004\065\162\001\002\000\004\065\160\001" +
    "\002\000\020\042\053\043\055\051\127\064\130\065\125" +
    "\066\051\073\050\001\002\000\004\065\155\001\002\000" +
    "\042\005\uffd1\011\uffd1\012\uffd1\020\uffd1\023\uffd1\026\uffd1" +
    "\035\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\074\uffd1\100\uffd1\101\uffd1\001\002\000\042\005\uffd9" +
    "\011\uffd9\012\uffd9\020\uffd9\023\uffd9\026\uffd9\035\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\074\uffd9" +
    "\100\uffd9\101\uffd9\001\002\000\042\005\uffd4\011\uffd4\012" +
    "\uffd4\020\uffd4\023\uffd4\026\uffd4\035\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\074\uffd4\100\uffd4\101" +
    "\uffd4\001\002\000\004\065\153\001\002\000\042\005\uffe2" +
    "\011\uffe2\012\uffe2\020\uffe2\023\uffe2\026\uffe2\035\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\074\uffe2" +
    "\100\uffe2\101\uffe2\001\002\000\042\005\uffdc\011\uffdc\012" +
    "\uffdc\020\uffdc\023\uffdc\026\uffdc\035\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\074\uffdc\100\uffdc\101" +
    "\uffdc\001\002\000\056\005\uffdb\011\uffdb\012\uffdb\020\uffdb" +
    "\023\uffdb\026\uffdb\035\uffdb\045\150\051\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\061\144\062\140\063\137" +
    "\066\051\073\050\074\uffdb\100\uffdb\101\uffdb\001\002\000" +
    "\042\005\uffda\011\uffda\012\uffda\020\uffda\023\uffda\026\uffda" +
    "\035\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\074\uffda\100\uffda\101\uffda\001\002\000\054\005\uffd8" +
    "\011\uffd8\012\uffd8\020\uffd8\023\uffd8\026\uffd8\035\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\061\144" +
    "\062\140\063\137\066\051\073\050\074\uffd8\100\uffd8\101" +
    "\uffd8\001\002\000\042\005\uffd6\011\uffd6\012\uffd6\020\uffd6" +
    "\023\uffd6\026\uffd6\035\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\074\uffd6\100\uffd6\101\uffd6\001\002" +
    "\000\004\074\uffe6\001\002\000\062\005\uffe0\011\uffe0\012" +
    "\uffe0\020\uffe0\023\uffe0\026\uffe0\035\uffe0\045\150\051\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\142\060" +
    "\141\061\144\062\140\063\137\066\051\073\050\074\uffe0" +
    "\100\uffe0\101\uffe0\001\002\000\042\005\uffde\011\uffde\012" +
    "\uffde\020\uffde\023\uffde\026\uffde\035\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\074\uffde\100\uffde\101" +
    "\uffde\001\002\000\062\005\uffdf\011\uffdf\012\uffdf\020\uffdf" +
    "\023\uffdf\026\uffdf\035\uffdf\045\150\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\142\060\141\061\144" +
    "\062\140\063\137\066\051\073\050\074\uffdf\100\uffdf\101" +
    "\uffdf\001\002\000\042\005\uffdd\011\uffdd\012\uffdd\020\uffdd" +
    "\023\uffdd\026\uffdd\035\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\074\uffdd\100\uffdd\101\uffdd\001\002" +
    "\000\054\005\uffd7\011\uffd7\012\uffd7\020\uffd7\023\uffd7\026" +
    "\uffd7\035\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\061\144\062\140\063\137\066\051\073\050\074" +
    "\uffd7\100\uffd7\101\uffd7\001\002\000\042\005\uffd5\011\uffd5" +
    "\012\uffd5\020\uffd5\023\uffd5\026\uffd5\035\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\074\uffd5\100\uffd5" +
    "\101\uffd5\001\002\000\050\005\uffd2\011\uffd2\012\uffd2\020" +
    "\uffd2\023\uffd2\026\uffd2\035\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\063\137\066\051\073\050\074" +
    "\uffd2\100\uffd2\101\uffd2\001\002\000\042\005\uffd3\011\uffd3" +
    "\012\uffd3\020\uffd3\023\uffd3\026\uffd3\035\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\074\uffd3\100\uffd3" +
    "\101\uffd3\001\002\000\022\005\065\011\075\012\040\020" +
    "\110\023\046\032\uff66\035\106\051\045\001\002\000\004" +
    "\032\uff63\001\002\000\020\042\053\043\055\051\127\064" +
    "\130\065\125\066\051\073\050\001\002\000\004\074\uffe4" +
    "\001\002\000\004\032\uff62\001\002\000\004\100\200\001" +
    "\002\000\004\100\177\001\002\000\004\032\uff5e\001\002" +
    "\000\004\032\uff5d\001\002\000\010\013\uff73\027\uff73\034" +
    "\uff73\001\002\000\010\013\uff72\027\uff72\034\uff72\001\002" +
    "\000\010\013\uff78\027\uff78\034\uff78\001\002\000\010\013" +
    "\uff74\027\uff74\034\uff74\001\002\000\034\005\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\020\uff7a\023\uff7a\027\uff7a\032\uff7a\034" +
    "\uff7a\035\uff7a\051\uff7a\066\uff7a\100\uff7a\001\002\000\004" +
    "\021\207\001\002\000\004\073\210\001\002\000\020\042" +
    "\053\043\055\051\127\064\130\065\125\066\051\073\050" +
    "\001\002\000\004\074\212\001\002\000\022\005\065\011" +
    "\075\012\040\020\070\023\046\035\064\051\045\100\214" +
    "\001\002\000\010\013\uff76\027\uff76\034\uff76\001\002\000" +
    "\012\012\040\013\uff79\027\uff79\034\uff79\001\002\000\022" +
    "\005\065\011\075\012\040\020\070\023\046\035\064\051" +
    "\045\100\073\001\002\000\010\013\uff75\027\uff75\034\uff75" +
    "\001\002\000\004\026\220\001\002\000\022\005\065\011" +
    "\075\012\040\020\070\023\046\035\064\051\045\100\073" +
    "\001\002\000\006\013\224\027\222\001\002\000\022\005" +
    "\233\011\075\012\040\020\070\023\046\035\064\051\045" +
    "\100\073\001\002\000\006\027\226\100\227\001\002\000" +
    "\004\005\225\001\002\000\032\005\uff6d\011\uff6d\012\uff6d" +
    "\013\uff6d\020\uff6d\023\uff6d\027\uff6d\032\uff6d\034\uff6d\035" +
    "\uff6d\051\uff6d\100\uff6d\001\002\000\022\005\065\011\075" +
    "\012\040\020\070\023\046\035\064\051\045\100\073\001" +
    "\002\000\032\005\uff6a\011\uff6a\012\uff6a\013\uff6a\020\uff6a" +
    "\023\uff6a\027\uff6a\032\uff6a\034\uff6a\035\uff6a\051\uff6a\100" +
    "\uff6a\001\002\000\004\013\231\001\002\000\004\005\232" +
    "\001\002\000\032\005\uff6b\011\uff6b\012\uff6b\013\uff6b\020" +
    "\uff6b\023\uff6b\027\uff6b\032\uff6b\034\uff6b\035\uff6b\051\uff6b" +
    "\100\uff6b\001\002\000\016\042\053\043\055\051\061\065" +
    "\056\066\051\073\050\001\002\000\004\013\235\001\002" +
    "\000\004\005\236\001\002\000\032\005\uff6c\011\uff6c\012" +
    "\uff6c\013\uff6c\020\uff6c\023\uff6c\027\uff6c\032\uff6c\034\uff6c" +
    "\035\uff6c\051\uff6c\100\uff6c\001\002\000\004\026\240\001" +
    "\002\000\022\005\065\011\075\012\040\020\070\023\046" +
    "\035\064\051\045\100\242\001\002\000\006\013\224\027" +
    "\222\001\002\000\022\005\065\011\075\012\040\020\070" +
    "\023\046\035\064\051\045\100\073\001\002\000\010\013" +
    "\uff78\027\uff78\100\215\001\002\000\004\013\245\001\002" +
    "\000\004\005\246\001\002\000\010\013\uff69\027\uff69\100" +
    "\uff69\001\002\000\010\013\250\027\226\100\227\001\002" +
    "\000\004\005\251\001\002\000\010\013\uff68\027\uff68\100" +
    "\uff68\001\002\000\004\100\253\001\002\000\010\013\uff71" +
    "\027\uff71\034\uff71\001\002\000\016\042\uff9b\043\uff9b\051" +
    "\uff9b\065\uff9b\066\uff9b\073\uff9b\001\002\000\016\042\uff99" +
    "\043\uff99\051\uff99\065\uff99\066\uff99\073\uff99\001\002\000" +
    "\016\042\uff9c\043\uff9c\051\uff9c\065\uff9c\066\uff9c\073\uff9c" +
    "\001\002\000\016\042\uff9d\043\uff9d\051\uff9d\065\uff9d\066" +
    "\uff9d\073\uff9d\001\002\000\016\042\uff9a\043\uff9a\051\uff9a" +
    "\065\uff9a\066\uff9a\073\uff9a\001\002\000\016\042\053\043" +
    "\055\051\303\065\300\066\051\073\050\001\002\000\014" +
    "\042\053\043\055\051\264\065\263\074\265\001\002\000" +
    "\006\074\uff59\104\275\001\002\000\006\074\uff5a\104\273" +
    "\001\002\000\050\005\uff5c\011\uff5c\012\uff5c\013\uff5c\020" +
    "\uff5c\023\uff5c\026\uff5c\027\uff5c\032\uff5c\034\uff5c\035\uff5c" +
    "\051\uff5c\052\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\066" +
    "\uff5c\100\uff5c\001\002\000\006\074\uff58\104\271\001\002" +
    "\000\004\074\270\001\002\000\050\005\uff5b\011\uff5b\012" +
    "\uff5b\013\uff5b\020\uff5b\023\uff5b\026\uff5b\027\uff5b\032\uff5b" +
    "\034\uff5b\035\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\055" +
    "\uff5b\056\uff5b\066\uff5b\100\uff5b\001\002\000\012\042\053" +
    "\043\055\051\264\065\263\001\002\000\004\074\uff55\001" +
    "\002\000\012\042\053\043\055\051\264\065\263\001\002" +
    "\000\004\074\uff57\001\002\000\012\042\053\043\055\051" +
    "\264\065\263\001\002\000\004\074\uff56\001\002\000\024" +
    "\005\uffb3\011\uffb3\012\uffb3\020\uffb3\023\uffb3\026\uffb3\035" +
    "\uffb3\051\uffb3\100\uffb3\001\002\000\044\005\uffb4\011\uffb4" +
    "\012\uffb4\020\uffb4\023\uffb4\026\uffb4\035\uffb4\045\150\051" +
    "\uffb4\057\142\060\141\061\144\062\140\063\137\066\051" +
    "\073\050\100\uffb4\001\002\000\024\005\uffa4\011\uffa4\012" +
    "\uffa4\020\uffa4\023\uffa4\026\uffa4\035\uffa4\051\uffa4\100\uffa4" +
    "\001\002\000\024\005\uffb2\011\uffb2\012\uffb2\020\uffb2\023" +
    "\uffb2\026\uffb2\035\uffb2\051\uffb2\100\uffb2\001\002\000\026" +
    "\005\uffb5\011\uffb5\012\uffb5\020\uffb5\023\uffb5\026\uffb5\035" +
    "\uffb5\051\uffb5\073\262\100\uffb5\001\002\000\016\042\053" +
    "\043\055\051\311\065\306\066\051\073\050\001\002\000" +
    "\024\005\uffae\011\uffae\012\uffae\020\uffae\023\uffae\026\uffae" +
    "\035\uffae\051\uffae\100\uffae\001\002\000\044\005\uffb1\011" +
    "\uffb1\012\uffb1\020\uffb1\023\uffb1\026\uffb1\035\uffb1\045\150" +
    "\051\uffb1\057\142\060\141\061\144\062\140\063\137\066" +
    "\051\073\050\100\uffb1\001\002\000\024\005\uffa2\011\uffa2" +
    "\012\uffa2\020\uffa2\023\uffa2\026\uffa2\035\uffa2\051\uffa2\100" +
    "\uffa2\001\002\000\024\005\uffb0\011\uffb0\012\uffb0\020\uffb0" +
    "\023\uffb0\026\uffb0\035\uffb0\051\uffb0\100\uffb0\001\002\000" +
    "\026\005\uffaf\011\uffaf\012\uffaf\020\uffaf\023\uffaf\026\uffaf" +
    "\035\uffaf\051\uffaf\073\262\100\uffaf\001\002\000\016\042" +
    "\053\043\055\051\316\065\314\066\051\073\050\001\002" +
    "\000\024\005\uffa1\011\uffa1\012\uffa1\020\uffa1\023\uffa1\026" +
    "\uffa1\035\uffa1\051\uffa1\100\uffa1\001\002\000\044\005\uff9f" +
    "\011\uff9f\012\uff9f\020\uff9f\023\uff9f\026\uff9f\035\uff9f\045" +
    "\150\051\uff9f\057\142\060\141\061\144\062\140\063\137" +
    "\066\051\073\050\100\uff9f\001\002\000\024\005\uff9e\011" +
    "\uff9e\012\uff9e\020\uff9e\023\uff9e\026\uff9e\035\uff9e\051\uff9e" +
    "\100\uff9e\001\002\000\024\005\uffa0\011\uffa0\012\uffa0\020" +
    "\uffa0\023\uffa0\026\uffa0\035\uffa0\051\uffa0\100\uffa0\001\002" +
    "\000\016\042\053\043\055\051\324\065\321\066\051\073" +
    "\050\001\002\000\024\005\uffa6\011\uffa6\012\uffa6\020\uffa6" +
    "\023\uffa6\026\uffa6\035\uffa6\051\uffa6\100\uffa6\001\002\000" +
    "\044\005\uffa9\011\uffa9\012\uffa9\020\uffa9\023\uffa9\026\uffa9" +
    "\035\uffa9\045\150\051\uffa9\057\142\060\141\061\144\062" +
    "\140\063\137\066\051\073\050\100\uffa9\001\002\000\024" +
    "\005\uffa3\011\uffa3\012\uffa3\020\uffa3\023\uffa3\026\uffa3\035" +
    "\uffa3\051\uffa3\100\uffa3\001\002\000\024\005\uffa7\011\uffa7" +
    "\012\uffa7\020\uffa7\023\uffa7\026\uffa7\035\uffa7\051\uffa7\100" +
    "\uffa7\001\002\000\026\005\uffa8\011\uffa8\012\uffa8\020\uffa8" +
    "\023\uffa8\026\uffa8\035\uffa8\051\uffa8\073\262\100\uffa8\001" +
    "\002\000\016\042\053\043\055\051\332\065\327\066\051" +
    "\073\050\001\002\000\024\005\uffad\011\uffad\012\uffad\020" +
    "\uffad\023\uffad\026\uffad\035\uffad\051\uffad\100\uffad\001\002" +
    "\000\044\005\uffac\011\uffac\012\uffac\020\uffac\023\uffac\026" +
    "\uffac\035\uffac\045\150\051\uffac\057\142\060\141\061\144" +
    "\062\140\063\137\066\051\073\050\100\uffac\001\002\000" +
    "\024\005\uffa5\011\uffa5\012\uffa5\020\uffa5\023\uffa5\026\uffa5" +
    "\035\uffa5\051\uffa5\100\uffa5\001\002\000\024\005\uffaa\011" +
    "\uffaa\012\uffaa\020\uffaa\023\uffaa\026\uffaa\035\uffaa\051\uffaa" +
    "\100\uffaa\001\002\000\026\005\uffab\011\uffab\012\uffab\020" +
    "\uffab\023\uffab\026\uffab\035\uffab\051\uffab\073\262\100\uffab" +
    "\001\002\000\042\005\uffcf\011\uffcf\012\uffcf\020\uffcf\023" +
    "\uffcf\026\uffcf\035\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\074\uffcf\100\uffcf\101\uffcf\001\002\000" +
    "\022\045\150\057\142\060\141\061\144\062\140\063\137" +
    "\066\051\073\050\001\002\000\004\074\336\001\002\000" +
    "\042\005\uffd0\011\uffd0\012\uffd0\020\uffd0\023\uffd0\026\uffd0" +
    "\035\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\074\uffd0\100\uffd0\101\uffd0\001\002\000\004\010\340" +
    "\001\002\000\004\013\ufff5\001\002\000\016\005\033\011" +
    "\041\012\040\020\037\023\046\051\045\001\002\000\006" +
    "\013\uffee\027\uffee\001\002\000\016\005\033\011\041\012" +
    "\040\020\037\023\046\051\045\001\002\000\006\013\uffed" +
    "\027\uffed\001\002\000\004\054\346\001\002\000\004\065" +
    "\347\001\002\000\004\037\350\001\002\000\004\065\351" +
    "\001\002\000\004\047\352\001\002\000\004\065\353\001" +
    "\002\000\022\005\362\011\041\012\040\020\365\023\354" +
    "\035\361\051\045\066\357\001\002\000\004\036\u0157\001" +
    "\002\000\010\013\uff95\027\uff95\032\uff95\001\002\000\012" +
    "\013\uff96\027\uff96\032\uff96\100\u0156\001\002\000\004\011" +
    "\041\001\002\000\030\005\362\011\041\012\040\013\uff91" +
    "\020\365\023\354\027\uff91\032\uff91\035\361\051\045\066" +
    "\357\001\002\000\004\011\u0154\001\002\000\016\042\053" +
    "\043\055\051\061\065\056\066\051\073\050\001\002\000" +
    "\022\005\362\011\041\012\040\020\365\023\354\035\361" +
    "\051\045\066\357\001\002\000\014\013\uff8c\027\uff8c\032" +
    "\uff8c\034\uff8c\066\uff8c\001\002\000\004\070\372\001\002" +
    "\000\004\032\370\001\002\000\014\013\uff8e\027\uff8e\032" +
    "\uff8e\034\uff8e\066\uff8e\001\002\000\004\051\371\001\002" +
    "\000\034\005\uff98\011\uff98\012\uff98\013\uff98\020\uff98\023" +
    "\uff98\027\uff98\032\uff98\034\uff98\035\uff98\051\uff98\066\uff98" +
    "\100\uff98\001\002\000\004\021\373\001\002\000\004\073" +
    "\374\001\002\000\020\042\053\043\055\051\127\064\130" +
    "\065\125\066\051\073\050\001\002\000\004\074\376\001" +
    "\002\000\030\005\362\011\041\012\040\013\uff97\020\365" +
    "\023\354\027\uff97\032\uff97\035\361\051\045\066\357\001" +
    "\002\000\010\013\uff94\027\uff94\032\uff94\001\002\000\010" +
    "\013\uff92\027\uff92\032\uff92\001\002\000\006\026\u0103\100" +
    "\u0102\001\002\000\004\026\u013f\001\002\000\022\005\033" +
    "\011\041\012\040\020\037\023\046\051\045\066\u0104\100" +
    "\u0105\001\002\000\022\005\362\011\041\012\040\020\u0131" +
    "\023\354\035\361\051\045\066\357\001\002\000\022\005" +
    "\362\011\041\012\040\020\365\023\354\035\361\051\045" +
    "\066\357\001\002\000\006\013\u0109\027\u0108\001\002\000" +
    "\004\027\u0117\001\002\000\016\005\u010b\011\041\012\040" +
    "\020\037\023\046\051\045\001\002\000\004\005\u010a\001" +
    "\002\000\030\005\uffbb\011\uffbb\012\uffbb\013\uffbb\020\uffbb" +
    "\023\uffbb\027\uffbb\035\uffbb\051\uffbb\066\uffbb\100\uffbb\001" +
    "\002\000\016\042\053\043\055\051\061\065\056\066\051" +
    "\073\050\001\002\000\004\013\u010d\001\002\000\004\005" +
    "\u010e\001\002\000\030\005\uffba\011\uffba\012\uffba\013\uffba" +
    "\020\uffba\023\uffba\027\uffba\035\uffba\051\uffba\066\uffba\100" +
    "\uffba\001\002\000\004\026\u0110\001\002\000\020\005\033" +
    "\011\041\012\040\020\037\023\046\051\045\066\u0111\001" +
    "\002\000\016\005\033\011\041\012\040\020\037\023\046" +
    "\051\045\001\002\000\006\013\u0114\027\u0108\001\002\000" +
    "\006\013\u0118\027\u0117\001\002\000\004\005\u0115\001\002" +
    "\000\010\013\uffbb\066\u0116\100\uffbb\001\002\000\030\005" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\020\uffb7\023\uffb7\027\uffb7" +
    "\035\uffb7\051\uffb7\066\uffb7\100\uffb7\001\002\000\004\066" +
    "\u011b\001\002\000\004\005\u0119\001\002\000\004\066\u011a" +
    "\001\002\000\030\005\uffb6\011\uffb6\012\uffb6\013\uffb6\020" +
    "\uffb6\023\uffb6\027\uffb6\035\uffb6\051\uffb6\066\uffb6\100\uffb6" +
    "\001\002\000\016\005\033\011\041\012\040\020\037\023" +
    "\046\051\045\001\002\000\004\013\u011d\001\002\000\004" +
    "\005\u011e\001\002\000\030\005\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\020\uffb9\023\uffb9\027\uffb9\035\uffb9\051\uffb9\066\uffb9" +
    "\100\uffb9\001\002\000\004\027\u0121\001\002\000\030\005" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\020\uffb8\023\uffb8\027\uffb8" +
    "\035\uffb8\051\uffb8\066\uffb8\100\uffb8\001\002\000\004\005" +
    "\u0122\001\002\000\016\042\053\043\055\051\061\065\056" +
    "\066\051\073\050\001\002\000\004\026\u0124\001\002\000" +
    "\016\005\033\011\041\012\040\020\037\023\046\051\045" +
    "\001\002\000\006\013\u0127\027\u0121\001\002\000\004\013" +
    "\u0118\001\002\000\004\005\u0128\001\002\000\004\066\u0116" +
    "\001\002\000\004\027\u012a\001\002\000\022\005\362\011" +
    "\041\012\040\020\365\023\354\035\361\051\045\066\357" +
    "\001\002\000\004\013\u012c\001\002\000\004\005\u012d\001" +
    "\002\000\014\013\uff8a\027\uff8a\032\uff8a\034\uff8a\066\uff8a" +
    "\001\002\000\010\013\uff96\027\ufff3\100\u013c\001\002\000" +
    "\030\005\362\011\041\012\040\013\uff91\020\365\023\354" +
    "\027\ufff1\035\361\051\045\066\357\100\343\001\002\000" +
    "\026\005\362\011\041\012\040\020\365\023\354\027\ufff2" +
    "\035\361\051\045\066\357\100\341\001\002\000\004\070" +
    "\u0135\001\002\000\004\013\u0133\001\002\000\004\005\u0134" +
    "\001\002\000\014\013\uff8b\027\uff8b\032\uff8b\034\uff8b\066" +
    "\uff8b\001\002\000\004\021\u0136\001\002\000\004\073\u0137" +
    "\001\002\000\020\042\053\043\055\051\127\064\130\065" +
    "\125\066\051\073\050\001\002\000\004\074\u0139\001\002" +
    "\000\026\005\362\011\041\012\040\013\uff97\020\u0131\023" +
    "\354\027\ufff4\035\361\051\045\066\357\001\002\000\006" +
    "\013\ufff0\027\ufff0\001\002\000\010\013\uff90\027\uff90\032" +
    "\uff90\001\002\000\022\005\362\011\041\012\040\020\u0131" +
    "\023\354\035\361\051\045\066\357\001\002\000\006\013" +
    "\uffef\027\uffef\001\002\000\010\013\uff93\027\uff93\032\uff93" +
    "\001\002\000\022\005\362\011\041\012\040\020\365\023" +
    "\354\035\361\051\045\066\u0140\001\002\000\022\005\362" +
    "\011\041\012\040\020\365\023\354\035\361\051\045\066" +
    "\357\001\002\000\004\027\u0143\001\002\000\004\027\u014d" +
    "\001\002\000\004\005\u0144\001\002\000\016\042\053\043" +
    "\055\051\061\065\056\066\051\073\050\001\002\000\004" +
    "\026\u0146\001\002\000\022\005\362\011\041\012\040\020" +
    "\365\023\354\035\361\051\045\066\357\001\002\000\006" +
    "\013\u0149\027\u0143\001\002\000\004\013\u014b\001\002\000" +
    "\004\005\u014a\001\002\000\014\013\uff87\027\uff87\032\uff87" +
    "\034\uff87\066\uff87\001\002\000\004\005\u014c\001\002\000" +
    "\014\013\uff86\027\uff86\032\uff86\034\uff86\066\uff86\001\002" +
    "\000\022\005\362\011\041\012\040\020\365\023\354\035" +
    "\361\051\045\066\357\001\002\000\004\013\u014f\001\002" +
    "\000\004\005\u0150\001\002\000\014\013\uff89\027\uff89\032" +
    "\uff89\034\uff89\066\uff89\001\002\000\024\005\uffbd\011\uffbd" +
    "\012\uffbd\020\uffbd\023\uffbd\027\uff8d\035\uffbd\051\uffbd\066" +
    "\uffbd\001\002\000\004\027\u0143\001\002\000\014\013\uff88" +
    "\027\uff88\032\uff88\034\uff88\066\uff88\001\002\000\010\013" +
    "\uff8f\027\uff8f\032\uff8f\001\002\000\014\013\uff8d\027\uff8d" +
    "\032\uff8d\034\uff8d\066\uff8d\001\002\000\022\005\362\011" +
    "\041\012\040\020\365\023\354\035\361\051\045\066\357" +
    "\001\002\000\016\042\053\043\055\051\061\065\056\066" +
    "\051\073\050\001\002\000\022\005\065\011\075\012\040" +
    "\020\u015b\023\046\035\u0159\051\045\100\u015c\001\002\000" +
    "\006\011\u016f\023\u0181\001\002\000\006\034\uff83\100\u0180" +
    "\001\002\000\004\070\u017a\001\002\000\012\005\u0163\012" +
    "\040\023\u0162\066\357\001\002\000\026\005\065\011\075" +
    "\012\040\020\u015b\023\046\034\uff7e\035\u0159\051\045\066" +
    "\201\100\u015c\001\002\000\004\034\u015f\001\002\000\014" +
    "\013\uff85\027\uff85\032\uff85\034\uff85\066\uff85\001\002\000" +
    "\004\034\uff7d\001\002\000\006\034\uff82\066\u0178\001\002" +
    "\000\004\036\u0167\001\002\000\016\042\053\043\055\051" +
    "\061\065\056\066\051\073\050\001\002\000\006\026\u0165" +
    "\100\u0102\001\002\000\006\066\u0166\100\u0105\001\002\000" +
    "\022\005\362\011\041\012\040\020\365\023\354\035\361" +
    "\051\045\066\357\001\002\000\016\042\053\043\055\051" +
    "\061\065\056\066\051\073\050\001\002\000\014\012\040" +
    "\020\u0169\035\u016b\051\045\100\u016d\001\002\000\004\070" +
    "\u0172\001\002\000\006\034\uff83\100\u0170\001\002\000\006" +
    "\011\u016f\023\u016e\001\002\000\016\012\040\020\u0169\034" +
    "\uff7e\035\u016b\051\045\100\u016d\001\002\000\010\005\u0163" +
    "\023\u0162\066\357\001\002\000\004\034\uff7c\001\002\000" +
    "\004\034\uff7b\001\002\000\014\012\040\020\u0169\035\u016b" +
    "\051\045\100\u016d\001\002\000\004\034\uff80\001\002\000" +
    "\004\021\u0173\001\002\000\004\073\u0174\001\002\000\020" +
    "\042\053\043\055\051\127\064\130\065\125\066\051\073" +
    "\050\001\002\000\004\074\u0176\001\002\000\016\012\040" +
    "\020\u0169\034\uff84\035\u016b\051\045\100\u016d\001\002\000" +
    "\004\034\uff81\001\002\000\014\012\040\020\u0169\035\u016b" +
    "\051\045\100\u016d\001\002\000\004\034\uff7f\001\002\000" +
    "\004\021\u017b\001\002\000\004\073\u017c\001\002\000\020" +
    "\042\053\043\055\051\127\064\130\065\125\066\051\073" +
    "\050\001\002\000\004\074\u017e\001\002\000\024\005\065" +
    "\011\075\012\040\020\u015b\023\046\034\uff84\035\u0159\051" +
    "\045\100\u017f\001\002\000\014\005\u0163\012\040\023\u0162" +
    "\034\uff79\066\357\001\002\000\022\005\065\011\075\012" +
    "\040\020\u015b\023\046\035\u0159\051\045\100\u015c\001\002" +
    "\000\006\034\uff7c\100\253\001\002\000\006\022\u0183\054" +
    "\u0184\001\002\000\012\014\u0188\015\u0187\016\u018a\046\u0189" +
    "\001\002\000\004\051\045\001\002\000\032\005\uffca\011" +
    "\uffca\012\uffca\013\uffca\020\uffca\023\uffca\027\uffca\032\uffca" +
    "\034\uffca\035\uffca\051\uffca\100\uffca\001\002\000\036\005" +
    "\uffce\011\uffce\012\uffce\013\uffce\020\uffce\023\uffce\027\uffce" +
    "\032\uffce\034\uffce\035\uffce\051\uffce\054\u018c\066\u018b\100" +
    "\uffce\001\002\000\042\005\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\020\uffc6\023\uffc6\027\uffc6\032\uffc6\034\uffc6\035\uffc6\051" +
    "\uffc6\054\uffc6\066\uffc6\074\uffc6\100\uffc6\104\uffc6\001\002" +
    "\000\042\005\uffc5\011\uffc5\012\uffc5\013\uffc5\020\uffc5\023" +
    "\uffc5\027\uffc5\032\uffc5\034\uffc5\035\uffc5\051\uffc5\054\uffc5" +
    "\066\uffc5\074\uffc5\100\uffc5\104\uffc5\001\002\000\042\005" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\020\uffc4\023\uffc4\027\uffc4" +
    "\032\uffc4\034\uffc4\035\uffc4\051\uffc4\054\uffc4\066\uffc4\074" +
    "\uffc4\100\uffc4\104\uffc4\001\002\000\042\005\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\020\uffc7\023\uffc7\027\uffc7\032\uffc7\034" +
    "\uffc7\035\uffc7\051\uffc7\054\uffc7\066\uffc7\074\uffc7\100\uffc7" +
    "\104\uffc7\001\002\000\004\012\040\001\002\000\020\042" +
    "\053\043\055\051\045\064\u0192\065\334\066\u018d\073\050" +
    "\001\002\000\024\045\150\057\142\060\141\061\144\062" +
    "\140\063\137\065\u0197\066\051\073\050\001\002\000\034" +
    "\005\uffc1\011\uffc1\012\uffc1\013\uffc1\020\uffc1\023\uffc1\027" +
    "\uffc1\032\uffc1\034\uffc1\035\uffc1\051\uffc1\066\uffc1\100\uffc1" +
    "\001\002\000\032\005\uffc9\011\uffc9\012\uffc9\013\uffc9\020" +
    "\uffc9\023\uffc9\027\uffc9\032\uffc9\034\uffc9\035\uffc9\051\uffc9" +
    "\100\uffc9\001\002\000\034\005\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\020\uffcd\023\uffcd\027\uffcd\032\uffcd\034\uffcd\035\uffcd" +
    "\051\uffcd\066\u0195\100\uffcd\001\002\000\004\100\u0193\001" +
    "\002\000\034\005\uffc3\011\uffc3\012\uffc3\013\uffc3\020\uffc3" +
    "\023\uffc3\027\uffc3\032\uffc3\034\uffc3\035\uffc3\051\uffc3\066" +
    "\uffc3\100\uffc3\001\002\000\004\012\040\001\002\000\032" +
    "\005\uffc8\011\uffc8\012\uffc8\013\uffc8\020\uffc8\023\uffc8\027" +
    "\uffc8\032\uffc8\034\uffc8\035\uffc8\051\uffc8\100\uffc8\001\002" +
    "\000\004\012\040\001\002\000\032\005\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\020\uffcb\023\uffcb\027\uffcb\032\uffcb\034\uffcb" +
    "\035\uffcb\051\uffcb\100\uffcb\001\002\000\034\005\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\020\uffc2\023\uffc2\027\uffc2\032\uffc2" +
    "\034\uffc2\035\uffc2\051\uffc2\066\uffc2\100\uffc2\001\002\000" +
    "\032\005\uffcc\011\uffcc\012\uffcc\013\uffcc\020\uffcc\023\uffcc" +
    "\027\uffcc\032\uffcc\034\uffcc\035\uffcc\051\uffcc\100\uffcc\001" +
    "\002\000\004\021\u019a\001\002\000\004\073\u019b\001\002" +
    "\000\020\042\053\043\055\051\127\064\130\065\125\066" +
    "\051\073\050\001\002\000\004\074\u019d\001\002\000\022" +
    "\005\033\011\041\012\040\013\ufff4\020\037\023\046\027" +
    "\ufff4\051\045\001\002\000\016\005\033\011\041\012\040" +
    "\020\037\023\046\051\045\001\002\000\004\026\u01a0\001" +
    "\002\000\020\005\033\011\041\012\040\020\037\023\046" +
    "\051\045\066\u0111\001\002\000\004\007\u01a2\001\002\000" +
    "\004\002\ufffb\001\002\000\004\006\024\001\002\000\006" +
    "\006\013\033\014\001\002\000\004\013\ufff7\001\002\000" +
    "\004\013\ufff9\001\002\000\004\051\u01a8\001\002\000\004" +
    "\073\u01a9\001\002\000\004\051\u01ab\001\002\000\004\074" +
    "\u01b0\001\002\000\004\022\u01ac\001\002\000\012\014\u0188" +
    "\015\u0187\016\u018a\046\u0189\001\002\000\006\074\uff50\104" +
    "\u01ae\001\002\000\004\051\u01ab\001\002\000\004\074\uff4f" +
    "\001\002\000\004\022\u01b1\001\002\000\012\014\u0188\015" +
    "\u0187\016\u018a\046\u0189\001\002\000\020\005\u01b5\011\u01b9" +
    "\012\040\020\u01b8\023\u01be\035\u01b3\051\045\001\002\000" +
    "\004\030\u0272\001\002\000\004\013\u0270\001\002\000\016" +
    "\042\053\043\055\051\061\065\056\066\051\073\050\001" +
    "\002\000\024\005\u01b5\011\u01b9\012\040\013\uff4d\020\u01b8" +
    "\023\u01be\027\uff4d\035\u01b3\051\045\001\002\000\024\005" +
    "\uff44\011\uff44\012\uff44\013\uff44\020\uff44\023\uff44\027\uff44" +
    "\035\uff44\051\uff44\001\002\000\004\070\u024f\001\002\000" +
    "\004\051\u0212\001\002\000\024\005\u01b5\011\u01b9\012\040" +
    "\013\uff4b\020\u01b8\023\u01be\027\uff4b\035\u01b3\051\045\001" +
    "\002\000\024\005\uff43\011\uff43\012\uff43\013\uff43\020\uff43" +
    "\023\uff43\027\uff43\035\uff43\051\uff43\001\002\000\024\005" +
    "\uff45\011\uff45\012\uff45\013\uff45\020\uff45\023\uff45\027\uff45" +
    "\035\uff45\051\uff45\001\002\000\024\005\u01b5\011\u01b9\012" +
    "\040\013\uff4c\020\u01b8\023\u01be\027\uff4c\035\u01b3\051\045" +
    "\001\002\000\004\036\u01bf\001\002\000\016\042\053\043" +
    "\055\051\061\065\056\066\051\073\050\001\002\000\020" +
    "\005\u01c3\011\u01c9\012\040\020\u01c7\023\u01be\035\u01c2\051" +
    "\045\001\002\000\026\005\u01c3\011\u01c9\012\040\013\uff19" +
    "\020\u01c7\023\u01be\027\uff19\034\uff19\035\u01c2\051\045\001" +
    "\002\000\006\023\u020d\030\u020e\001\002\000\016\042\053" +
    "\043\055\051\061\065\056\066\051\073\050\001\002\000" +
    "\004\034\u01f2\001\002\000\030\005\065\011\075\012\040" +
    "\013\uff1a\020\070\023\046\027\uff1a\034\uff1a\035\064\051" +
    "\045\100\073\001\002\000\030\005\uff11\011\uff11\012\uff11" +
    "\013\uff11\020\uff11\023\uff11\027\uff11\032\uff11\034\uff11\035" +
    "\uff11\051\uff11\001\002\000\004\070\u01eb\001\002\000\030" +
    "\005\uff10\011\uff10\012\uff10\013\uff10\020\uff10\023\uff10\027" +
    "\uff10\032\uff10\034\uff10\035\uff10\051\uff10\001\002\000\004" +
    "\051\u01cd\001\002\000\026\005\u01c3\011\u01c9\012\040\013" +
    "\uff15\020\u01c7\023\u01be\027\uff15\034\uff15\035\u01c2\051\045" +
    "\001\002\000\030\005\uff0f\011\uff0f\012\uff0f\013\uff0f\020" +
    "\uff0f\023\uff0f\027\uff0f\032\uff0f\034\uff0f\035\uff0f\051\uff0f" +
    "\001\002\000\010\013\uff14\027\uff14\034\uff14\001\002\000" +
    "\004\054\u01ce\001\002\000\004\065\u01cf\001\002\000\004" +
    "\037\u01d0\001\002\000\004\065\u01d1\001\002\000\004\047" +
    "\u01d2\001\002\000\004\065\u01d3\001\002\000\020\005\u01c3" +
    "\011\u01c9\012\040\020\u01d7\023\u01be\035\u01d5\051\045\001" +
    "\002\000\022\005\u01c3\011\u01c9\012\040\020\u01d7\023\u01be" +
    "\032\uff05\035\u01d5\051\045\001\002\000\010\011\u01e6\023" +
    "\u01e4\030\u01e5\001\002\000\022\005\u01c3\011\u01c9\012\040" +
    "\020\u01d7\023\u01be\032\uff06\035\u01d5\051\045\001\002\000" +
    "\004\070\u01dd\001\002\000\022\005\u01c3\011\u01c9\012\040" +
    "\020\u01d7\023\u01be\032\uff01\035\u01d5\051\045\001\002\000" +
    "\004\032\u01da\001\002\000\004\051\u01db\001\002\000\030" +
    "\005\uff08\011\uff08\012\uff08\013\uff08\020\uff08\023\uff08\027" +
    "\uff08\032\uff08\034\uff08\035\uff08\051\uff08\001\002\000\004" +
    "\032\uff00\001\002\000\004\021\u01de\001\002\000\004\073" +
    "\u01df\001\002\000\020\042\053\043\055\051\127\064\130" +
    "\065\125\066\051\073\050\001\002\000\004\074\u01e1\001" +
    "\002\000\022\005\u01c3\011\u01c9\012\040\020\u01d7\023\u01be" +
    "\032\uff07\035\u01d5\051\045\001\002\000\004\032\uff04\001" +
    "\002\000\004\032\uff03\001\002\000\004\100\u01e9\001\002" +
    "\000\004\100\u01e8\001\002\000\004\100\u01e7\001\002\000" +
    "\004\032\ufeff\001\002\000\004\032\ufefd\001\002\000\004" +
    "\032\ufefe\001\002\000\004\032\uff02\001\002\000\004\021" +
    "\u01ec\001\002\000\004\073\u01ed\001\002\000\020\042\053" +
    "\043\055\051\127\064\130\065\125\066\051\073\050\001" +
    "\002\000\004\074\u01ef\001\002\000\026\005\u01c3\011\u01c9" +
    "\012\040\013\uff1b\020\u01c7\023\u01be\027\uff1b\034\uff1b\035" +
    "\u01c2\051\045\001\002\000\010\013\uff18\027\uff18\034\uff18" +
    "\001\002\000\010\013\uff17\027\uff17\034\uff17\001\002\000" +
    "\030\005\uff1c\011\uff1c\012\uff1c\013\uff1c\020\uff1c\023\uff1c" +
    "\027\uff1c\032\uff1c\034\uff1c\035\uff1c\051\uff1c\001\002\000" +
    "\004\026\u01f4\001\002\000\020\005\u01c3\011\u01c9\012\040" +
    "\020\u01c7\023\u01be\035\u01c2\051\045\001\002\000\006\013" +
    "\u01f8\027\u01f7\001\002\000\006\027\u0206\100\u0207\001\002" +
    "\000\020\005\u01fa\011\u01c9\012\040\020\u01c7\023\u01be\035" +
    "\u01c2\051\045\001\002\000\004\005\u01f9\001\002\000\030" +
    "\005\uff0e\011\uff0e\012\uff0e\013\uff0e\020\uff0e\023\uff0e\027" +
    "\uff0e\032\uff0e\034\uff0e\035\uff0e\051\uff0e\001\002\000\016" +
    "\042\053\043\055\051\061\065\056\066\051\073\050\001" +
    "\002\000\004\013\u01fc\001\002\000\004\005\u01fd\001\002" +
    "\000\030\005\uff0d\011\uff0d\012\uff0d\013\uff0d\020\uff0d\023" +
    "\uff0d\027\uff0d\032\uff0d\034\uff0d\035\uff0d\051\uff0d\001\002" +
    "\000\004\026\u01ff\001\002\000\022\005\u01c3\011\u01c9\012" +
    "\040\020\u01c7\023\u01be\035\u01c2\051\045\100\u0201\001\002" +
    "\000\006\013\u01f8\027\u01f7\001\002\000\020\005\u01c3\011" +
    "\u01c9\012\040\020\u01c7\023\u01be\035\u01c2\051\045\001\002" +
    "\000\004\013\u0203\001\002\000\004\005\u0204\001\002\000" +
    "\010\013\uff0a\027\uff0a\100\uff0a\001\002\000\010\013\u0208" +
    "\027\u0206\100\u0207\001\002\000\020\005\u01c3\011\u01c9\012" +
    "\040\020\u01c7\023\u01be\035\u01c2\051\045\001\002\000\030" +
    "\005\uff0b\011\uff0b\012\uff0b\013\uff0b\020\uff0b\023\uff0b\027" +
    "\uff0b\032\uff0b\034\uff0b\035\uff0b\051\uff0b\001\002\000\004" +
    "\005\u0209\001\002\000\010\013\uff09\027\uff09\100\uff09\001" +
    "\002\000\004\013\u020b\001\002\000\004\005\u020c\001\002" +
    "\000\030\005\uff0c\011\uff0c\012\uff0c\013\uff0c\020\uff0c\023" +
    "\uff0c\027\uff0c\032\uff0c\034\uff0c\035\uff0c\051\uff0c\001\002" +
    "\000\010\013\uff13\027\uff13\034\uff13\001\002\000\010\013" +
    "\uff12\027\uff12\034\uff12\001\002\000\010\013\uff16\027\uff16" +
    "\034\uff16\001\002\000\006\013\uff48\027\uff48\001\002\000" +
    "\006\013\uff47\027\uff47\001\002\000\004\054\u0213\001\002" +
    "\000\004\065\u0214\001\002\000\004\037\u0215\001\002\000" +
    "\004\065\u0216\001\002\000\004\047\u0217\001\002\000\004" +
    "\065\u0218\001\002\000\020\005\u021c\011\u01b9\012\040\020" +
    "\u021f\023\u0223\035\u021a\051\045\001\002\000\026\005\uff31" +
    "\011\uff31\012\uff31\013\uff31\020\uff31\023\uff31\027\uff31\032" +
    "\uff31\035\uff31\051\uff31\001\002\000\006\011\u024e\030\u024d" +
    "\001\002\000\026\005\uff2f\011\uff2f\012\uff2f\013\uff2f\020" +
    "\uff2f\023\uff2f\027\uff2f\032\uff2f\035\uff2f\051\uff2f\001\002" +
    "\000\016\042\053\043\055\051\061\065\056\066\051\073" +
    "\050\001\002\000\026\005\u021c\011\u01b9\012\040\013\uff3a" +
    "\020\u021f\023\u0223\027\uff3a\032\uff3a\035\u021a\051\045\001" +
    "\002\000\026\005\uff30\011\uff30\012\uff30\013\uff30\020\uff30" +
    "\023\uff30\027\uff30\032\uff30\035\uff30\051\uff30\001\002\000" +
    "\004\070\u022c\001\002\000\026\005\u021c\011\u01b9\012\040" +
    "\013\uff35\020\u021f\023\u0223\027\uff35\032\uff35\035\u021a\051" +
    "\045\001\002\000\004\032\u0229\001\002\000\026\005\u021c" +
    "\011\u01b9\012\040\013\uff39\020\u021f\023\u0223\027\uff39\032" +
    "\uff39\035\u021a\051\045\001\002\000\004\036\u0224\001\002" +
    "\000\016\042\053\043\055\051\061\065\056\066\051\073" +
    "\050\001\002\000\014\012\040\020\u0169\035\u016b\051\045" +
    "\100\u016d\001\002\000\004\034\u0227\001\002\000\026\005" +
    "\uff28\011\uff28\012\uff28\013\uff28\020\uff28\023\uff28\027\uff28" +
    "\032\uff28\035\uff28\051\uff28\001\002\000\010\013\uff36\027" +
    "\uff36\032\uff36\001\002\000\004\051\u022a\001\002\000\026" +
    "\005\uff3c\011\uff3c\012\uff3c\013\uff3c\020\uff3c\023\uff3c\027" +
    "\uff3c\032\uff3c\035\uff3c\051\uff3c\001\002\000\010\013\uff34" +
    "\027\uff34\032\uff34\001\002\000\004\021\u022d\001\002\000" +
    "\004\073\u022e\001\002\000\020\042\053\043\055\051\127" +
    "\064\130\065\125\066\051\073\050\001\002\000\004\074" +
    "\u0230\001\002\000\026\005\u021c\011\u01b9\012\040\013\uff3b" +
    "\020\u021f\023\u0223\027\uff3b\032\uff3b\035\u021a\051\045\001" +
    "\002\000\010\013\uff38\027\uff38\032\uff38\001\002\000\010" +
    "\013\uff37\027\uff37\032\uff37\001\002\000\004\026\u0234\001" +
    "\002\000\020\005\u021c\011\u01b9\012\040\020\u021f\023\u0223" +
    "\035\u021a\051\045\001\002\000\006\013\u0238\027\u0236\001" +
    "\002\000\020\005\u023f\011\u01b9\012\040\020\u021f\023\u0223" +
    "\035\u021a\051\045\001\002\000\006\027\u023a\100\u023b\001" +
    "\002\000\004\005\u0239\001\002\000\026\005\uff2e\011\uff2e" +
    "\012\uff2e\013\uff2e\020\uff2e\023\uff2e\027\uff2e\032\uff2e\035" +
    "\uff2e\051\uff2e\001\002\000\020\005\u021c\011\u01b9\012\040" +
    "\020\u021f\023\u0223\035\u021a\051\045\001\002\000\026\005" +
    "\uff2b\011\uff2b\012\uff2b\013\uff2b\020\uff2b\023\uff2b\027\uff2b" +
    "\032\uff2b\035\uff2b\051\uff2b\001\002\000\004\013\u023d\001" +
    "\002\000\004\005\u023e\001\002\000\026\005\uff2c\011\uff2c" +
    "\012\uff2c\013\uff2c\020\uff2c\023\uff2c\027\uff2c\032\uff2c\035" +
    "\uff2c\051\uff2c\001\002\000\016\042\053\043\055\051\061" +
    "\065\056\066\051\073\050\001\002\000\004\013\u0241\001" +
    "\002\000\004\005\u0242\001\002\000\026\005\uff2d\011\uff2d" +
    "\012\uff2d\013\uff2d\020\uff2d\023\uff2d\027\uff2d\032\uff2d\035" +
    "\uff2d\051\uff2d\001\002\000\004\026\u0244\001\002\000\022" +
    "\005\u021c\011\u01b9\012\040\020\u021f\023\u0223\035\u021a\051" +
    "\045\100\u0245\001\002\000\020\005\u021c\011\u01b9\012\040" +
    "\020\u021f\023\u0223\035\u021a\051\045\001\002\000\006\013" +
    "\u0238\027\u0236\001\002\000\010\013\u0248\027\u023a\100\u023b" +
    "\001\002\000\004\005\u0249\001\002\000\010\013\uff29\027" +
    "\uff29\100\uff29\001\002\000\004\013\u024b\001\002\000\004" +
    "\005\u024c\001\002\000\010\013\uff2a\027\uff2a\100\uff2a\001" +
    "\002\000\010\013\uff33\027\uff33\032\uff33\001\002\000\010" +
    "\013\uff32\027\uff32\032\uff32\001\002\000\004\021\u0250\001" +
    "\002\000\004\073\u0251\001\002\000\020\042\053\043\055" +
    "\051\127\064\130\065\125\066\051\073\050\001\002\000" +
    "\004\074\u0253\001\002\000\024\005\u01b5\011\u01b9\012\040" +
    "\013\uff4e\020\u01b8\023\u01be\027\uff4e\035\u01b3\051\045\001" +
    "\002\000\006\013\uff4a\027\uff4a\001\002\000\006\013\uff49" +
    "\027\uff49\001\002\000\004\026\u0257\001\002\000\020\005" +
    "\u01b5\011\u01b9\012\040\020\u01b8\023\u01be\035\u01b3\051\045" +
    "\001\002\000\006\013\u025b\027\u0259\001\002\000\020\005" +
    "\u0263\011\u01b9\012\040\020\u01b8\023\u01be\035\u01b3\051\045" +
    "\001\002\000\006\027\u025d\100\u025e\001\002\000\004\005" +
    "\u025c\001\002\000\024\005\uff42\011\uff42\012\uff42\013\uff42" +
    "\020\uff42\023\uff42\027\uff42\035\uff42\051\uff42\001\002\000" +
    "\020\005\u01b5\011\u01b9\012\040\020\u01b8\023\u01be\035\u01b3" +
    "\051\045\001\002\000\024\005\uff3f\011\uff3f\012\uff3f\013" +
    "\uff3f\020\uff3f\023\uff3f\027\uff3f\035\uff3f\051\uff3f\001\002" +
    "\000\004\013\u0260\001\002\000\004\005\u0261\001\002\000" +
    "\024\005\uff40\011\uff40\012\uff40\013\uff40\020\uff40\023\uff40" +
    "\027\uff40\035\uff40\051\uff40\001\002\000\004\013\u026e\001" +
    "\002\000\016\042\053\043\055\051\061\065\056\066\051" +
    "\073\050\001\002\000\004\026\u0265\001\002\000\022\005" +
    "\u01b5\011\u01b9\012\040\020\u01b8\023\u01be\035\u01b3\051\045" +
    "\100\u0267\001\002\000\006\013\u025b\027\u0259\001\002\000" +
    "\020\005\u01b5\011\u01b9\012\040\020\u01b8\023\u01be\035\u01b3" +
    "\051\045\001\002\000\004\013\u0269\001\002\000\004\005" +
    "\u026a\001\002\000\010\013\uff3e\027\uff3e\100\uff3e\001\002" +
    "\000\010\013\u026c\027\u025d\100\u025e\001\002\000\004\005" +
    "\u026d\001\002\000\010\013\uff3d\027\uff3d\100\uff3d\001\002" +
    "\000\004\005\u026f\001\002\000\024\005\uff41\011\uff41\012" +
    "\uff41\013\uff41\020\uff41\023\uff41\027\uff41\035\uff41\051\uff41" +
    "\001\002\000\004\030\u0271\001\002\000\006\066\uff51\100" +
    "\uff51\001\002\000\006\013\uff46\027\uff46\001\002\000\004" +
    "\051\u0274\001\002\000\004\012\u0276\001\002\000\004\013" +
    "\u027b\001\002\000\004\051\u0277\001\002\000\004\022\u0278" +
    "\001\002\000\012\014\u0188\015\u0187\016\u018a\046\u0189\001" +
    "\002\000\006\012\u0276\013\uff54\001\002\000\004\013\uff53" +
    "\001\002\000\004\025\u027c\001\002\000\006\066\uff52\100" +
    "\uff52\001\002\000\004\002\001\001\002\000\010\006\ufffd" +
    "\070\u0282\100\ufffd\001\002\000\006\006\uffff\100\u0280\001" +
    "\002\000\004\004\004\001\002\000\004\006\ufffe\001\002" +
    "\000\004\051\u027e\001\002\000\006\006\ufffc\100\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0281\000\006\002\004\003\005\001\001\000\004\005" +
    "\u027e\001\001\000\002\001\001\000\004\004\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\015\010\014\020\016\057\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\024" +
    "\001\001\000\012\007\015\010\014\020\022\057\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\034\021\043\031\042\032\031\036\035\045\033" +
    "\054\041\001\001\000\002\001\001\000\014\017\057\027" +
    "\053\030\051\034\u019e\054\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\057\027\053\030\051\034\061\054\056" +
    "\001\001\000\006\017\334\027\053\001\001\000\014\023" +
    "\332\024\151\025\145\026\146\027\144\001\001\000\004" +
    "\035\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\150\024\151\025\145\026\146" +
    "\027\144\035\316\001\001\000\004\035\311\001\001\000" +
    "\004\035\303\001\001\000\004\035\260\001\001\000\020" +
    "\015\065\045\066\046\070\047\071\050\062\052\075\054" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\057\027\053\030\051\034\216\054\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\065\045\066\046\203\047\071\050" +
    "\062\052\075\054\073\001\001\000\004\015\202\001\001" +
    "\000\020\015\065\045\066\046\201\047\071\050\062\052" +
    "\075\054\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\106\045\066\047\110\050\062\052\075\053\112\054" +
    "\111\001\001\000\002\001\001\000\020\015\106\045\066" +
    "\047\110\050\062\052\075\053\173\054\111\001\001\000" +
    "\002\001\001\000\020\015\106\045\066\047\110\050\062" +
    "\052\075\053\116\054\111\001\001\000\020\015\106\045" +
    "\066\047\110\050\062\052\075\053\115\054\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\125\022\123\027\053\030\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\150" +
    "\024\151\025\145\026\146\027\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\125" +
    "\022\131\027\053\030\122\001\001\000\002\001\001\000" +
    "\012\017\125\022\133\027\053\030\122\001\001\000\002" +
    "\001\001\000\012\017\125\022\135\027\053\030\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\125\022" +
    "\156\027\053\030\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\153" +
    "\025\145\026\146\027\144\001\001\000\002\001\001\000" +
    "\010\025\155\026\146\027\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\160\024\151\025\145\026" +
    "\146\027\144\001\001\000\002\001\001\000\014\023\162" +
    "\024\151\025\145\026\146\027\144\001\001\000\002\001" +
    "\001\000\010\025\164\026\146\027\144\001\001\000\002" +
    "\001\001\000\006\026\166\027\144\001\001\000\002\001" +
    "\001\000\020\015\106\045\066\047\110\050\062\052\075" +
    "\053\170\054\111\001\001\000\002\001\001\000\012\017" +
    "\125\022\172\027\053\030\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\125" +
    "\022\210\027\053\030\122\001\001\000\002\001\001\000" +
    "\020\015\065\045\066\046\212\047\071\050\062\052\075" +
    "\054\073\001\001\000\002\001\001\000\004\015\202\001" +
    "\001\000\020\015\065\045\066\046\215\047\071\050\062" +
    "\052\075\054\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\065\045\066\046\220\047\071\050\062" +
    "\052\075\054\073\001\001\000\004\051\222\001\001\000" +
    "\020\015\065\045\066\046\233\047\071\050\062\052\075" +
    "\054\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\065\045\066\046\227\047\071" +
    "\050\062\052\075\054\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\057\027\053\030\051\034\236\054\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\065\045\066\046\240\047\071\050" +
    "\062\052\075\054\073\001\001\000\004\051\246\001\001" +
    "\000\020\015\242\045\066\046\243\047\071\050\062\052" +
    "\075\054\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\301" +
    "\027\053\030\276\054\300\001\001\000\006\030\265\055" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\265\055\271\001\001\000\002\001\001" +
    "\000\006\030\265\055\273\001\001\000\002\001\001\000" +
    "\006\030\265\055\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\023\150\024\151\025\145\026\146\027" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\307\027\053\030\304\054\306\001" +
    "\001\000\002\001\001\000\014\023\150\024\151\025\145" +
    "\026\146\027\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\314\027\053\030\312" +
    "\001\001\000\002\001\001\000\014\023\150\024\151\025" +
    "\145\026\146\027\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\322\027\053\030\317\054\321\001" +
    "\001\000\002\001\001\000\014\023\150\024\151\025\145" +
    "\026\146\027\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\330\027\053\030\325" +
    "\054\327\001\001\000\002\001\001\000\014\023\150\024" +
    "\151\025\145\026\146\027\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\023\150\024\151\025\145\026\146\027\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\034\021\341\031\042\032\031" +
    "\036\035\045\033\054\041\001\001\000\002\001\001\000" +
    "\020\015\034\021\343\031\042\032\031\036\035\045\033" +
    "\054\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\355\031\362\032" +
    "\031\036\035\037\365\040\354\041\366\043\363\045\033" +
    "\054\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\u0154\001\001\000\026\015\355" +
    "\031\362\032\031\036\035\037\u013a\040\354\041\366\043" +
    "\363\045\033\054\357\001\001\000\002\001\001\000\014" +
    "\017\057\027\053\030\051\034\u0100\054\056\001\001\000" +
    "\026\015\355\031\362\032\031\036\035\037\377\040\354" +
    "\041\366\043\363\045\033\054\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\125\022\374\027\053\030\122" +
    "\001\001\000\002\001\001\000\026\015\355\031\362\032" +
    "\031\036\035\037\376\040\354\041\366\043\363\045\033" +
    "\054\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\034\021\u0105" +
    "\031\042\032\031\036\035\045\033\054\041\001\001\000" +
    "\030\015\u012d\021\u011e\031\u012f\032\031\036\035\037\u0131" +
    "\040\354\041\366\043\363\045\033\054\u012e\001\001\000" +
    "\026\015\355\031\362\032\031\036\035\037\u0128\040\354" +
    "\041\366\043\363\045\033\054\357\001\001\000\004\033" +
    "\u0106\001\001\000\002\001\001\000\020\015\034\021\u010b" +
    "\031\042\032\031\036\035\045\033\054\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\057\027\053" +
    "\030\051\034\u010e\054\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\034\021\u0111\031\042\032\031\036\035\045\033\054" +
    "\041\001\001\000\020\015\034\021\u011e\031\042\032\031" +
    "\036\035\045\033\054\041\001\001\000\004\033\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\034\021\u011b" +
    "\031\042\032\031\036\035\045\033\054\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\057\027\053\030\051\034\u0122\054\056\001\001" +
    "\000\002\001\001\000\020\015\034\021\u0124\031\042\032" +
    "\031\036\035\045\033\054\041\001\001\000\004\033\u0125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\015\355\031\362\032\031" +
    "\036\035\037\u012a\040\354\041\366\043\363\045\033\054" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\355\031\362\032" +
    "\031\036\035\037\u013a\040\354\041\366\043\363\045\033" +
    "\054\357\001\001\000\026\015\355\031\362\032\031\036" +
    "\035\037\377\040\354\041\366\043\363\045\033\054\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\125\022\u0137\027\053\030\122\001\001\000" +
    "\002\001\001\000\030\015\u012d\021\u0139\031\u012f\032\031" +
    "\036\035\037\376\040\354\041\366\043\363\045\033\054" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\u012d\021\u013c\031\u012f\032\031\036\035\037\u013d\040" +
    "\354\041\366\043\363\045\033\054\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\355\031\362\032" +
    "\031\036\035\037\u0140\040\354\041\366\043\363\045\033" +
    "\054\357\001\001\000\026\015\355\031\362\032\031\036" +
    "\u0150\037\u0151\040\354\041\366\043\363\045\033\054\357" +
    "\001\001\000\004\042\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\057\027\053\030\051\034\u0144" +
    "\054\056\001\001\000\002\001\001\000\026\015\355\031" +
    "\362\032\031\036\035\037\u0146\040\354\041\366\043\363" +
    "\045\033\054\357\001\001\000\004\042\u0147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\355\031\362\032" +
    "\031\036\035\037\u014d\040\354\041\366\043\363\045\033" +
    "\054\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u0152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\355\031\362\032\031\036\035\037\u013d\040\354" +
    "\041\366\043\363\045\033\054\357\001\001\000\014\017" +
    "\057\027\053\030\051\034\u0157\054\056\001\001\000\022" +
    "\015\u0159\044\u015d\045\066\046\070\047\071\050\062\052" +
    "\075\054\u015c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\202\040\u0160\041\366\043" +
    "\363\001\001\000\022\015\u0159\044\u015f\045\066\046\201" +
    "\047\071\050\062\052\075\054\u015c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\057\027\053\030\051\034" +
    "\u0163\054\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\355\031\362\032\031\036\035\037\u0131\040" +
    "\354\041\366\043\363\045\033\054\357\001\001\000\014" +
    "\017\057\027\053\030\051\034\u0167\054\056\001\001\000" +
    "\010\015\u0169\044\u015d\054\u016b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\u0169\044" +
    "\u015f\054\u016b\001\001\000\010\040\u0160\041\366\043\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\u0169\044\u0170\054\u016b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\125\022\u0174\027" +
    "\053\030\122\001\001\000\002\001\001\000\010\015\u0169" +
    "\044\u0176\054\u016b\001\001\000\002\001\001\000\010\015" +
    "\u0169\044\u0178\054\u016b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\125\022\u017c\027" +
    "\053\030\122\001\001\000\002\001\001\000\022\015\u0159" +
    "\044\u0176\045\066\046\212\047\071\050\062\052\075\054" +
    "\u015c\001\001\000\012\015\202\040\u0160\041\366\043\363" +
    "\001\001\000\022\015\u0159\044\u0170\045\066\046\215\047" +
    "\071\050\062\052\075\054\u015c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0185\001\001\000\004\054" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0197\001\001\000\014\016\u018f\017\u0190" +
    "\027\053\030\u018d\054\u018e\001\001\000\014\023\332\024" +
    "\151\025\145\026\146\027\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0193\001\001\000\002\001\001" +
    "\000\004\015\u0195\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\125\022\u019b\027\053\030\122\001\001\000" +
    "\002\001\001\000\020\015\034\021\u0139\031\042\032\031" +
    "\036\035\045\033\054\041\001\001\000\020\015\034\021" +
    "\u013c\031\042\032\031\036\035\045\033\054\041\001\001" +
    "\000\002\001\001\000\020\015\034\021\u0105\031\042\032" +
    "\031\036\035\045\033\054\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u01a5\001\001\000\012\007" +
    "\015\010\014\020\u01a4\057\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u01a9\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u01ac\001\001\000\002\001\001\000\004\011" +
    "\u01ae\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u01b1\001\001\000\020\013\u01b3\015\u01b5\054\u01b9\060" +
    "\u01bc\061\u01bb\063\u01b6\072\u01ba\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\057\027\053\030\051\034" +
    "\u0255\054\056\001\001\000\020\013\u0254\015\u01b5\054\u01b9" +
    "\060\u01bc\061\u01bb\063\u01b6\072\u01ba\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\u0210" +
    "\015\u01b5\054\u01b9\060\u01bc\061\u01bb\063\u01b6\072\u01ba\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\u020f" +
    "\015\u01b5\054\u01b9\060\u01bc\061\u01bb\063\u01b6\072\u01ba\001" +
    "\001\000\002\001\001\000\014\017\057\027\053\030\051" +
    "\034\u01bf\054\056\001\001\000\020\015\u01c4\054\u01c9\072" +
    "\u01ca\073\u01c3\074\u01c0\075\u01c5\077\u01c7\001\001\000\020" +
    "\015\u01c4\054\u01c9\072\u01ca\073\u020e\074\u01c0\075\u01c5\077" +
    "\u01c7\001\001\000\002\001\001\000\014\017\057\027\053" +
    "\030\051\034\u01f2\054\056\001\001\000\002\001\001\000" +
    "\020\015\065\045\066\046\u01f0\047\071\050\062\052\075" +
    "\054\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u01c4\054\u01c9" +
    "\072\u01ca\073\u01cb\074\u01c0\075\u01c5\077\u01c7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u01d5\054\u01d7\072\u01ca" +
    "\074\u01d3\075\u01c5\077\u01c7\100\u01d8\001\001\000\020\015" +
    "\u01d5\054\u01d7\072\u01ca\074\u01d3\075\u01c5\077\u01c7\100\u01e9" +
    "\001\001\000\002\001\001\000\020\015\u01d5\054\u01d7\072" +
    "\u01ca\074\u01d3\075\u01c5\077\u01c7\100\u01e2\001\001\000\002" +
    "\001\001\000\020\015\u01d5\054\u01d7\072\u01ca\074\u01d3\075" +
    "\u01c5\077\u01c7\100\u01db\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\125\022\u01df\027\053" +
    "\030\122\001\001\000\002\001\001\000\020\015\u01d5\054" +
    "\u01d7\072\u01ca\074\u01d3\075\u01c5\077\u01c7\100\u01e1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\125\022\u01ed\027\053" +
    "\030\122\001\001\000\002\001\001\000\020\015\u01c4\054" +
    "\u01c9\072\u01ca\073\u01ef\074\u01c0\075\u01c5\077\u01c7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\u01c4\054\u01c9\072\u01ca\073\u01f4" +
    "\074\u01c0\075\u01c5\077\u01c7\001\001\000\004\101\u01f5\001" +
    "\001\000\002\001\001\000\020\015\u01c4\054\u01c9\072\u01ca" +
    "\073\u01fa\074\u01c0\075\u01c5\077\u01c7\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\057\027\053\030\051" +
    "\034\u01fd\054\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u01c4" +
    "\054\u01c9\072\u01ca\073\u01ff\074\u01c0\075\u01c5\077\u01c7\001" +
    "\001\000\004\101\u0204\001\001\000\020\015\u01c4\054\u01c9" +
    "\072\u01ca\073\u0201\074\u01c0\075\u01c5\077\u01c7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u01c4\054\u01c9\072\u01ca\073\u0209\074" +
    "\u01c0\075\u01c5\077\u01c7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\u021c\054\u021f\063\u021d\064\u0220\065\u0221\066\u0218\070\u021a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\057\027\053\030\051\034\u0232\054\056" +
    "\001\001\000\020\015\u021c\054\u021f\063\u021d\064\u0231\065" +
    "\u0221\066\u0218\070\u021a\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u021c\054\u021f\063\u021d\064\u022a\065" +
    "\u0221\066\u0218\070\u021a\001\001\000\002\001\001\000\020" +
    "\015\u021c\054\u021f\063\u021d\064\u0227\065\u0221\066\u0218\070" +
    "\u021a\001\001\000\002\001\001\000\014\017\057\027\053" +
    "\030\051\034\u0224\054\056\001\001\000\010\015\u0169\044" +
    "\u0225\054\u016b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\125\022\u022e\027\053\030\122\001\001\000\002\001" +
    "\001\000\020\015\u021c\054\u021f\063\u021d\064\u0230\065\u0221" +
    "\066\u0218\070\u021a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u021c\054\u021f\063\u021d" +
    "\064\u0234\065\u0221\066\u0218\070\u021a\001\001\000\004\067" +
    "\u0236\001\001\000\020\015\u021c\054\u021f\063\u021d\064\u023f" +
    "\065\u0221\066\u0218\070\u021a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u021c\054\u021f" +
    "\063\u021d\064\u023b\065\u0221\066\u0218\070\u021a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\057\027\053\030\051\034\u0242\054" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\u021c\054\u021f\063" +
    "\u021d\064\u0245\065\u0221\066\u0218\070\u021a\001\001\000\020" +
    "\015\u021c\054\u021f\063\u021d\064\u0249\065\u0221\066\u0218\070" +
    "\u021a\001\001\000\004\067\u0246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\125\022\u0251\027\053\030\122\001\001\000\002\001\001" +
    "\000\020\013\u0253\015\u01b5\054\u01b9\060\u01bc\061\u01bb\063" +
    "\u01b6\072\u01ba\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\u0257\015\u01b5\054\u01b9\060" +
    "\u01bc\061\u01bb\063\u01b6\072\u01ba\001\001\000\004\076\u0259" +
    "\001\001\000\020\013\u0261\015\u01b5\054\u01b9\060\u01bc\061" +
    "\u01bb\063\u01b6\072\u01ba\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\u025e\015\u01b5\054" +
    "\u01b9\060\u01bc\061\u01bb\063\u01b6\072\u01ba\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\057\027\053\030\051" +
    "\034\u0263\054\056\001\001\000\002\001\001\000\020\013" +
    "\u0265\015\u01b5\054\u01b9\060\u01bc\061\u01bb\063\u01b6\072\u01ba" +
    "\001\001\000\004\076\u026a\001\001\000\020\013\u0267\015" +
    "\u01b5\054\u01b9\060\u01bc\061\u01bb\063\u01b6\072\u01ba\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u0274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0278\001\001\000\004\056\u0279\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u0280\001\001\000\002\001\001\000\004\005\u0282\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INFOR_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INFOR_WHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INFOR_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE_FUNCION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INFOR_WHILE_FUNCION ::= DECLARACION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INFOR_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // FOR_WHILE_FUNCION ::= for_ identificador igual numero to numero step_ numero INFOR_WHILE_FUNCION next identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then findelinea INWHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ INWHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION else_ INWHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // INWHILE_FUNCION ::= exit function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // INWHILE_FUNCION ::= exit do_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // INWHILE_FUNCION ::= LLAMAR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INWHILE_FUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INWHILE_FUNCION ::= SENTENCIA_WHILE_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INWHILE_FUNCION ::= DECLARACION INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INWHILE_FUNCION ::= SENTENCIA_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INWHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // WHILE_FUNCION ::= do_ until CONDICION INWHILE_FUNCION loop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INWHILE_FOR_FUNCION ::= exit function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INWHILE_FOR_FUNCION ::= exit for_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INWHILE_FOR_FUNCION ::= exit do_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INWHILE_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INWHILE_FOR_FUNCION ::= DECLARACION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INWHILE_FOR_FUNCION ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INWHILE_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // WHILE_FOR_FUNCION ::= do_ until CONDICION INWHILE_FOR loop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then findelinea INFOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION else_ INFOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION else_ INFOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INFOR_FUNCION ::= exit for_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INFOR_FUNCION ::= exit function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INFOR_FUNCION ::= LLAMAR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INFOR_FUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INFOR_FUNCION ::= DECLARACION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INFOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FOR_FUNCION ::= for_ identificador igual numero to numero step_ numero INFOR_FUNCION next identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ELSEIF_FUNCION ::= else_ if_ CONDICION then INFUNCION ELSEIF_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_FUNCION",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ELSEIF_FUNCION ::= else_ if_ CONDICION then findelinea INFUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_FUNCION",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // IF_FUNCION ::= if_ CONDICION then INFUNCION ELSEIF_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // IF_FUNCION ::= if_ CONDICION then INFUNCION ELSEIF_FUNCION else_ INFUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // IF_FUNCION ::= if_ CONDICION then INFUNCION else_ INFUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // IF_FUNCION ::= if_ CONDICION then INFUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // INFUNCION ::= exit function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // INFUNCION ::= LLAMAR_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // INFUNCION ::= DECLARACION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INFUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INFUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // PARAMETRO ::= identificador as TYPE_ coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // STRUCT_ ::= public_ struct_ identificador DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PARAMETRO_SENCILLO ::= BOOLEAN coma PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PARAMETRO_SENCILLO ::= numero coma PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PARAMETRO_SENCILLO ::= identificador coma PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PARAMETRO_SENCILLO ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PARAMETRO_SENCILLO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PARAMETRO_SENCILLO ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INFOR_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // INFOR_WHILE ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INFOR_WHILE ::= LLAMAR_FUNCION INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INFOR_WHILE ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INFOR_WHILE ::= SENTENCIA_WHILE INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INFOR_WHILE ::= DECLARACION INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INFOR_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INFOR_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FOR_WHILE ::= for_ identificador igual numero to numero step_ numero INFOR_WHILE next identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ELSE_IF_WHILE ::= else_ if_ CONDICION then INWHILE_MAIN ELSE_IF_WHILE end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ELSE_IF_WHILE ::= else_ if_ CONDICION then findelinea INWHILE_MAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IF_WHILE ::= if_ CONDICION then INWHILE_MAIN ELSE_IF_WHILE findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IF_WHILE ::= if_ CONDICION then INWHILE_MAIN ELSE_IF_WHILE else_ INWHILE_MAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IF_WHILE ::= if_ CONDICION then INWHILE_MAIN else_ INWHILE_MAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // IF_WHILE ::= if_ CONDICION then INWHILE_MAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INWHILE_MAIN ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INWHILE_MAIN ::= LLAMAR_FUNCION INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INWHILE_MAIN ::= LLAMAR_FUNCION espacio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INWHILE_MAIN ::= DECLARACION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // INWHILE_MAIN ::= findelinea DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // WHILE_MAIN ::= do_ until CONDICION INWHILE_MAIN loop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // INWHILE_FOR ::= exit for_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // INWHILE_FOR ::= exit do_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // INWHILE_FOR ::= LLAMAR_FUNCION INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INWHILE_FOR ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INWHILE_FOR ::= findelinea SENTENCIA_FOR espacio INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INWHILE_FOR ::= DECLARACION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INWHILE_FOR ::= findelinea SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INWHILE_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WHILE_FOR ::= do_ until CONDICION INWHILE_FOR loop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ELSE_IF_FOR ::= else_ if_ CONDICION then INFOR_MAIN ELSE_IF_FOR end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ELSE_IF_FOR ::= else_ if_ CONDICION then INFOR_MAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IF_FOR ::= if_ CONDICION findelinea then espacio INFOR_MAIN ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IF_FOR ::= if_ CONDICION findelinea then INFOR_MAIN ELSE_IF_FOR else_ INFOR_MAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IF_FOR ::= if_ CONDICION then findelinea INFOR_MAIN else_ INFOR_MAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IF_FOR ::= if_ CONDICION then espacio INFOR_MAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_FOR ::= espacio FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INFOR_MAIN ::= exit for_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INFOR_MAIN ::= LLAMAR_FUNCION INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INFOR_MAIN ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INFOR_MAIN ::= SENTENCIA_MAIN INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INFOR_MAIN ::= DECLARACION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INFOR_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FOR_MAIN ::= for_ identificador igual numero to numero step_ numero INFOR_MAIN next identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERADORRELACIONAL ::= menorigual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERADORRELACIONAL ::= mayorigual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION ::= numero OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= numero OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= numero OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= numero OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION ::= numero OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= BOOLEAN OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICION ::= identificador OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELSE_IF_MAIN ::= else_ if_ CONDICION then INMAIN ELSE_IF_MAIN end_ if_ espacio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSE_IF_MAIN ::= else_ if_ CONDICION then INMAIN end_ if_ espacio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF_MAIN ::= if_ CONDICION then espacio INMAIN ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF_MAIN ::= if_ CONDICION then INMAIN ELSE_IF_MAIN else_ espacio INMAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF_MAIN ::= if_ CONDICION then INMAIN else_ INMAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF_MAIN ::= if_ CONDICION then INMAIN end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TYPEDECLARE ::= espacio numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA findelinea DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE espacio DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= dim identificador as TYPE_ espacio DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= dim identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_PARENTESIS ::= espacio OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_PARENTESIS ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_POTENCIA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_POTENCIA ::= potencia numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_POTENCIA ::= potencia numero OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_MULT_DIV ::= OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_MULT_DIV ::= div numero OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_MULT_DIV ::= mult numero OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_MULT_DIV ::= div numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_MULT_DIV ::= mult numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_MOD ::= OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_MOD ::= mod numero OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_MOD ::= mod numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_ARITMETICA_MAS_MENOS ::= OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_ARITMETICA_MAS_MENOS ::= resta numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_ARITMETICA_MAS_MENOS ::= suma numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_ARITMETICA_MAS_MENOS ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_ARITMETICA_MAS_MENOS ::= suma numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_ARITMETICA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_ARITMETICA ::= numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INPARENTESIS ::= numero continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INPARENTESIS ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INMAIN ::= LLAMAR_FUNCION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INMAIN ::= SENTENCIA_MAIN findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INMAIN ::= DECLARACION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INMAIN ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INMAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MAIN ::= public_ sub main_ parentesisA parentesisC INMAIN end_ sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NEXT_MODULE ::= FUNCION_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NEXT_MODULE ::= STRUCT_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NEXT_MODULE ::= FUNCION_ espacio MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NEXT_MODULE ::= STRUCT_ espacio MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MODULE ::= public_ module identificador NEXT_MODULE end_ module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTS ::= imports IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

