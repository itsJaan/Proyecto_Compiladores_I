
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 29 08:55:21 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import ArbolAST.Arbol;
import ArbolAST.Nodo;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 29 08:55:21 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u02c6\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\130\004\000\002\130" +
    "\004\000\002\021\003\000\002\021\004\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\010\012\000\002\010" +
    "\012\000\002\010\012\000\002\010\012\000\002\010\012" +
    "\000\002\010\012\000\002\010\012\000\002\010\012\000" +
    "\002\010\012\000\002\010\012\000\002\010\012\000\002" +
    "\010\013\000\002\010\013\000\002\010\013\000\002\010" +
    "\013\000\002\010\013\000\002\010\013\000\002\010\013" +
    "\000\002\010\002\000\002\121\003\000\002\121\004\000" +
    "\002\125\004\000\002\125\005\000\002\125\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\012\000\002\022" +
    "\004\000\002\022\004\000\002\022\005\000\002\022\004" +
    "\000\002\022\006\000\002\022\011\000\002\022\011\000" +
    "\002\022\005\000\002\022\006\000\002\022\006\000\002" +
    "\126\011\000\002\126\003\000\002\126\003\000\002\126" +
    "\004\000\002\126\004\000\002\126\003\000\002\126\005" +
    "\000\002\126\010\000\002\126\010\000\002\126\005\000" +
    "\002\126\004\000\002\126\004\000\002\127\005\000\002" +
    "\127\005\000\002\114\004\000\002\114\005\000\002\122" +
    "\004\000\002\122\005\000\002\122\007\000\002\122\006" +
    "\000\002\113\003\000\002\113\004\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\007\000\002\123\003\000\002\123\003\000" +
    "\002\123\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\017\007\000\002\017" +
    "\007\000\002\017\010\000\002\017\006\000\002\017\006" +
    "\000\002\017\007\000\002\017\010\000\002\017\006\000" +
    "\002\017\007\000\002\017\010\000\002\017\007\000\002" +
    "\017\010\000\002\017\005\000\002\017\006\000\002\017" +
    "\006\000\002\017\007\000\002\017\007\000\002\017\010" +
    "\000\002\017\007\000\002\017\010\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\007\000\002" +
    "\017\010\000\002\017\010\000\002\017\007\000\002\017" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\006\000\002\017\007\000\002\017\010\000" +
    "\002\017\011\000\002\017\010\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\120\003\000\002\120\003" +
    "\000\002\015\007\000\002\015\011\000\002\015\007\000" +
    "\002\015\007\000\002\015\011\000\002\015\011\000\002" +
    "\015\007\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\015\010\000\002\015\007\000\002\015" +
    "\011\000\002\015\006\000\002\015\010\000\002\015\007" +
    "\000\002\015\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\124\007\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\116\003\000\002\116\003\000\002\117\004\000\002" +
    "\117\003\000\002\026\012\000\002\026\015\000\002\026" +
    "\015\000\002\026\013\000\002\077\011\000\002\077\003" +
    "\000\002\077\003\000\002\077\004\000\002\077\005\000" +
    "\002\077\004\000\002\077\012\000\002\077\004\000\002" +
    "\077\005\000\002\077\005\000\002\077\003\000\002\077" +
    "\004\000\002\077\006\000\002\077\005\000\002\077\010" +
    "\000\002\077\011\000\002\077\010\000\002\077\011\000" +
    "\002\133\011\000\002\133\003\000\002\133\003\000\002" +
    "\133\004\000\002\133\005\000\002\133\004\000\002\133" +
    "\012\000\002\133\004\000\002\133\005\000\002\133\005" +
    "\000\002\133\003\000\002\133\004\000\002\133\006\000" +
    "\002\133\005\000\002\133\010\000\002\133\011\000\002" +
    "\133\010\000\002\133\011\000\002\134\011\000\002\134" +
    "\003\000\002\134\003\000\002\134\004\000\002\134\005" +
    "\000\002\134\004\000\002\134\012\000\002\134\004\000" +
    "\002\134\005\000\002\134\005\000\002\134\003\000\002" +
    "\134\004\000\002\134\006\000\002\134\005\000\002\134" +
    "\010\000\002\134\011\000\002\134\010\000\002\134\011" +
    "\000\002\027\010\000\002\027\010\000\002\107\010\000" +
    "\002\107\007\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\031\004\000\002\031\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\017" +
    "\000\002\033\011\000\002\033\003\000\002\033\003\000" +
    "\002\033\012\000\002\033\004\000\002\033\004\000\002" +
    "\033\005\000\002\033\004\000\002\033\004\000\002\033" +
    "\005\000\002\033\003\000\002\033\004\000\002\033\006" +
    "\000\002\033\005\000\002\033\010\000\002\033\011\000" +
    "\002\033\010\000\002\033\011\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\100\011\000\002\100" +
    "\003\000\002\100\003\000\002\100\012\000\002\100\004" +
    "\000\002\100\004\000\002\100\005\000\002\100\004\000" +
    "\002\100\004\000\002\100\005\000\002\100\003\000\002" +
    "\100\004\000\002\100\006\000\002\100\006\000\002\100" +
    "\005\000\002\100\005\000\002\100\010\000\002\100\011" +
    "\000\002\100\010\000\002\100\011\000\002\035\012\000" +
    "\002\035\015\000\002\035\015\000\002\035\013\000\002" +
    "\036\010\000\002\036\010\000\002\110\007\000\002\110" +
    "\010\000\002\037\011\000\002\040\011\000\002\040\003" +
    "\000\002\040\003\000\002\040\004\000\002\040\005\000" +
    "\002\040\012\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\005\000\002\040\003\000\002\040" +
    "\004\000\002\040\006\000\002\040\006\000\002\040\005" +
    "\000\002\040\005\000\002\040\010\000\002\040\011\000" +
    "\002\040\010\000\002\040\011\000\002\041\011\000\002" +
    "\042\011\000\002\042\003\000\002\042\003\000\002\042" +
    "\004\000\002\042\005\000\002\042\012\000\002\042\004" +
    "\000\002\042\004\000\002\042\004\000\002\042\005\000" +
    "\002\042\003\000\002\042\004\000\002\042\006\000\002" +
    "\042\005\000\002\042\010\000\002\042\011\000\002\042" +
    "\010\000\002\042\011\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\101\011\000\002\101\003\000" +
    "\002\101\003\000\002\101\004\000\002\101\005\000\002" +
    "\101\012\000\002\101\004\000\002\101\004\000\002\101" +
    "\004\000\002\101\005\000\002\101\003\000\002\101\004" +
    "\000\002\101\006\000\002\101\006\000\002\101\005\000" +
    "\002\101\005\000\002\101\010\000\002\101\011\000\002" +
    "\101\010\000\002\101\011\000\002\044\012\000\002\044" +
    "\015\000\002\044\015\000\002\044\013\000\002\045\010" +
    "\000\002\045\010\000\002\106\007\000\002\106\010\000" +
    "\002\046\017\000\002\047\011\000\002\047\003\000\002" +
    "\047\004\000\002\047\005\000\002\047\003\000\002\047" +
    "\012\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\005\000\002\047\003\000\002\047\004\000" +
    "\002\047\006\000\002\047\006\000\002\047\005\000\002" +
    "\047\005\000\002\047\010\000\002\047\011\000\002\047" +
    "\010\000\002\047\011\000\002\050\005\000\002\050\005" +
    "\000\002\051\004\000\002\051\005\000\002\051\006\000" +
    "\002\051\010\000\002\051\010\000\002\051\006\000\002" +
    "\051\007\000\002\051\006\000\002\115\003\000\002\115" +
    "\003\000\002\115\003\000\002\052\007\000\002\052\010" +
    "\000\002\052\007\000\002\052\007\000\002\052\007\000" +
    "\002\052\010\000\002\052\010\000\002\007\010\000\002" +
    "\007\010\000\002\007\010\000\002\007\010\000\002\132" +
    "\004\000\002\132\004\000\002\132\004\000\002\053\015" +
    "\000\002\053\015\000\002\053\015\000\002\053\015\000" +
    "\002\053\015\000\002\053\015\000\002\053\015\000\002" +
    "\053\015\000\002\053\015\000\002\053\015\000\002\131" +
    "\004\000\002\131\004\000\002\131\004\000\002\011\005" +
    "\000\002\011\007\000\002\011\010\000\002\011\006\000" +
    "\002\013\011\000\002\013\003\000\002\013\004\000\002" +
    "\013\003\000\002\013\004\000\002\013\005\000\002\013" +
    "\004\000\002\013\012\000\002\013\004\000\002\013\005" +
    "\000\002\013\003\000\002\013\004\000\002\013\006\000" +
    "\002\013\005\000\002\013\010\000\002\013\011\000\002" +
    "\013\010\000\002\013\011\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\055\012\000\002\055\015" +
    "\000\002\055\015\000\002\055\013\000\002\102\011\000" +
    "\002\102\003\000\002\102\004\000\002\102\005\000\002" +
    "\102\003\000\002\102\012\000\002\102\004\000\002\102" +
    "\004\000\002\102\004\000\002\102\005\000\002\102\003" +
    "\000\002\102\004\000\002\102\006\000\002\102\005\000" +
    "\002\102\010\000\002\102\011\000\002\102\010\000\002" +
    "\102\011\000\002\135\011\000\002\135\003\000\002\135" +
    "\004\000\002\135\005\000\002\135\003\000\002\135\012" +
    "\000\002\135\004\000\002\135\004\000\002\135\004\000" +
    "\002\135\005\000\002\135\003\000\002\135\004\000\002" +
    "\135\006\000\002\135\005\000\002\135\010\000\002\135" +
    "\011\000\002\135\010\000\002\135\011\000\002\136\011" +
    "\000\002\136\003\000\002\136\004\000\002\136\005\000" +
    "\002\136\003\000\002\136\012\000\002\136\004\000\002" +
    "\136\004\000\002\136\004\000\002\136\005\000\002\136" +
    "\003\000\002\136\004\000\002\136\006\000\002\136\005" +
    "\000\002\136\010\000\002\136\011\000\002\136\010\000" +
    "\002\136\011\000\002\056\010\000\002\056\010\000\002" +
    "\111\007\000\002\111\010\000\002\057\017\000\002\060" +
    "\011\000\002\060\003\000\002\060\004\000\002\060\005" +
    "\000\002\060\003\000\002\060\012\000\002\060\004\000" +
    "\002\060\004\000\002\060\004\000\002\060\005\000\002" +
    "\060\003\000\002\060\004\000\002\060\006\000\002\060" +
    "\005\000\002\060\006\000\002\060\005\000\002\060\010" +
    "\000\002\060\011\000\002\060\010\000\002\060\011\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\062\012\000\002\062\015\000\002\062\015\000\002\062" +
    "\013\000\002\103\011\000\002\103\003\000\002\103\004" +
    "\000\002\103\005\000\002\103\003\000\002\103\012\000" +
    "\002\103\004\000\002\103\004\000\002\103\004\000\002" +
    "\103\005\000\002\103\003\000\002\103\004\000\002\103" +
    "\006\000\002\103\005\000\002\103\006\000\002\103\005" +
    "\000\002\103\010\000\002\103\011\000\002\103\010\000" +
    "\002\103\011\000\002\063\010\000\002\063\010\000\002" +
    "\112\007\000\002\112\010\000\002\064\011\000\002\065" +
    "\011\000\002\065\003\000\002\065\003\000\002\065\004" +
    "\000\002\065\005\000\002\065\012\000\002\065\004\000" +
    "\002\065\004\000\002\065\004\000\002\065\005\000\002" +
    "\065\003\000\002\065\004\000\002\065\006\000\002\065" +
    "\006\000\002\065\006\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\010\000\002\065\011\000" +
    "\002\065\010\000\002\065\011\000\002\066\011\000\002" +
    "\067\011\000\002\067\003\000\002\067\004\000\002\067" +
    "\005\000\002\067\003\000\002\067\012\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\005\000" +
    "\002\067\003\000\002\067\004\000\002\067\006\000\002" +
    "\067\006\000\002\067\005\000\002\067\005\000\002\067" +
    "\010\000\002\067\011\000\002\067\010\000\002\067\011" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\071\012\000\002\071\014\000\002\071\011\000\002" +
    "\071\013\000\002\104\011\000\002\104\003\000\002\104" +
    "\004\000\002\104\005\000\002\104\003\000\002\104\012" +
    "\000\002\104\004\000\002\104\004\000\002\104\004\000" +
    "\002\104\005\000\002\104\003\000\002\104\004\000\002" +
    "\104\006\000\002\104\006\000\002\104\005\000\002\104" +
    "\005\000\002\104\010\000\002\104\011\000\002\104\010" +
    "\000\002\104\011\000\002\074\010\000\002\074\010\000" +
    "\002\105\007\000\002\105\010\000\002\072\017\000\002" +
    "\073\011\000\002\073\003\000\002\073\003\000\002\073" +
    "\004\000\002\073\005\000\002\073\012\000\002\073\004" +
    "\000\002\073\004\000\002\073\004\000\002\073\005\000" +
    "\002\073\003\000\002\073\004\000\002\073\006\000\002" +
    "\073\006\000\002\073\006\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\010\000\002\073\011" +
    "\000\002\073\010\000\002\073\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0583\000\010\003\010\006\005\102\004\001\002\000" +
    "\004\100\u0584\001\002\000\006\003\u0566\007\u0567\001\002" +
    "\000\004\002\u0565\001\002\000\004\002\000\001\002\000" +
    "\004\007\017\001\002\000\006\003\010\006\005\001\002" +
    "\000\004\102\013\001\002\000\006\002\uffcf\100\015\001" +
    "\002\000\004\002\uffff\001\002\000\006\002\uffd1\102\013" +
    "\001\002\000\004\002\uffd0\001\002\000\004\051\020\001" +
    "\002\000\006\100\022\102\021\001\002\000\004\100\u0562" +
    "\001\002\000\020\003\031\006\033\010\023\013\uffd4\033" +
    "\025\100\uffd4\102\032\001\002\000\010\003\u050f\051\u0510" +
    "\103\u050e\001\002\000\006\013\ufff1\100\u050c\001\002\000" +
    "\006\003\u04cf\030\u04d0\001\002\000\004\013\u04cc\001\002" +
    "\000\014\003\u04c4\010\023\013\uffd4\100\041\102\040\001" +
    "\002\000\014\003\u04c4\010\023\013\uffd4\100\041\102\040" +
    "\001\002\000\012\025\115\030\114\051\113\103\112\001" +
    "\002\000\004\100\110\001\002\000\006\003\034\025\035" +
    "\001\002\000\004\051\104\001\002\000\006\003\036\051" +
    "\037\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\004\100\100\001\002\000" +
    "\046\003\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\020\uffd3\023\uffd3\027\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\051\uffd3\100\uffd3\102\uffd3\107\uffd3\001\002" +
    "\000\004\012\044\001\002\000\006\003\073\013\074\001" +
    "\002\000\006\003\045\051\046\001\002\000\004\022\066" +
    "\001\002\000\006\003\050\022\047\001\002\000\016\003" +
    "\062\014\054\015\053\016\056\046\055\051\052\001\002" +
    "\000\014\014\054\015\053\016\056\046\055\051\052\001" +
    "\002\000\006\100\041\102\040\001\002\000\016\003\uff4d" +
    "\054\uff4d\074\uff4d\100\uff4d\102\uff4d\104\uff4d\001\002\000" +
    "\016\003\uff50\054\uff50\074\uff50\100\uff50\102\uff50\104\uff50" +
    "\001\002\000\016\003\uff4f\054\uff4f\074\uff4f\100\uff4f\102" +
    "\uff4f\104\uff4f\001\002\000\016\003\uff4e\054\uff4e\074\uff4e" +
    "\100\uff4e\102\uff4e\104\uff4e\001\002\000\016\003\uff51\054" +
    "\uff51\074\uff51\100\uff51\102\uff51\104\uff51\001\002\000\010" +
    "\003\ufe40\012\044\013\ufe40\001\002\000\006\003\ufe3d\013" +
    "\ufe3d\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\006\003\ufe3f\013\ufe3f\001" +
    "\002\000\010\003\ufe43\012\044\013\ufe43\001\002\000\006" +
    "\003\ufe42\013\ufe42\001\002\000\014\014\054\015\053\016" +
    "\056\046\055\051\052\001\002\000\006\100\041\102\040" +
    "\001\002\000\010\003\ufe41\012\044\013\ufe41\001\002\000" +
    "\006\003\ufe3e\013\ufe3e\001\002\000\014\003\ufe3c\010\ufe3c" +
    "\013\ufe3c\100\ufe3c\102\ufe3c\001\002\000\004\025\077\001" +
    "\002\000\006\003\075\025\076\001\002\000\014\003\ufe36" +
    "\010\ufe36\013\ufe36\100\ufe36\102\ufe36\001\002\000\014\003" +
    "\ufe38\010\ufe38\013\ufe38\100\ufe38\102\ufe38\001\002\000\014" +
    "\003\ufe37\010\ufe37\013\ufe37\100\ufe37\102\ufe37\001\002\000" +
    "\046\003\uffd2\005\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\020\uffd2\023\uffd2\027\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\051\uffd2\100\uffd2\102\uffd2\107\uffd2\001\002" +
    "\000\004\012\044\001\002\000\006\003\073\013\074\001" +
    "\002\000\014\003\ufe39\010\ufe39\013\ufe39\100\ufe39\102\ufe39" +
    "\001\002\000\006\100\041\102\040\001\002\000\004\012" +
    "\044\001\002\000\006\003\073\013\074\001\002\000\014" +
    "\003\ufe3a\010\ufe3a\013\ufe3a\100\ufe3a\102\ufe3a\001\002\000" +
    "\020\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4" +
    "\102\032\001\002\000\004\013\uffeb\001\002\000\004\073" +
    "\u04bb\001\002\000\004\073\u03fb\001\002\000\004\051\122" +
    "\001\002\000\004\051\116\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\012\044\001\002\000\006\003\073" +
    "\013\074\001\002\000\014\003\ufe3b\010\ufe3b\013\ufe3b\100" +
    "\ufe3b\102\ufe3b\001\002\000\004\073\123\001\002\000\006" +
    "\051\126\106\124\001\002\000\004\051\u03f6\001\002\000" +
    "\004\074\133\001\002\000\004\022\127\001\002\000\014" +
    "\014\054\015\053\016\056\046\055\051\052\001\002\000" +
    "\010\003\ufe28\074\ufe28\104\131\001\002\000\006\051\126" +
    "\106\124\001\002\000\006\003\ufe27\074\ufe27\001\002\000" +
    "\004\022\134\001\002\000\014\014\054\015\053\016\056" +
    "\046\055\051\052\001\002\000\006\100\041\102\040\001" +
    "\002\000\022\005\141\011\146\012\145\020\144\023\156" +
    "\035\137\051\155\102\151\001\002\000\004\030\u03f3\001" +
    "\002\000\006\003\u03ed\013\u03ef\001\002\000\016\042\164" +
    "\043\166\051\174\060\162\065\170\073\163\001\002\000" +
    "\026\003\ufe23\005\141\011\146\012\145\013\ufe23\020\144" +
    "\023\156\035\137\051\155\102\151\001\002\000\032\003" +
    "\ufe11\005\ufe11\011\ufe11\012\ufe11\013\ufe11\020\ufe11\023\ufe11" +
    "\027\ufe11\035\ufe11\051\ufe11\102\ufe11\107\ufe11\001\002\000" +
    "\004\070\u039e\001\002\000\004\051\u0382\001\002\000\004" +
    "\051\u0353\001\002\000\006\100\041\102\040\001\002\000" +
    "\026\003\ufe1a\005\141\011\146\012\145\013\ufe1a\020\144" +
    "\023\156\035\137\051\155\102\151\001\002\000\004\100" +
    "\u034e\001\002\000\032\003\ufe10\005\ufe10\011\ufe10\012\ufe10" +
    "\013\ufe10\020\ufe10\023\ufe10\027\ufe10\035\ufe10\051\ufe10\102" +
    "\ufe10\107\ufe10\001\002\000\032\003\ufe12\005\ufe12\011\ufe12" +
    "\012\ufe12\013\ufe12\020\ufe12\023\ufe12\027\ufe12\035\ufe12\051" +
    "\ufe12\102\ufe12\107\ufe12\001\002\000\026\003\ufe21\005\141" +
    "\011\146\012\145\013\ufe21\020\144\023\156\035\137\051" +
    "\155\102\151\001\002\000\024\003\u0319\042\164\043\166" +
    "\051\310\054\u031b\060\302\065\170\070\u0317\073\u0316\001" +
    "\002\000\006\024\161\036\160\001\002\000\016\042\164" +
    "\043\166\051\174\060\162\065\170\073\163\001\002\000" +
    "\016\042\uff42\043\uff42\051\uff42\060\uff42\065\uff42\073\uff42" +
    "\001\002\000\016\042\uff41\043\uff41\051\uff41\060\uff41\065" +
    "\uff41\073\uff41\001\002\000\010\051\353\065\352\073\355" +
    "\001\002\000\012\051\325\060\u0305\065\170\073\163\001" +
    "\002\000\040\026\uff47\054\uff47\055\uff47\056\uff47\057\uff47" +
    "\060\uff47\061\uff47\062\uff47\063\uff47\074\uff47\100\uff47\101" +
    "\uff47\102\uff47\104\uff47\110\uff47\001\002\000\010\054\u02de" +
    "\055\u02e0\056\u02df\001\002\000\040\026\uff46\054\uff46\055" +
    "\uff46\056\uff46\057\uff46\060\uff46\061\uff46\062\uff46\063\uff46" +
    "\074\uff46\100\uff46\101\uff46\102\uff46\104\uff46\110\uff46\001" +
    "\002\000\026\054\u02de\055\u02e0\056\u02df\057\uff9f\060\uff9f" +
    "\061\uff9f\062\uff9f\063\uff9f\073\uff9f\110\uff9f\001\002\000" +
    "\046\026\uffad\037\uffad\047\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\073\uffad\074" +
    "\uffad\100\uffad\101\uffad\102\uffad\104\uffad\110\uffad\001\002" +
    "\000\026\054\u02de\055\u02e0\056\u02df\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\073\uff9d\110\uff9d\001\002\000\020" +
    "\057\317\060\314\061\320\062\312\063\311\073\342\110" +
    "\321\001\002\000\012\054\u02de\055\u02e0\056\u02df\073\330" +
    "\001\002\000\026\054\u02de\055\u02e0\056\u02df\057\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\073\300\110\uff9e\001\002" +
    "\000\006\100\041\102\040\001\002\000\022\005\202\011" +
    "\146\012\145\020\206\023\213\035\200\051\155\102\211" +
    "\001\002\000\034\005\ufdbc\011\ufdbc\012\ufdbc\013\ufdbc\020" +
    "\ufdbc\023\ufdbc\027\ufdbc\032\ufdbc\034\ufdbc\035\ufdbc\051\ufdbc" +
    "\102\ufdbc\107\ufdbc\001\002\000\006\023\u02d8\030\u02d9\001" +
    "\002\000\034\005\ufdba\011\ufdba\012\ufdba\013\ufdba\020\ufdba" +
    "\023\ufdba\027\ufdba\032\ufdba\034\ufdba\035\ufdba\051\ufdba\102" +
    "\ufdba\107\ufdba\001\002\000\016\042\164\043\166\051\174" +
    "\060\162\065\170\073\163\001\002\000\024\005\202\011" +
    "\146\012\145\020\206\023\213\034\ufd84\035\200\051\155" +
    "\102\211\001\002\000\004\034\u0273\001\002\000\034\005" +
    "\ufdbb\011\ufdbb\012\ufdbb\013\ufdbb\020\ufdbb\023\ufdbb\027\ufdbb" +
    "\032\ufdbb\034\ufdbb\035\ufdbb\051\ufdbb\102\ufdbb\107\ufdbb\001" +
    "\002\000\004\070\u0264\001\002\000\006\100\041\102\040" +
    "\001\002\000\024\005\202\011\146\012\145\020\206\023" +
    "\213\034\ufd7b\035\200\051\155\102\211\001\002\000\004" +
    "\100\u025f\001\002\000\024\005\202\011\146\012\145\020" +
    "\206\023\213\034\ufd81\035\200\051\155\102\211\001\002" +
    "\000\006\024\161\036\160\001\002\000\016\042\164\043" +
    "\166\051\174\060\162\065\170\073\163\001\002\000\006" +
    "\100\041\102\040\001\002\000\022\005\221\011\230\012" +
    "\145\020\225\023\234\035\220\051\155\102\232\001\002" +
    "\000\032\005\ufe84\011\ufe84\012\ufe84\013\ufe84\020\ufe84\023" +
    "\ufe84\027\ufe84\034\ufe84\035\ufe84\051\ufe84\102\ufe84\107\ufe84" +
    "\001\002\000\010\011\u0257\023\u0255\030\u0256\001\002\000" +
    "\016\042\164\043\166\051\174\060\162\065\170\073\163" +
    "\001\002\000\024\005\221\011\230\012\145\020\225\023" +
    "\234\034\ufd9b\035\220\051\155\102\232\001\002\000\032" +
    "\005\ufe82\011\ufe82\012\ufe82\013\ufe82\020\ufe82\023\ufe82\027" +
    "\ufe82\034\ufe82\035\ufe82\051\ufe82\102\ufe82\107\ufe82\001\002" +
    "\000\004\034\u0210\001\002\000\004\070\u0201\001\002\000" +
    "\024\005\221\011\230\012\145\020\225\023\234\034\ufd9a" +
    "\035\220\051\155\102\232\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\051\u0130\001\002\000\024\005\221" +
    "\011\230\012\145\020\225\023\234\034\ufd92\035\220\051" +
    "\155\102\232\001\002\000\004\100\u012d\001\002\000\032" +
    "\005\ufe83\011\ufe83\012\ufe83\013\ufe83\020\ufe83\023\ufe83\027" +
    "\ufe83\034\ufe83\035\ufe83\051\ufe83\102\ufe83\107\ufe83\001\002" +
    "\000\006\024\161\036\160\001\002\000\016\042\164\043" +
    "\166\051\174\060\162\065\170\073\163\001\002\000\006" +
    "\100\041\102\040\001\002\000\022\005\221\011\230\012" +
    "\145\020\242\023\234\035\240\051\155\102\247\001\002" +
    "\000\004\023\u012a\001\002\000\024\005\221\011\230\012" +
    "\145\020\242\023\234\034\ufe95\035\240\051\155\102\247" +
    "\001\002\000\004\070\260\001\002\000\004\034\256\001" +
    "\002\000\024\005\221\011\230\012\145\020\242\023\234" +
    "\034\ufe94\035\240\051\155\102\247\001\002\000\006\100" +
    "\041\102\040\001\002\000\024\005\221\011\230\012\145" +
    "\020\242\023\234\034\ufe8c\035\240\051\155\102\247\001" +
    "\002\000\004\100\250\001\002\000\024\005\221\011\230" +
    "\012\145\020\242\023\234\034\ufe93\035\240\051\155\102" +
    "\247\001\002\000\004\034\ufe92\001\002\000\004\034\ufe8b" +
    "\001\002\000\024\005\221\011\230\012\145\020\242\023" +
    "\234\034\ufe8e\035\240\051\155\102\247\001\002\000\004" +
    "\034\ufe8d\001\002\000\004\034\ufe8f\001\002\000\006\100" +
    "\041\102\040\001\002\000\036\003\ufe97\005\ufe97\011\ufe97" +
    "\012\ufe97\013\ufe97\020\ufe97\023\ufe97\027\ufe97\034\ufe97\035" +
    "\ufe97\051\ufe97\100\ufe97\102\ufe97\107\ufe97\001\002\000\006" +
    "\021\262\111\261\001\002\000\004\073\u0125\001\002\000" +
    "\004\073\263\001\002\000\022\042\164\043\166\051\272" +
    "\060\162\064\273\065\170\073\163\074\264\001\002\000" +
    "\006\100\041\102\040\001\002\000\006\074\uffa9\101\u0121" +
    "\001\002\000\024\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\073\uff9f\074\uffaa\101\u011f\110\uff9f\001\002\000\004" +
    "\074\u011c\001\002\000\040\026\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d" +
    "\074\uff9d\100\uff9d\101\uff9d\102\uff9d\110\uff9d\001\002\000" +
    "\010\073\330\074\uffa6\101\u011a\001\002\000\026\057\uff9e" +
    "\060\uff9e\061\uff9e\062\uff9e\063\uff9e\070\276\073\300\074" +
    "\uffa8\101\277\110\uff9e\001\002\000\006\074\uffab\101\274" +
    "\001\002\000\020\042\164\043\166\051\272\060\162\064" +
    "\273\065\170\073\163\001\002\000\004\074\uffa5\001\002" +
    "\000\004\051\u0117\001\002\000\020\042\164\043\166\051" +
    "\272\060\162\064\273\065\170\073\163\001\002\000\020" +
    "\042\164\043\166\051\310\060\302\065\170\073\303\074" +
    "\301\001\002\000\044\026\ufe50\051\ufe50\054\ufe50\055\ufe50" +
    "\056\ufe50\057\ufe50\060\ufe50\061\ufe50\062\ufe50\063\ufe50\065" +
    "\ufe50\073\ufe50\074\ufe50\100\ufe50\101\ufe50\102\ufe50\110\ufe50" +
    "\001\002\000\004\065\352\001\002\000\014\042\164\043" +
    "\166\051\310\060\302\065\170\001\002\000\044\026\ufe4f" +
    "\051\ufe4f\054\ufe4f\055\ufe4f\056\ufe4f\057\ufe4f\060\ufe4f\061" +
    "\ufe4f\062\ufe4f\063\ufe4f\065\ufe4f\073\ufe4f\074\ufe4f\100\ufe4f" +
    "\101\ufe4f\102\ufe4f\110\ufe4f\001\002\000\026\057\ufe45\060" +
    "\ufe45\061\ufe45\062\ufe45\063\ufe45\074\ufe45\100\ufe45\102\ufe45" +
    "\104\ufe45\110\ufe45\001\002\000\026\057\ufe44\060\ufe44\061" +
    "\ufe44\062\ufe44\063\ufe44\074\ufe44\100\ufe44\102\ufe44\104\ufe44" +
    "\110\ufe44\001\002\000\022\057\317\060\314\061\320\062" +
    "\312\063\311\074\313\104\316\110\321\001\002\000\026" +
    "\057\ufe46\060\ufe46\061\ufe46\062\ufe46\063\ufe46\074\ufe46\100" +
    "\ufe46\102\ufe46\104\ufe46\110\ufe46\001\002\000\012\051\uff70" +
    "\060\uff70\065\uff70\073\uff70\001\002\000\012\051\uff71\060" +
    "\uff71\065\uff71\073\uff71\001\002\000\044\026\ufe4e\051\ufe4e" +
    "\054\ufe4e\055\ufe4e\056\ufe4e\057\ufe4e\060\ufe4e\061\ufe4e\062" +
    "\ufe4e\063\ufe4e\065\ufe4e\073\ufe4e\074\ufe4e\100\ufe4e\101\ufe4e" +
    "\102\ufe4e\110\ufe4e\001\002\000\012\051\uff73\060\uff73\065" +
    "\uff73\073\uff73\001\002\000\012\051\325\060\162\065\324" +
    "\073\163\001\002\000\016\042\164\043\166\051\310\060" +
    "\302\065\170\073\303\001\002\000\012\051\uff74\060\uff74" +
    "\065\uff74\073\uff74\001\002\000\012\051\uff72\060\uff72\065" +
    "\uff72\073\uff72\001\002\000\012\051\uff6f\060\uff6f\065\uff6f" +
    "\073\uff6f\001\002\000\044\026\ufe4d\051\ufe4d\054\ufe4d\055" +
    "\ufe4d\056\ufe4d\057\ufe4d\060\ufe4d\061\ufe4d\062\ufe4d\063\ufe4d" +
    "\065\ufe4d\073\ufe4d\074\ufe4d\100\ufe4d\101\ufe4d\102\ufe4d\110" +
    "\ufe4d\001\002\000\040\026\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\074" +
    "\uff9f\100\uff9f\101\uff9f\102\uff9f\110\uff9f\001\002\000\022" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\073\uffad\074" +
    "\u010e\110\uffad\001\002\000\040\026\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\073" +
    "\300\074\uff9e\100\uff9e\101\uff9e\102\uff9e\110\uff9e\001\002" +
    "\000\006\073\330\074\327\001\002\000\046\026\ufe49\051" +
    "\ufe49\054\ufe49\055\ufe49\056\ufe49\057\ufe49\060\ufe49\061\ufe49" +
    "\062\ufe49\063\ufe49\065\ufe49\073\ufe49\074\ufe49\100\ufe49\101" +
    "\ufe49\102\ufe49\104\u010c\110\ufe49\001\002\000\012\051\325" +
    "\060\162\065\170\073\163\001\002\000\022\057\317\060" +
    "\314\061\320\062\312\063\311\073\342\074\u0107\110\321" +
    "\001\002\000\006\073\330\074\333\001\002\000\044\026" +
    "\uff9a\051\325\054\uff9a\055\uff9a\056\uff9a\057\317\060\334" +
    "\061\320\062\312\063\311\065\170\073\uff9a\074\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\110\321\001\002\000\012\051\uff73" +
    "\060\uff73\065\uff73\073\355\001\002\000\012\051\325\060" +
    "\162\065\170\073\163\001\002\000\024\026\uff98\054\uff98" +
    "\055\uff98\056\uff98\073\uff98\074\uff98\100\uff98\101\uff98\102" +
    "\uff98\001\002\000\040\026\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\317\060\314\061\320\062\312\063\311\073\uff92\074" +
    "\uff92\100\uff92\101\uff92\102\uff92\110\321\001\002\000\024" +
    "\026\uff96\054\uff96\055\uff96\056\uff96\073\uff96\074\uff96\100" +
    "\uff96\101\uff96\102\uff96\001\002\000\012\051\325\060\162" +
    "\065\170\073\163\001\002\000\012\051\325\060\162\065" +
    "\170\073\163\001\002\000\022\057\317\060\314\061\320" +
    "\062\312\063\311\073\342\074\346\110\321\001\002\000" +
    "\006\073\330\074\345\001\002\000\024\026\uff95\054\uff95" +
    "\055\uff95\056\uff95\073\uff95\074\uff95\100\uff95\101\uff95\102" +
    "\uff95\001\002\000\024\026\uff84\054\uff84\055\uff84\056\uff84" +
    "\073\uff84\074\uff84\100\uff84\101\uff84\102\uff84\001\002\000" +
    "\024\026\uff6d\054\uff6d\055\uff6d\056\uff6d\073\330\074\uff6d" +
    "\100\uff6d\101\uff6d\102\uff6d\001\002\000\040\026\uff6e\054" +
    "\uff6e\055\uff6e\056\uff6e\057\317\060\314\061\320\062\312" +
    "\063\311\073\342\074\uff6e\100\uff6e\101\uff6e\102\uff6e\110" +
    "\321\001\002\000\024\026\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\073\uff9c\074\uff9c\100\uff9c\101\uff9c\102\uff9c\001\002\000" +
    "\046\026\uffac\037\uffac\047\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\073\uffac\074" +
    "\uffac\100\uffac\101\uffac\102\uffac\104\uffac\110\uffac\001\002" +
    "\000\004\073\300\001\002\000\044\026\uff7d\051\325\054" +
    "\uff7d\055\uff7d\056\uff7d\057\317\060\334\061\320\062\312" +
    "\063\311\065\170\073\163\074\uff7d\100\uff7d\101\uff7d\102" +
    "\uff7d\110\321\001\002\000\012\051\325\060\356\065\170" +
    "\073\163\001\002\000\010\051\353\065\352\073\355\001" +
    "\002\000\022\057\317\060\314\061\320\062\312\063\311" +
    "\073\342\074\367\110\321\001\002\000\006\073\330\074" +
    "\361\001\002\000\044\026\uff91\051\325\054\uff91\055\uff91" +
    "\056\uff91\057\317\060\334\061\320\062\312\063\311\065" +
    "\170\073\uff91\074\uff91\100\uff91\101\uff91\102\uff91\110\321" +
    "\001\002\000\012\051\325\060\162\065\170\073\163\001" +
    "\002\000\040\026\uff8e\054\uff8e\055\uff8e\056\uff8e\057\317" +
    "\060\314\061\320\062\312\063\311\073\uff8e\074\uff8e\100" +
    "\uff8e\101\uff8e\102\uff8e\110\321\001\002\000\024\026\uff90" +
    "\054\uff90\055\uff90\056\uff90\073\uff90\074\uff90\100\uff90\101" +
    "\uff90\102\uff90\001\002\000\040\026\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\057\317\060\314\061\320\062\312\063\311\073" +
    "\uff8d\074\uff8d\100\uff8d\101\uff8d\102\uff8d\110\321\001\002" +
    "\000\024\026\uff8f\054\uff8f\055\uff8f\056\uff8f\073\uff8f\074" +
    "\uff8f\100\uff8f\101\uff8f\102\uff8f\001\002\000\044\026\uff82" +
    "\051\325\054\uff82\055\uff82\056\uff82\057\317\060\334\061" +
    "\320\062\312\063\311\065\170\073\uff82\074\uff82\100\uff82" +
    "\101\uff82\102\uff82\110\321\001\002\000\012\051\325\060" +
    "\162\065\170\073\163\001\002\000\024\026\uff81\054\uff81" +
    "\055\uff81\056\uff81\073\uff81\074\uff81\100\uff81\101\uff81\102" +
    "\uff81\001\002\000\040\026\uff7e\054\uff7e\055\uff7e\056\uff7e" +
    "\057\317\060\314\061\320\062\312\063\311\073\uff7e\074" +
    "\uff7e\100\uff7e\101\uff7e\102\uff7e\110\321\001\002\000\040" +
    "\026\uff7f\054\uff7f\055\uff7f\056\uff7f\057\317\060\314\061" +
    "\320\062\312\063\311\073\uff7f\074\uff7f\100\uff7f\101\uff7f" +
    "\102\uff7f\110\321\001\002\000\024\026\uff80\054\uff80\055" +
    "\uff80\056\uff80\073\uff80\074\uff80\100\uff80\101\uff80\102\uff80" +
    "\001\002\000\026\051\325\057\317\060\334\061\320\062" +
    "\312\063\311\065\170\073\163\074\376\110\321\001\002" +
    "\000\044\026\uff78\051\325\054\uff78\055\uff78\056\uff78\057" +
    "\317\060\334\061\320\062\312\063\311\065\170\073\uff78" +
    "\074\uff78\100\uff78\101\uff78\102\uff78\110\321\001\002\000" +
    "\012\051\325\060\162\065\170\073\163\001\002\000\040" +
    "\026\uff7c\054\uff7c\055\uff7c\056\uff7c\057\317\060\314\061" +
    "\320\062\312\063\311\073\342\074\uff7c\100\uff7c\101\uff7c" +
    "\102\uff7c\110\321\001\002\000\024\026\uff7b\054\uff7b\055" +
    "\uff7b\056\uff7b\073\330\074\uff7b\100\uff7b\101\uff7b\102\uff7b" +
    "\001\002\000\024\026\uff7a\054\uff7a\055\uff7a\056\uff7a\073" +
    "\uff7a\074\uff7a\100\uff7a\101\uff7a\102\uff7a\001\002\000\012" +
    "\051\325\060\162\065\170\073\163\001\002\000\024\026" +
    "\uff77\054\uff77\055\uff77\056\uff77\073\uff77\074\uff77\100\uff77" +
    "\101\uff77\102\uff77\001\002\000\040\026\uff75\054\uff75\055" +
    "\uff75\056\uff75\057\317\060\314\061\320\062\312\063\311" +
    "\073\uff75\074\uff75\100\uff75\101\uff75\102\uff75\110\321\001" +
    "\002\000\024\026\uff76\054\uff76\055\uff76\056\uff76\073\uff76" +
    "\074\uff76\100\uff76\101\uff76\102\uff76\001\002\000\044\026" +
    "\uff8b\051\325\054\uff8b\055\uff8b\056\uff8b\057\317\060\334" +
    "\061\320\062\312\063\311\065\170\073\uff8b\074\uff8b\100" +
    "\uff8b\101\uff8b\102\uff8b\110\321\001\002\000\012\051\325" +
    "\060\162\065\170\073\163\001\002\000\024\026\uff89\054" +
    "\uff89\055\uff89\056\uff89\073\uff89\074\uff89\100\uff89\101\uff89" +
    "\102\uff89\001\002\000\040\026\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\317\060\314\061\320\062\312\063\311\073\uff85" +
    "\074\uff85\100\uff85\101\uff85\102\uff85\110\321\001\002\000" +
    "\024\026\uff87\054\uff87\055\uff87\056\uff87\073\uff87\074\uff87" +
    "\100\uff87\101\uff87\102\uff87\001\002\000\016\042\164\043" +
    "\166\051\310\060\302\065\170\073\303\001\002\000\044" +
    "\026\ufe4a\051\ufe4a\054\ufe4a\055\ufe4a\056\ufe4a\057\ufe4a\060" +
    "\ufe4a\061\ufe4a\062\ufe4a\063\ufe4a\065\ufe4a\073\ufe4a\074\ufe4a" +
    "\100\ufe4a\101\ufe4a\102\ufe4a\110\ufe4a\001\002\000\046\026" +
    "\ufe4c\051\ufe4c\054\ufe4c\055\ufe4c\056\ufe4c\057\ufe4c\060\ufe4c" +
    "\061\ufe4c\062\ufe4c\063\ufe4c\065\ufe4c\073\ufe4c\074\ufe4c\100" +
    "\ufe4c\101\ufe4c\102\ufe4c\104\u010f\110\ufe4c\001\002\000\016" +
    "\042\164\043\166\051\310\060\302\065\170\073\303\001" +
    "\002\000\044\026\ufe4b\051\ufe4b\054\ufe4b\055\ufe4b\056\ufe4b" +
    "\057\ufe4b\060\ufe4b\061\ufe4b\062\ufe4b\063\ufe4b\065\ufe4b\073" +
    "\ufe4b\074\ufe4b\100\ufe4b\101\ufe4b\102\ufe4b\110\ufe4b\001\002" +
    "\000\004\074\u0112\001\002\000\006\074\u0114\104\u0113\001" +
    "\002\000\016\042\164\043\166\051\310\060\302\065\170" +
    "\073\303\001\002\000\044\026\ufe47\051\ufe47\054\ufe47\055" +
    "\ufe47\056\ufe47\057\ufe47\060\ufe47\061\ufe47\062\ufe47\063\ufe47" +
    "\065\ufe47\073\ufe47\074\ufe47\100\ufe47\101\ufe47\102\ufe47\110" +
    "\ufe47\001\002\000\044\026\ufe48\051\ufe48\054\ufe48\055\ufe48" +
    "\056\ufe48\057\ufe48\060\ufe48\061\ufe48\062\ufe48\063\ufe48\065" +
    "\ufe48\073\ufe48\074\ufe48\100\ufe48\101\ufe48\102\ufe48\110\ufe48" +
    "\001\002\000\004\074\uffa1\001\002\000\006\074\uffa7\101" +
    "\u0118\001\002\000\020\042\164\043\166\051\272\060\162" +
    "\064\273\065\170\073\163\001\002\000\004\074\uffa0\001" +
    "\002\000\020\042\164\043\166\051\272\060\162\064\273" +
    "\065\170\073\163\001\002\000\004\074\uffa3\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\230" +
    "\012\145\020\242\023\234\034\ufe96\035\240\051\155\102" +
    "\247\001\002\000\004\034\ufe91\001\002\000\020\042\164" +
    "\043\166\051\272\060\162\064\273\065\170\073\163\001" +
    "\002\000\004\074\uffa4\001\002\000\020\042\164\043\166" +
    "\051\272\060\162\064\273\065\170\073\163\001\002\000" +
    "\004\074\uffa2\001\002\000\024\005\221\011\230\012\145" +
    "\020\242\023\234\034\ufe88\035\240\051\155\102\247\001" +
    "\002\000\004\034\ufe87\001\002\000\004\074\u0126\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\221\011" +
    "\230\012\145\020\242\023\234\034\ufe86\035\240\051\155" +
    "\102\247\001\002\000\004\034\ufe85\001\002\000\004\034" +
    "\ufe90\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\221\011\230\012\145\020\242\023\234\034\ufe89\035" +
    "\240\051\155\102\247\001\002\000\004\034\ufe8a\001\002" +
    "\000\024\005\221\011\230\012\145\020\225\023\234\034" +
    "\ufd99\035\220\051\155\102\232\001\002\000\004\034\ufd98" +
    "\001\002\000\004\034\ufd91\001\002\000\004\054\u0131\001" +
    "\002\000\006\060\302\065\170\001\002\000\004\037\u0133" +
    "\001\002\000\006\060\302\065\170\001\002\000\004\047" +
    "\u0135\001\002\000\006\060\302\065\170\001\002\000\006" +
    "\100\041\102\040\001\002\000\022\005\u013a\011\u013e\012" +
    "\145\020\u013d\023\u0145\035\u0139\051\155\102\u0140\001\002" +
    "\000\024\005\u013a\011\u013e\012\145\020\u013d\023\u0145\032" +
    "\ufe60\035\u0139\051\155\102\u0140\001\002\000\006\011\u01f8" +
    "\023\u01f7\001\002\000\016\042\164\043\166\051\174\060" +
    "\162\065\170\073\163\001\002\000\024\005\u013a\011\u013e" +
    "\012\145\020\u013d\023\u0145\032\ufe63\035\u0139\051\155\102" +
    "\u0140\001\002\000\032\005\ufeca\011\ufeca\012\ufeca\013\ufeca" +
    "\020\ufeca\023\ufeca\027\ufeca\032\ufeca\035\ufeca\051\ufeca\102" +
    "\ufeca\107\ufeca\001\002\000\004\070\u01a3\001\002\000\004" +
    "\051\u0177\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\100\u0173\001\002\000\032\005\ufecb\011\ufecb\012\ufecb" +
    "\013\ufecb\020\ufecb\023\ufecb\027\ufecb\032\ufecb\035\ufecb\051" +
    "\ufecb\102\ufecb\107\ufecb\001\002\000\024\005\u013a\011\u013e" +
    "\012\145\020\u013d\023\u0145\032\ufe5a\035\u0139\051\155\102" +
    "\u0140\001\002\000\004\032\u016f\001\002\000\032\005\ufec9" +
    "\011\ufec9\012\ufec9\013\ufec9\020\ufec9\023\ufec9\027\ufec9\032" +
    "\ufec9\035\ufec9\051\ufec9\102\ufec9\107\ufec9\001\002\000\006" +
    "\024\161\036\160\001\002\000\016\042\164\043\166\051" +
    "\174\060\162\065\170\073\163\001\002\000\006\100\041" +
    "\102\040\001\002\000\022\005\221\011\230\012\145\020" +
    "\u014b\023\234\035\u0149\051\155\102\u014e\001\002\000\006" +
    "\011\u016a\023\u0169\001\002\000\024\005\221\011\230\012" +
    "\145\020\u014b\023\234\034\ufeaa\035\u0149\051\155\102\u014e" +
    "\001\002\000\004\070\u0159\001\002\000\024\005\221\011" +
    "\230\012\145\020\u014b\023\234\034\ufea9\035\u0149\051\155" +
    "\102\u014e\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\100\u0154\001\002\000\024\005\221\011\230\012\145" +
    "\020\u014b\023\234\034\ufea1\035\u0149\051\155\102\u014e\001" +
    "\002\000\004\034\u0151\001\002\000\006\100\041\102\040" +
    "\001\002\000\032\005\ufeac\011\ufeac\012\ufeac\013\ufeac\020" +
    "\ufeac\023\ufeac\027\ufeac\032\ufeac\035\ufeac\051\ufeac\102\ufeac" +
    "\107\ufeac\001\002\000\004\034\ufea0\001\002\000\024\005" +
    "\221\011\230\012\145\020\u014b\023\234\034\ufea8\035\u0149" +
    "\051\155\102\u014e\001\002\000\004\034\ufea7\001\002\000" +
    "\024\005\221\011\230\012\145\020\u014b\023\234\034\ufea3" +
    "\035\u0149\051\155\102\u014e\001\002\000\004\034\ufea2\001" +
    "\002\000\004\034\ufea4\001\002\000\006\021\u015b\111\u015a" +
    "\001\002\000\004\073\u0164\001\002\000\004\073\u015c\001" +
    "\002\000\022\042\164\043\166\051\272\060\162\064\273" +
    "\065\170\073\163\074\u015d\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\074\u015f\001\002\000\006\100\041" +
    "\102\040\001\002\000\024\005\221\011\230\012\145\020" +
    "\u014b\023\234\034\ufeab\035\u0149\051\155\102\u014e\001\002" +
    "\000\004\034\ufea6\001\002\000\024\005\221\011\230\012" +
    "\145\020\u014b\023\234\034\ufe9b\035\u0149\051\155\102\u014e" +
    "\001\002\000\004\034\ufe9a\001\002\000\004\074\u0165\001" +
    "\002\000\006\100\041\102\040\001\002\000\024\005\221" +
    "\011\230\012\145\020\u014b\023\234\034\ufe99\035\u0149\051" +
    "\155\102\u014e\001\002\000\004\034\ufe98\001\002\000\004" +
    "\034\ufea5\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\230" +
    "\012\145\020\u014b\023\234\034\ufe9c\035\u0149\051\155\102" +
    "\u014e\001\002\000\004\034\ufe9e\001\002\000\024\005\221" +
    "\011\230\012\145\020\u014b\023\234\034\ufe9d\035\u0149\051" +
    "\155\102\u014e\001\002\000\004\034\ufe9f\001\002\000\004" +
    "\051\u0170\001\002\000\006\100\041\102\040\001\002\000" +
    "\032\005\ufe65\011\ufe65\012\ufe65\013\ufe65\020\ufe65\023\ufe65" +
    "\027\ufe65\034\ufe65\035\ufe65\051\ufe65\102\ufe65\107\ufe65\001" +
    "\002\000\004\032\ufe59\001\002\000\024\005\u013a\011\u013e" +
    "\012\145\020\u013d\023\u0145\032\ufe62\035\u0139\051\155\102" +
    "\u0140\001\002\000\004\032\ufe61\001\002\000\024\005\u013a" +
    "\011\u013e\012\145\020\u013d\023\u0145\032\ufe5c\035\u0139\051" +
    "\155\102\u0140\001\002\000\004\032\ufe5b\001\002\000\004" +
    "\054\u0178\001\002\000\006\060\302\065\170\001\002\000" +
    "\004\037\u017a\001\002\000\006\060\302\065\170\001\002" +
    "\000\004\047\u017c\001\002\000\006\060\302\065\170\001" +
    "\002\000\006\100\041\102\040\001\002\000\022\005\u013a" +
    "\011\u013e\012\145\020\u0183\023\u0145\035\u0180\051\155\102" +
    "\u0186\001\002\000\024\005\u013a\011\u013e\012\145\020\u0183" +
    "\023\u0145\032\ufedb\035\u0180\051\155\102\u0186\001\002\000" +
    "\004\011\u019f\001\002\000\004\032\u019c\001\002\000\024" +
    "\005\u013a\011\u013e\012\145\020\u0183\023\u0145\032\ufedc\035" +
    "\u0180\051\155\102\u0186\001\002\000\004\070\u018c\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\u013a\011" +
    "\u013e\012\145\020\u0183\023\u0145\032\ufed3\035\u0180\051\155" +
    "\102\u0186\001\002\000\004\100\u0187\001\002\000\024\005" +
    "\u013a\011\u013e\012\145\020\u0183\023\u0145\032\ufed8\035\u0180" +
    "\051\155\102\u0186\001\002\000\004\032\ufed7\001\002\000" +
    "\004\032\ufed2\001\002\000\024\005\u013a\011\u013e\012\145" +
    "\020\u0183\023\u0145\032\ufed5\035\u0180\051\155\102\u0186\001" +
    "\002\000\004\032\ufed4\001\002\000\006\021\u018e\111\u018d" +
    "\001\002\000\004\073\u0197\001\002\000\004\073\u018f\001" +
    "\002\000\022\042\164\043\166\051\272\060\162\064\273" +
    "\065\170\073\163\074\u0190\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\074\u0192\001\002\000\006\100\041" +
    "\102\040\001\002\000\024\005\u013a\011\u013e\012\145\020" +
    "\u0183\023\u0145\032\ufedd\035\u0180\051\155\102\u0186\001\002" +
    "\000\004\032\ufeda\001\002\000\024\005\u013a\011\u013e\012" +
    "\145\020\u0183\023\u0145\032\ufecf\035\u0180\051\155\102\u0186" +
    "\001\002\000\004\032\ufece\001\002\000\004\074\u0198\001" +
    "\002\000\006\100\041\102\040\001\002\000\024\005\u013a" +
    "\011\u013e\012\145\020\u0183\023\u0145\032\ufecd\035\u0180\051" +
    "\155\102\u0186\001\002\000\004\032\ufecc\001\002\000\004" +
    "\032\ufed9\001\002\000\004\051\u019d\001\002\000\006\100" +
    "\041\102\040\001\002\000\036\003\ufede\005\ufede\011\ufede" +
    "\012\ufede\013\ufede\020\ufede\023\ufede\027\ufede\032\ufede\035" +
    "\ufede\051\ufede\100\ufede\102\ufede\107\ufede\001\002\000\006" +
    "\100\041\102\040\001\002\000\024\005\u013a\011\u013e\012" +
    "\145\020\u0183\023\u0145\032\ufed0\035\u0180\051\155\102\u0186" +
    "\001\002\000\004\032\ufed1\001\002\000\004\032\ufed6\001" +
    "\002\000\006\021\u01a5\111\u01a4\001\002\000\004\073\u01ae" +
    "\001\002\000\004\073\u01a6\001\002\000\022\042\164\043" +
    "\166\051\272\060\162\064\273\065\170\073\163\074\u01a7" +
    "\001\002\000\006\100\041\102\040\001\002\000\004\074" +
    "\u01a9\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\u013a\011\u013e\012\145\020\u013d\023\u0145\032\ufe64\035" +
    "\u0139\051\155\102\u0140\001\002\000\004\032\ufe5f\001\002" +
    "\000\024\005\u013a\011\u013e\012\145\020\u013d\023\u0145\032" +
    "\ufe54\035\u0139\051\155\102\u0140\001\002\000\004\032\ufe53" +
    "\001\002\000\004\074\u01af\001\002\000\006\100\041\102" +
    "\040\001\002\000\024\005\u013a\011\u013e\012\145\020\u013d" +
    "\023\u0145\032\ufe52\035\u0139\051\155\102\u0140\001\002\000" +
    "\004\032\ufe51\001\002\000\004\032\ufe5e\001\002\000\004" +
    "\026\u01b4\001\002\000\006\100\041\102\040\001\002\000" +
    "\022\005\u013a\011\u013e\012\145\020\u01b9\023\u0145\035\u01b7" +
    "\051\155\102\u01bc\001\002\000\030\005\u013a\011\u013e\012" +
    "\145\013\ufec6\020\u01b9\023\u0145\027\ufec6\035\u01b7\051\155" +
    "\102\u01bc\107\ufec6\001\002\000\006\010\u01f0\011\u01f1\001" +
    "\002\000\030\005\u013a\011\u013e\012\145\013\ufec7\020\u01b9" +
    "\023\u0145\027\ufec7\035\u01b7\051\155\102\u01bc\107\ufec7\001" +
    "\002\000\004\070\u01e0\001\002\000\006\100\041\102\040" +
    "\001\002\000\030\005\u013a\011\u013e\012\145\013\ufebe\020" +
    "\u01b9\023\u0145\027\ufebe\035\u01b7\051\155\102\u01bc\107\ufebe" +
    "\001\002\000\004\100\u01db\001\002\000\010\013\u01c3\027" +
    "\u01c1\107\u01be\001\002\000\016\042\uff3f\043\uff3f\051\uff3f" +
    "\060\uff3f\065\uff3f\073\uff3f\001\002\000\016\042\164\043" +
    "\166\051\174\060\162\065\170\073\163\001\002\000\004" +
    "\013\u01d1\001\002\000\010\005\u01cb\100\041\102\040\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\005\u01c4" +
    "\001\002\000\006\100\041\102\040\001\002\000\032\005" +
    "\ufeb4\011\ufeb4\012\ufeb4\013\ufeb4\020\ufeb4\023\ufeb4\027\ufeb4" +
    "\032\ufeb4\035\ufeb4\051\ufeb4\102\ufeb4\107\ufeb4\001\002\000" +
    "\022\005\u013a\011\u013e\012\145\020\u01b9\023\u0145\035\u01b7" +
    "\051\155\102\u01bc\001\002\000\004\013\u01c8\001\002\000" +
    "\004\005\u01c9\001\002\000\006\100\041\102\040\001\002" +
    "\000\032\005\ufeb2\011\ufeb2\012\ufeb2\013\ufeb2\020\ufeb2\023" +
    "\ufeb2\027\ufeb2\032\ufeb2\035\ufeb2\051\ufeb2\102\ufeb2\107\ufeb2" +
    "\001\002\000\016\042\uff40\043\uff40\051\uff40\060\uff40\065" +
    "\uff40\073\uff40\001\002\000\022\005\u013a\011\u013e\012\145" +
    "\020\u01b9\023\u0145\035\u01b7\051\155\102\u01bc\001\002\000" +
    "\004\013\u01ce\001\002\000\004\005\u01cf\001\002\000\006" +
    "\100\041\102\040\001\002\000\032\005\ufeb3\011\ufeb3\012" +
    "\ufeb3\013\ufeb3\020\ufeb3\023\ufeb3\027\ufeb3\032\ufeb3\035\ufeb3" +
    "\051\ufeb3\102\ufeb3\107\ufeb3\001\002\000\004\005\u01d2\001" +
    "\002\000\006\100\041\102\040\001\002\000\032\005\ufeb1" +
    "\011\ufeb1\012\ufeb1\013\ufeb1\020\ufeb1\023\ufeb1\027\ufeb1\032" +
    "\ufeb1\035\ufeb1\051\ufeb1\102\ufeb1\107\ufeb1\001\002\000\004" +
    "\026\u01d5\001\002\000\006\100\041\102\040\001\002\000" +
    "\022\005\u013a\011\u013e\012\145\020\u01b9\023\u0145\035\u01b7" +
    "\051\155\102\u01bc\001\002\000\010\013\ufeae\027\u01d9\107" +
    "\u01be\001\002\000\004\013\ufead\001\002\000\010\005\u01cb" +
    "\100\ufeb0\102\ufeb0\001\002\000\006\100\ufeaf\102\ufeaf\001" +
    "\002\000\030\005\u013a\011\u013e\012\145\013\ufec3\020\u01b9" +
    "\023\u0145\027\ufec3\035\u01b7\051\155\102\u01bc\107\ufec3\001" +
    "\002\000\010\013\ufec2\027\ufec2\107\ufec2\001\002\000\010" +
    "\013\ufebd\027\ufebd\107\ufebd\001\002\000\030\005\u013a\011" +
    "\u013e\012\145\013\ufec0\020\u01b9\023\u0145\027\ufec0\035\u01b7" +
    "\051\155\102\u01bc\107\ufec0\001\002\000\010\013\ufebf\027" +
    "\ufebf\107\ufebf\001\002\000\006\021\u01e2\111\u01e1\001\002" +
    "\000\004\073\u01eb\001\002\000\004\073\u01e3\001\002\000" +
    "\022\042\164\043\166\051\272\060\162\064\273\065\170" +
    "\073\163\074\u01e4\001\002\000\006\100\041\102\040\001" +
    "\002\000\004\074\u01e6\001\002\000\006\100\041\102\040" +
    "\001\002\000\030\005\u013a\011\u013e\012\145\013\ufec8\020" +
    "\u01b9\023\u0145\027\ufec8\035\u01b7\051\155\102\u01bc\107\ufec8" +
    "\001\002\000\010\013\ufec5\027\ufec5\107\ufec5\001\002\000" +
    "\030\005\u013a\011\u013e\012\145\013\ufeb8\020\u01b9\023\u0145" +
    "\027\ufeb8\035\u01b7\051\155\102\u01bc\107\ufeb8\001\002\000" +
    "\010\013\ufeb7\027\ufeb7\107\ufeb7\001\002\000\004\074\u01ec" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\u013a\011\u013e\012\145\013\ufeb6\020\u01b9\023\u0145\027\ufeb6" +
    "\035\u01b7\051\155\102\u01bc\107\ufeb6\001\002\000\010\013" +
    "\ufeb5\027\ufeb5\107\ufeb5\001\002\000\010\013\ufec4\027\ufec4" +
    "\107\ufec4\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\030\005\u013a\011\u013e" +
    "\012\145\013\ufeba\020\u01b9\023\u0145\027\ufeba\035\u01b7\051" +
    "\155\102\u01bc\107\ufeba\001\002\000\010\013\ufebc\027\ufebc" +
    "\107\ufebc\001\002\000\030\005\u013a\011\u013e\012\145\013" +
    "\ufeb9\020\u01b9\023\u0145\027\ufeb9\035\u01b7\051\155\102\u01bc" +
    "\107\ufeb9\001\002\000\010\013\ufebb\027\ufebb\107\ufebb\001" +
    "\002\000\010\013\ufec1\027\ufec1\107\ufec1\001\002\000\006" +
    "\100\041\102\040\001\002\000\006\100\041\102\040\001" +
    "\002\000\024\005\u013a\011\u013e\012\145\020\u013d\023\u0145" +
    "\032\ufe56\035\u0139\051\155\102\u0140\001\002\000\004\032" +
    "\ufe58\001\002\000\024\005\u013a\011\u013e\012\145\020\u013d" +
    "\023\u0145\032\ufe55\035\u0139\051\155\102\u0140\001\002\000" +
    "\004\032\ufe57\001\002\000\004\032\ufe5d\001\002\000\024" +
    "\005\221\011\230\012\145\020\225\023\234\034\ufd94\035" +
    "\220\051\155\102\232\001\002\000\004\034\ufd93\001\002" +
    "\000\004\034\ufd95\001\002\000\006\021\u0203\111\u0202\001" +
    "\002\000\004\073\u020c\001\002\000\004\073\u0204\001\002" +
    "\000\022\042\164\043\166\051\272\060\162\064\273\065" +
    "\170\073\163\074\u0205\001\002\000\006\100\041\102\040" +
    "\001\002\000\004\074\u0207\001\002\000\006\100\041\102" +
    "\040\001\002\000\024\005\221\011\230\012\145\020\225" +
    "\023\234\034\ufd9c\035\220\051\155\102\232\001\002\000" +
    "\004\034\ufd97\001\002\000\024\005\221\011\230\012\145" +
    "\020\225\023\234\034\ufd8a\035\220\051\155\102\232\001" +
    "\002\000\004\034\ufd89\001\002\000\004\074\u020d\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\221\011" +
    "\230\012\145\020\225\023\234\034\ufd88\035\220\051\155" +
    "\102\232\001\002\000\004\034\ufd87\001\002\000\006\100" +
    "\041\102\040\001\002\000\034\005\ufd9d\011\ufd9d\012\ufd9d" +
    "\013\ufd9d\020\ufd9d\023\ufd9d\027\ufd9d\032\ufd9d\034\ufd9d\035" +
    "\ufd9d\051\ufd9d\102\ufd9d\107\ufd9d\001\002\000\004\034\ufd96" +
    "\001\002\000\004\026\u0214\001\002\000\006\100\041\102" +
    "\040\001\002\000\022\005\221\011\230\012\145\020\u0218" +
    "\023\234\035\u0216\051\155\102\u021b\001\002\000\006\010" +
    "\u0250\023\u024f\001\002\000\030\005\221\011\230\012\145" +
    "\013\ufe80\020\u0218\023\234\027\ufe80\035\u0216\051\155\102" +
    "\u021b\107\ufe80\001\002\000\004\070\u023f\001\002\000\030" +
    "\005\221\011\230\012\145\013\ufe7f\020\u0218\023\234\027" +
    "\ufe7f\035\u0216\051\155\102\u021b\107\ufe7f\001\002\000\006" +
    "\100\041\102\040\001\002\000\004\100\u023a\001\002\000" +
    "\030\005\221\011\230\012\145\013\ufe77\020\u0218\023\234" +
    "\027\ufe77\035\u0216\051\155\102\u021b\107\ufe77\001\002\000" +
    "\010\013\u0222\027\u021f\107\u01be\001\002\000\016\042\164" +
    "\043\166\051\174\060\162\065\170\073\163\001\002\000" +
    "\010\005\u01cb\100\041\102\040\001\002\000\006\100\041" +
    "\102\040\001\002\000\004\013\u0225\001\002\000\004\005" +
    "\u0223\001\002\000\006\100\041\102\040\001\002\000\032" +
    "\005\ufe6d\011\ufe6d\012\ufe6d\013\ufe6d\020\ufe6d\023\ufe6d\027" +
    "\ufe6d\034\ufe6d\035\ufe6d\051\ufe6d\102\ufe6d\107\ufe6d\001\002" +
    "\000\004\005\u0226\001\002\000\006\100\041\102\040\001" +
    "\002\000\032\005\ufe6a\011\ufe6a\012\ufe6a\013\ufe6a\020\ufe6a" +
    "\023\ufe6a\027\ufe6a\034\ufe6a\035\ufe6a\051\ufe6a\102\ufe6a\107" +
    "\ufe6a\001\002\000\022\005\221\011\230\012\145\020\u0218" +
    "\023\234\035\u0216\051\155\102\u021b\001\002\000\004\013" +
    "\u022a\001\002\000\004\005\u022b\001\002\000\006\100\041" +
    "\102\040\001\002\000\032\005\ufe6b\011\ufe6b\012\ufe6b\013" +
    "\ufe6b\020\ufe6b\023\ufe6b\027\ufe6b\034\ufe6b\035\ufe6b\051\ufe6b" +
    "\102\ufe6b\107\ufe6b\001\002\000\022\005\221\011\230\012" +
    "\145\020\u0218\023\234\035\u0216\051\155\102\u021b\001\002" +
    "\000\004\013\u022f\001\002\000\004\005\u0230\001\002\000" +
    "\006\100\041\102\040\001\002\000\032\005\ufe6c\011\ufe6c" +
    "\012\ufe6c\013\ufe6c\020\ufe6c\023\ufe6c\027\ufe6c\034\ufe6c\035" +
    "\ufe6c\051\ufe6c\102\ufe6c\107\ufe6c\001\002\000\004\026\u0233" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\221\011\230\012\145\020\u0218\023\234\035\u0216\051\155" +
    "\102\u021b\001\002\000\010\013\ufe67\027\u0236\107\u01be\001" +
    "\002\000\010\005\u01cb\100\ufe69\102\ufe69\001\002\000\006" +
    "\100\ufe68\102\ufe68\001\002\000\004\013\ufe66\001\002\000" +
    "\010\013\ufe76\027\ufe76\107\ufe76\001\002\000\030\005\221" +
    "\011\230\012\145\013\ufe7e\020\u0218\023\234\027\ufe7e\035" +
    "\u0216\051\155\102\u021b\107\ufe7e\001\002\000\010\013\ufe7d" +
    "\027\ufe7d\107\ufe7d\001\002\000\030\005\221\011\230\012" +
    "\145\013\ufe79\020\u0218\023\234\027\ufe79\035\u0216\051\155" +
    "\102\u021b\107\ufe79\001\002\000\010\013\ufe78\027\ufe78\107" +
    "\ufe78\001\002\000\010\013\ufe7a\027\ufe7a\107\ufe7a\001\002" +
    "\000\006\021\u0241\111\u0240\001\002\000\004\073\u024a\001" +
    "\002\000\004\073\u0242\001\002\000\022\042\164\043\166" +
    "\051\272\060\162\064\273\065\170\073\163\074\u0243\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\074\u0245" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\221\011\230\012\145\013\ufe81\020\u0218\023\234\027\ufe81" +
    "\035\u0216\051\155\102\u021b\107\ufe81\001\002\000\010\013" +
    "\ufe7c\027\ufe7c\107\ufe7c\001\002\000\030\005\221\011\230" +
    "\012\145\013\ufe71\020\u0218\023\234\027\ufe71\035\u0216\051" +
    "\155\102\u021b\107\ufe71\001\002\000\010\013\ufe70\027\ufe70" +
    "\107\ufe70\001\002\000\004\074\u024b\001\002\000\006\100" +
    "\041\102\040\001\002\000\030\005\221\011\230\012\145" +
    "\013\ufe6f\020\u0218\023\234\027\ufe6f\035\u0216\051\155\102" +
    "\u021b\107\ufe6f\001\002\000\010\013\ufe6e\027\ufe6e\107\ufe6e" +
    "\001\002\000\010\013\ufe7b\027\ufe7b\107\ufe7b\001\002\000" +
    "\006\100\041\102\040\001\002\000\006\100\041\102\040" +
    "\001\002\000\030\005\221\011\230\012\145\013\ufe72\020" +
    "\u0218\023\234\027\ufe72\035\u0216\051\155\102\u021b\107\ufe72" +
    "\001\002\000\010\013\ufe74\027\ufe74\107\ufe74\001\002\000" +
    "\030\005\221\011\230\012\145\013\ufe73\020\u0218\023\234" +
    "\027\ufe73\035\u0216\051\155\102\u021b\107\ufe73\001\002\000" +
    "\010\013\ufe75\027\ufe75\107\ufe75\001\002\000\006\100\041" +
    "\102\040\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\230" +
    "\012\145\020\225\023\234\034\ufd8c\035\220\051\155\102" +
    "\232\001\002\000\004\034\ufd8f\001\002\000\024\005\221" +
    "\011\230\012\145\020\225\023\234\034\ufd8b\035\220\051" +
    "\155\102\232\001\002\000\004\034\ufd8e\001\002\000\024" +
    "\005\221\011\230\012\145\020\225\023\234\034\ufd8d\035" +
    "\220\051\155\102\232\001\002\000\004\034\ufd90\001\002" +
    "\000\004\034\ufd7e\001\002\000\024\005\202\011\146\012" +
    "\145\020\206\023\213\034\ufd83\035\200\051\155\102\211" +
    "\001\002\000\004\034\ufd82\001\002\000\004\034\ufd7a\001" +
    "\002\000\024\005\202\011\146\012\145\020\206\023\213" +
    "\034\ufd7d\035\200\051\155\102\211\001\002\000\004\034" +
    "\ufd7c\001\002\000\006\021\u0266\111\u0265\001\002\000\004" +
    "\073\u026f\001\002\000\004\073\u0267\001\002\000\022\042" +
    "\164\043\166\051\272\060\162\064\273\065\170\073\163" +
    "\074\u0268\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\074\u026a\001\002\000\006\100\041\102\040\001\002" +
    "\000\024\005\202\011\146\012\145\020\206\023\213\034" +
    "\ufd85\035\200\051\155\102\211\001\002\000\004\034\ufd80" +
    "\001\002\000\024\005\202\011\146\012\145\020\206\023" +
    "\213\034\ufd75\035\200\051\155\102\211\001\002\000\004" +
    "\034\ufd74\001\002\000\004\074\u0270\001\002\000\006\100" +
    "\041\102\040\001\002\000\024\005\202\011\146\012\145" +
    "\020\206\023\213\034\ufd73\035\200\051\155\102\211\001" +
    "\002\000\004\034\ufd72\001\002\000\006\100\041\102\040" +
    "\001\002\000\032\003\ufd86\005\ufd86\011\ufd86\012\ufd86\013" +
    "\ufd86\020\ufd86\023\ufd86\027\ufd86\035\ufd86\051\ufd86\102\ufd86" +
    "\107\ufd86\001\002\000\004\034\ufd7f\001\002\000\004\026" +
    "\u0277\001\002\000\006\100\041\102\040\001\002\000\022" +
    "\005\202\011\146\012\145\020\u027b\023\213\035\u0279\051" +
    "\155\102\u027d\001\002\000\006\011\u02d3\030\u02d2\001\002" +
    "\000\030\005\202\011\146\012\145\013\ufdb4\020\u027b\023" +
    "\213\027\ufdb4\035\u0279\051\155\102\u027d\107\ufdb4\001\002" +
    "\000\004\070\u02c2\001\002\000\006\100\041\102\040\001" +
    "\002\000\004\100\u029e\001\002\000\030\005\202\011\146" +
    "\012\145\013\ufdab\020\u027b\023\213\027\ufdab\035\u0279\051" +
    "\155\102\u027d\107\ufdab\001\002\000\010\013\u0286\027\u0283" +
    "\107\u01be\001\002\000\030\005\202\011\146\012\145\013" +
    "\ufdb1\020\u027b\023\213\027\ufdb1\035\u0279\051\155\102\u027d" +
    "\107\ufdb1\001\002\000\010\013\ufdae\027\ufdae\107\ufdae\001" +
    "\002\000\016\042\164\043\166\051\174\060\162\065\170" +
    "\073\163\001\002\000\010\005\u01cb\100\041\102\040\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\013\u0289" +
    "\001\002\000\004\005\u0287\001\002\000\006\100\041\102" +
    "\040\001\002\000\034\005\ufdb9\011\ufdb9\012\ufdb9\013\ufdb9" +
    "\020\ufdb9\023\ufdb9\027\ufdb9\032\ufdb9\034\ufdb9\035\ufdb9\051" +
    "\ufdb9\102\ufdb9\107\ufdb9\001\002\000\004\005\u028a\001\002" +
    "\000\006\100\041\102\040\001\002\000\034\005\ufdb6\011" +
    "\ufdb6\012\ufdb6\013\ufdb6\020\ufdb6\023\ufdb6\027\ufdb6\032\ufdb6" +
    "\034\ufdb6\035\ufdb6\051\ufdb6\102\ufdb6\107\ufdb6\001\002\000" +
    "\022\005\202\011\146\012\145\020\u027b\023\213\035\u0279" +
    "\051\155\102\u027d\001\002\000\004\013\u028e\001\002\000" +
    "\004\005\u028f\001\002\000\006\100\041\102\040\001\002" +
    "\000\034\005\ufdb7\011\ufdb7\012\ufdb7\013\ufdb7\020\ufdb7\023" +
    "\ufdb7\027\ufdb7\032\ufdb7\034\ufdb7\035\ufdb7\051\ufdb7\102\ufdb7" +
    "\107\ufdb7\001\002\000\022\005\202\011\146\012\145\020" +
    "\u027b\023\213\035\u0279\051\155\102\u027d\001\002\000\004" +
    "\013\u0293\001\002\000\004\005\u0294\001\002\000\006\100" +
    "\041\102\040\001\002\000\034\005\ufdb8\011\ufdb8\012\ufdb8" +
    "\013\ufdb8\020\ufdb8\023\ufdb8\027\ufdb8\032\ufdb8\034\ufdb8\035" +
    "\ufdb8\051\ufdb8\102\ufdb8\107\ufdb8\001\002\000\004\026\u0297" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\202\011\146\012\145\020\u027b\023\213\035\u0279\051\155" +
    "\102\u027d\001\002\000\010\013\ufd9f\027\u029a\107\u01be\001" +
    "\002\000\010\005\u01cb\100\ufda1\102\ufda1\001\002\000\006" +
    "\100\ufda0\102\ufda0\001\002\000\004\013\ufd9e\001\002\000" +
    "\010\013\ufdaa\027\ufdaa\107\ufdaa\001\002\000\030\005\202" +
    "\011\146\012\145\013\ufdb3\020\u027b\023\213\027\ufdb3\035" +
    "\u0279\051\155\102\u027d\107\ufdb3\001\002\000\010\013\ufdb2" +
    "\027\ufdb2\107\ufdb2\001\002\000\030\005\141\011\146\012" +
    "\145\013\ufdad\020\u02a4\023\156\027\ufdad\035\u02a2\051\155" +
    "\102\u02a7\107\ufdad\001\002\000\010\013\ufdac\027\ufdac\107" +
    "\ufdac\001\002\000\004\030\u02bf\001\002\000\030\005\141" +
    "\011\146\012\145\013\ufe0a\020\u02a4\023\156\027\ufe0a\035" +
    "\u02a2\051\155\102\u02a7\107\ufe0a\001\002\000\004\070\u02af" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\141\011\146\012\145\013\ufe01\020\u02a4\023\156\027\ufe01" +
    "\035\u02a2\051\155\102\u02a7\107\ufe01\001\002\000\004\100" +
    "\u02aa\001\002\000\030\005\141\011\146\012\145\013\ufe07" +
    "\020\u02a4\023\156\027\ufe07\035\u02a2\051\155\102\u02a7\107" +
    "\ufe07\001\002\000\010\013\ufe04\027\ufe04\107\ufe04\001\002" +
    "\000\030\005\141\011\146\012\145\013\ufe09\020\u02a4\023" +
    "\156\027\ufe09\035\u02a2\051\155\102\u02a7\107\ufe09\001\002" +
    "\000\010\013\ufe08\027\ufe08\107\ufe08\001\002\000\010\013" +
    "\ufe00\027\ufe00\107\ufe00\001\002\000\030\005\141\011\146" +
    "\012\145\013\ufe03\020\u02a4\023\156\027\ufe03\035\u02a2\051" +
    "\155\102\u02a7\107\ufe03\001\002\000\010\013\ufe02\027\ufe02" +
    "\107\ufe02\001\002\000\006\021\u02b1\111\u02b0\001\002\000" +
    "\004\073\u02ba\001\002\000\004\073\u02b2\001\002\000\022" +
    "\042\164\043\166\051\272\060\162\064\273\065\170\073" +
    "\163\074\u02b3\001\002\000\006\100\041\102\040\001\002" +
    "\000\004\074\u02b5\001\002\000\006\100\041\102\040\001" +
    "\002\000\030\005\141\011\146\012\145\013\ufe0b\020\u02a4" +
    "\023\156\027\ufe0b\035\u02a2\051\155\102\u02a7\107\ufe0b\001" +
    "\002\000\010\013\ufe06\027\ufe06\107\ufe06\001\002\000\030" +
    "\005\141\011\146\012\145\013\ufdfd\020\u02a4\023\156\027" +
    "\ufdfd\035\u02a2\051\155\102\u02a7\107\ufdfd\001\002\000\010" +
    "\013\ufdfc\027\ufdfc\107\ufdfc\001\002\000\004\074\u02bb\001" +
    "\002\000\006\100\041\102\040\001\002\000\030\005\141" +
    "\011\146\012\145\013\ufdfb\020\u02a4\023\156\027\ufdfb\035" +
    "\u02a2\051\155\102\u02a7\107\ufdfb\001\002\000\010\013\ufdfa" +
    "\027\ufdfa\107\ufdfa\001\002\000\010\013\ufe05\027\ufe05\107" +
    "\ufe05\001\002\000\006\100\041\102\040\001\002\000\030" +
    "\005\141\011\146\012\145\013\ufdfe\020\u02a4\023\156\027" +
    "\ufdfe\035\u02a2\051\155\102\u02a7\107\ufdfe\001\002\000\010" +
    "\013\ufdff\027\ufdff\107\ufdff\001\002\000\006\021\u02c4\111" +
    "\u02c3\001\002\000\004\073\u02cd\001\002\000\004\073\u02c5" +
    "\001\002\000\022\042\164\043\166\051\272\060\162\064" +
    "\273\065\170\073\163\074\u02c6\001\002\000\006\100\041" +
    "\102\040\001\002\000\004\074\u02c8\001\002\000\006\100" +
    "\041\102\040\001\002\000\030\005\202\011\146\012\145" +
    "\013\ufdb5\020\u027b\023\213\027\ufdb5\035\u0279\051\155\102" +
    "\u027d\107\ufdb5\001\002\000\010\013\ufdb0\027\ufdb0\107\ufdb0" +
    "\001\002\000\030\005\202\011\146\012\145\013\ufda5\020" +
    "\u027b\023\213\027\ufda5\035\u0279\051\155\102\u027d\107\ufda5" +
    "\001\002\000\010\013\ufda4\027\ufda4\107\ufda4\001\002\000" +
    "\004\074\u02ce\001\002\000\006\100\041\102\040\001\002" +
    "\000\030\005\202\011\146\012\145\013\ufda3\020\u027b\023" +
    "\213\027\ufda3\035\u0279\051\155\102\u027d\107\ufda3\001\002" +
    "\000\010\013\ufda2\027\ufda2\107\ufda2\001\002\000\010\013" +
    "\ufdaf\027\ufdaf\107\ufdaf\001\002\000\006\100\041\102\040" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\202\011\146\012\145\013\ufda6\020\u027b\023\213\027\ufda6" +
    "\035\u0279\051\155\102\u027d\107\ufda6\001\002\000\010\013" +
    "\ufda7\027\ufda7\107\ufda7\001\002\000\030\005\202\011\146" +
    "\012\145\013\ufda8\020\u027b\023\213\027\ufda8\035\u0279\051" +
    "\155\102\u027d\107\ufda8\001\002\000\010\013\ufda9\027\ufda9" +
    "\107\ufda9\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\202\011\146" +
    "\012\145\020\206\023\213\034\ufd76\035\200\051\155\102" +
    "\211\001\002\000\004\034\ufd78\001\002\000\024\005\202" +
    "\011\146\012\145\020\206\023\213\034\ufd77\035\200\051" +
    "\155\102\211\001\002\000\004\034\ufd79\001\002\000\020" +
    "\042\ufee1\043\ufee1\051\ufee1\060\ufee1\064\ufee1\065\ufee1\073" +
    "\ufee1\001\002\000\022\042\ufedf\043\ufedf\051\ufedf\054\u02e9" +
    "\060\ufedf\064\ufedf\065\ufedf\073\ufedf\001\002\000\022\042" +
    "\ufee0\043\ufee0\051\ufee0\054\u02e8\060\ufee0\064\ufee0\065\ufee0" +
    "\073\ufee0\001\002\000\020\042\164\043\166\051\u02e6\060" +
    "\162\064\u02e7\065\170\073\163\001\002\000\010\026\ufefe" +
    "\100\ufefe\102\ufefe\001\002\000\026\026\ufeff\057\uff9f\060" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\100\ufeff\102\ufeff" +
    "\110\uff9f\001\002\000\026\026\ufeeb\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\073\uff9d\100\ufeeb\102\ufeeb\110\uff9d" +
    "\001\002\000\012\026\ufefd\073\330\100\ufefd\102\ufefd\001" +
    "\002\000\026\026\uff00\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\073\300\100\uff00\102\uff00\110\uff9e\001\002\000" +
    "\010\026\ufefc\100\ufefc\102\ufefc\001\002\000\020\042\ufee3" +
    "\043\ufee3\051\ufee3\060\ufee3\064\ufee3\065\ufee3\073\ufee3\001" +
    "\002\000\020\042\ufee2\043\ufee2\051\ufee2\060\ufee2\064\ufee2" +
    "\065\ufee2\073\ufee2\001\002\000\020\042\164\043\166\051" +
    "\u02f0\060\162\064\u02ef\065\170\073\163\001\002\000\010" +
    "\026\ufef8\100\ufef8\102\ufef8\001\002\000\026\026\ufefb\057" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\100\ufefb" +
    "\102\ufefb\110\uff9f\001\002\000\026\026\ufee9\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\ufee9\102\ufee9" +
    "\110\uff9d\001\002\000\012\026\ufefa\073\330\100\ufefa\102" +
    "\ufefa\001\002\000\010\026\ufef7\100\ufef7\102\ufef7\001\002" +
    "\000\026\026\ufef9\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\073\300\100\ufef9\102\ufef9\110\uff9e\001\002\000\020" +
    "\042\164\043\166\051\u02f6\060\162\064\u02f5\065\170\073" +
    "\163\001\002\000\010\026\ufee8\100\ufee8\102\ufee8\001\002" +
    "\000\026\026\ufee6\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\073\uff9f\100\ufee6\102\ufee6\110\uff9f\001\002\000\012" +
    "\026\ufee4\073\330\100\ufee4\102\ufee4\001\002\000\010\026" +
    "\ufee5\100\ufee5\102\ufee5\001\002\000\026\026\ufee7\057\uff9e" +
    "\060\uff9e\061\uff9e\062\uff9e\063\uff9e\073\300\100\ufee7\102" +
    "\ufee7\110\uff9e\001\002\000\020\042\164\043\166\051\u02fd" +
    "\060\162\064\u02fc\065\170\073\163\001\002\000\010\026" +
    "\ufeee\100\ufeee\102\ufeee\001\002\000\026\026\ufef1\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\100\ufef1\102" +
    "\ufef1\110\uff9f\001\002\000\026\026\ufeea\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\ufeea\102\ufeea\110" +
    "\uff9d\001\002\000\012\026\ufeef\073\330\100\ufeef\102\ufeef" +
    "\001\002\000\010\026\ufeed\100\ufeed\102\ufeed\001\002\000" +
    "\026\026\ufef0\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\073\300\100\ufef0\102\ufef0\110\uff9e\001\002\000\020\042" +
    "\164\043\166\051\u0304\060\162\064\u0303\065\170\073\163" +
    "\001\002\000\010\026\ufef6\100\ufef6\102\ufef6\001\002\000" +
    "\026\026\ufef5\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\073\uff9f\100\ufef5\102\ufef5\110\uff9f\001\002\000\026\026" +
    "\ufeec\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d" +
    "\100\ufeec\102\ufeec\110\uff9d\001\002\000\012\026\ufef3\073" +
    "\330\100\ufef3\102\ufef3\001\002\000\010\026\ufef2\100\ufef2" +
    "\102\ufef2\001\002\000\026\026\ufef4\057\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\073\300\100\ufef4\102\ufef4\110\uff9e" +
    "\001\002\000\010\051\353\065\352\073\355\001\002\000" +
    "\022\057\317\060\314\061\320\062\312\063\311\073\342" +
    "\074\u030e\110\321\001\002\000\006\073\330\074\u0308\001" +
    "\002\000\044\026\uff9b\051\325\054\uff9b\055\uff9b\056\uff9b" +
    "\057\317\060\334\061\320\062\312\063\311\065\170\073" +
    "\uff9b\074\uff9b\100\uff9b\101\uff9b\102\uff9b\110\321\001\002" +
    "\000\012\051\325\060\162\065\170\073\163\001\002\000" +
    "\024\026\uff99\054\uff99\055\uff99\056\uff99\073\uff99\074\uff99" +
    "\100\uff99\101\uff99\102\uff99\001\002\000\040\026\uff94\054" +
    "\uff94\055\uff94\056\uff94\057\317\060\314\061\320\062\312" +
    "\063\311\073\uff94\074\uff94\100\uff94\101\uff94\102\uff94\110" +
    "\321\001\002\000\040\026\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\317\060\314\061\320\062\312\063\311\073\uff93\074" +
    "\uff93\100\uff93\101\uff93\102\uff93\110\321\001\002\000\024" +
    "\026\uff97\054\uff97\055\uff97\056\uff97\073\uff97\074\uff97\100" +
    "\uff97\101\uff97\102\uff97\001\002\000\044\026\uff8c\051\325" +
    "\054\uff8c\055\uff8c\056\uff8c\057\317\060\334\061\320\062" +
    "\312\063\311\065\170\073\uff8c\074\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\110\321\001\002\000\012\051\325\060\162\065" +
    "\170\073\163\001\002\000\040\026\uff83\054\uff83\055\uff83" +
    "\056\uff83\057\317\060\314\061\320\062\312\063\311\073" +
    "\uff83\074\uff83\100\uff83\101\uff83\102\uff83\110\321\001\002" +
    "\000\024\026\uff8a\054\uff8a\055\uff8a\056\uff8a\073\uff8a\074" +
    "\uff8a\100\uff8a\101\uff8a\102\uff8a\001\002\000\040\026\uff86" +
    "\054\uff86\055\uff86\056\uff86\057\317\060\314\061\320\062" +
    "\312\063\311\073\uff86\074\uff86\100\uff86\101\uff86\102\uff86" +
    "\110\321\001\002\000\024\026\uff88\054\uff88\055\uff88\056" +
    "\uff88\073\uff88\074\uff88\100\uff88\101\uff88\102\uff88\001\002" +
    "\000\026\051\325\057\317\060\334\061\320\062\312\063" +
    "\311\065\170\073\163\074\u0315\110\321\001\002\000\024" +
    "\026\uff79\054\uff79\055\uff79\056\uff79\073\uff79\074\uff79\100" +
    "\uff79\101\uff79\102\uff79\001\002\000\020\042\164\043\166" +
    "\051\310\060\302\065\170\073\303\074\301\001\002\000" +
    "\004\051\u033a\001\002\000\036\003\uffb3\005\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\020\uffb3\023\uffb3\027\uffb3\032\uffb3\034" +
    "\uffb3\035\uffb3\051\uffb3\102\uffb3\107\uffb3\001\002\000\004" +
    "\100\u0339\001\002\000\010\100\041\102\040\104\u0330\001" +
    "\002\000\022\020\u031d\042\164\043\166\051\u0324\060\162" +
    "\064\u0323\065\170\073\163\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\070\u032b\001\002\000\024\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\100\041\102" +
    "\040\110\uff9f\001\002\000\024\057\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\073\uff9d\100\041\102\040\110\uff9d\001" +
    "\002\000\036\003\uff52\005\uff52\011\uff52\012\uff52\013\uff52" +
    "\020\uff52\023\uff52\027\uff52\032\uff52\034\uff52\035\uff52\051" +
    "\uff52\102\uff52\107\uff52\001\002\000\006\100\041\102\040" +
    "\001\002\000\010\073\330\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\036\003\u0319\042\164" +
    "\043\166\051\310\057\uff9e\060\302\061\uff9e\062\uff9e\063" +
    "\uff9e\065\170\073\u0316\100\041\102\040\110\uff9e\001\002" +
    "\000\036\003\uff65\005\uff65\011\uff65\012\uff65\013\uff65\020" +
    "\uff65\023\uff65\027\uff65\032\uff65\034\uff65\035\uff65\051\uff65" +
    "\102\uff65\107\uff65\001\002\000\036\003\uff60\005\uff60\011" +
    "\uff60\012\uff60\013\uff60\020\uff60\023\uff60\027\uff60\032\uff60" +
    "\034\uff60\035\uff60\051\uff60\102\uff60\107\uff60\001\002\000" +
    "\036\003\uff63\005\uff63\011\uff63\012\uff63\013\uff63\020\uff63" +
    "\023\uff63\027\uff63\032\uff63\034\uff63\035\uff63\051\uff63\102" +
    "\uff63\107\uff63\001\002\000\036\003\uff5f\005\uff5f\011\uff5f" +
    "\012\uff5f\013\uff5f\020\uff5f\023\uff5f\027\uff5f\032\uff5f\034" +
    "\uff5f\035\uff5f\051\uff5f\102\uff5f\107\uff5f\001\002\000\036" +
    "\003\uff64\005\uff64\011\uff64\012\uff64\013\uff64\020\uff64\023" +
    "\uff64\027\uff64\032\uff64\034\uff64\035\uff64\051\uff64\102\uff64" +
    "\107\uff64\001\002\000\036\003\uff62\005\uff62\011\uff62\012" +
    "\uff62\013\uff62\020\uff62\023\uff62\027\uff62\032\uff62\034\uff62" +
    "\035\uff62\051\uff62\102\uff62\107\uff62\001\002\000\004\111" +
    "\u032c\001\002\000\004\073\u032d\001\002\000\004\074\u032e" +
    "\001\002\000\006\100\uff4c\102\uff4c\001\002\000\036\003" +
    "\uff61\005\uff61\011\uff61\012\uff61\013\uff61\020\uff61\023\uff61" +
    "\027\uff61\032\uff61\034\uff61\035\uff61\051\uff61\102\uff61\107" +
    "\uff61\001\002\000\016\042\164\043\166\051\310\060\302" +
    "\065\170\073\u0332\001\002\000\036\003\uffb1\005\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\020\uffb1\023\uffb1\027\uffb1\032\uffb1" +
    "\034\uffb1\035\uffb1\051\uffb1\102\uffb1\107\uffb1\001\002\000" +
    "\014\042\164\043\166\051\310\060\302\065\170\001\002" +
    "\000\036\003\uffb0\005\uffb0\011\uffb0\012\uffb0\013\uffb0\020" +
    "\uffb0\023\uffb0\027\uffb0\032\uffb0\034\uffb0\035\uffb0\051\uffb0" +
    "\102\uffb0\107\uffb0\001\002\000\004\074\u0335\001\002\000" +
    "\010\100\041\102\040\104\u0336\001\002\000\016\042\164" +
    "\043\166\051\310\060\302\065\170\073\u0332\001\002\000" +
    "\036\003\uffae\005\uffae\011\uffae\012\uffae\013\uffae\020\uffae" +
    "\023\uffae\027\uffae\032\uffae\034\uffae\035\uffae\051\uffae\102" +
    "\uffae\107\uffae\001\002\000\036\003\uffaf\005\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\020\uffaf\023\uffaf\027\uffaf\032\uffaf\034" +
    "\uffaf\035\uffaf\051\uffaf\102\uffaf\107\uffaf\001\002\000\036" +
    "\003\uffb2\005\uffb2\011\uffb2\012\uffb2\013\uffb2\020\uffb2\023" +
    "\uffb2\027\uffb2\032\uffb2\034\uffb2\035\uffb2\051\uffb2\102\uffb2" +
    "\107\uffb2\001\002\000\004\054\u033b\001\002\000\022\020" +
    "\u031d\042\164\043\166\051\u0343\060\162\064\u0342\065\170" +
    "\073\163\001\002\000\006\100\041\102\040\001\002\000" +
    "\024\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f" +
    "\100\041\102\040\110\uff9f\001\002\000\024\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\041\102\040" +
    "\110\uff9d\001\002\000\036\003\uff53\005\uff53\011\uff53\012" +
    "\uff53\013\uff53\020\uff53\023\uff53\027\uff53\032\uff53\034\uff53" +
    "\035\uff53\051\uff53\102\uff53\107\uff53\001\002\000\006\100" +
    "\041\102\040\001\002\000\010\073\330\100\041\102\040" +
    "\001\002\000\006\100\041\102\040\001\002\000\036\003" +
    "\u0319\042\164\043\166\051\310\057\uff9e\060\302\061\uff9e" +
    "\062\uff9e\063\uff9e\065\170\073\u0316\100\041\102\040\110" +
    "\uff9e\001\002\000\036\003\uff5e\005\uff5e\011\uff5e\012\uff5e" +
    "\013\uff5e\020\uff5e\023\uff5e\027\uff5e\032\uff5e\034\uff5e\035" +
    "\uff5e\051\uff5e\102\uff5e\107\uff5e\001\002\000\036\003\uff58" +
    "\005\uff58\011\uff58\012\uff58\013\uff58\020\uff58\023\uff58\027" +
    "\uff58\032\uff58\034\uff58\035\uff58\051\uff58\102\uff58\107\uff58" +
    "\001\002\000\036\003\uff5c\005\uff5c\011\uff5c\012\uff5c\013" +
    "\uff5c\020\uff5c\023\uff5c\027\uff5c\032\uff5c\034\uff5c\035\uff5c" +
    "\051\uff5c\102\uff5c\107\uff5c\001\002\000\036\003\uff5b\005" +
    "\uff5b\011\uff5b\012\uff5b\013\uff5b\020\uff5b\023\uff5b\027\uff5b" +
    "\032\uff5b\034\uff5b\035\uff5b\051\uff5b\102\uff5b\107\uff5b\001" +
    "\002\000\036\003\uff5d\005\uff5d\011\uff5d\012\uff5d\013\uff5d" +
    "\020\uff5d\023\uff5d\027\uff5d\032\uff5d\034\uff5d\035\uff5d\051" +
    "\uff5d\102\uff5d\107\uff5d\001\002\000\036\003\uff5a\005\uff5a" +
    "\011\uff5a\012\uff5a\013\uff5a\020\uff5a\023\uff5a\027\uff5a\032" +
    "\uff5a\034\uff5a\035\uff5a\051\uff5a\102\uff5a\107\uff5a\001\002" +
    "\000\036\003\uff59\005\uff59\011\uff59\012\uff59\013\uff59\020" +
    "\uff59\023\uff59\027\uff59\032\uff59\034\uff59\035\uff59\051\uff59" +
    "\102\uff59\107\uff59\001\002\000\022\057\317\060\314\061" +
    "\320\062\312\063\311\074\u034c\104\316\110\321\001\002" +
    "\000\026\057\ufe4e\060\ufe4e\061\ufe4e\062\ufe4e\063\ufe4e\073" +
    "\ufe4e\100\ufe4e\102\ufe4e\104\u0336\110\ufe4e\001\002\000\006" +
    "\003\ufe1c\013\ufe1c\001\002\000\026\003\ufe20\005\141\011" +
    "\146\012\145\013\ufe20\020\144\023\156\035\137\051\155" +
    "\102\151\001\002\000\006\003\ufe1f\013\ufe1f\001\002\000" +
    "\006\003\ufe19\013\ufe19\001\002\000\026\003\ufe1e\005\141" +
    "\011\146\012\145\013\ufe1e\020\144\023\156\035\137\051" +
    "\155\102\151\001\002\000\006\003\ufe1b\013\ufe1b\001\002" +
    "\000\004\054\u0354\001\002\000\006\060\302\065\170\001" +
    "\002\000\004\037\u0356\001\002\000\006\060\302\065\170" +
    "\001\002\000\004\047\u0358\001\002\000\006\060\302\065" +
    "\170\001\002\000\006\100\041\102\040\001\002\000\022" +
    "\005\202\011\146\012\145\020\u035d\023\213\035\u035b\051" +
    "\155\102\u0360\001\002\000\006\011\u037d\030\u037c\001\002" +
    "\000\024\005\202\011\146\012\145\020\u035d\023\213\032" +
    "\ufdcf\035\u035b\051\155\102\u0360\001\002\000\004\070\u036c" +
    "\001\002\000\006\100\041\102\040\001\002\000\004\032" +
    "\u0367\001\002\000\004\100\u0365\001\002\000\024\005\202" +
    "\011\146\012\145\020\u035d\023\213\032\ufdc6\035\u035b\051" +
    "\155\102\u0360\001\002\000\024\005\202\011\146\012\145" +
    "\020\u035d\023\213\032\ufdcc\035\u035b\051\155\102\u0360\001" +
    "\002\000\004\032\ufdc9\001\002\000\004\032\ufdc5\001\002" +
    "\000\024\005\202\011\146\012\145\020\u035d\023\213\032" +
    "\ufdce\035\u035b\051\155\102\u0360\001\002\000\004\032\ufdcd" +
    "\001\002\000\004\051\u0368\001\002\000\006\100\041\102" +
    "\040\001\002\000\036\003\ufdd1\005\ufdd1\011\ufdd1\012\ufdd1" +
    "\013\ufdd1\020\ufdd1\023\ufdd1\027\ufdd1\032\ufdd1\034\ufdd1\035" +
    "\ufdd1\051\ufdd1\102\ufdd1\107\ufdd1\001\002\000\024\005\202" +
    "\011\146\012\145\020\u035d\023\213\032\ufdc8\035\u035b\051" +
    "\155\102\u0360\001\002\000\004\032\ufdc7\001\002\000\006" +
    "\021\u036e\111\u036d\001\002\000\004\073\u0377\001\002\000" +
    "\004\073\u036f\001\002\000\022\042\164\043\166\051\272" +
    "\060\162\064\273\065\170\073\163\074\u0370\001\002\000" +
    "\006\100\041\102\040\001\002\000\004\074\u0372\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\202\011" +
    "\146\012\145\020\u035d\023\213\032\ufdd0\035\u035b\051\155" +
    "\102\u0360\001\002\000\004\032\ufdcb\001\002\000\024\005" +
    "\202\011\146\012\145\020\u035d\023\213\032\ufdc0\035\u035b" +
    "\051\155\102\u0360\001\002\000\004\032\ufdbf\001\002\000" +
    "\004\074\u0378\001\002\000\006\100\041\102\040\001\002" +
    "\000\024\005\202\011\146\012\145\020\u035d\023\213\032" +
    "\ufdbe\035\u035b\051\155\102\u0360\001\002\000\004\032\ufdbd" +
    "\001\002\000\004\032\ufdca\001\002\000\006\100\041\102" +
    "\040\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\202\011\146\012\145\020\u035d\023\213\032\ufdc1\035" +
    "\u035b\051\155\102\u0360\001\002\000\004\032\ufdc2\001\002" +
    "\000\024\005\202\011\146\012\145\020\u035d\023\213\032" +
    "\ufdc3\035\u035b\051\155\102\u0360\001\002\000\004\032\ufdc4" +
    "\001\002\000\006\022\u0383\054\u0384\001\002\000\014\014" +
    "\054\015\053\016\056\046\055\051\052\001\002\000\022" +
    "\020\u031d\042\164\043\166\051\u038c\060\162\064\u038d\065" +
    "\170\073\163\001\002\000\006\100\uff49\102\uff49\001\002" +
    "\000\024\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073" +
    "\uff9f\100\uff4a\102\uff4a\110\uff9f\001\002\000\024\057\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\041\102" +
    "\040\110\uff9d\001\002\000\036\003\uff55\005\uff55\011\uff55" +
    "\012\uff55\013\uff55\020\uff55\023\uff55\027\uff55\032\uff55\034" +
    "\uff55\035\uff55\051\uff55\102\uff55\107\uff55\001\002\000\006" +
    "\100\041\102\040\001\002\000\006\100\uff48\102\uff48\001" +
    "\002\000\010\073\330\100\041\102\040\001\002\000\036" +
    "\003\u0319\042\164\043\166\051\310\057\uff9e\060\302\061" +
    "\uff9e\062\uff9e\063\uff9e\065\170\073\u0316\100\041\102\040" +
    "\110\uff9e\001\002\000\006\100\uff4b\102\uff4b\001\002\000" +
    "\036\003\uff57\005\uff57\011\uff57\012\uff57\013\uff57\020\uff57" +
    "\023\uff57\027\uff57\032\uff57\034\uff57\035\uff57\051\uff57\102" +
    "\uff57\107\uff57\001\002\000\036\003\uff66\005\uff66\011\uff66" +
    "\012\uff66\013\uff66\020\uff66\023\uff66\027\uff66\032\uff66\034" +
    "\uff66\035\uff66\051\uff66\102\uff66\107\uff66\001\002\000\036" +
    "\003\uff6a\005\uff6a\011\uff6a\012\uff6a\013\uff6a\020\uff6a\023" +
    "\uff6a\027\uff6a\032\uff6a\034\uff6a\035\uff6a\051\uff6a\102\uff6a" +
    "\107\uff6a\001\002\000\036\003\uff69\005\uff69\011\uff69\012" +
    "\uff69\013\uff69\020\uff69\023\uff69\027\uff69\032\uff69\034\uff69" +
    "\035\uff69\051\uff69\102\uff69\107\uff69\001\002\000\010\054" +
    "\u0393\100\041\102\040\001\002\000\022\020\u031d\042\164" +
    "\043\166\051\u0399\060\162\064\u038d\065\170\073\163\001" +
    "\002\000\036\003\uff6c\005\uff6c\011\uff6c\012\uff6c\013\uff6c" +
    "\020\uff6c\023\uff6c\027\uff6c\032\uff6c\034\uff6c\035\uff6c\051" +
    "\uff6c\102\uff6c\107\uff6c\001\002\000\024\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\041\102\040\110" +
    "\uff9d\001\002\000\036\003\uff54\005\uff54\011\uff54\012\uff54" +
    "\013\uff54\020\uff54\023\uff54\027\uff54\032\uff54\034\uff54\035" +
    "\uff54\051\uff54\102\uff54\107\uff54\001\002\000\006\100\041" +
    "\102\040\001\002\000\010\073\330\100\041\102\040\001" +
    "\002\000\036\003\u0319\042\164\043\166\051\310\057\uff9e" +
    "\060\302\061\uff9e\062\uff9e\063\uff9e\065\170\073\u0316\100" +
    "\041\102\040\110\uff9e\001\002\000\036\003\uff56\005\uff56" +
    "\011\uff56\012\uff56\013\uff56\020\uff56\023\uff56\027\uff56\032" +
    "\uff56\034\uff56\035\uff56\051\uff56\102\uff56\107\uff56\001\002" +
    "\000\036\003\uff67\005\uff67\011\uff67\012\uff67\013\uff67\020" +
    "\uff67\023\uff67\027\uff67\032\uff67\034\uff67\035\uff67\051\uff67" +
    "\102\uff67\107\uff67\001\002\000\036\003\uff6b\005\uff6b\011" +
    "\uff6b\012\uff6b\013\uff6b\020\uff6b\023\uff6b\027\uff6b\032\uff6b" +
    "\034\uff6b\035\uff6b\051\uff6b\102\uff6b\107\uff6b\001\002\000" +
    "\036\003\uff68\005\uff68\011\uff68\012\uff68\013\uff68\020\uff68" +
    "\023\uff68\027\uff68\032\uff68\034\uff68\035\uff68\051\uff68\102" +
    "\uff68\107\uff68\001\002\000\006\021\u03a0\111\u039f\001\002" +
    "\000\004\073\u03a9\001\002\000\004\073\u03a1\001\002\000" +
    "\022\042\164\043\166\051\272\060\162\064\273\065\170" +
    "\073\163\074\u03a2\001\002\000\006\100\041\102\040\001" +
    "\002\000\004\074\u03a4\001\002\000\006\100\041\102\040" +
    "\001\002\000\026\003\ufe24\005\141\011\146\012\145\013" +
    "\ufe24\020\144\023\156\035\137\051\155\102\151\001\002" +
    "\000\006\003\ufe1d\013\ufe1d\001\002\000\026\003\ufe16\005" +
    "\141\011\146\012\145\013\ufe16\020\144\023\156\035\137" +
    "\051\155\102\151\001\002\000\006\003\ufe15\013\ufe15\001" +
    "\002\000\004\074\u03aa\001\002\000\006\100\041\102\040" +
    "\001\002\000\026\003\ufe14\005\141\011\146\012\145\013" +
    "\ufe14\020\144\023\156\035\137\051\155\102\151\001\002" +
    "\000\006\003\ufe13\013\ufe13\001\002\000\006\003\ufe22\013" +
    "\ufe22\001\002\000\004\026\u03af\001\002\000\006\100\041" +
    "\102\040\001\002\000\022\005\141\011\146\012\145\020" +
    "\u02a4\023\156\035\u02a2\051\155\102\u02a7\001\002\000\010" +
    "\013\u03b6\027\u03b4\107\u01be\001\002\000\016\042\164\043" +
    "\166\051\174\060\162\065\170\073\163\001\002\000\004" +
    "\013\u03e3\001\002\000\010\005\u01cb\100\041\102\040\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\005\u03b7" +
    "\001\002\000\006\100\041\102\040\001\002\000\032\003" +
    "\ufe0f\005\ufe0f\011\ufe0f\012\ufe0f\013\ufe0f\020\ufe0f\023\ufe0f" +
    "\027\ufe0f\035\ufe0f\051\ufe0f\102\ufe0f\107\ufe0f\001\002\000" +
    "\022\005\141\011\146\012\145\020\u03bc\023\156\035\u03ba" +
    "\051\155\102\u03c0\001\002\000\004\030\u03db\001\002\000" +
    "\024\005\141\011\146\012\145\013\ufdf8\020\u03bc\023\156" +
    "\035\u03ba\051\155\102\u03c0\001\002\000\004\070\u03cb\001" +
    "\002\000\004\013\u03c8\001\002\000\006\100\041\102\040" +
    "\001\002\000\024\005\141\011\146\012\145\013\ufdef\020" +
    "\u03bc\023\156\035\u03ba\051\155\102\u03c0\001\002\000\004" +
    "\100\u03c3\001\002\000\024\005\141\011\146\012\145\013" +
    "\ufdf5\020\u03bc\023\156\035\u03ba\051\155\102\u03c0\001\002" +
    "\000\004\013\ufdf2\001\002\000\024\005\141\011\146\012" +
    "\145\013\ufdf7\020\u03bc\023\156\035\u03ba\051\155\102\u03c0" +
    "\001\002\000\004\013\ufdf6\001\002\000\004\013\ufdee\001" +
    "\002\000\024\005\141\011\146\012\145\013\ufdf1\020\u03bc" +
    "\023\156\035\u03ba\051\155\102\u03c0\001\002\000\004\013" +
    "\ufdf0\001\002\000\004\005\u03c9\001\002\000\006\100\041" +
    "\102\040\001\002\000\032\003\ufe0d\005\ufe0d\011\ufe0d\012" +
    "\ufe0d\013\ufe0d\020\ufe0d\023\ufe0d\027\ufe0d\035\ufe0d\051\ufe0d" +
    "\102\ufe0d\107\ufe0d\001\002\000\006\021\u03cd\111\u03cc\001" +
    "\002\000\004\073\u03d6\001\002\000\004\073\u03ce\001\002" +
    "\000\022\042\164\043\166\051\272\060\162\064\273\065" +
    "\170\073\163\074\u03cf\001\002\000\006\100\041\102\040" +
    "\001\002\000\004\074\u03d1\001\002\000\006\100\041\102" +
    "\040\001\002\000\024\005\141\011\146\012\145\013\ufdf9" +
    "\020\u03bc\023\156\035\u03ba\051\155\102\u03c0\001\002\000" +
    "\004\013\ufdf4\001\002\000\024\005\141\011\146\012\145" +
    "\013\ufdeb\020\u03bc\023\156\035\u03ba\051\155\102\u03c0\001" +
    "\002\000\004\013\ufdea\001\002\000\004\074\u03d7\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\141\011" +
    "\146\012\145\013\ufde9\020\u03bc\023\156\035\u03ba\051\155" +
    "\102\u03c0\001\002\000\004\013\ufde8\001\002\000\004\013" +
    "\ufdf3\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\141\011\146\012\145\013\ufdec\020\u03bc\023\156\035" +
    "\u03ba\051\155\102\u03c0\001\002\000\004\013\ufded\001\002" +
    "\000\022\005\141\011\146\012\145\020\u03bc\023\156\035" +
    "\u03ba\051\155\102\u03c0\001\002\000\004\013\u03e0\001\002" +
    "\000\004\005\u03e1\001\002\000\006\100\041\102\040\001" +
    "\002\000\032\003\ufe0e\005\ufe0e\011\ufe0e\012\ufe0e\013\ufe0e" +
    "\020\ufe0e\023\ufe0e\027\ufe0e\035\ufe0e\051\ufe0e\102\ufe0e\107" +
    "\ufe0e\001\002\000\004\005\u03e4\001\002\000\006\100\041" +
    "\102\040\001\002\000\032\003\ufe0c\005\ufe0c\011\ufe0c\012" +
    "\ufe0c\013\ufe0c\020\ufe0c\023\ufe0c\027\ufe0c\035\ufe0c\051\ufe0c" +
    "\102\ufe0c\107\ufe0c\001\002\000\004\026\u03e7\001\002\000" +
    "\006\100\041\102\040\001\002\000\022\005\141\011\146" +
    "\012\145\020\u02a4\023\156\035\u02a2\051\155\102\u02a7\001" +
    "\002\000\010\013\ufdd3\027\u03ea\107\u01be\001\002\000\010" +
    "\005\u01cb\100\ufdd5\102\ufdd5\001\002\000\004\013\ufdd2\001" +
    "\002\000\006\100\ufdd4\102\ufdd4\001\002\000\004\030\u03f2" +
    "\001\002\000\014\003\ufe34\010\ufe34\013\ufe34\100\ufe34\102" +
    "\ufe34\001\002\000\006\003\u03f0\030\u03f1\001\002\000\014" +
    "\003\ufe29\010\ufe29\013\ufe29\100\ufe29\102\ufe29\001\002\000" +
    "\014\003\ufe2b\010\ufe2b\013\ufe2b\100\ufe2b\102\ufe2b\001\002" +
    "\000\014\003\ufe2a\010\ufe2a\013\ufe2a\100\ufe2a\102\ufe2a\001" +
    "\002\000\006\100\041\102\040\001\002\000\026\003\ufe17" +
    "\005\141\011\146\012\145\013\ufe17\020\144\023\156\035" +
    "\137\051\155\102\151\001\002\000\006\003\ufe18\013\ufe18" +
    "\001\002\000\004\022\u03f7\001\002\000\014\014\054\015" +
    "\053\016\056\046\055\051\052\001\002\000\010\003\ufe25" +
    "\074\ufe25\104\u03f9\001\002\000\006\051\126\106\124\001" +
    "\002\000\006\003\ufe26\074\ufe26\001\002\000\006\051\126" +
    "\106\124\001\002\000\004\074\u03fd\001\002\000\006\100" +
    "\u03ff\102\u03fe\001\002\000\004\100\u04b8\001\002\000\024" +
    "\003\u0407\005\u040a\011\u013e\012\145\020\u040c\023\234\035" +
    "\u0406\051\155\102\u0408\001\002\000\026\003\u0407\005\u040a" +
    "\011\u013e\012\145\013\uffbc\020\u040c\023\234\035\u0406\051" +
    "\155\102\u0408\001\002\000\026\003\u0407\005\u040a\011\u013e" +
    "\012\145\013\uffc0\020\u040c\023\234\035\u0406\051\155\102" +
    "\u0408\001\002\000\004\013\u04a5\001\002\000\034\003\uff44" +
    "\005\uff44\011\uff44\012\uff44\013\uff44\020\uff44\023\uff44\027" +
    "\uff44\035\uff44\051\uff44\100\uff44\102\uff44\107\uff44\001\002" +
    "\000\006\100\041\102\040\001\002\000\004\013\uffce\001" +
    "\002\000\006\003\u04ad\010\u04ae\001\002\000\010\010\u04a3" +
    "\013\u04a5\100\u04a4\001\002\000\004\100\u04a0\001\002\000" +
    "\034\003\uff43\005\uff43\011\uff43\012\uff43\013\uff43\020\uff43" +
    "\023\uff43\027\uff43\035\uff43\051\uff43\100\uff43\102\uff43\107" +
    "\uff43\001\002\000\016\042\164\043\166\051\174\060\162" +
    "\065\170\073\163\001\002\000\026\003\u0407\005\u040a\011" +
    "\u013e\012\145\013\uffbf\020\u040c\023\234\035\u0406\051\155" +
    "\102\u0408\001\002\000\004\070\u040e\001\002\000\034\003" +
    "\uff45\005\uff45\011\uff45\012\uff45\013\uff45\020\uff45\023\uff45" +
    "\027\uff45\035\uff45\051\uff45\100\uff45\102\uff45\107\uff45\001" +
    "\002\000\006\021\u0410\111\u040f\001\002\000\004\073\u0419" +
    "\001\002\000\004\073\u0411\001\002\000\022\042\164\043" +
    "\166\051\272\060\162\064\273\065\170\073\163\074\u0412" +
    "\001\002\000\006\100\041\102\040\001\002\000\004\074" +
    "\u0414\001\002\000\006\100\041\102\040\001\002\000\026" +
    "\003\u0407\005\u040a\011\u013e\012\145\013\uffc1\020\u040c\023" +
    "\234\035\u0406\051\155\102\u0408\001\002\000\004\013\uffcc" +
    "\001\002\000\026\003\u0407\005\u040a\011\u013e\012\145\013" +
    "\uffba\020\u040c\023\234\035\u0406\051\155\102\u0408\001\002" +
    "\000\004\013\uffc6\001\002\000\004\074\u041a\001\002\000" +
    "\006\100\041\102\040\001\002\000\026\003\u0407\005\u040a" +
    "\011\u013e\012\145\013\uffb9\020\u040c\023\234\035\u0406\051" +
    "\155\102\u0408\001\002\000\004\013\uffc5\001\002\000\004" +
    "\013\uffca\001\002\000\004\026\u041f\001\002\000\006\100" +
    "\041\102\040\001\002\000\022\005\u040a\011\u013e\012\145" +
    "\020\u0423\023\234\035\u0421\051\155\102\u0426\001\002\000" +
    "\004\010\u049d\001\002\000\030\005\u040a\011\u013e\012\145" +
    "\013\uff39\020\u0423\023\234\027\uff39\035\u0421\051\155\102" +
    "\u0426\107\uff39\001\002\000\004\070\u048d\001\002\000\010" +
    "\013\u0434\027\u0433\107\u01be\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\100\u042c\001\002\000\030\005\u040a" +
    "\011\u013e\012\145\013\uff30\020\u0423\023\234\027\uff30\035" +
    "\u0421\051\155\102\u0426\107\uff30\001\002\000\012\013\uff38" +
    "\027\uff38\100\u0429\107\uff38\001\002\000\022\005\u040a\011" +
    "\u013e\012\145\020\u0423\023\234\035\u0421\051\155\102\u0426" +
    "\001\002\000\010\013\uff32\027\uff32\107\uff32\001\002\000" +
    "\010\013\uff2f\027\uff2f\107\uff2f\001\002\000\030\005\u040a" +
    "\011\u013e\012\145\013\uff37\020\u0423\023\234\027\uff37\035" +
    "\u0421\051\155\102\u0426\107\uff37\001\002\000\010\013\uff36" +
    "\027\uff36\107\uff36\001\002\000\030\005\u040a\011\u013e\012" +
    "\145\013\uff35\020\u0423\023\234\027\uff35\035\u0421\051\155" +
    "\102\u0426\107\uff35\001\002\000\010\013\uff31\027\uff31\107" +
    "\uff31\001\002\000\004\013\u048a\001\002\000\016\042\164" +
    "\043\166\051\174\060\162\065\170\073\163\001\002\000" +
    "\006\100\041\102\040\001\002\000\010\005\u01cb\100\041" +
    "\102\040\001\002\000\004\005\u0435\001\002\000\006\100" +
    "\041\102\040\001\002\000\034\003\uff3e\005\uff3e\011\uff3e" +
    "\012\uff3e\013\uff3e\020\uff3e\023\uff3e\027\uff3e\035\uff3e\051" +
    "\uff3e\100\uff3e\102\uff3e\107\uff3e\001\002\000\022\005\u040a" +
    "\011\u013e\012\145\020\u043b\023\234\035\u0439\051\155\102" +
    "\u043d\001\002\000\004\013\u045a\001\002\000\004\010\u0457" +
    "\001\002\000\024\005\u040a\011\u013e\012\145\013\uff27\020" +
    "\u0423\023\234\035\u0421\051\155\102\u0426\001\002\000\004" +
    "\070\u0447\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\100\u0443\001\002\000\024\005\u040a\011\u013e\012\145" +
    "\013\uff1e\020\u043b\023\234\035\u0439\051\155\102\u043d\001" +
    "\002\000\006\013\uff26\100\u0440\001\002\000\022\005\u040a" +
    "\011\u013e\012\145\020\u043b\023\234\035\u0439\051\155\102" +
    "\u043d\001\002\000\004\013\uff20\001\002\000\004\013\uff1d" +
    "\001\002\000\024\005\u040a\011\u013e\012\145\013\uff25\020" +
    "\u043b\023\234\035\u0439\051\155\102\u043d\001\002\000\004" +
    "\013\uff24\001\002\000\024\005\u040a\011\u013e\012\145\013" +
    "\uff23\020\u043b\023\234\035\u0439\051\155\102\u043d\001\002" +
    "\000\004\013\uff1f\001\002\000\006\021\u0449\111\u0448\001" +
    "\002\000\004\073\u0452\001\002\000\004\073\u044a\001\002" +
    "\000\022\042\164\043\166\051\272\060\162\064\273\065" +
    "\170\073\163\074\u044b\001\002\000\006\100\041\102\040" +
    "\001\002\000\004\074\u044d\001\002\000\006\100\041\102" +
    "\040\001\002\000\024\005\u040a\011\u013e\012\145\013\uff28" +
    "\020\u043b\023\234\035\u0439\051\155\102\u043d\001\002\000" +
    "\004\013\uff22\001\002\000\024\005\u040a\011\u013e\012\145" +
    "\013\uff1a\020\u043b\023\234\035\u0439\051\155\102\u043d\001" +
    "\002\000\004\013\uff19\001\002\000\004\074\u0453\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\u040a\011" +
    "\u013e\012\145\013\uff18\020\u043b\023\234\035\u0439\051\155" +
    "\102\u043d\001\002\000\004\013\uff17\001\002\000\004\013" +
    "\uff21\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\u040a\011\u013e\012\145\013\uff1b\020\u043b\023\234\035" +
    "\u0439\051\155\102\u043d\001\002\000\004\013\uff1c\001\002" +
    "\000\004\005\u045b\001\002\000\006\100\041\102\040\001" +
    "\002\000\034\003\uff3d\005\uff3d\011\uff3d\012\uff3d\013\uff3d" +
    "\020\uff3d\023\uff3d\027\uff3d\035\uff3d\051\uff3d\100\uff3d\102" +
    "\uff3d\107\uff3d\001\002\000\022\005\u040a\011\u013e\012\145" +
    "\020\u043b\023\234\035\u0439\051\155\102\u043d\001\002\000" +
    "\004\013\u045f\001\002\000\004\005\u0460\001\002\000\006" +
    "\100\041\102\040\001\002\000\034\003\uff3c\005\uff3c\011" +
    "\uff3c\012\uff3c\013\uff3c\020\uff3c\023\uff3c\027\uff3c\035\uff3c" +
    "\051\uff3c\100\uff3c\102\uff3c\107\uff3c\001\002\000\004\026" +
    "\u0463\001\002\000\006\100\041\102\040\001\002\000\022" +
    "\005\u040a\011\u013e\012\145\020\u0467\023\234\035\u0465\051" +
    "\155\102\u0469\001\002\000\004\010\u0487\001\002\000\030" +
    "\005\u040a\011\u013e\012\145\013\uff15\020\u0467\023\234\027" +
    "\uff15\035\u0465\051\155\102\u0469\107\uff15\001\002\000\004" +
    "\070\u0477\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\100\u0473\001\002\000\030\005\u040a\011\u013e\012\145" +
    "\013\uff0c\020\u0467\023\234\027\uff0c\035\u0465\051\155\102" +
    "\u0469\107\uff0c\001\002\000\012\013\uff14\027\uff14\100\u0470" +
    "\107\uff14\001\002\000\010\013\uff01\027\u046f\107\u01be\001" +
    "\002\000\004\013\uff02\001\002\000\006\100\uff04\102\uff04" +
    "\001\002\000\010\005\u01cb\100\uff03\102\uff03\001\002\000" +
    "\022\005\u040a\011\u013e\012\145\020\u0467\023\234\035\u0465" +
    "\051\155\102\u0469\001\002\000\010\013\uff0e\027\uff0e\107" +
    "\uff0e\001\002\000\010\013\uff0b\027\uff0b\107\uff0b\001\002" +
    "\000\030\005\u040a\011\u013e\012\145\013\uff13\020\u0467\023" +
    "\234\027\uff13\035\u0465\051\155\102\u0469\107\uff13\001\002" +
    "\000\010\013\uff12\027\uff12\107\uff12\001\002\000\030\005" +
    "\u040a\011\u013e\012\145\013\uff11\020\u0467\023\234\027\uff11" +
    "\035\u0465\051\155\102\u0469\107\uff11\001\002\000\010\013" +
    "\uff0d\027\uff0d\107\uff0d\001\002\000\006\021\u0479\111\u0478" +
    "\001\002\000\004\073\u0482\001\002\000\004\073\u047a\001" +
    "\002\000\022\042\164\043\166\051\272\060\162\064\273" +
    "\065\170\073\163\074\u047b\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\074\u047d\001\002\000\006\100\041" +
    "\102\040\001\002\000\030\005\u040a\011\u013e\012\145\013" +
    "\uff16\020\u0467\023\234\027\uff16\035\u0465\051\155\102\u0469" +
    "\107\uff16\001\002\000\010\013\uff10\027\uff10\107\uff10\001" +
    "\002\000\030\005\u040a\011\u013e\012\145\013\uff08\020\u0467" +
    "\023\234\027\uff08\035\u0465\051\155\102\u0469\107\uff08\001" +
    "\002\000\010\013\uff07\027\uff07\107\uff07\001\002\000\004" +
    "\074\u0483\001\002\000\006\100\041\102\040\001\002\000" +
    "\030\005\u040a\011\u013e\012\145\013\uff06\020\u0467\023\234" +
    "\027\uff06\035\u0465\051\155\102\u0469\107\uff06\001\002\000" +
    "\010\013\uff05\027\uff05\107\uff05\001\002\000\010\013\uff0f" +
    "\027\uff0f\107\uff0f\001\002\000\006\100\041\102\040\001" +
    "\002\000\030\005\u040a\011\u013e\012\145\013\uff09\020\u0467" +
    "\023\234\027\uff09\035\u0465\051\155\102\u0469\107\uff09\001" +
    "\002\000\010\013\uff0a\027\uff0a\107\uff0a\001\002\000\004" +
    "\005\u048b\001\002\000\006\100\041\102\040\001\002\000" +
    "\034\003\uff3b\005\uff3b\011\uff3b\012\uff3b\013\uff3b\020\uff3b" +
    "\023\uff3b\027\uff3b\035\uff3b\051\uff3b\100\uff3b\102\uff3b\107" +
    "\uff3b\001\002\000\006\021\u048f\111\u048e\001\002\000\004" +
    "\073\u0498\001\002\000\004\073\u0490\001\002\000\022\042" +
    "\164\043\166\051\272\060\162\064\273\065\170\073\163" +
    "\074\u0491\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\074\u0493\001\002\000\006\100\041\102\040\001\002" +
    "\000\030\005\u040a\011\u013e\012\145\013\uff3a\020\u0423\023" +
    "\234\027\uff3a\035\u0421\051\155\102\u0426\107\uff3a\001\002" +
    "\000\010\013\uff34\027\uff34\107\uff34\001\002\000\030\005" +
    "\u040a\011\u013e\012\145\013\uff2c\020\u0423\023\234\027\uff2c" +
    "\035\u0421\051\155\102\u0426\107\uff2c\001\002\000\010\013" +
    "\uff2b\027\uff2b\107\uff2b\001\002\000\004\074\u0499\001\002" +
    "\000\006\100\041\102\040\001\002\000\030\005\u040a\011" +
    "\u013e\012\145\013\uff2a\020\u0423\023\234\027\uff2a\035\u0421" +
    "\051\155\102\u0426\107\uff2a\001\002\000\010\013\uff29\027" +
    "\uff29\107\uff29\001\002\000\010\013\uff33\027\uff33\107\uff33" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\u040a\011\u013e\012\145\013\uff2d\020\u0423\023\234\027\uff2d" +
    "\035\u0421\051\155\102\u0426\107\uff2d\001\002\000\010\013" +
    "\uff2e\027\uff2e\107\uff2e\001\002\000\026\003\u0407\005\u040a" +
    "\011\u013e\012\145\013\uffbe\020\u040c\023\234\035\u0406\051" +
    "\155\102\u0408\001\002\000\004\013\uffcd\001\002\000\004" +
    "\013\uffb6\001\002\000\006\100\041\102\040\001\002\000" +
    "\026\003\u0407\005\u040a\011\u013e\012\145\013\uffb7\020\u040c" +
    "\023\234\035\u0406\051\155\102\u0408\001\002\000\006\003" +
    "\u04a6\010\u04a7\001\002\000\006\100\041\102\040\001\002" +
    "\000\006\100\041\102\040\001\002\000\006\013\uffb5\100" +
    "\uffb5\001\002\000\006\013\uffb4\100\uffb4\001\002\000\004" +
    "\013\uffc4\001\002\000\026\003\u0407\005\u040a\011\u013e\012" +
    "\145\013\uffb8\020\u040c\023\234\035\u0406\051\155\102\u0408" +
    "\001\002\000\004\013\uffc2\001\002\000\006\100\041\102" +
    "\040\001\002\000\006\100\041\102\040\001\002\000\026" +
    "\003\u0407\005\u040a\011\u013e\012\145\013\uffbb\020\u040c\023" +
    "\234\035\u0406\051\155\102\u0408\001\002\000\004\013\uffc7" +
    "\001\002\000\024\003\u0407\005\u040a\011\u013e\012\145\020" +
    "\u040c\023\234\035\u0406\051\155\102\u0408\001\002\000\004" +
    "\013\uffc3\001\002\000\026\003\u0407\005\u040a\011\u013e\012" +
    "\145\013\uffbd\020\u040c\023\234\035\u0406\051\155\102\u0408" +
    "\001\002\000\004\013\uffc9\001\002\000\006\013\uffe5\100" +
    "\uffe5\001\002\000\004\013\uffcb\001\002\000\004\013\uffc8" +
    "\001\002\000\024\003\u0407\005\u040a\011\u013e\012\145\020" +
    "\u040c\023\234\035\u0406\051\155\102\u0408\001\002\000\004" +
    "\013\u04a5\001\002\000\006\013\uffda\100\uffda\001\002\000" +
    "\004\074\u04bc\001\002\000\006\100\u04be\102\u04bd\001\002" +
    "\000\004\100\u04c1\001\002\000\024\003\u0407\005\u040a\011" +
    "\u013e\012\145\020\u040c\023\234\035\u0406\051\155\102\u0408" +
    "\001\002\000\004\013\u04a5\001\002\000\006\013\uffe9\100" +
    "\uffe9\001\002\000\024\003\u0407\005\u040a\011\u013e\012\145" +
    "\020\u040c\023\234\035\u0406\051\155\102\u0408\001\002\000" +
    "\004\013\u04a5\001\002\000\006\013\uffdf\100\uffdf\001\002" +
    "\000\006\051\113\103\112\001\002\000\004\013\ufff0\001" +
    "\002\000\020\003\031\006\033\010\023\013\uffd4\033\025" +
    "\100\uffd4\102\032\001\002\000\004\013\uffee\001\002\000" +
    "\004\013\uffef\001\002\000\020\003\031\006\033\010\023" +
    "\013\uffd4\033\025\100\uffd4\102\032\001\002\000\004\013" +
    "\uffed\001\002\000\006\002\ufff9\102\ufff9\001\002\000\006" +
    "\003\u04ce\007\u04cd\001\002\000\006\002\ufff3\102\ufff3\001" +
    "\002\000\006\002\ufff2\102\ufff2\001\002\000\004\051\u0503" +
    "\001\002\000\006\003\u04d1\051\u04d2\001\002\000\004\073" +
    "\u04fb\001\002\000\006\003\u04d3\073\u04d4\001\002\000\006" +
    "\051\126\106\124\001\002\000\010\003\u04d5\051\126\106" +
    "\124\001\002\000\004\074\u04ee\001\002\000\006\003\u04d7" +
    "\074\u04d8\001\002\000\004\022\u04e9\001\002\000\006\003" +
    "\u04da\022\u04d9\001\002\000\016\003\u04df\014\054\015\053" +
    "\016\056\046\055\051\052\001\002\000\014\014\054\015" +
    "\053\016\056\046\055\051\052\001\002\000\006\100\041" +
    "\102\040\001\002\000\022\005\141\011\146\012\145\020" +
    "\144\023\156\035\137\051\155\102\151\001\002\000\006" +
    "\003\u03ed\013\u03ef\001\002\000\014\003\ufe2d\010\ufe2d\013" +
    "\ufe2d\100\ufe2d\102\ufe2d\001\002\000\006\100\041\102\040" +
    "\001\002\000\006\100\041\102\040\001\002\000\024\003" +
    "\u04e3\005\141\011\146\012\145\020\144\023\156\035\137" +
    "\051\155\102\151\001\002\000\006\003\u03ed\013\u03ef\001" +
    "\002\000\006\003\u03ed\013\u03ef\001\002\000\014\003\ufe33" +
    "\010\ufe33\013\ufe33\100\ufe33\102\ufe33\001\002\000\014\003" +
    "\ufe35\010\ufe35\013\ufe35\100\ufe35\102\ufe35\001\002\000\022" +
    "\005\141\011\146\012\145\020\144\023\156\035\137\051" +
    "\155\102\151\001\002\000\006\003\u03ed\013\u03ef\001\002" +
    "\000\014\003\ufe2c\010\ufe2c\013\ufe2c\100\ufe2c\102\ufe2c\001" +
    "\002\000\014\014\054\015\053\016\056\046\055\051\052" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\141\011\146\012\145\020\144\023\156\035\137\051\155" +
    "\102\151\001\002\000\006\003\u03ed\013\u03ef\001\002\000" +
    "\014\003\ufe2e\010\ufe2e\013\ufe2e\100\ufe2e\102\ufe2e\001\002" +
    "\000\004\022\u04ef\001\002\000\014\014\054\015\053\016" +
    "\056\046\055\051\052\001\002\000\006\100\041\102\040" +
    "\001\002\000\022\005\141\011\146\012\145\020\144\023" +
    "\156\035\137\051\155\102\151\001\002\000\006\003\u03ed" +
    "\013\u03ef\001\002\000\014\003\ufe2f\010\ufe2f\013\ufe2f\100" +
    "\ufe2f\102\ufe2f\001\002\000\004\074\u04f5\001\002\000\004" +
    "\022\u04f6\001\002\000\014\014\054\015\053\016\056\046" +
    "\055\051\052\001\002\000\006\100\041\102\040\001\002" +
    "\000\022\005\141\011\146\012\145\020\144\023\156\035" +
    "\137\051\155\102\151\001\002\000\006\003\u03ed\013\u03ef" +
    "\001\002\000\014\003\ufe30\010\ufe30\013\ufe30\100\ufe30\102" +
    "\ufe30\001\002\000\006\051\126\106\124\001\002\000\004" +
    "\074\u04fd\001\002\000\004\022\u04fe\001\002\000\014\014" +
    "\054\015\053\016\056\046\055\051\052\001\002\000\006" +
    "\100\041\102\040\001\002\000\022\005\141\011\146\012" +
    "\145\020\144\023\156\035\137\051\155\102\151\001\002" +
    "\000\006\003\u03ed\013\u03ef\001\002\000\014\003\ufe31\010" +
    "\ufe31\013\ufe31\100\ufe31\102\ufe31\001\002\000\004\073\u0504" +
    "\001\002\000\006\051\126\106\124\001\002\000\004\074" +
    "\u0506\001\002\000\004\022\u0507\001\002\000\014\014\054" +
    "\015\053\016\056\046\055\051\052\001\002\000\006\100" +
    "\041\102\040\001\002\000\022\005\141\011\146\012\145" +
    "\020\144\023\156\035\137\051\155\102\151\001\002\000" +
    "\006\003\u03ed\013\u03ef\001\002\000\014\003\ufe32\010\ufe32" +
    "\013\ufe32\100\ufe32\102\ufe32\001\002\000\020\003\031\006" +
    "\033\010\023\013\uffd4\033\025\100\uffd4\102\032\001\002" +
    "\000\004\013\uffec\001\002\000\006\003\u0544\073\u0545\001" +
    "\002\000\004\073\u053a\001\002\000\006\003\u0511\073\u0512" +
    "\001\002\000\006\051\126\106\124\001\002\000\010\003" +
    "\u0513\051\126\106\124\001\002\000\004\074\u0529\001\002" +
    "\000\006\003\u0515\074\u0516\001\002\000\006\100\u0523\102" +
    "\u0522\001\002\000\010\003\u0518\100\u0519\102\u0517\001\002" +
    "\000\004\100\u051f\001\002\000\004\100\u051c\001\002\000" +
    "\024\003\u0407\005\u040a\011\u013e\012\145\020\u040c\023\234" +
    "\035\u0406\051\155\102\u0408\001\002\000\004\013\u04a5\001" +
    "\002\000\006\013\uffe6\100\uffe6\001\002\000\024\003\u0407" +
    "\005\u040a\011\u013e\012\145\020\u040c\023\234\035\u0406\051" +
    "\155\102\u0408\001\002\000\004\013\u04a5\001\002\000\006" +
    "\013\uffd5\100\uffd5\001\002\000\024\003\u0407\005\u040a\011" +
    "\u013e\012\145\020\u040c\023\234\035\u0406\051\155\102\u0408" +
    "\001\002\000\004\013\u04a5\001\002\000\006\013\uffdb\100" +
    "\uffdb\001\002\000\004\100\u0526\001\002\000\024\003\u0407" +
    "\005\u040a\011\u013e\012\145\020\u040c\023\234\035\u0406\051" +
    "\155\102\u0408\001\002\000\004\013\u04a5\001\002\000\006" +
    "\013\uffe1\100\uffe1\001\002\000\024\003\u0407\005\u040a\011" +
    "\u013e\012\145\020\u040c\023\234\035\u0406\051\155\102\u0408" +
    "\001\002\000\004\013\u04a5\001\002\000\006\013\uffd6\100" +
    "\uffd6\001\002\000\006\100\u052b\102\u052a\001\002\000\004" +
    "\100\u052e\001\002\000\024\003\u0407\005\u040a\011\u013e\012" +
    "\145\020\u040c\023\234\035\u0406\051\155\102\u0408\001\002" +
    "\000\004\013\u04a5\001\002\000\006\013\uffe2\100\uffe2\001" +
    "\002\000\024\003\u0407\005\u040a\011\u013e\012\145\020\u040c" +
    "\023\234\035\u0406\051\155\102\u0408\001\002\000\004\013" +
    "\u04a5\001\002\000\006\013\uffd7\100\uffd7\001\002\000\004" +
    "\074\u0532\001\002\000\006\100\u0534\102\u0533\001\002\000" +
    "\004\100\u0537\001\002\000\024\003\u0407\005\u040a\011\u013e" +
    "\012\145\020\u040c\023\234\035\u0406\051\155\102\u0408\001" +
    "\002\000\004\013\u04a5\001\002\000\006\013\uffe3\100\uffe3" +
    "\001\002\000\024\003\u0407\005\u040a\011\u013e\012\145\020" +
    "\u040c\023\234\035\u0406\051\155\102\u0408\001\002\000\004" +
    "\013\u04a5\001\002\000\006\013\uffd8\100\uffd8\001\002\000" +
    "\006\051\126\106\124\001\002\000\004\074\u053c\001\002" +
    "\000\006\100\u053e\102\u053d\001\002\000\004\100\u0541\001" +
    "\002\000\024\003\u0407\005\u040a\011\u013e\012\145\020\u040c" +
    "\023\234\035\u0406\051\155\102\u0408\001\002\000\004\013" +
    "\u04a5\001\002\000\006\013\uffe4\100\uffe4\001\002\000\024" +
    "\003\u0407\005\u040a\011\u013e\012\145\020\u040c\023\234\035" +
    "\u0406\051\155\102\u0408\001\002\000\004\013\u04a5\001\002" +
    "\000\006\013\uffd9\100\uffd9\001\002\000\004\074\u055a\001" +
    "\002\000\006\003\u0546\074\u0547\001\002\000\006\100\u0554" +
    "\102\u0553\001\002\000\010\003\u0549\100\u054a\102\u0548\001" +
    "\002\000\004\100\u0550\001\002\000\004\100\u054d\001\002" +
    "\000\024\003\u0407\005\u040a\011\u013e\012\145\020\u040c\023" +
    "\234\035\u0406\051\155\102\u0408\001\002\000\004\013\u04a5" +
    "\001\002\000\006\013\uffea\100\uffea\001\002\000\024\003" +
    "\u0407\005\u040a\011\u013e\012\145\020\u040c\023\234\035\u0406" +
    "\051\155\102\u0408\001\002\000\004\013\u04a5\001\002\000" +
    "\006\013\uffdc\100\uffdc\001\002\000\024\003\u0407\005\u040a" +
    "\011\u013e\012\145\020\u040c\023\234\035\u0406\051\155\102" +
    "\u0408\001\002\000\004\013\u04a5\001\002\000\006\013\uffe0" +
    "\100\uffe0\001\002\000\004\100\u0557\001\002\000\024\003" +
    "\u0407\005\u040a\011\u013e\012\145\020\u040c\023\234\035\u0406" +
    "\051\155\102\u0408\001\002\000\004\013\u04a5\001\002\000" +
    "\006\013\uffe7\100\uffe7\001\002\000\024\003\u0407\005\u040a" +
    "\011\u013e\012\145\020\u040c\023\234\035\u0406\051\155\102" +
    "\u0408\001\002\000\004\013\u04a5\001\002\000\006\013\uffdd" +
    "\100\uffdd\001\002\000\006\100\u055c\102\u055b\001\002\000" +
    "\004\100\u055f\001\002\000\024\003\u0407\005\u040a\011\u013e" +
    "\012\145\020\u040c\023\234\035\u0406\051\155\102\u0408\001" +
    "\002\000\004\013\u04a5\001\002\000\006\013\uffe8\100\uffe8" +
    "\001\002\000\024\003\u0407\005\u040a\011\u013e\012\145\020" +
    "\u040c\023\234\035\u0406\051\155\102\u0408\001\002\000\004" +
    "\013\u04a5\001\002\000\006\013\uffde\100\uffde\001\002\000" +
    "\020\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4" +
    "\102\032\001\002\000\004\013\u04cc\001\002\000\006\002" +
    "\ufff4\102\ufff4\001\002\000\004\002\001\001\002\000\004" +
    "\051\u057c\001\002\000\006\003\u0568\051\u0569\001\002\000" +
    "\006\100\u0576\102\u0575\001\002\000\010\003\u056b\100\u056c" +
    "\102\u056a\001\002\000\004\100\u0572\001\002\000\004\100" +
    "\u056f\001\002\000\020\003\031\006\033\010\023\013\uffd4" +
    "\033\025\100\uffd4\102\032\001\002\000\004\013\u04cc\001" +
    "\002\000\006\002\ufffc\102\ufffc\001\002\000\020\003\031" +
    "\006\033\010\023\013\uffd4\033\025\100\uffd4\102\032\001" +
    "\002\000\004\013\u04cc\001\002\000\006\002\ufff7\102\ufff7" +
    "\001\002\000\020\003\031\006\033\010\023\013\uffd4\033" +
    "\025\100\uffd4\102\032\001\002\000\004\013\u04cc\001\002" +
    "\000\006\002\ufff8\102\ufff8\001\002\000\004\100\u0579\001" +
    "\002\000\020\003\031\006\033\010\023\013\uffd4\033\025" +
    "\100\uffd4\102\032\001\002\000\004\013\u04cc\001\002\000" +
    "\006\002\ufffb\102\ufffb\001\002\000\020\003\031\006\033" +
    "\010\023\013\uffd4\033\025\100\uffd4\102\032\001\002\000" +
    "\004\013\u04cc\001\002\000\006\002\ufff6\102\ufff6\001\002" +
    "\000\006\100\u057e\102\u057d\001\002\000\004\100\u0581\001" +
    "\002\000\020\003\031\006\033\010\023\013\uffd4\033\025" +
    "\100\uffd4\102\032\001\002\000\004\013\u04cc\001\002\000" +
    "\006\002\ufffa\102\ufffa\001\002\000\020\003\031\006\033" +
    "\010\023\013\uffd4\033\025\100\uffd4\102\032\001\002\000" +
    "\004\013\u04cc\001\002\000\006\002\ufff5\102\ufff5\001\002" +
    "\000\012\002\ufffd\003\010\006\005\102\004\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0583\000\010\002\005\003\010\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\004\125\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\023\021\025\053\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\130\u04ca\001\001" +
    "\000\006\010\u04c7\121\u04c8\001\001\000\006\010\u04c4\121" +
    "\u04c5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\100\001\001\000\004\121\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\042\001\001\000\004\132" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\060\001\001\000\004\012\050\001" +
    "\001\000\004\121\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\057\001\001\000\002\001\001\000\004" +
    "\121\063\001\001\000\004\121\062\001\001\000\002\001" +
    "\001\000\004\052\064\001\001\000\002\001\001\000\004" +
    "\012\066\001\001\000\004\121\067\001\001\000\004\052" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\101" +
    "\001\001\000\004\132\102\001\001\000\002\001\001\000" +
    "\004\121\104\001\001\000\004\052\105\001\001\000\004" +
    "\132\106\001\001\000\002\001\001\000\012\007\027\010" +
    "\023\021\110\053\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\116\001\001\000\004\052\117\001\001" +
    "\000\004\132\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\127\001\001\000" +
    "\002\001\001\000\004\011\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\134\001\001\000\004\121" +
    "\135\001\001\000\022\013\137\015\141\050\146\054\153" +
    "\055\152\057\142\066\151\114\147\001\001\000\002\001" +
    "\001\000\004\131\u03ed\001\001\000\016\017\172\024\164" +
    "\030\u03ad\050\170\113\166\123\171\001\001\000\022\013" +
    "\u03ac\015\141\050\146\054\153\055\152\057\142\066\151" +
    "\114\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0350\001\001" +
    "\000\022\013\u034f\015\141\050\146\054\153\055\152\057" +
    "\142\066\151\114\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\u034c\015\141\050" +
    "\146\054\153\055\152\057\142\066\151\114\147\001\001" +
    "\000\012\024\304\113\305\115\u0319\122\u0317\001\001\000" +
    "\004\116\156\001\001\000\016\017\172\024\164\030\174" +
    "\050\170\113\166\123\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\353\001\001\000\012\017\u0306" +
    "\050\267\113\322\123\u0305\001\001\000\002\001\001\000" +
    "\004\031\u02fd\001\001\000\002\001\001\000\004\031\u02f6" +
    "\001\001\000\002\001\001\000\004\031\u02f0\001\001\000" +
    "\004\020\340\001\001\000\004\031\u02e9\001\001\000\004" +
    "\031\u02e0\001\001\000\004\121\175\001\001\000\022\015" +
    "\202\050\206\057\204\061\211\062\176\064\200\067\203" +
    "\114\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\172\024\164\030\u0275\050\170" +
    "\113\166\123\171\001\001\000\022\015\202\050\206\057" +
    "\204\061\211\062\176\064\200\067\u0274\114\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0261\001\001\000\022\015\202\050\206\057\204" +
    "\061\211\062\176\064\200\067\u0260\114\207\001\001\000" +
    "\002\001\001\000\022\015\202\050\206\057\204\061\211" +
    "\062\176\064\200\067\u025d\114\207\001\001\000\004\116" +
    "\213\001\001\000\016\017\172\024\164\030\214\050\170" +
    "\113\166\123\171\001\001\000\004\121\215\001\001\000" +
    "\022\015\221\041\222\043\225\044\216\046\232\050\226" +
    "\065\223\114\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\172\024\164\030\u0212\050\170\113\166" +
    "\123\171\001\001\000\022\015\221\041\222\043\225\044" +
    "\216\046\232\050\226\065\u0211\114\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\221\041\222\043\225\044\216\046\232\050\226\065\u01ff" +
    "\114\230\001\001\000\004\121\u01fd\001\001\000\002\001" +
    "\001\000\022\015\221\041\222\043\225\044\216\046\232" +
    "\050\226\065\u012e\114\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\234\001\001\000\016\017\172" +
    "\024\164\030\235\050\170\113\166\123\171\001\001\000" +
    "\004\121\236\001\001\000\022\015\240\041\222\042\242" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\002\001\001\000\022\015\240\041\222\042\u0128\043\243" +
    "\044\216\046\232\050\244\114\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\240\041\222\042\254" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\004\121\252\001\001\000\022\015\240\041\222\042\251" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\002\001\001\000\022\015\240\041\222\042\250\043\243" +
    "\044\216\046\232\050\244\114\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\240\041\222\042\253" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\270\023\266\024\264\050\267" +
    "\113\265\123\171\001\001\000\004\121\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\270\023\274\024\264\050\267\113\265" +
    "\123\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\270\023\u0115\024\264\050\267\113\265\123\171" +
    "\001\001\000\012\024\304\051\303\113\305\115\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\304" +
    "\113\305\115\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\325\050\267\113\322" +
    "\123\171\001\001\000\012\024\304\051\321\113\305\115" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\331\050\267\113\322\123\330\001\001\000" +
    "\004\020\340\001\001\000\002\001\001\000\014\017\335" +
    "\020\334\050\267\113\322\123\171\001\001\000\004\050" +
    "\353\001\001\000\012\017\337\050\267\113\322\123\336" +
    "\001\001\000\002\001\001\000\004\020\340\001\001\000" +
    "\002\001\001\000\014\017\346\050\267\113\322\120\350" +
    "\123\347\001\001\000\012\017\343\050\267\113\322\123" +
    "\342\001\001\000\004\020\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\u0100\020\376\050\267\113" +
    "\322\123\377\001\001\000\012\017\357\050\267\113\322" +
    "\123\356\001\001\000\004\050\374\001\001\000\004\020" +
    "\340\001\001\000\002\001\001\000\014\017\363\020\361" +
    "\050\267\113\322\123\362\001\001\000\012\017\365\050" +
    "\267\113\322\123\364\001\001\000\004\020\340\001\001" +
    "\000\002\001\001\000\004\020\340\001\001\000\002\001" +
    "\001\000\014\017\370\020\367\050\267\113\322\123\371" +
    "\001\001\000\012\017\373\050\267\113\322\123\372\001" +
    "\001\000\002\001\001\000\004\020\340\001\001\000\004" +
    "\020\340\001\001\000\002\001\001\000\014\017\u0100\020" +
    "\376\050\267\113\322\123\377\001\001\000\014\017\u0103" +
    "\020\u0102\050\267\113\322\123\u0104\001\001\000\014\017" +
    "\346\050\267\113\322\120\u0101\123\347\001\001\000\004" +
    "\020\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\u0105\050\267\113\322\123\171\001\001\000\002" +
    "\001\001\000\004\020\340\001\001\000\002\001\001\000" +
    "\014\017\u0108\020\u0107\050\267\113\322\123\171\001\001" +
    "\000\012\017\u010a\050\267\113\322\123\u0109\001\001\000" +
    "\002\001\001\000\004\020\340\001\001\000\002\001\001" +
    "\000\012\024\304\051\u010c\113\305\115\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\304\051\u010f" +
    "\113\305\115\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\304\051\u0114\113\305" +
    "\115\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\270\023\u0118" +
    "\024\264\050\267\113\265\123\171\001\001\000\002\001" +
    "\001\000\016\017\270\023\u011a\024\264\050\267\113\265" +
    "\123\171\001\001\000\002\001\001\000\004\121\u011c\001" +
    "\001\000\022\015\240\041\222\042\u011d\043\243\044\216" +
    "\046\232\050\244\114\245\001\001\000\002\001\001\000" +
    "\016\017\270\023\u011f\024\264\050\267\113\265\123\171" +
    "\001\001\000\002\001\001\000\016\017\270\023\u0121\024" +
    "\264\050\267\113\265\123\171\001\001\000\002\001\001" +
    "\000\022\015\240\041\222\042\u0123\043\243\044\216\046" +
    "\232\050\244\114\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0126\001\001\000\022\015\240\041" +
    "\222\042\u0127\043\243\044\216\046\232\050\244\114\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u012a\001\001\000\022\015\240\041\222\042\u012b\043\243" +
    "\044\216\046\232\050\244\114\245\001\001\000\002\001" +
    "\001\000\022\015\221\041\222\043\225\044\216\046\232" +
    "\050\226\065\u012d\114\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\113\u0131\001\001" +
    "\000\002\001\001\000\004\113\u0133\001\001\000\002\001" +
    "\001\000\004\113\u0135\001\001\000\004\121\u0136\001\001" +
    "\000\022\015\u013a\032\u013b\034\u0137\035\u0140\037\u0143\047" +
    "\u0142\050\u013e\114\u0141\001\001\000\022\015\u013a\032\u013b" +
    "\034\u0137\035\u0140\037\u0143\047\u01fc\050\u013e\114\u0141\001" +
    "\001\000\002\001\001\000\016\017\172\024\164\030\u01b2" +
    "\050\170\113\166\123\171\001\001\000\022\015\u013a\032" +
    "\u013b\034\u0137\035\u0140\037\u0143\047\u01b1\050\u013e\114\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0174\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\u013a\032\u013b\034\u0137\035\u0140\037" +
    "\u0143\047\u0171\050\u013e\114\u0141\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\116\u0145\001\001\000\016\017" +
    "\172\024\164\030\u0146\050\170\113\166\123\171\001\001" +
    "\000\004\121\u0147\001\001\000\022\015\u0149\040\u014f\041" +
    "\222\043\u014b\044\216\046\232\050\u014c\114\u014e\001\001" +
    "\000\002\001\001\000\022\015\u0149\040\u0167\041\222\043" +
    "\u014b\044\216\046\232\050\u014c\114\u014e\001\001\000\002" +
    "\001\001\000\022\015\u0149\040\u0157\041\222\043\u014b\044" +
    "\216\046\232\050\u014c\114\u014e\001\001\000\004\121\u0155" +
    "\001\001\000\002\001\001\000\022\015\u0149\040\u0152\041" +
    "\222\043\u014b\044\216\046\232\050\u014c\114\u014e\001\001" +
    "\000\002\001\001\000\004\121\u0151\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u0149\040\u0154\041\222" +
    "\043\u014b\044\216\046\232\050\u014c\114\u014e\001\001\000" +
    "\002\001\001\000\022\015\u0149\040\u0156\041\222\043\u014b" +
    "\044\216\046\232\050\u014c\114\u014e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\270\023\u015d\024\264\050" +
    "\267\113\265\123\171\001\001\000\004\121\u0161\001\001" +
    "\000\002\001\001\000\004\121\u015f\001\001\000\022\015" +
    "\u0149\040\u0160\041\222\043\u014b\044\216\046\232\050\u014c" +
    "\114\u014e\001\001\000\002\001\001\000\022\015\u0149\040" +
    "\u0162\041\222\043\u014b\044\216\046\232\050\u014c\114\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0165\001\001\000\022\015\u0149\040\u0166\041\222\043\u014b" +
    "\044\216\046\232\050\u014c\114\u014e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u016c\001\001\000\004" +
    "\121\u016a\001\001\000\022\015\u0149\040\u016b\041\222\043" +
    "\u014b\044\216\046\232\050\u014c\114\u014e\001\001\000\002" +
    "\001\001\000\022\015\u0149\040\u016d\041\222\043\u014b\044" +
    "\216\046\232\050\u014c\114\u014e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0170\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u013a\032\u013b\034\u0137" +
    "\035\u0140\037\u0143\047\u0173\050\u013e\114\u0141\001\001\000" +
    "\002\001\001\000\022\015\u013a\032\u013b\034\u0137\035\u0140" +
    "\037\u0143\047\u0175\050\u013e\114\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\u0178\001\001\000\002" +
    "\001\001\000\004\113\u017a\001\001\000\002\001\001\000" +
    "\004\113\u017c\001\001\000\004\121\u017d\001\001\000\022" +
    "\015\u0181\032\u013b\033\u0180\034\u017e\035\u0140\037\u0143\050" +
    "\u0183\114\u0184\001\001\000\022\015\u0181\032\u013b\033\u01a1" +
    "\034\u017e\035\u0140\037\u0143\050\u0183\114\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\u0181\032\u013b" +
    "\033\u019a\034\u017e\035\u0140\037\u0143\050\u0183\114\u0184\001" +
    "\001\000\002\001\001\000\004\121\u0189\001\001\000\022" +
    "\015\u0181\032\u013b\033\u0188\034\u017e\035\u0140\037\u0143\050" +
    "\u0183\114\u0184\001\001\000\002\001\001\000\022\015\u0181" +
    "\032\u013b\033\u0187\034\u017e\035\u0140\037\u0143\050\u0183\114" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u0181\032\u013b\033\u018a\034\u017e\035\u0140\037\u0143\050" +
    "\u0183\114\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\270\023" +
    "\u0190\024\264\050\267\113\265\123\171\001\001\000\004" +
    "\121\u0194\001\001\000\002\001\001\000\004\121\u0192\001" +
    "\001\000\022\015\u0181\032\u013b\033\u0193\034\u017e\035\u0140" +
    "\037\u0143\050\u0183\114\u0184\001\001\000\002\001\001\000" +
    "\022\015\u0181\032\u013b\033\u0195\034\u017e\035\u0140\037\u0143" +
    "\050\u0183\114\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0198\001\001\000\022\015\u0181\032\u013b" +
    "\033\u0199\034\u017e\035\u0140\037\u0143\050\u0183\114\u0184\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u019d\001\001\000\002\001\001\000\004\121" +
    "\u019f\001\001\000\022\015\u0181\032\u013b\033\u01a0\034\u017e" +
    "\035\u0140\037\u0143\050\u0183\114\u0184\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\270\023\u01a7\024\264\050" +
    "\267\113\265\123\171\001\001\000\004\121\u01ab\001\001" +
    "\000\002\001\001\000\004\121\u01a9\001\001\000\022\015" +
    "\u013a\032\u013b\034\u0137\035\u0140\037\u0143\047\u01aa\050\u013e" +
    "\114\u0141\001\001\000\002\001\001\000\022\015\u013a\032" +
    "\u013b\034\u0137\035\u0140\037\u0143\047\u01ac\050\u013e\114\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u01af\001\001\000\022\015\u013a\032\u013b\034\u0137\035\u0140" +
    "\037\u0143\047\u01b0\050\u013e\114\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u01b4" +
    "\001\001\000\022\015\u01b7\032\u013b\034\u01b5\035\u0140\037" +
    "\u0143\050\u01b9\100\u01bc\114\u01ba\001\001\000\022\015\u01b7" +
    "\032\u013b\034\u01b5\035\u0140\037\u0143\050\u01b9\100\u01f5\114" +
    "\u01ba\001\001\000\002\001\001\000\022\015\u01b7\032\u013b" +
    "\034\u01b5\035\u0140\037\u0143\050\u01b9\100\u01ee\114\u01ba\001" +
    "\001\000\002\001\001\000\004\121\u01dd\001\001\000\022" +
    "\015\u01b7\032\u013b\034\u01b5\035\u0140\037\u0143\050\u01b9\100" +
    "\u01dc\114\u01ba\001\001\000\002\001\001\000\010\036\u01c1" +
    "\110\u01bf\117\u01be\001\001\000\002\001\001\000\016\017" +
    "\172\024\164\030\u01d3\050\170\113\166\123\171\001\001" +
    "\000\002\001\001\000\004\121\u01cb\001\001\000\004\121" +
    "\u01c5\001\001\000\002\001\001\000\004\121\u01c4\001\001" +
    "\000\002\001\001\000\022\015\u01b7\032\u013b\034\u01b5\035" +
    "\u0140\037\u0143\050\u01b9\100\u01c6\114\u01ba\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u01c9\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\u01b7\032\u013b" +
    "\034\u01b5\035\u0140\037\u0143\050\u01b9\100\u01cc\114\u01ba\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u01cf" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u01d2\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u01d5\001\001\000\022\015\u01b7\032\u013b\034\u01b5\035" +
    "\u0140\037\u0143\050\u01b9\100\u01d6\114\u01ba\001\001\000\010" +
    "\036\u01d9\110\u01d7\117\u01be\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\u01b7\032\u013b" +
    "\034\u01b5\035\u0140\037\u0143\050\u01b9\100\u01db\114\u01ba\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u01b7" +
    "\032\u013b\034\u01b5\035\u0140\037\u0143\050\u01b9\100\u01de\114" +
    "\u01ba\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\270\023\u01e4\024" +
    "\264\050\267\113\265\123\171\001\001\000\004\121\u01e8" +
    "\001\001\000\002\001\001\000\004\121\u01e6\001\001\000" +
    "\022\015\u01b7\032\u013b\034\u01b5\035\u0140\037\u0143\050\u01b9" +
    "\100\u01e7\114\u01ba\001\001\000\002\001\001\000\022\015" +
    "\u01b7\032\u013b\034\u01b5\035\u0140\037\u0143\050\u01b9\100\u01e9" +
    "\114\u01ba\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u01ec\001\001\000\022\015\u01b7\032\u013b\034\u01b5" +
    "\035\u0140\037\u0143\050\u01b9\100\u01ed\114\u01ba\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u01f3\001\001" +
    "\000\004\121\u01f1\001\001\000\022\015\u01b7\032\u013b\034" +
    "\u01b5\035\u0140\037\u0143\050\u01b9\100\u01f2\114\u01ba\001\001" +
    "\000\002\001\001\000\022\015\u01b7\032\u013b\034\u01b5\035" +
    "\u0140\037\u0143\050\u01b9\100\u01f4\114\u01ba\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u01fa\001\001\000" +
    "\004\121\u01f8\001\001\000\022\015\u013a\032\u013b\034\u0137" +
    "\035\u0140\037\u0143\047\u01f9\050\u013e\114\u0141\001\001\000" +
    "\002\001\001\000\022\015\u013a\032\u013b\034\u0137\035\u0140" +
    "\037\u0143\047\u01fb\050\u013e\114\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\221\041\222\043\225" +
    "\044\216\046\232\050\226\065\u01fe\114\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\270\023\u0205\024" +
    "\264\050\267\113\265\123\171\001\001\000\004\121\u0209" +
    "\001\001\000\002\001\001\000\004\121\u0207\001\001\000" +
    "\022\015\221\041\222\043\225\044\216\046\232\050\226" +
    "\065\u0208\114\230\001\001\000\002\001\001\000\022\015" +
    "\221\041\222\043\225\044\216\046\232\050\226\065\u020a" +
    "\114\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u020d\001\001\000\022\015\221\041\222\043\225" +
    "\044\216\046\232\050\226\065\u020e\114\230\001\001\000" +
    "\002\001\001\000\004\121\u0210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0214\001" +
    "\001\000\022\015\u0216\041\222\043\u0218\044\216\046\232" +
    "\050\u0219\101\u021c\114\u021b\001\001\000\002\001\001\000" +
    "\022\015\u0216\041\222\043\u0218\044\216\046\232\050\u0219" +
    "\101\u024d\114\u021b\001\001\000\002\001\001\000\022\015" +
    "\u0216\041\222\043\u0218\044\216\046\232\050\u0219\101\u023d" +
    "\114\u021b\001\001\000\004\121\u023b\001\001\000\002\001" +
    "\001\000\022\015\u0216\041\222\043\u0218\044\216\046\232" +
    "\050\u0219\101\u0238\114\u021b\001\001\000\010\045\u021f\106" +
    "\u0220\117\u021d\001\001\000\016\017\172\024\164\030\u0231" +
    "\050\170\113\166\123\171\001\001\000\004\121\u022c\001" +
    "\001\000\004\121\u0227\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0223\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0226\001\001\000\002\001\001" +
    "\000\022\015\u0216\041\222\043\u0218\044\216\046\232\050" +
    "\u0219\101\u0228\114\u021b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u022b\001\001\000\002\001\001\000" +
    "\022\015\u0216\041\222\043\u0218\044\216\046\232\050\u0219" +
    "\101\u022d\114\u021b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0230\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0233\001\001\000\022\015\u0216\041" +
    "\222\043\u0218\044\216\046\232\050\u0219\101\u0234\114\u021b" +
    "\001\001\000\010\045\u0236\106\u0237\117\u021d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\u0216\041\222\043\u0218\044\216\046" +
    "\232\050\u0219\101\u023a\114\u021b\001\001\000\002\001\001" +
    "\000\022\015\u0216\041\222\043\u0218\044\216\046\232\050" +
    "\u0219\101\u023c\114\u021b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\270\023\u0243\024\264\050\267\113\265" +
    "\123\171\001\001\000\004\121\u0247\001\001\000\002\001" +
    "\001\000\004\121\u0245\001\001\000\022\015\u0216\041\222" +
    "\043\u0218\044\216\046\232\050\u0219\101\u0246\114\u021b\001" +
    "\001\000\002\001\001\000\022\015\u0216\041\222\043\u0218" +
    "\044\216\046\232\050\u0219\101\u0248\114\u021b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u024b\001\001" +
    "\000\022\015\u0216\041\222\043\u0218\044\216\046\232\050" +
    "\u0219\101\u024c\114\u021b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0252\001\001\000\004\121\u0250\001" +
    "\001\000\022\015\u0216\041\222\043\u0218\044\216\046\232" +
    "\050\u0219\101\u0251\114\u021b\001\001\000\002\001\001\000" +
    "\022\015\u0216\041\222\043\u0218\044\216\046\232\050\u0219" +
    "\101\u0253\114\u021b\001\001\000\002\001\001\000\004\121" +
    "\u025b\001\001\000\004\121\u0259\001\001\000\004\121\u0257" +
    "\001\001\000\022\015\221\041\222\043\225\044\216\046" +
    "\232\050\226\065\u0258\114\230\001\001\000\002\001\001" +
    "\000\022\015\221\041\222\043\225\044\216\046\232\050" +
    "\226\065\u025a\114\230\001\001\000\002\001\001\000\022" +
    "\015\221\041\222\043\225\044\216\046\232\050\226\065" +
    "\u025c\114\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\202\050\206\057\204\061\211\062\176\064" +
    "\200\067\u025f\114\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\202\050\206\057\204\061\211\062" +
    "\176\064\200\067\u0262\114\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\270\023\u0268\024\264\050\267\113\265\123\171" +
    "\001\001\000\004\121\u026c\001\001\000\002\001\001\000" +
    "\004\121\u026a\001\001\000\022\015\202\050\206\057\204" +
    "\061\211\062\176\064\200\067\u026b\114\207\001\001\000" +
    "\002\001\001\000\022\015\202\050\206\057\204\061\211" +
    "\062\176\064\200\067\u026d\114\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0270\001\001\000\022" +
    "\015\202\050\206\057\204\061\211\062\176\064\200\067" +
    "\u0271\114\207\001\001\000\002\001\001\000\004\121\u0273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0277\001\001\000\022\015\u0279\050\u027b" +
    "\057\204\061\u027f\062\176\064\200\103\u027e\114\u027d\001" +
    "\001\000\002\001\001\000\022\015\u0279\050\u027b\057\204" +
    "\061\u027f\062\176\064\200\103\u02d0\114\u027d\001\001\000" +
    "\002\001\001\000\004\121\u029f\001\001\000\002\001\001" +
    "\000\022\015\u0279\050\u027b\057\204\061\u027f\062\176\064" +
    "\200\103\u029c\114\u027d\001\001\000\010\063\u0283\112\u0284" +
    "\117\u0281\001\001\000\022\015\u0279\050\u027b\057\204\061" +
    "\u027f\062\176\064\200\103\u0280\114\u027d\001\001\000\002" +
    "\001\001\000\016\017\172\024\164\030\u0295\050\170\113" +
    "\166\123\171\001\001\000\004\121\u0290\001\001\000\004" +
    "\121\u028b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0287\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u028a\001\001\000\002\001\001\000\022\015" +
    "\u0279\050\u027b\057\204\061\u027f\062\176\064\200\103\u028c" +
    "\114\u027d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u028f\001\001\000\002\001\001\000\022\015\u0279" +
    "\050\u027b\057\204\061\u027f\062\176\064\200\103\u0291\114" +
    "\u027d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0294\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0297\001\001\000\022\015\u0279\050\u027b\057\204" +
    "\061\u027f\062\176\064\200\103\u0298\114\u027d\001\001\000" +
    "\010\063\u029a\112\u029b\117\u0281\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\u0279\050\u027b\057\204\061\u027f\062\176\064\200" +
    "\103\u029e\114\u027d\001\001\000\002\001\001\000\022\015" +
    "\u02a2\050\u02a4\054\u02a7\055\152\057\142\066\151\102\u02a0" +
    "\114\u02a5\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\u02a2\050\u02a4\054\u02a7\055\152\057\142\066\151" +
    "\102\u02bd\114\u02a5\001\001\000\002\001\001\000\004\121" +
    "\u02ac\001\001\000\022\015\u02a2\050\u02a4\054\u02a7\055\152" +
    "\057\142\066\151\102\u02ab\114\u02a5\001\001\000\002\001" +
    "\001\000\022\015\u02a2\050\u02a4\054\u02a7\055\152\057\142" +
    "\066\151\102\u02a8\114\u02a5\001\001\000\002\001\001\000" +
    "\022\015\u02a2\050\u02a4\054\u02a7\055\152\057\142\066\151" +
    "\102\u02aa\114\u02a5\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u02a2\050\u02a4\054\u02a7\055\152\057\142" +
    "\066\151\102\u02ad\114\u02a5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\270\023\u02b3\024\264\050\267\113\265\123\171\001" +
    "\001\000\004\121\u02b7\001\001\000\002\001\001\000\004" +
    "\121\u02b5\001\001\000\022\015\u02a2\050\u02a4\054\u02a7\055" +
    "\152\057\142\066\151\102\u02b6\114\u02a5\001\001\000\002" +
    "\001\001\000\022\015\u02a2\050\u02a4\054\u02a7\055\152\057" +
    "\142\066\151\102\u02b8\114\u02a5\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u02bb\001\001\000\022\015" +
    "\u02a2\050\u02a4\054\u02a7\055\152\057\142\066\151\102\u02bc" +
    "\114\u02a5\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u02bf\001\001\000\022\015\u02a2\050\u02a4\054\u02a7" +
    "\055\152\057\142\066\151\102\u02c0\114\u02a5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\270\023\u02c6\024\264\050\267\113" +
    "\265\123\171\001\001\000\004\121\u02ca\001\001\000\002" +
    "\001\001\000\004\121\u02c8\001\001\000\022\015\u0279\050" +
    "\u027b\057\204\061\u027f\062\176\064\200\103\u02c9\114\u027d" +
    "\001\001\000\002\001\001\000\022\015\u0279\050\u027b\057" +
    "\204\061\u027f\062\176\064\200\103\u02cb\114\u027d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u02ce\001" +
    "\001\000\022\015\u0279\050\u027b\057\204\061\u027f\062\176" +
    "\064\200\103\u02cf\114\u027d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u02d5\001\001\000\004\121\u02d3" +
    "\001\001\000\022\015\u0279\050\u027b\057\204\061\u027f\062" +
    "\176\064\200\103\u02d4\114\u027d\001\001\000\002\001\001" +
    "\000\022\015\u0279\050\u027b\057\204\061\u027f\062\176\064" +
    "\200\103\u02d6\114\u027d\001\001\000\002\001\001\000\004" +
    "\121\u02db\001\001\000\004\121\u02d9\001\001\000\022\015" +
    "\202\050\206\057\204\061\211\062\176\064\200\067\u02da" +
    "\114\207\001\001\000\002\001\001\000\022\015\202\050" +
    "\206\057\204\061\211\062\176\064\200\067\u02dc\114\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u02e4\024\u02e1\050\u02e3" +
    "\113\u02e2\123\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u02ed\024\u02ea\050\u02ec\113\u02eb\123\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\u02f3\024\u02f1\050\267\113\u02f2\123\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\u02fa\024\u02f7\050" +
    "\u02f9\113\u02f8\123\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u0301\024\u02fe\050\u0300" +
    "\113\u02ff\123\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u0313\001\001\000\004\020" +
    "\340\001\001\000\002\001\001\000\014\017\u0309\020\u0308" +
    "\050\267\113\322\123\u030a\001\001\000\012\017\u030c\050" +
    "\267\113\322\123\u030b\001\001\000\002\001\001\000\004" +
    "\020\340\001\001\000\004\020\340\001\001\000\002\001" +
    "\001\000\014\017\u0310\020\u030e\050\267\113\322\123\u030f" +
    "\001\001\000\012\017\u0312\050\267\113\322\123\u0311\001" +
    "\001\000\004\020\340\001\001\000\002\001\001\000\004" +
    "\020\340\001\001\000\002\001\001\000\014\017\u0100\020" +
    "\376\050\267\113\322\123\377\001\001\000\002\001\001" +
    "\000\012\024\304\051\303\113\305\115\u034a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0330\001\001\000\020\017\u0321\024\u031b\050\u031e\113" +
    "\u031d\114\u031f\123\171\124\u0320\001\001\000\004\121\u032e" +
    "\001\001\000\002\001\001\000\004\121\u0329\001\001\000" +
    "\004\121\u0328\001\001\000\002\001\001\000\004\121\u0327" +
    "\001\001\000\004\121\u0326\001\001\000\004\121\u0325\001" +
    "\001\000\014\024\304\113\305\115\u0319\121\u0324\122\u0317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\304\113\305" +
    "\115\u0319\122\u0332\001\001\000\002\001\001\000\010\024" +
    "\304\113\305\115\u0333\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0336\001\001\000\012\024\304\113" +
    "\305\115\u0319\122\u0337\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\u0340\024\u033b\050\u033d\113\u033c\114\u033e\123\171\124\u033f" +
    "\001\001\000\004\121\u0349\001\001\000\004\121\u0348\001" +
    "\001\000\004\121\u0347\001\001\000\002\001\001\000\004" +
    "\121\u0346\001\001\000\004\121\u0345\001\001\000\004\121" +
    "\u0344\001\001\000\014\024\304\113\305\115\u0319\121\u0343" +
    "\122\u0317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\314\001\001\000" +
    "\004\121\u0336\001\001\000\002\001\001\000\022\013\u034e" +
    "\015\141\050\146\054\153\055\152\057\142\066\151\114" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\u0351\015\141\050\146\054\153\055\152\057\142\066" +
    "\151\114\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u0354\001\001\000\002\001\001\000\004\113" +
    "\u0356\001\001\000\002\001\001\000\004\113\u0358\001\001" +
    "\000\004\121\u0359\001\001\000\022\015\u035b\050\u035d\057" +
    "\204\060\u035e\061\u0361\062\176\064\200\114\u0360\001\001" +
    "\000\002\001\001\000\022\015\u035b\050\u035d\057\204\060" +
    "\u037a\061\u0361\062\176\064\200\114\u0360\001\001\000\002" +
    "\001\001\000\004\121\u0369\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\u035b\050\u035d\057\204\060\u0363" +
    "\061\u0361\062\176\064\200\114\u0360\001\001\000\022\015" +
    "\u035b\050\u035d\057\204\060\u0362\061\u0361\062\176\064\200" +
    "\114\u0360\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\u035b\050\u035d\057\204\060\u0365\061\u0361\062\176" +
    "\064\200\114\u0360\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0368\001\001\000\002\001\001\000\022" +
    "\015\u035b\050\u035d\057\204\060\u036a\061\u0361\062\176\064" +
    "\200\114\u0360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\270\023" +
    "\u0370\024\264\050\267\113\265\123\171\001\001\000\004" +
    "\121\u0374\001\001\000\002\001\001\000\004\121\u0372\001" +
    "\001\000\022\015\u035b\050\u035d\057\204\060\u0373\061\u0361" +
    "\062\176\064\200\114\u0360\001\001\000\002\001\001\000" +
    "\022\015\u035b\050\u035d\057\204\060\u0375\061\u0361\062\176" +
    "\064\200\114\u0360\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0378\001\001\000\022\015\u035b\050\u035d" +
    "\057\204\060\u0379\061\u0361\062\176\064\200\114\u0360\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u037f" +
    "\001\001\000\004\121\u037d\001\001\000\022\015\u035b\050" +
    "\u035d\057\204\060\u037e\061\u0361\062\176\064\200\114\u0360" +
    "\001\001\000\002\001\001\000\022\015\u035b\050\u035d\057" +
    "\204\060\u0380\061\u0361\062\176\064\200\114\u0360\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0391\001" +
    "\001\000\022\016\u0388\017\u038a\024\u0384\050\u0386\113\u0385" +
    "\114\u0387\123\171\124\u0389\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0390\001\001\000\002\001\001" +
    "\000\004\121\u038f\001\001\000\002\001\001\000\004\121" +
    "\u038e\001\001\000\014\024\304\113\305\115\u0319\121\u038d" +
    "\122\u0317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0393\001\001\000\022\016\u0396\017\u0397\024\u0384\050" +
    "\u0394\113\u0385\114\u0395\123\171\124\u0389\001\001\000\002" +
    "\001\001\000\004\121\u039c\001\001\000\002\001\001\000" +
    "\004\121\u039b\001\001\000\004\121\u039a\001\001\000\014" +
    "\024\304\113\305\115\u0319\121\u0399\122\u0317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\270\023\u03a2\024\264\050\267\113\265" +
    "\123\171\001\001\000\004\121\u03a6\001\001\000\002\001" +
    "\001\000\004\121\u03a4\001\001\000\022\013\u03a5\015\141" +
    "\050\146\054\153\055\152\057\142\066\151\114\147\001" +
    "\001\000\002\001\001\000\022\013\u03a7\015\141\050\146" +
    "\054\153\055\152\057\142\066\151\114\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u03aa\001\001" +
    "\000\022\013\u03ab\015\141\050\146\054\153\055\152\057" +
    "\142\066\151\114\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u03af\001\001\000" +
    "\022\015\u02a2\050\u02a4\054\u02a7\055\152\057\142\066\151" +
    "\102\u03b0\114\u02a5\001\001\000\010\056\u03b4\111\u03b2\117" +
    "\u03b1\001\001\000\016\017\172\024\164\030\u03e5\050\170" +
    "\113\166\123\171\001\001\000\002\001\001\000\004\121" +
    "\u03dd\001\001\000\004\121\u03b8\001\001\000\002\001\001" +
    "\000\004\121\u03b7\001\001\000\002\001\001\000\022\015" +
    "\u03ba\050\u03bd\054\u03c0\055\152\057\142\066\151\114\u03be" +
    "\135\u03bc\001\001\000\002\001\001\000\022\015\u03ba\050" +
    "\u03bd\054\u03c0\055\152\057\142\066\151\114\u03be\135\u03d9" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u03c5\001\001\000\022\015\u03ba\050\u03bd\054\u03c0\055\152" +
    "\057\142\066\151\114\u03be\135\u03c4\001\001\000\002\001" +
    "\001\000\022\015\u03ba\050\u03bd\054\u03c0\055\152\057\142" +
    "\066\151\114\u03be\135\u03c1\001\001\000\002\001\001\000" +
    "\022\015\u03ba\050\u03bd\054\u03c0\055\152\057\142\066\151" +
    "\114\u03be\135\u03c3\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u03ba\050\u03bd\054\u03c0\055\152\057\142" +
    "\066\151\114\u03be\135\u03c6\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u03c9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\270\023\u03cf\024\264\050\267\113\265\123\171" +
    "\001\001\000\004\121\u03d3\001\001\000\002\001\001\000" +
    "\004\121\u03d1\001\001\000\022\015\u03ba\050\u03bd\054\u03c0" +
    "\055\152\057\142\066\151\114\u03be\135\u03d2\001\001\000" +
    "\002\001\001\000\022\015\u03ba\050\u03bd\054\u03c0\055\152" +
    "\057\142\066\151\114\u03be\135\u03d4\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u03d7\001\001\000\022" +
    "\015\u03ba\050\u03bd\054\u03c0\055\152\057\142\066\151\114" +
    "\u03be\135\u03d8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u03db\001\001\000\022\015\u03ba\050\u03bd\054" +
    "\u03c0\055\152\057\142\066\151\114\u03be\135\u03dc\001\001" +
    "\000\002\001\001\000\022\015\u03ba\050\u03bd\054\u03c0\055" +
    "\152\057\142\066\151\114\u03be\135\u03de\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u03e1\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u03e4\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u03e7\001" +
    "\001\000\022\015\u02a2\050\u02a4\054\u02a7\055\152\057\142" +
    "\066\151\102\u03e8\114\u02a5\001\001\000\010\056\u03eb\111" +
    "\u03ea\117\u03b1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u03f3\001\001\000\022\013\u03f4\015" +
    "\141\050\146\054\153\055\152\057\142\066\151\114\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u03f7\001\001\000\002\001\001\000\004\011\u03f9\001\001" +
    "\000\002\001\001\000\004\011\u03fb\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\u0400" +
    "\022\u0401\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114" +
    "\u03ff\126\u0404\001\001\000\024\015\u0400\022\u04b6\025\u040a" +
    "\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001" +
    "\001\000\024\015\u0400\022\u04b5\025\u040a\026\u040c\032\u0402" +
    "\041\u0408\050\u0403\114\u03ff\126\u0404\001\001\000\004\127" +
    "\u04b4\001\001\000\002\001\001\000\004\121\u04b2\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\127\u04a1\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\172" +
    "\024\164\030\u041d\050\170\113\166\123\171\001\001\000" +
    "\024\015\u0400\022\u041c\025\u040a\026\u040c\032\u0402\041\u0408" +
    "\050\u0403\114\u03ff\126\u0404\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\270\023\u0412\024\264\050\267\113" +
    "\265\123\171\001\001\000\004\121\u0416\001\001\000\002" +
    "\001\001\000\004\121\u0414\001\001\000\024\015\u0400\022" +
    "\u0415\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff" +
    "\126\u0404\001\001\000\002\001\001\000\024\015\u0400\022" +
    "\u0417\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff" +
    "\126\u0404\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u041a\001\001\000\024\015\u0400\022\u041b\025\u040a" +
    "\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u041f\001\001\000\022\015\u0421\025\u0427\026" +
    "\u040c\032\u0402\041\u0408\050\u0424\077\u0423\114\u0426\001\001" +
    "\000\002\001\001\000\022\015\u0421\025\u0427\026\u040c\032" +
    "\u0402\041\u0408\050\u0424\077\u049b\114\u0426\001\001\000\002" +
    "\001\001\000\010\027\u0431\107\u042f\117\u0430\001\001\000" +
    "\004\121\u042d\001\001\000\002\001\001\000\022\015\u0421" +
    "\025\u0427\026\u040c\032\u0402\041\u0408\050\u0424\077\u042a\114" +
    "\u0426\001\001\000\002\001\001\000\022\015\u0421\025\u0427" +
    "\026\u040c\032\u0402\041\u0408\050\u0424\077\u0429\114\u0426\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u0421" +
    "\025\u0427\026\u040c\032\u0402\041\u0408\050\u0424\077\u042c\114" +
    "\u0426\001\001\000\002\001\001\000\022\015\u0421\025\u0427" +
    "\026\u040c\032\u0402\041\u0408\050\u0424\077\u042e\114\u0426\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\172" +
    "\024\164\030\u0461\050\170\113\166\123\171\001\001\000" +
    "\004\121\u045c\001\001\000\004\121\u0436\001\001\000\002" +
    "\001\001\000\004\121\u0435\001\001\000\002\001\001\000" +
    "\022\015\u0439\025\u043e\026\u040c\032\u0402\041\u0408\050\u043b" +
    "\114\u043d\133\u0437\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u0421\025\u0427\026\u040c\032\u0402\041\u0408" +
    "\050\u0424\077\u0455\114\u0426\001\001\000\002\001\001\000" +
    "\004\121\u0444\001\001\000\002\001\001\000\022\015\u0439" +
    "\025\u043e\026\u040c\032\u0402\041\u0408\050\u043b\114\u043d\133" +
    "\u0441\001\001\000\002\001\001\000\022\015\u0439\025\u043e" +
    "\026\u040c\032\u0402\041\u0408\050\u043b\114\u043d\133\u0440\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u0439" +
    "\025\u043e\026\u040c\032\u0402\041\u0408\050\u043b\114\u043d\133" +
    "\u0443\001\001\000\002\001\001\000\022\015\u0439\025\u043e" +
    "\026\u040c\032\u0402\041\u0408\050\u043b\114\u043d\133\u0445\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\270\023\u044b\024\264\050" +
    "\267\113\265\123\171\001\001\000\004\121\u044f\001\001" +
    "\000\002\001\001\000\004\121\u044d\001\001\000\022\015" +
    "\u0439\025\u043e\026\u040c\032\u0402\041\u0408\050\u043b\114\u043d" +
    "\133\u044e\001\001\000\002\001\001\000\022\015\u0439\025" +
    "\u043e\026\u040c\032\u0402\041\u0408\050\u043b\114\u043d\133\u0450" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0453\001\001\000\022\015\u0439\025\u043e\026\u040c\032\u0402" +
    "\041\u0408\050\u043b\114\u043d\133\u0454\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0457\001\001\000\022" +
    "\015\u0439\025\u043e\026\u040c\032\u0402\041\u0408\050\u043b\114" +
    "\u043d\133\u0458\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u045b\001\001\000\002\001\001\000\022\015" +
    "\u0439\025\u043e\026\u040c\032\u0402\041\u0408\050\u043b\114\u043d" +
    "\133\u045d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0460\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0463\001\001\000\022\015\u0465\025\u046a\026" +
    "\u040c\032\u0402\041\u0408\050\u0467\114\u0469\134\u046b\001\001" +
    "\000\002\001\001\000\022\015\u0465\025\u046a\026\u040c\032" +
    "\u0402\041\u0408\050\u0467\114\u0469\134\u0485\001\001\000\002" +
    "\001\001\000\004\121\u0474\001\001\000\002\001\001\000" +
    "\022\015\u0465\025\u046a\026\u040c\032\u0402\041\u0408\050\u0467" +
    "\114\u0469\134\u0471\001\001\000\002\001\001\000\010\027" +
    "\u046d\107\u046c\117\u0430\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\u0465\025\u046a\026" +
    "\u040c\032\u0402\041\u0408\050\u0467\114\u0469\134\u0470\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u0465\025" +
    "\u046a\026\u040c\032\u0402\041\u0408\050\u0467\114\u0469\134\u0473" +
    "\001\001\000\002\001\001\000\022\015\u0465\025\u046a\026" +
    "\u040c\032\u0402\041\u0408\050\u0467\114\u0469\134\u0475\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\270\023\u047b\024\264\050\267" +
    "\113\265\123\171\001\001\000\004\121\u047f\001\001\000" +
    "\002\001\001\000\004\121\u047d\001\001\000\022\015\u0465" +
    "\025\u046a\026\u040c\032\u0402\041\u0408\050\u0467\114\u0469\134" +
    "\u047e\001\001\000\002\001\001\000\022\015\u0465\025\u046a" +
    "\026\u040c\032\u0402\041\u0408\050\u0467\114\u0469\134\u0480\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0483" +
    "\001\001\000\022\015\u0465\025\u046a\026\u040c\032\u0402\041" +
    "\u0408\050\u0467\114\u0469\134\u0484\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0487\001\001\000\022\015" +
    "\u0465\025\u046a\026\u040c\032\u0402\041\u0408\050\u0467\114\u0469" +
    "\134\u0488\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u048b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\270\023" +
    "\u0491\024\264\050\267\113\265\123\171\001\001\000\004" +
    "\121\u0495\001\001\000\002\001\001\000\004\121\u0493\001" +
    "\001\000\022\015\u0421\025\u0427\026\u040c\032\u0402\041\u0408" +
    "\050\u0424\077\u0494\114\u0426\001\001\000\002\001\001\000" +
    "\022\015\u0421\025\u0427\026\u040c\032\u0402\041\u0408\050\u0424" +
    "\077\u0496\114\u0426\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0499\001\001\000\022\015\u0421\025\u0427" +
    "\026\u040c\032\u0402\041\u0408\050\u0424\077\u049a\114\u0426\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u049d" +
    "\001\001\000\022\015\u0421\025\u0427\026\u040c\032\u0402\041" +
    "\u0408\050\u0424\077\u049e\114\u0426\001\001\000\002\001\001" +
    "\000\024\015\u0400\022\u04a0\025\u040a\026\u040c\032\u0402\041" +
    "\u0408\050\u0403\114\u03ff\126\u0404\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u04aa\001\001\000\024\015" +
    "\u0400\022\u04a9\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403" +
    "\114\u03ff\126\u0404\001\001\000\002\001\001\000\004\121" +
    "\u04a8\001\001\000\004\121\u04a7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\015\u0400\022" +
    "\u04ab\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff" +
    "\126\u0404\001\001\000\002\001\001\000\004\121\u04b0\001" +
    "\001\000\004\121\u04ae\001\001\000\024\015\u0400\022\u04af" +
    "\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126" +
    "\u0404\001\001\000\002\001\001\000\024\015\u0400\022\u04b1" +
    "\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126" +
    "\u0404\001\001\000\002\001\001\000\024\015\u0400\022\u04b3" +
    "\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126" +
    "\u0404\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\u0400\022\u04b8\025" +
    "\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404" +
    "\001\001\000\004\127\u04b9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\015\u0400\022\u04be\025\u040a\026\u040c\032\u0402\041\u0408\050" +
    "\u0403\114\u03ff\126\u0404\001\001\000\004\127\u04bf\001\001" +
    "\000\002\001\001\000\024\015\u0400\022\u04c1\025\u040a\026" +
    "\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001\001" +
    "\000\004\127\u04c2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\027\010\023\021\u04c6" +
    "\053\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\027\010\023\021\u04c9\053\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u04f3\001" +
    "\001\000\004\011\u04d5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u04df\001\001\000\004\012\u04da\001\001\000\004\121\u04db" +
    "\001\001\000\022\013\u04dc\015\141\050\146\054\153\055" +
    "\152\057\142\066\151\114\147\001\001\000\004\131\u04dd" +
    "\001\001\000\002\001\001\000\004\121\u04e5\001\001\000" +
    "\004\121\u04e0\001\001\000\022\013\u04e1\015\141\050\146" +
    "\054\153\055\152\057\142\066\151\114\147\001\001\000" +
    "\004\131\u04e4\001\001\000\004\131\u04e3\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\u04e6\015\141\050" +
    "\146\054\153\055\152\057\142\066\151\114\147\001\001" +
    "\000\004\131\u04e7\001\001\000\002\001\001\000\004\012" +
    "\u04e9\001\001\000\004\121\u04ea\001\001\000\022\013\u04eb" +
    "\015\141\050\146\054\153\055\152\057\142\066\151\114" +
    "\147\001\001\000\004\131\u04ec\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u04ef\001\001\000\004\121" +
    "\u04f0\001\001\000\022\013\u04f1\015\141\050\146\054\153" +
    "\055\152\057\142\066\151\114\147\001\001\000\004\131" +
    "\u04f2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u04f6\001\001\000\004\121\u04f7\001" +
    "\001\000\022\013\u04f8\015\141\050\146\054\153\055\152" +
    "\057\142\066\151\114\147\001\001\000\004\131\u04f9\001" +
    "\001\000\002\001\001\000\004\011\u04fb\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u04fe\001\001\000" +
    "\004\121\u04ff\001\001\000\022\013\u0500\015\141\050\146" +
    "\054\153\055\152\057\142\066\151\114\147\001\001\000" +
    "\004\131\u0501\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0504\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0507\001\001\000\004\121\u0508\001\001" +
    "\000\022\013\u0509\015\141\050\146\054\153\055\152\057" +
    "\142\066\151\114\147\001\001\000\004\131\u050a\001\001" +
    "\000\002\001\001\000\012\007\027\010\023\021\u050c\053" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0530\001\001\000" +
    "\004\011\u0513\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\u0400\022\u0519\025\u040a\026\u040c" +
    "\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001\001\000" +
    "\004\127\u051a\001\001\000\002\001\001\000\024\015\u0400" +
    "\022\u051c\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114" +
    "\u03ff\126\u0404\001\001\000\004\127\u051d\001\001\000\002" +
    "\001\001\000\024\015\u0400\022\u051f\025\u040a\026\u040c\032" +
    "\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001\001\000\004" +
    "\127\u0520\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\u0400\022\u0523\025\u040a\026\u040c\032\u0402\041\u0408" +
    "\050\u0403\114\u03ff\126\u0404\001\001\000\004\127\u0524\001" +
    "\001\000\002\001\001\000\024\015\u0400\022\u0526\025\u040a" +
    "\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001" +
    "\001\000\004\127\u0527\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\u0400\022\u052b\025" +
    "\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404" +
    "\001\001\000\004\127\u052c\001\001\000\002\001\001\000" +
    "\024\015\u0400\022\u052e\025\u040a\026\u040c\032\u0402\041\u0408" +
    "\050\u0403\114\u03ff\126\u0404\001\001\000\004\127\u052f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\015\u0400\022\u0534\025\u040a\026" +
    "\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001\001" +
    "\000\004\127\u0535\001\001\000\002\001\001\000\024\015" +
    "\u0400\022\u0537\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403" +
    "\114\u03ff\126\u0404\001\001\000\004\127\u0538\001\001\000" +
    "\002\001\001\000\004\011\u053a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\015\u0400\022" +
    "\u053e\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff" +
    "\126\u0404\001\001\000\004\127\u053f\001\001\000\002\001" +
    "\001\000\024\015\u0400\022\u0541\025\u040a\026\u040c\032\u0402" +
    "\041\u0408\050\u0403\114\u03ff\126\u0404\001\001\000\004\127" +
    "\u0542\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\u0400\022\u054a\025\u040a" +
    "\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001" +
    "\001\000\004\127\u054b\001\001\000\002\001\001\000\024" +
    "\015\u0400\022\u054d\025\u040a\026\u040c\032\u0402\041\u0408\050" +
    "\u0403\114\u03ff\126\u0404\001\001\000\004\127\u054e\001\001" +
    "\000\002\001\001\000\024\015\u0400\022\u0550\025\u040a\026" +
    "\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126\u0404\001\001" +
    "\000\004\127\u0551\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\u0400\022\u0554\025\u040a\026\u040c\032\u0402" +
    "\041\u0408\050\u0403\114\u03ff\126\u0404\001\001\000\004\127" +
    "\u0555\001\001\000\002\001\001\000\024\015\u0400\022\u0557" +
    "\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff\126" +
    "\u0404\001\001\000\004\127\u0558\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\015\u0400\022" +
    "\u055c\025\u040a\026\u040c\032\u0402\041\u0408\050\u0403\114\u03ff" +
    "\126\u0404\001\001\000\004\127\u055d\001\001\000\002\001" +
    "\001\000\024\015\u0400\022\u055f\025\u040a\026\u040c\032\u0402" +
    "\041\u0408\050\u0403\114\u03ff\126\u0404\001\001\000\004\127" +
    "\u0560\001\001\000\002\001\001\000\012\007\027\010\023" +
    "\021\u0562\053\026\001\001\000\004\130\u0563\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\027\010\023\021\u056c" +
    "\053\026\001\001\000\004\130\u056d\001\001\000\002\001" +
    "\001\000\012\007\027\010\023\021\u056f\053\026\001\001" +
    "\000\004\130\u0570\001\001\000\002\001\001\000\012\007" +
    "\027\010\023\021\u0572\053\026\001\001\000\004\130\u0573" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\027\010\023\021\u0576\053\026\001\001\000\004\130\u0577" +
    "\001\001\000\002\001\001\000\012\007\027\010\023\021" +
    "\u0579\053\026\001\001\000\004\130\u057a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\027\010\023\021\u057e\053\026\001\001\000\004\130\u057f" +
    "\001\001\000\002\001\001\000\012\007\027\010\023\021" +
    "\u0581\053\026\001\001\000\004\130\u0582\001\001\000\002" +
    "\001\001\000\010\002\u0584\003\010\004\006\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol symbol;
    public String token;
    public Symbol irrecuperable;
    ArrayList<String> lista = new ArrayList<String>();
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosModule = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosStructure = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosElseMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosElseIfMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosForMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosWhileMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosForFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosWhileFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosWhileFor = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosForWhile = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosWhileForFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosForWhileFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfWhileMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfForMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfElseFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfElseIfFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfForFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfWhileFuncion = new ArrayList<Nodo>();
    

    public static Arbol arbol;
    public Nodo n_module;
    public String idea;
 
    
    
 @Override
    public void syntax_error(Symbol symbol){
        if(symbol.value.toString().startsWith("\n")){symbol.value = " salto de linea ";}
        if(!symbol.value.toString().startsWith("Error irrecuperable")){
        lista.add("Error en la linea: " + (symbol.left+1)  + " ,Columna: " + (symbol.right+1) + ". NO SE ESPARABA UN: " + symbol.value);
        irrecuperable = symbol;
        }
    }
 @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
        token = "Error irrecuperable en la linea: " + (irrecuperable.left+1)  + " ,Columna: " + (irrecuperable.right+1) + ". NO SE ESPARABA UN: " + irrecuperable.value;
    }
    public ArrayList<String> getError(){
        return  lista;
    }
    public Arbol getArbol(){
        return arbol;
    }
    public String getUnrecovery(){
        return token;
    }

    public void guardarNodoRaiz(String nodo){
        n_module = new Nodo(nodo);
        arbol= new Arbol(n_module);
    }

    public Nodo getRaiz(){
        return n_module;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 709: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 708: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 707: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 706: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.wirteLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 705: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 704: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 703: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 702: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 701: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 700: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 699: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 698: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 697: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 696: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 695: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 694: // INFOR_WHILE_FUNCION ::= DECLARACION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 693: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.witeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 692: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 691: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 690: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 689: // INFOR_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 688: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 687: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosWhileForFuncion);
                                                                                                                                            for(Nodo n : parser.hijosWhileFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 686: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 685: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 684: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 683: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("else");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 682: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 681: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 680: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 679: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 678: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 677: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 676: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 675: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 674: // INIF_WHILE_FUNCION ::= LLAMAR_SUB INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 673: // INIF_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 672: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 671: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 670: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 669: // INIF_WHILE_FUNCION ::= DECLARACION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 668: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 667: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 666: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 665: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 664: // INIF_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 663: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 662: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 661: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 660: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("else");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 659: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 658: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 657: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 656: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 655: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 654: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 653: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 652: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 651: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 650: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 649: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 648: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 647: // INWHILE_FUNCION ::= LLAMAR_SUB INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 646: // INWHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 645: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 644: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 643: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 642: // INWHILE_FUNCION ::= DECLARACION INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 641: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 640: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 639: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 638: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 637: // INWHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 636: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 635: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosWhileFuncion);
                                                                                                                                            for(Nodo n : parser.hijosWhileFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 634: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 633: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 632: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 631: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 630: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 629: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 628: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 627: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 626: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 625: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 624: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 623: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 622: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 621: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 620: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 619: // INWHILE_FOR_FUNCION ::= DECLARACION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 618: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 617: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 616: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 615: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // INWHILE_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosWhileForFuncion);
                                                                                                                                            for(Nodo n : parser.hijosWhileFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;
		
                                                                                                                                                        
                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                                        
                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                                        
                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("else");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // INIF_FOR_FUNCION ::= LLAMAR_SUB INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // INIF_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // INIF_FOR_FUNCION ::= DECLARACION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // INIF_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("else");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // INFOR_FUNCION ::= LLAMAR_SUB INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // INFOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // INFOR_FUNCION ::= DECLARACION INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // INFOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("for identificador igual numero to numero step numero");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            for(Nodo n : parser.hijosForFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("next identificador");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;
		 
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfElseIfFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfElseIfFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfElseIfFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION else_ 
            {
              Object RESULT =null;
		 
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfElseIfFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // INIF_ELSEIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // INIF_ELSEIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // INIF_ELSEIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // INIF_ELSEIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // INIF_ELSEIF_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit funcion");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // INIF_ELSEIF_FUNCION ::= exit function_ FIN_CON_COMENT INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit funcion");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // INIF_ELSEIF_FUNCION ::= LLAMAR_SUB INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // INIF_ELSEIF_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // INIF_ELSEIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // INIF_ELSEIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // INIF_ELSEIF_FUNCION ::= SENTENCIA_FUNCION INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // INIF_ELSEIF_FUNCION ::= DECLARACION INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion)");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // INIF_ELSEIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // INIF_ELSEIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // INIF_ELSEIF_FUNCION ::= comentario findelinea INIF_ELSEIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // INIF_ELSEIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // INIF_ELSEIF_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // INIF_ELSEIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfElseIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF_FUNCION",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // INIF_ELSE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_ELSE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // INIF_ELSE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // INIF_ELSE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_ELSE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // INIF_ELSE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // INIF_ELSE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit funcion");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // INIF_ELSE_FUNCION ::= exit function_ FIN_CON_COMENT INIF_ELSE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit funcion");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // INIF_ELSE_FUNCION ::= LLAMAR_SUB INIF_ELSE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // INIF_ELSE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // INIF_ELSE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_ELSE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // INIF_ELSE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // INIF_ELSE_FUNCION ::= SENTENCIA_FUNCION INIF_ELSE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // INIF_ELSE_FUNCION ::= DECLARACION INIF_ELSE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion)");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // INIF_ELSE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_ELSE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // INIF_ELSE_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // INIF_ELSE_FUNCION ::= comentario findelinea INIF_ELSE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // INIF_ELSE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // INIF_ELSE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // INIF_ELSE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfElseFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE_FUNCION",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit funcion");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit funcion");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // INIF_FUNCION ::= LLAMAR_SUB INIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // INIF_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // INIF_FUNCION ::= DECLARACION INIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion)");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // INIF_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosFuncion);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION FIN_CON_COMENT INIF_ELSE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosFuncion);
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            for(Nodo n : parser.hijosIfElseFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION else_ FIN_CON_COMENT INIF_ELSE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            for(Nodo n : parser.hijosIfElseFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosFuncion);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // INFUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // INFUNCION ::= exit function_ FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // INFUNCION ::= LLAMAR_SUB INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("subproceso");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // INFUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("subproceso");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // INFUNCION ::= DECLARACION INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // INFUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // PIE_FUNCION ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // PIE_FUNCION ::= error function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // PIE_FUNCION ::= end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as error FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC error TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO error as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // FUNCION_ ::= private_ function_ identificador parentesisA error parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // FUNCION_ ::= private_ function_ identificador error PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // FUNCION_ ::= private_ function_ error parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // FUNCION_ ::= private_ error identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT error PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // FUNCION_ ::= error function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("public function identificador()");
                                                                                                                                            
                                                                                                                                            for(Nodo n : parser.hijosFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosModule.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // PIE_STRUCT ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // PIE_STRUCT ::= error struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // PIE_STRUCT ::= end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // STRUCT_ ::= Public_ struct_ error FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // STRUCT_ ::= Public_ error identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // STRUCT_ ::= error struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // STRUCT_ ::= Public_ struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("public struct identificador");
                                                                                                                                            Collections.reverse(parser.hijosStructure);
                                                                                                                                            for(Nodo n : parser.hijosStructure){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosModule.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // DECLARACIONSENCILLA ::= dim identificador error TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // DECLARACIONSENCILLA ::= dim error as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // DECLARACIONSENCILLA ::= dim identificador as error FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // DECLARACIONSENCILLA ::= dim identificador error TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // DECLARACIONSENCILLA ::= dim error as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("Dim identificador AS Type");
                                                                                                                                            parser.hijosStructure.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("Dim identificador AS Type");
                                                                                                                                            parser.hijosStructure.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE OPERADOR_ARITMETICO OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE OPERADOR_ARITMETICO OPERACION_ARITMETICA parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE OPERADOR_ARITMETICO numero parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE OPERADOR_ARITMETICO numero parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // INFOR_WHILE ::= LLAMAR_SUB INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // INFOR_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INFOR_WHILE ::= DECLARACION INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INFOR_WHILE ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("for identificador igual numero to numero step numero");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosForWhile);
                                                                                                                                            for(Nodo n : parser.hijosForWhile){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("next identificador");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE else_ 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE else_ FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // INIF_WHILE ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // INIF_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // INIF_WHILE ::= exit sub FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INIF_WHILE ::= exit do_ FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INIF_WHILE ::= LLAMAR_SUB INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // INIF_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // INIF_WHILE ::= DECLARACION INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // INIF_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // INWHILE_MAIN ::= LLAMAR_SUB INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // INWHILE_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // INWHILE_MAIN ::= DECLARACION INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // INWHILE_MAIN ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_MAIN loop FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            for(Nodo n : parser.hijosWhileMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // INWHILE_FOR ::= LLAMAR_SUB INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // INWHILE_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // INWHILE_FOR ::= DECLARACION INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INWHILE_FOR ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR loop FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            for(Nodo n : parser.hijosWhileFor){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR else_ 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR else_ FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // INIF_FOR ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INIF_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INIF_FOR ::= exit sub FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INIF_FOR ::= exit for_ FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INIF_FOR ::= LLAMAR_SUB INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INIF_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INIF_FOR ::= DECLARACION INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // INIF_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INFOR_MAIN ::= LLAMAR_SUB INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INFOR_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INFOR_MAIN ::= DECLARACION INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // INFOR_MAIN ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_MAIN next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("for identificador igual numero to numero step numero");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            for(Nodo n : parser.hijosForMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("next identificador");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CONDICION ::= NUMERO OPERADORRELACIONAL texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CONDICION ::= BOOLEAN OPERADORRELACIONAL texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CONDICION ::= identificador OPERADORRELACIONAL texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosElseIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_ELSEIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;
		 
                                                                                                                                              
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosElseIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_ELSEIF else_ 
            {
              Object RESULT =null;
		 
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosElseIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_ELSEIF ELSE_IF_MAIN 
            {
              Object RESULT =null;
		 
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosElseIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INIF_ELSEIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INIF_ELSEIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INIF_ELSEIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INIF_ELSEIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INIF_ELSEIF ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INIF_ELSEIF ::= exit sub FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INIF_ELSEIF ::= LLAMAR_SUB INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // INIF_ELSEIF ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // INIF_ELSEIF ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // INIF_ELSEIF ::= SENTENCIA_MAIN findelinea INIF_ELSEIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // INIF_ELSEIF ::= DECLARACION INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // INIF_ELSEIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // INIF_ELSEIF ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // INIF_ELSEIF ::= comentario findelinea INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // INIF_ELSEIF ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // INIF_ELSEIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INIF_ELSEIF ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INIF_ELSEIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INIF_ELSE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INIF_ELSE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INIF_ELSE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INIF_ELSE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INIF_ELSE ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INIF_ELSE ::= exit sub FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INIF_ELSE ::= LLAMAR_SUB INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INIF_ELSE ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INIF_ELSE ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INIF_ELSE ::= SENTENCIA_MAIN findelinea INIF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INIF_ELSE ::= DECLARACION INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INIF_ELSE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INIF_ELSE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INIF_ELSE ::= comentario findelinea INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INIF_ELSE ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INIF_ELSE ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INIF_ELSE ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INIF_ELSE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INIF ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INIF ::= exit sub FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // INIF ::= LLAMAR_SUB INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INIF ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INIF ::= DECLARACION INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INIF ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            Collections.reverse(parser.hijosIfMain);
                                                                                                                                            for(Nodo n : parser.hijosIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            parser.hijosElseIfMain.clear();
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN FIN_CON_COMENT INIF_ELSE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            for(Nodo n : parser.hijosElseMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF else_ FIN_CON_COMENT INIF_ELSE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            for(Nodo n : parser.hijosElseMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TYPEDECLARE ::= READLINE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // READLINE_FUNCION ::= console_ punto readline parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READLINE_FUNCION",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DECLARACION ::= identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION ::= identificador punto identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION ::= dim identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLARACION ::= dim identificador as TYPE_ igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION ::= dim identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACION ::= identificador punto identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION ::= identificador punto identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION ::= identificador punto identificador igual NUMERO FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION ::= identificador punto identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION ::= identificador punto identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACION ::= identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARACION ::= identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION ::= identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECLARACION ::= identificador igual NUMERO FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECLARACION ::= identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECLARACION ::= identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DECLARACION ::= identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARACION ::= dim identificador igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACION ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERACION_AR ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERACION_AR ::= OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERADOR_ARITMETICO ::= mod_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERADOR_ARITMETICO ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERADOR_ARITMETICO ::= div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERADOR_ARITMETICO ::= mult 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERADOR_ARITMETICO ::= resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERADOR_ARITMETICO ::= suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION_ARITMETICA ::= parentesisA resta LLAMAR_FUNCION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERANDOS_TYPE ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERANDOS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERANDOS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETROS_SUB ::= PARAMETROS_TYPE coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMETROS_SUB ::= PARAMETROS_TYPE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LLAMAR_SUB ::= identificador error findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LLAMAR_SUB ::= identificador PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PIE_SUB ::= end_ error FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_SUB",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PIE_SUB ::= end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_SUB",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ULTIMO ::= error PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ULTIMO ::= error findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ULTIMO ::= error sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ULTIMO ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ULTIMO ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ULTIMO ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("exit subproceso");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ULTIMO ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("subproceso");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ULTIMO ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ULTIMO ::= comentario findelinea 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ULTIMO ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ULTIMO ::= DECLARACION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ULTIMO ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INMAIN ::= error sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INMAIN ::= exit error FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INMAIN ::= error findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INMAIN ::= exit sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit subproceso");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INMAIN ::= LLAMAR_SUB INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INMAIN ::= DECLARACION INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INMAIN ::= ULTIMO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMENTARIO_ILIMITADO ::= comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMENTARIO_ILIMITADO ::= comentario findelinea COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMENTARIO_ILIMITADO ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FIN_CON_COMENT ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FIN_CON_COMENT ::= findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MAIN ::= sub identificador parentesisA PARAMETRO error comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MAIN ::= sub identificador parentesisA error parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAIN ::= sub identificador error PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MAIN ::= sub error parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MAIN ::= error identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MAIN ::= sub main_ parentesisA parentesisC error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MAIN ::= sub main_ parentesisA error comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MAIN ::= sub main_ error parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MAIN ::= error main_ parentesisA parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MAIN ::= sub main_ parentesisA parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MAIN ::= sub identificador parentesisA PARAMETRO error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MAIN ::= sub identificador parentesisA error parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MAIN ::= sub identificador error PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MAIN ::= sub error parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MAIN ::= error identificador parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MAIN ::= sub main_ parentesisA error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN ::= sub main_ error parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= error main_ parentesisA parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= sub main_ parentesisA parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("sub main()");
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            for(Nodo n : parser.hijos){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosModule.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NEXT_MODULE ::= comentario findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NEXT_MODULE ::= FUNCION_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NEXT_MODULE ::= STRUCT_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PIE_MODULE ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_MODULE",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PIE_MODULE ::= end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_MODULE",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODULE ::= error Module identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODULE ::= Public_ error identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODULE ::= Public_ Module error comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODULE ::= Public_ Module identificador error findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODULE ::= Public_ Module identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODULE ::= error Module identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MODULE ::= Public_ error identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MODULE ::= Public_ Module error findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;
		
                                                                                                                                        parser.guardarNodoRaiz("public module()");
                                                                                                                                        for(Nodo n : parser.hijosModule){
                                                                                                                                        parser.getRaiz().agregarHijo(n);
                                                                                                                                        }
                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // UC ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // UC ::= comentario findelinea UC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

