
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 29 01:32:47 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import ArbolAST.Arbol;
import ArbolAST.Nodo;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 29 01:32:47 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0299\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\130\004\000\002\130" +
    "\004\000\002\021\003\000\002\021\004\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\010\012\000\002\010" +
    "\012\000\002\010\012\000\002\010\012\000\002\010\012" +
    "\000\002\010\012\000\002\010\012\000\002\010\012\000" +
    "\002\010\012\000\002\010\012\000\002\010\012\000\002" +
    "\010\013\000\002\010\013\000\002\010\013\000\002\010" +
    "\013\000\002\010\013\000\002\010\013\000\002\010\013" +
    "\000\002\010\002\000\002\121\003\000\002\121\004\000" +
    "\002\125\004\000\002\125\005\000\002\125\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\012\000\002\022" +
    "\004\000\002\022\004\000\002\022\005\000\002\022\004" +
    "\000\002\022\006\000\002\022\011\000\002\022\011\000" +
    "\002\022\005\000\002\022\006\000\002\022\006\000\002" +
    "\126\011\000\002\126\003\000\002\126\003\000\002\126" +
    "\004\000\002\126\004\000\002\126\003\000\002\126\005" +
    "\000\002\126\010\000\002\126\010\000\002\126\005\000" +
    "\002\126\004\000\002\126\004\000\002\127\005\000\002" +
    "\127\005\000\002\114\004\000\002\114\005\000\002\122" +
    "\004\000\002\122\005\000\002\122\007\000\002\122\006" +
    "\000\002\113\003\000\002\113\004\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\007\000\002\123\003\000\002\123\003\000" +
    "\002\123\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\017\007\000\002\017" +
    "\007\000\002\017\010\000\002\017\006\000\002\017\006" +
    "\000\002\017\007\000\002\017\010\000\002\017\006\000" +
    "\002\017\007\000\002\017\010\000\002\017\007\000\002" +
    "\017\010\000\002\017\005\000\002\017\006\000\002\017" +
    "\006\000\002\017\007\000\002\017\007\000\002\017\010" +
    "\000\002\017\007\000\002\017\010\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\007\000\002" +
    "\017\010\000\002\017\010\000\002\017\007\000\002\017" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\006\000\002\017\007\000\002\017\010\000" +
    "\002\017\011\000\002\017\010\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\120\003\000\002\120\003" +
    "\000\002\015\007\000\002\015\011\000\002\015\007\000" +
    "\002\015\007\000\002\015\011\000\002\015\011\000\002" +
    "\015\007\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\015\010\000\002\015\007\000\002\015" +
    "\011\000\002\015\006\000\002\015\010\000\002\015\007" +
    "\000\002\015\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\124\007\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\116\003\000\002\116\003\000\002\117\004\000\002" +
    "\117\003\000\002\026\012\000\002\026\015\000\002\026" +
    "\015\000\002\026\013\000\002\077\011\000\002\077\003" +
    "\000\002\077\003\000\002\077\004\000\002\077\005\000" +
    "\002\077\004\000\002\077\012\000\002\077\004\000\002" +
    "\077\005\000\002\077\005\000\002\077\003\000\002\077" +
    "\004\000\002\077\006\000\002\077\005\000\002\077\010" +
    "\000\002\077\011\000\002\077\010\000\002\077\011\000" +
    "\002\133\011\000\002\133\003\000\002\133\003\000\002" +
    "\133\004\000\002\133\005\000\002\133\004\000\002\133" +
    "\012\000\002\133\004\000\002\133\005\000\002\133\005" +
    "\000\002\133\003\000\002\133\004\000\002\133\006\000" +
    "\002\133\005\000\002\133\010\000\002\133\011\000\002" +
    "\133\010\000\002\133\011\000\002\134\011\000\002\134" +
    "\003\000\002\134\003\000\002\134\004\000\002\134\005" +
    "\000\002\134\004\000\002\134\012\000\002\134\004\000" +
    "\002\134\005\000\002\134\005\000\002\134\003\000\002" +
    "\134\004\000\002\134\006\000\002\134\005\000\002\134" +
    "\010\000\002\134\011\000\002\134\010\000\002\134\011" +
    "\000\002\027\010\000\002\027\010\000\002\107\010\000" +
    "\002\107\007\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\031\004\000" +
    "\002\031\004\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\017\000\002\033\011\000\002\033" +
    "\003\000\002\033\003\000\002\033\012\000\002\033\004" +
    "\000\002\033\004\000\002\033\005\000\002\033\004\000" +
    "\002\033\004\000\002\033\005\000\002\033\003\000\002" +
    "\033\004\000\002\033\006\000\002\033\005\000\002\033" +
    "\010\000\002\033\011\000\002\033\010\000\002\033\011" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\100\011\000\002\100\003\000\002\100\003\000\002" +
    "\100\012\000\002\100\004\000\002\100\004\000\002\100" +
    "\005\000\002\100\004\000\002\100\004\000\002\100\005" +
    "\000\002\100\003\000\002\100\004\000\002\100\006\000" +
    "\002\100\006\000\002\100\005\000\002\100\005\000\002" +
    "\100\010\000\002\100\011\000\002\100\010\000\002\100" +
    "\011\000\002\035\012\000\002\035\015\000\002\035\015" +
    "\000\002\035\013\000\002\036\010\000\002\036\010\000" +
    "\002\110\007\000\002\110\010\000\002\037\011\000\002" +
    "\040\011\000\002\040\003\000\002\040\003\000\002\040" +
    "\004\000\002\040\005\000\002\040\012\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\005\000" +
    "\002\040\003\000\002\040\004\000\002\040\006\000\002" +
    "\040\006\000\002\040\005\000\002\040\005\000\002\040" +
    "\010\000\002\040\011\000\002\040\010\000\002\040\011" +
    "\000\002\041\011\000\002\042\011\000\002\042\003\000" +
    "\002\042\003\000\002\042\004\000\002\042\005\000\002" +
    "\042\012\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\005\000\002\042\003\000\002\042\004" +
    "\000\002\042\006\000\002\042\005\000\002\042\010\000" +
    "\002\042\011\000\002\042\010\000\002\042\011\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\101" +
    "\011\000\002\101\003\000\002\101\003\000\002\101\004" +
    "\000\002\101\005\000\002\101\012\000\002\101\004\000" +
    "\002\101\004\000\002\101\004\000\002\101\005\000\002" +
    "\101\003\000\002\101\004\000\002\101\006\000\002\101" +
    "\006\000\002\101\005\000\002\101\005\000\002\101\010" +
    "\000\002\101\011\000\002\101\010\000\002\101\011\000" +
    "\002\044\012\000\002\044\015\000\002\044\015\000\002" +
    "\044\013\000\002\045\010\000\002\045\010\000\002\106" +
    "\007\000\002\106\010\000\002\046\017\000\002\047\011" +
    "\000\002\047\003\000\002\047\004\000\002\047\005\000" +
    "\002\047\003\000\002\047\012\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\005\000\002\047" +
    "\003\000\002\047\004\000\002\047\006\000\002\047\006" +
    "\000\002\047\005\000\002\047\005\000\002\047\010\000" +
    "\002\047\011\000\002\047\010\000\002\047\011\000\002" +
    "\050\005\000\002\050\005\000\002\051\004\000\002\051" +
    "\005\000\002\051\007\000\002\051\006\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\052\007\000" +
    "\002\052\010\000\002\052\007\000\002\052\007\000\002" +
    "\052\007\000\002\052\010\000\002\052\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\132\004\000\002\132\004\000\002\132\004\000" +
    "\002\053\015\000\002\053\015\000\002\053\015\000\002" +
    "\053\015\000\002\053\015\000\002\053\015\000\002\053" +
    "\015\000\002\053\015\000\002\053\015\000\002\053\015" +
    "\000\002\131\004\000\002\131\004\000\002\131\004\000" +
    "\002\011\005\000\002\011\007\000\002\011\010\000\002" +
    "\011\006\000\002\013\011\000\002\013\003\000\002\013" +
    "\004\000\002\013\003\000\002\013\004\000\002\013\005" +
    "\000\002\013\004\000\002\013\012\000\002\013\004\000" +
    "\002\013\005\000\002\013\003\000\002\013\004\000\002" +
    "\013\006\000\002\013\005\000\002\013\010\000\002\013" +
    "\011\000\002\013\010\000\002\013\011\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\012\000" +
    "\002\055\015\000\002\055\015\000\002\055\013\000\002" +
    "\102\011\000\002\102\003\000\002\102\004\000\002\102" +
    "\005\000\002\102\003\000\002\102\012\000\002\102\004" +
    "\000\002\102\004\000\002\102\004\000\002\102\005\000" +
    "\002\102\003\000\002\102\004\000\002\102\006\000\002" +
    "\102\005\000\002\102\010\000\002\102\011\000\002\102" +
    "\010\000\002\102\011\000\002\056\010\000\002\056\010" +
    "\000\002\111\007\000\002\111\010\000\002\057\017\000" +
    "\002\060\011\000\002\060\003\000\002\060\004\000\002" +
    "\060\005\000\002\060\003\000\002\060\012\000\002\060" +
    "\004\000\002\060\004\000\002\060\004\000\002\060\005" +
    "\000\002\060\003\000\002\060\004\000\002\060\006\000" +
    "\002\060\005\000\002\060\006\000\002\060\005\000\002" +
    "\060\010\000\002\060\011\000\002\060\010\000\002\060" +
    "\011\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\062\012\000\002\062\015\000\002\062\015\000" +
    "\002\062\013\000\002\103\011\000\002\103\003\000\002" +
    "\103\004\000\002\103\005\000\002\103\003\000\002\103" +
    "\012\000\002\103\004\000\002\103\004\000\002\103\004" +
    "\000\002\103\005\000\002\103\003\000\002\103\004\000" +
    "\002\103\006\000\002\103\005\000\002\103\006\000\002" +
    "\103\005\000\002\103\010\000\002\103\011\000\002\103" +
    "\010\000\002\103\011\000\002\063\010\000\002\063\010" +
    "\000\002\112\007\000\002\112\010\000\002\064\011\000" +
    "\002\065\011\000\002\065\003\000\002\065\003\000\002" +
    "\065\004\000\002\065\005\000\002\065\012\000\002\065" +
    "\004\000\002\065\004\000\002\065\004\000\002\065\005" +
    "\000\002\065\003\000\002\065\004\000\002\065\006\000" +
    "\002\065\006\000\002\065\006\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\010\000\002\065" +
    "\011\000\002\065\010\000\002\065\011\000\002\066\011" +
    "\000\002\067\011\000\002\067\003\000\002\067\004\000" +
    "\002\067\005\000\002\067\003\000\002\067\012\000\002" +
    "\067\004\000\002\067\004\000\002\067\004\000\002\067" +
    "\005\000\002\067\003\000\002\067\004\000\002\067\006" +
    "\000\002\067\006\000\002\067\005\000\002\067\005\000" +
    "\002\067\010\000\002\067\011\000\002\067\010\000\002" +
    "\067\011\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\071\012\000\002\071\014\000\002\071\011" +
    "\000\002\071\013\000\002\104\011\000\002\104\003\000" +
    "\002\104\004\000\002\104\005\000\002\104\003\000\002" +
    "\104\012\000\002\104\004\000\002\104\004\000\002\104" +
    "\004\000\002\104\005\000\002\104\003\000\002\104\004" +
    "\000\002\104\006\000\002\104\006\000\002\104\005\000" +
    "\002\104\005\000\002\104\010\000\002\104\011\000\002" +
    "\104\010\000\002\104\011\000\002\074\010\000\002\074" +
    "\010\000\002\105\007\000\002\105\010\000\002\072\017" +
    "\000\002\073\011\000\002\073\003\000\002\073\003\000" +
    "\002\073\004\000\002\073\005\000\002\073\012\000\002" +
    "\073\004\000\002\073\004\000\002\073\004\000\002\073" +
    "\005\000\002\073\003\000\002\073\004\000\002\073\006" +
    "\000\002\073\006\000\002\073\006\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\010\000\002" +
    "\073\011\000\002\073\010\000\002\073\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0555\000\010\003\010\006\005\102\004\001\002\000" +
    "\004\100\u0556\001\002\000\006\003\u0538\007\u0539\001\002" +
    "\000\004\002\u0537\001\002\000\004\002\000\001\002\000" +
    "\004\007\017\001\002\000\006\003\010\006\005\001\002" +
    "\000\004\102\013\001\002\000\006\002\uffcf\100\015\001" +
    "\002\000\004\002\uffff\001\002\000\006\002\uffd1\102\013" +
    "\001\002\000\004\002\uffd0\001\002\000\004\051\020\001" +
    "\002\000\006\100\022\102\021\001\002\000\004\100\u0534" +
    "\001\002\000\020\003\031\006\033\010\023\013\uffd4\033" +
    "\025\100\uffd4\102\032\001\002\000\010\003\u04e1\051\u04e2" +
    "\103\u04e0\001\002\000\006\013\ufff1\100\u04de\001\002\000" +
    "\006\003\u04a1\030\u04a2\001\002\000\004\013\u049e\001\002" +
    "\000\014\003\u0496\010\023\013\uffd4\100\041\102\040\001" +
    "\002\000\014\003\u0496\010\023\013\uffd4\100\041\102\040" +
    "\001\002\000\012\025\115\030\114\051\113\103\112\001" +
    "\002\000\004\100\110\001\002\000\006\003\034\025\035" +
    "\001\002\000\004\051\104\001\002\000\006\003\036\051" +
    "\037\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\004\100\100\001\002\000" +
    "\046\003\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\020\uffd3\023\uffd3\027\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\051\uffd3\100\uffd3\102\uffd3\107\uffd3\001\002" +
    "\000\004\012\044\001\002\000\006\003\073\013\074\001" +
    "\002\000\006\003\045\051\046\001\002\000\004\022\066" +
    "\001\002\000\006\003\050\022\047\001\002\000\016\003" +
    "\062\014\054\015\053\016\056\046\055\051\052\001\002" +
    "\000\014\014\054\015\053\016\056\046\055\051\052\001" +
    "\002\000\006\100\041\102\040\001\002\000\016\003\uff4d" +
    "\054\uff4d\074\uff4d\100\uff4d\102\uff4d\104\uff4d\001\002\000" +
    "\016\003\uff50\054\uff50\074\uff50\100\uff50\102\uff50\104\uff50" +
    "\001\002\000\016\003\uff4f\054\uff4f\074\uff4f\100\uff4f\102" +
    "\uff4f\104\uff4f\001\002\000\016\003\uff4e\054\uff4e\074\uff4e" +
    "\100\uff4e\102\uff4e\104\uff4e\001\002\000\016\003\uff51\054" +
    "\uff51\074\uff51\100\uff51\102\uff51\104\uff51\001\002\000\010" +
    "\003\ufe49\012\044\013\ufe49\001\002\000\006\003\ufe46\013" +
    "\ufe46\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\006\003\ufe48\013\ufe48\001" +
    "\002\000\010\003\ufe4c\012\044\013\ufe4c\001\002\000\006" +
    "\003\ufe4b\013\ufe4b\001\002\000\014\014\054\015\053\016" +
    "\056\046\055\051\052\001\002\000\006\100\041\102\040" +
    "\001\002\000\010\003\ufe4a\012\044\013\ufe4a\001\002\000" +
    "\006\003\ufe47\013\ufe47\001\002\000\014\003\ufe45\010\ufe45" +
    "\013\ufe45\100\ufe45\102\ufe45\001\002\000\004\025\077\001" +
    "\002\000\006\003\075\025\076\001\002\000\014\003\ufe3f" +
    "\010\ufe3f\013\ufe3f\100\ufe3f\102\ufe3f\001\002\000\014\003" +
    "\ufe41\010\ufe41\013\ufe41\100\ufe41\102\ufe41\001\002\000\014" +
    "\003\ufe40\010\ufe40\013\ufe40\100\ufe40\102\ufe40\001\002\000" +
    "\046\003\uffd2\005\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\020\uffd2\023\uffd2\027\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\051\uffd2\100\uffd2\102\uffd2\107\uffd2\001\002" +
    "\000\004\012\044\001\002\000\006\003\073\013\074\001" +
    "\002\000\014\003\ufe42\010\ufe42\013\ufe42\100\ufe42\102\ufe42" +
    "\001\002\000\006\100\041\102\040\001\002\000\004\012" +
    "\044\001\002\000\006\003\073\013\074\001\002\000\014" +
    "\003\ufe43\010\ufe43\013\ufe43\100\ufe43\102\ufe43\001\002\000" +
    "\020\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4" +
    "\102\032\001\002\000\004\013\uffeb\001\002\000\004\073" +
    "\u048d\001\002\000\004\073\u03cd\001\002\000\004\051\122" +
    "\001\002\000\004\051\116\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\012\044\001\002\000\006\003\073" +
    "\013\074\001\002\000\014\003\ufe44\010\ufe44\013\ufe44\100" +
    "\ufe44\102\ufe44\001\002\000\004\073\123\001\002\000\006" +
    "\051\126\106\124\001\002\000\004\051\u03c8\001\002\000" +
    "\004\074\133\001\002\000\004\022\127\001\002\000\014" +
    "\014\054\015\053\016\056\046\055\051\052\001\002\000" +
    "\010\003\ufe31\074\ufe31\104\131\001\002\000\006\051\126" +
    "\106\124\001\002\000\006\003\ufe30\074\ufe30\001\002\000" +
    "\004\022\134\001\002\000\014\014\054\015\053\016\056" +
    "\046\055\051\052\001\002\000\006\100\041\102\040\001" +
    "\002\000\022\005\141\011\146\012\145\020\144\023\156" +
    "\035\137\051\155\102\151\001\002\000\004\030\u03c5\001" +
    "\002\000\006\003\u03bf\013\u03c1\001\002\000\016\042\165" +
    "\043\166\051\174\060\162\065\170\073\163\001\002\000" +
    "\026\003\ufe2c\005\141\011\146\012\145\013\ufe2c\020\144" +
    "\023\156\035\137\051\155\102\151\001\002\000\032\003" +
    "\ufe1a\005\ufe1a\011\ufe1a\012\ufe1a\013\ufe1a\020\ufe1a\023\ufe1a" +
    "\027\ufe1a\035\ufe1a\051\ufe1a\102\ufe1a\107\ufe1a\001\002\000" +
    "\004\070\u0390\001\002\000\004\051\u0374\001\002\000\004" +
    "\051\u0345\001\002\000\006\100\041\102\040\001\002\000" +
    "\026\003\ufe23\005\141\011\146\012\145\013\ufe23\020\144" +
    "\023\156\035\137\051\155\102\151\001\002\000\004\100" +
    "\u0340\001\002\000\032\003\ufe19\005\ufe19\011\ufe19\012\ufe19" +
    "\013\ufe19\020\ufe19\023\ufe19\027\ufe19\035\ufe19\051\ufe19\102" +
    "\ufe19\107\ufe19\001\002\000\032\003\ufe1b\005\ufe1b\011\ufe1b" +
    "\012\ufe1b\013\ufe1b\020\ufe1b\023\ufe1b\027\ufe1b\035\ufe1b\051" +
    "\ufe1b\102\ufe1b\107\ufe1b\001\002\000\026\003\ufe2a\005\141" +
    "\011\146\012\145\013\ufe2a\020\144\023\156\035\137\051" +
    "\155\102\151\001\002\000\024\003\u030b\042\165\043\166" +
    "\051\310\054\u030d\060\302\065\170\070\u0309\073\u0308\001" +
    "\002\000\006\024\161\036\160\001\002\000\016\042\165" +
    "\043\166\051\174\060\162\065\170\073\163\001\002\000" +
    "\016\042\uff42\043\uff42\051\uff42\060\uff42\065\uff42\073\uff42" +
    "\001\002\000\016\042\uff41\043\uff41\051\uff41\060\uff41\065" +
    "\uff41\073\uff41\001\002\000\010\051\361\065\321\073\363" +
    "\001\002\000\012\051\331\060\u02f7\065\170\073\163\001" +
    "\002\000\010\054\u02d5\055\u02d7\056\u02d6\001\002\000\024" +
    "\026\uff47\054\uff47\055\uff47\056\uff47\074\uff47\100\uff47\101" +
    "\uff47\102\uff47\104\uff47\001\002\000\024\026\uff46\054\uff46" +
    "\055\uff46\056\uff46\074\uff46\100\uff46\101\uff46\102\uff46\104" +
    "\uff46\001\002\000\026\054\u02d5\055\u02d7\056\u02d6\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\110\uff9f\001" +
    "\002\000\046\026\uffad\037\uffad\047\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\073" +
    "\uffad\074\uffad\100\uffad\101\uffad\102\uffad\104\uffad\110\uffad" +
    "\001\002\000\026\054\u02d5\055\u02d7\056\u02d6\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\110\uff9d\001\002" +
    "\000\012\054\u02d5\055\u02d7\056\u02d6\073\327\001\002\000" +
    "\020\057\341\060\347\061\342\062\336\063\335\073\351" +
    "\110\343\001\002\000\026\054\u02d5\055\u02d7\056\u02d6\057" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\073\300\110\uff9e" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\202\011\146\012\145\020\206\023\213\035\200\051\155" +
    "\102\211\001\002\000\034\005\ufde9\011\ufde9\012\ufde9\013" +
    "\ufde9\020\ufde9\023\ufde9\027\ufde9\032\ufde9\034\ufde9\035\ufde9" +
    "\051\ufde9\102\ufde9\107\ufde9\001\002\000\006\023\u02cf\030" +
    "\u02d0\001\002\000\034\005\ufde7\011\ufde7\012\ufde7\013\ufde7" +
    "\020\ufde7\023\ufde7\027\ufde7\032\ufde7\034\ufde7\035\ufde7\051" +
    "\ufde7\102\ufde7\107\ufde7\001\002\000\016\042\165\043\166" +
    "\051\174\060\162\065\170\073\163\001\002\000\024\005" +
    "\202\011\146\012\145\020\206\023\213\034\ufdb1\035\200" +
    "\051\155\102\211\001\002\000\004\034\u026a\001\002\000" +
    "\034\005\ufde8\011\ufde8\012\ufde8\013\ufde8\020\ufde8\023\ufde8" +
    "\027\ufde8\032\ufde8\034\ufde8\035\ufde8\051\ufde8\102\ufde8\107" +
    "\ufde8\001\002\000\004\070\u025b\001\002\000\006\100\041" +
    "\102\040\001\002\000\024\005\202\011\146\012\145\020" +
    "\206\023\213\034\ufda8\035\200\051\155\102\211\001\002" +
    "\000\004\100\u0256\001\002\000\024\005\202\011\146\012" +
    "\145\020\206\023\213\034\ufdae\035\200\051\155\102\211" +
    "\001\002\000\006\024\161\036\160\001\002\000\016\042" +
    "\165\043\166\051\174\060\162\065\170\073\163\001\002" +
    "\000\006\100\041\102\040\001\002\000\022\005\221\011" +
    "\227\012\145\020\225\023\234\035\220\051\155\102\232" +
    "\001\002\000\032\005\ufe89\011\ufe89\012\ufe89\013\ufe89\020" +
    "\ufe89\023\ufe89\027\ufe89\034\ufe89\035\ufe89\051\ufe89\102\ufe89" +
    "\107\ufe89\001\002\000\010\011\u024e\023\u024c\030\u024d\001" +
    "\002\000\016\042\165\043\166\051\174\060\162\065\170" +
    "\073\163\001\002\000\024\005\221\011\227\012\145\020" +
    "\225\023\234\034\ufdc8\035\220\051\155\102\232\001\002" +
    "\000\032\005\ufe87\011\ufe87\012\ufe87\013\ufe87\020\ufe87\023" +
    "\ufe87\027\ufe87\034\ufe87\035\ufe87\051\ufe87\102\ufe87\107\ufe87" +
    "\001\002\000\004\034\u0207\001\002\000\004\070\u01f8\001" +
    "\002\000\024\005\221\011\227\012\145\020\225\023\234" +
    "\034\ufdc7\035\220\051\155\102\232\001\002\000\004\051" +
    "\u0129\001\002\000\006\100\041\102\040\001\002\000\024" +
    "\005\221\011\227\012\145\020\225\023\234\034\ufdbf\035" +
    "\220\051\155\102\232\001\002\000\004\100\u0124\001\002" +
    "\000\032\005\ufe88\011\ufe88\012\ufe88\013\ufe88\020\ufe88\023" +
    "\ufe88\027\ufe88\034\ufe88\035\ufe88\051\ufe88\102\ufe88\107\ufe88" +
    "\001\002\000\006\024\161\036\160\001\002\000\016\042" +
    "\165\043\166\051\174\060\162\065\170\073\163\001\002" +
    "\000\006\100\041\102\040\001\002\000\022\005\221\011" +
    "\227\012\145\020\242\023\234\035\240\051\155\102\247" +
    "\001\002\000\004\023\u0121\001\002\000\024\005\221\011" +
    "\227\012\145\020\242\023\234\034\ufe9a\035\240\051\155" +
    "\102\247\001\002\000\004\070\260\001\002\000\004\034" +
    "\256\001\002\000\024\005\221\011\227\012\145\020\242" +
    "\023\234\034\ufe99\035\240\051\155\102\247\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\227" +
    "\012\145\020\242\023\234\034\ufe91\035\240\051\155\102" +
    "\247\001\002\000\004\100\250\001\002\000\024\005\221" +
    "\011\227\012\145\020\242\023\234\034\ufe98\035\240\051" +
    "\155\102\247\001\002\000\004\034\ufe97\001\002\000\004" +
    "\034\ufe90\001\002\000\024\005\221\011\227\012\145\020" +
    "\242\023\234\034\ufe93\035\240\051\155\102\247\001\002" +
    "\000\004\034\ufe92\001\002\000\004\034\ufe94\001\002\000" +
    "\006\100\041\102\040\001\002\000\036\003\ufe9c\005\ufe9c" +
    "\011\ufe9c\012\ufe9c\013\ufe9c\020\ufe9c\023\ufe9c\027\ufe9c\034" +
    "\ufe9c\035\ufe9c\051\ufe9c\100\ufe9c\102\ufe9c\107\ufe9c\001\002" +
    "\000\006\021\262\111\261\001\002\000\004\073\u011c\001" +
    "\002\000\004\073\263\001\002\000\022\042\165\043\166" +
    "\051\272\060\162\064\273\065\170\073\163\074\264\001" +
    "\002\000\006\100\041\102\040\001\002\000\006\074\uffa9" +
    "\101\u0118\001\002\000\024\057\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\073\uff9f\074\uffaa\101\u0116\110\uff9f\001\002" +
    "\000\004\074\u0113\001\002\000\040\026\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\073\uff9d\074\uff9d\100\uff9d\101\uff9d\102\uff9d\110\uff9d\001" +
    "\002\000\010\073\327\074\uffa6\101\326\001\002\000\026" +
    "\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\070\276\073" +
    "\300\074\uffa8\101\277\110\uff9e\001\002\000\006\074\uffab" +
    "\101\274\001\002\000\020\042\165\043\166\051\272\060" +
    "\162\064\273\065\170\073\163\001\002\000\004\074\uffa5" +
    "\001\002\000\004\051\323\001\002\000\020\042\165\043" +
    "\166\051\272\060\162\064\273\065\170\073\163\001\002" +
    "\000\020\042\165\043\166\051\310\060\302\065\170\073" +
    "\303\074\301\001\002\000\044\026\ufe55\051\ufe55\054\ufe55" +
    "\055\ufe55\056\ufe55\057\ufe55\060\ufe55\061\ufe55\062\ufe55\063" +
    "\ufe55\065\ufe55\073\ufe55\074\ufe55\100\ufe55\101\ufe55\102\ufe55" +
    "\110\ufe55\001\002\000\004\065\321\001\002\000\014\042" +
    "\165\043\166\051\310\060\302\065\170\001\002\000\044" +
    "\026\ufe54\051\ufe54\054\ufe54\055\ufe54\056\ufe54\057\ufe54\060" +
    "\ufe54\061\ufe54\062\ufe54\063\ufe54\065\ufe54\073\ufe54\074\ufe54" +
    "\100\ufe54\101\ufe54\102\ufe54\110\ufe54\001\002\000\012\074" +
    "\ufe4e\100\ufe4e\102\ufe4e\104\ufe4e\001\002\000\012\074\ufe4d" +
    "\100\ufe4d\102\ufe4d\104\ufe4d\001\002\000\006\074\312\104" +
    "\311\001\002\000\012\074\ufe4f\100\ufe4f\102\ufe4f\104\ufe4f" +
    "\001\002\000\016\042\165\043\166\051\310\060\302\065" +
    "\170\073\303\001\002\000\044\026\ufe53\051\ufe53\054\ufe53" +
    "\055\ufe53\056\ufe53\057\ufe53\060\ufe53\061\ufe53\062\ufe53\063" +
    "\ufe53\065\ufe53\073\ufe53\074\ufe53\100\ufe53\101\ufe53\102\ufe53" +
    "\110\ufe53\001\002\000\044\026\ufe52\051\ufe52\054\ufe52\055" +
    "\ufe52\056\ufe52\057\ufe52\060\ufe52\061\ufe52\062\ufe52\063\ufe52" +
    "\065\ufe52\073\ufe52\074\ufe52\100\ufe52\101\ufe52\102\ufe52\110" +
    "\ufe52\001\002\000\004\074\315\001\002\000\006\074\317" +
    "\104\316\001\002\000\016\042\165\043\166\051\310\060" +
    "\302\065\170\073\303\001\002\000\044\026\ufe50\051\ufe50" +
    "\054\ufe50\055\ufe50\056\ufe50\057\ufe50\060\ufe50\061\ufe50\062" +
    "\ufe50\063\ufe50\065\ufe50\073\ufe50\074\ufe50\100\ufe50\101\ufe50" +
    "\102\ufe50\110\ufe50\001\002\000\044\026\ufe51\051\ufe51\054" +
    "\ufe51\055\ufe51\056\ufe51\057\ufe51\060\ufe51\061\ufe51\062\ufe51" +
    "\063\ufe51\065\ufe51\073\ufe51\074\ufe51\100\ufe51\101\ufe51\102" +
    "\ufe51\110\ufe51\001\002\000\046\026\uffac\037\uffac\047\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062" +
    "\uffac\063\uffac\073\uffac\074\uffac\100\uffac\101\uffac\102\uffac" +
    "\104\uffac\110\uffac\001\002\000\004\074\uffa1\001\002\000" +
    "\006\074\uffa7\101\324\001\002\000\020\042\165\043\166" +
    "\051\272\060\162\064\273\065\170\073\163\001\002\000" +
    "\004\074\uffa0\001\002\000\020\042\165\043\166\051\272" +
    "\060\162\064\273\065\170\073\163\001\002\000\012\051" +
    "\331\060\162\065\170\073\163\001\002\000\040\026\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\073\uff9f\074\uff9f\100\uff9f\101\uff9f\102\uff9f" +
    "\110\uff9f\001\002\000\040\026\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\073\300" +
    "\074\uff9e\100\uff9e\101\uff9e\102\uff9e\110\uff9e\001\002\000" +
    "\022\057\341\060\347\061\342\062\336\063\335\073\351" +
    "\074\u010d\110\343\001\002\000\006\073\327\074\334\001" +
    "\002\000\044\026\uff9a\051\331\054\uff9a\055\uff9a\056\uff9a" +
    "\057\341\060\337\061\342\062\336\063\335\065\170\073" +
    "\uff9a\074\uff9a\100\uff9a\101\uff9a\102\uff9a\110\343\001\002" +
    "\000\012\051\uff70\060\uff70\065\uff70\073\uff70\001\002\000" +
    "\012\051\uff71\060\uff71\065\uff71\073\uff71\001\002\000\012" +
    "\051\uff73\060\uff73\065\uff73\073\363\001\002\000\012\051" +
    "\331\060\162\065\170\073\163\001\002\000\012\051\uff74" +
    "\060\uff74\065\uff74\073\uff74\001\002\000\012\051\uff72\060" +
    "\uff72\065\uff72\073\uff72\001\002\000\012\051\uff6f\060\uff6f" +
    "\065\uff6f\073\uff6f\001\002\000\024\026\uff98\054\uff98\055" +
    "\uff98\056\uff98\073\uff98\074\uff98\100\uff98\101\uff98\102\uff98" +
    "\001\002\000\040\026\uff92\054\uff92\055\uff92\056\uff92\057" +
    "\341\060\347\061\342\062\336\063\335\073\uff92\074\uff92" +
    "\100\uff92\101\uff92\102\uff92\110\343\001\002\000\024\026" +
    "\uff96\054\uff96\055\uff96\056\uff96\073\uff96\074\uff96\100\uff96" +
    "\101\uff96\102\uff96\001\002\000\012\051\uff73\060\uff73\065" +
    "\uff73\073\uff73\001\002\000\012\051\331\060\162\065\170" +
    "\073\163\001\002\000\012\051\331\060\162\065\170\073" +
    "\163\001\002\000\022\057\341\060\347\061\342\062\336" +
    "\063\335\073\351\074\355\110\343\001\002\000\006\073" +
    "\327\074\354\001\002\000\024\026\uff95\054\uff95\055\uff95" +
    "\056\uff95\073\uff95\074\uff95\100\uff95\101\uff95\102\uff95\001" +
    "\002\000\024\026\uff84\054\uff84\055\uff84\056\uff84\073\uff84" +
    "\074\uff84\100\uff84\101\uff84\102\uff84\001\002\000\024\026" +
    "\uff6d\054\uff6d\055\uff6d\056\uff6d\073\327\074\uff6d\100\uff6d" +
    "\101\uff6d\102\uff6d\001\002\000\040\026\uff6e\054\uff6e\055" +
    "\uff6e\056\uff6e\057\341\060\347\061\342\062\336\063\335" +
    "\073\351\074\uff6e\100\uff6e\101\uff6e\102\uff6e\110\343\001" +
    "\002\000\024\026\uff9c\054\uff9c\055\uff9c\056\uff9c\073\uff9c" +
    "\074\uff9c\100\uff9c\101\uff9c\102\uff9c\001\002\000\004\073" +
    "\300\001\002\000\044\026\uff7d\051\331\054\uff7d\055\uff7d" +
    "\056\uff7d\057\341\060\337\061\342\062\336\063\335\065" +
    "\170\073\163\074\uff7d\100\uff7d\101\uff7d\102\uff7d\110\343" +
    "\001\002\000\012\051\331\060\364\065\170\073\163\001" +
    "\002\000\010\051\361\065\321\073\363\001\002\000\022" +
    "\057\341\060\347\061\342\062\336\063\335\073\351\074" +
    "\375\110\343\001\002\000\006\073\327\074\367\001\002" +
    "\000\044\026\uff91\051\331\054\uff91\055\uff91\056\uff91\057" +
    "\341\060\337\061\342\062\336\063\335\065\170\073\uff91" +
    "\074\uff91\100\uff91\101\uff91\102\uff91\110\343\001\002\000" +
    "\012\051\331\060\162\065\170\073\163\001\002\000\040" +
    "\026\uff8e\054\uff8e\055\uff8e\056\uff8e\057\341\060\347\061" +
    "\342\062\336\063\335\073\uff8e\074\uff8e\100\uff8e\101\uff8e" +
    "\102\uff8e\110\343\001\002\000\024\026\uff90\054\uff90\055" +
    "\uff90\056\uff90\073\uff90\074\uff90\100\uff90\101\uff90\102\uff90" +
    "\001\002\000\040\026\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\341\060\347\061\342\062\336\063\335\073\uff8d\074\uff8d" +
    "\100\uff8d\101\uff8d\102\uff8d\110\343\001\002\000\024\026" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\073\uff8f\074\uff8f\100\uff8f" +
    "\101\uff8f\102\uff8f\001\002\000\044\026\uff82\051\331\054" +
    "\uff82\055\uff82\056\uff82\057\341\060\337\061\342\062\336" +
    "\063\335\065\170\073\uff82\074\uff82\100\uff82\101\uff82\102" +
    "\uff82\110\343\001\002\000\012\051\331\060\162\065\170" +
    "\073\163\001\002\000\024\026\uff81\054\uff81\055\uff81\056" +
    "\uff81\073\uff81\074\uff81\100\uff81\101\uff81\102\uff81\001\002" +
    "\000\040\026\uff7e\054\uff7e\055\uff7e\056\uff7e\057\341\060" +
    "\347\061\342\062\336\063\335\073\uff7e\074\uff7e\100\uff7e" +
    "\101\uff7e\102\uff7e\110\343\001\002\000\040\026\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\057\341\060\347\061\342\062\336" +
    "\063\335\073\uff7f\074\uff7f\100\uff7f\101\uff7f\102\uff7f\110" +
    "\343\001\002\000\024\026\uff80\054\uff80\055\uff80\056\uff80" +
    "\073\uff80\074\uff80\100\uff80\101\uff80\102\uff80\001\002\000" +
    "\026\051\331\057\341\060\337\061\342\062\336\063\335" +
    "\065\170\073\163\074\u0104\110\343\001\002\000\044\026" +
    "\uff78\051\331\054\uff78\055\uff78\056\uff78\057\341\060\337" +
    "\061\342\062\336\063\335\065\170\073\uff78\074\uff78\100" +
    "\uff78\101\uff78\102\uff78\110\343\001\002\000\012\051\331" +
    "\060\162\065\170\073\163\001\002\000\040\026\uff7c\054" +
    "\uff7c\055\uff7c\056\uff7c\057\341\060\347\061\342\062\336" +
    "\063\335\073\351\074\uff7c\100\uff7c\101\uff7c\102\uff7c\110" +
    "\343\001\002\000\024\026\uff7b\054\uff7b\055\uff7b\056\uff7b" +
    "\073\327\074\uff7b\100\uff7b\101\uff7b\102\uff7b\001\002\000" +
    "\024\026\uff7a\054\uff7a\055\uff7a\056\uff7a\073\uff7a\074\uff7a" +
    "\100\uff7a\101\uff7a\102\uff7a\001\002\000\012\051\331\060" +
    "\162\065\170\073\163\001\002\000\024\026\uff77\054\uff77" +
    "\055\uff77\056\uff77\073\uff77\074\uff77\100\uff77\101\uff77\102" +
    "\uff77\001\002\000\040\026\uff75\054\uff75\055\uff75\056\uff75" +
    "\057\341\060\347\061\342\062\336\063\335\073\uff75\074" +
    "\uff75\100\uff75\101\uff75\102\uff75\110\343\001\002\000\024" +
    "\026\uff76\054\uff76\055\uff76\056\uff76\073\uff76\074\uff76\100" +
    "\uff76\101\uff76\102\uff76\001\002\000\044\026\uff8b\051\331" +
    "\054\uff8b\055\uff8b\056\uff8b\057\341\060\337\061\342\062" +
    "\336\063\335\065\170\073\uff8b\074\uff8b\100\uff8b\101\uff8b" +
    "\102\uff8b\110\343\001\002\000\012\051\331\060\162\065" +
    "\170\073\163\001\002\000\024\026\uff89\054\uff89\055\uff89" +
    "\056\uff89\073\uff89\074\uff89\100\uff89\101\uff89\102\uff89\001" +
    "\002\000\040\026\uff85\054\uff85\055\uff85\056\uff85\057\341" +
    "\060\347\061\342\062\336\063\335\073\uff85\074\uff85\100" +
    "\uff85\101\uff85\102\uff85\110\343\001\002\000\024\026\uff87" +
    "\054\uff87\055\uff87\056\uff87\073\uff87\074\uff87\100\uff87\101" +
    "\uff87\102\uff87\001\002\000\004\074\uffa3\001\002\000\006" +
    "\100\041\102\040\001\002\000\024\005\221\011\227\012" +
    "\145\020\242\023\234\034\ufe9b\035\240\051\155\102\247" +
    "\001\002\000\004\034\ufe96\001\002\000\020\042\165\043" +
    "\166\051\272\060\162\064\273\065\170\073\163\001\002" +
    "\000\004\074\uffa4\001\002\000\020\042\165\043\166\051" +
    "\272\060\162\064\273\065\170\073\163\001\002\000\004" +
    "\074\uffa2\001\002\000\024\005\221\011\227\012\145\020" +
    "\242\023\234\034\ufe8d\035\240\051\155\102\247\001\002" +
    "\000\004\034\ufe8c\001\002\000\004\074\u011d\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\227" +
    "\012\145\020\242\023\234\034\ufe8b\035\240\051\155\102" +
    "\247\001\002\000\004\034\ufe8a\001\002\000\004\034\ufe95" +
    "\001\002\000\006\100\041\102\040\001\002\000\024\005" +
    "\221\011\227\012\145\020\242\023\234\034\ufe8e\035\240" +
    "\051\155\102\247\001\002\000\004\034\ufe8f\001\002\000" +
    "\024\005\221\011\227\012\145\020\225\023\234\034\ufdc6" +
    "\035\220\051\155\102\232\001\002\000\004\034\ufdc5\001" +
    "\002\000\004\034\ufdbe\001\002\000\024\005\221\011\227" +
    "\012\145\020\225\023\234\034\ufdc1\035\220\051\155\102" +
    "\232\001\002\000\004\034\ufdc0\001\002\000\004\054\u012a" +
    "\001\002\000\006\060\302\065\170\001\002\000\004\037" +
    "\u012c\001\002\000\006\060\302\065\170\001\002\000\004" +
    "\047\u012e\001\002\000\006\060\302\065\170\001\002\000" +
    "\006\100\041\102\040\001\002\000\022\005\u0133\011\u0137" +
    "\012\145\020\u0136\023\u013e\035\u0132\051\155\102\u0139\001" +
    "\002\000\024\005\u0133\011\u0137\012\145\020\u0136\023\u013e" +
    "\032\ufe65\035\u0132\051\155\102\u0139\001\002\000\006\011" +
    "\u01f1\023\u01f0\001\002\000\016\042\165\043\166\051\174" +
    "\060\162\065\170\073\163\001\002\000\024\005\u0133\011" +
    "\u0137\012\145\020\u0136\023\u013e\032\ufe68\035\u0132\051\155" +
    "\102\u0139\001\002\000\032\005\ufecf\011\ufecf\012\ufecf\013" +
    "\ufecf\020\ufecf\023\ufecf\027\ufecf\032\ufecf\035\ufecf\051\ufecf" +
    "\102\ufecf\107\ufecf\001\002\000\004\070\u019c\001\002\000" +
    "\004\051\u0170\001\002\000\006\100\041\102\040\001\002" +
    "\000\004\100\u016c\001\002\000\032\005\ufed0\011\ufed0\012" +
    "\ufed0\013\ufed0\020\ufed0\023\ufed0\027\ufed0\032\ufed0\035\ufed0" +
    "\051\ufed0\102\ufed0\107\ufed0\001\002\000\024\005\u0133\011" +
    "\u0137\012\145\020\u0136\023\u013e\032\ufe5f\035\u0132\051\155" +
    "\102\u0139\001\002\000\004\032\u0168\001\002\000\032\005" +
    "\ufece\011\ufece\012\ufece\013\ufece\020\ufece\023\ufece\027\ufece" +
    "\032\ufece\035\ufece\051\ufece\102\ufece\107\ufece\001\002\000" +
    "\006\024\161\036\160\001\002\000\016\042\165\043\166" +
    "\051\174\060\162\065\170\073\163\001\002\000\006\100" +
    "\041\102\040\001\002\000\022\005\221\011\227\012\145" +
    "\020\u0144\023\234\035\u0142\051\155\102\u0148\001\002\000" +
    "\006\011\u0163\023\u0162\001\002\000\024\005\221\011\227" +
    "\012\145\020\u0144\023\234\034\ufeaf\035\u0142\051\155\102" +
    "\u0148\001\002\000\004\070\u0152\001\002\000\024\005\221" +
    "\011\227\012\145\020\u0144\023\234\034\ufeae\035\u0142\051" +
    "\155\102\u0148\001\002\000\006\100\041\102\040\001\002" +
    "\000\024\005\221\011\227\012\145\020\u0144\023\234\034" +
    "\ufea6\035\u0142\051\155\102\u0148\001\002\000\004\100\u014c" +
    "\001\002\000\004\034\u014a\001\002\000\006\100\041\102" +
    "\040\001\002\000\032\005\ufeb1\011\ufeb1\012\ufeb1\013\ufeb1" +
    "\020\ufeb1\023\ufeb1\027\ufeb1\032\ufeb1\035\ufeb1\051\ufeb1\102" +
    "\ufeb1\107\ufeb1\001\002\000\024\005\221\011\227\012\145" +
    "\020\u0144\023\234\034\ufead\035\u0142\051\155\102\u0148\001" +
    "\002\000\004\034\ufeac\001\002\000\004\034\ufea5\001\002" +
    "\000\024\005\221\011\227\012\145\020\u0144\023\234\034" +
    "\ufea8\035\u0142\051\155\102\u0148\001\002\000\004\034\ufea7" +
    "\001\002\000\004\034\ufea9\001\002\000\006\021\u0154\111" +
    "\u0153\001\002\000\004\073\u015d\001\002\000\004\073\u0155" +
    "\001\002\000\022\042\165\043\166\051\272\060\162\064" +
    "\273\065\170\073\163\074\u0156\001\002\000\006\100\041" +
    "\102\040\001\002\000\004\074\u0158\001\002\000\006\100" +
    "\041\102\040\001\002\000\024\005\221\011\227\012\145" +
    "\020\u0144\023\234\034\ufeb0\035\u0142\051\155\102\u0148\001" +
    "\002\000\004\034\ufeab\001\002\000\024\005\221\011\227" +
    "\012\145\020\u0144\023\234\034\ufea0\035\u0142\051\155\102" +
    "\u0148\001\002\000\004\034\ufe9f\001\002\000\004\074\u015e" +
    "\001\002\000\006\100\041\102\040\001\002\000\024\005" +
    "\221\011\227\012\145\020\u0144\023\234\034\ufe9e\035\u0142" +
    "\051\155\102\u0148\001\002\000\004\034\ufe9d\001\002\000" +
    "\004\034\ufeaa\001\002\000\006\100\041\102\040\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\221\011" +
    "\227\012\145\020\u0144\023\234\034\ufea1\035\u0142\051\155" +
    "\102\u0148\001\002\000\004\034\ufea3\001\002\000\024\005" +
    "\221\011\227\012\145\020\u0144\023\234\034\ufea2\035\u0142" +
    "\051\155\102\u0148\001\002\000\004\034\ufea4\001\002\000" +
    "\004\051\u0169\001\002\000\006\100\041\102\040\001\002" +
    "\000\032\005\ufe6a\011\ufe6a\012\ufe6a\013\ufe6a\020\ufe6a\023" +
    "\ufe6a\027\ufe6a\034\ufe6a\035\ufe6a\051\ufe6a\102\ufe6a\107\ufe6a" +
    "\001\002\000\004\032\ufe5e\001\002\000\024\005\u0133\011" +
    "\u0137\012\145\020\u0136\023\u013e\032\ufe67\035\u0132\051\155" +
    "\102\u0139\001\002\000\004\032\ufe66\001\002\000\024\005" +
    "\u0133\011\u0137\012\145\020\u0136\023\u013e\032\ufe61\035\u0132" +
    "\051\155\102\u0139\001\002\000\004\032\ufe60\001\002\000" +
    "\004\054\u0171\001\002\000\006\060\302\065\170\001\002" +
    "\000\004\037\u0173\001\002\000\006\060\302\065\170\001" +
    "\002\000\004\047\u0175\001\002\000\006\060\302\065\170" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\u0133\011\u0137\012\145\020\u017c\023\u013e\035\u0179\051\155" +
    "\102\u017f\001\002\000\024\005\u0133\011\u0137\012\145\020" +
    "\u017c\023\u013e\032\ufee0\035\u0179\051\155\102\u017f\001\002" +
    "\000\004\011\u0198\001\002\000\004\032\u0195\001\002\000" +
    "\024\005\u0133\011\u0137\012\145\020\u017c\023\u013e\032\ufee1" +
    "\035\u0179\051\155\102\u017f\001\002\000\004\070\u0185\001" +
    "\002\000\006\100\041\102\040\001\002\000\024\005\u0133" +
    "\011\u0137\012\145\020\u017c\023\u013e\032\ufed8\035\u0179\051" +
    "\155\102\u017f\001\002\000\004\100\u0180\001\002\000\024" +
    "\005\u0133\011\u0137\012\145\020\u017c\023\u013e\032\ufedd\035" +
    "\u0179\051\155\102\u017f\001\002\000\004\032\ufedc\001\002" +
    "\000\004\032\ufed7\001\002\000\024\005\u0133\011\u0137\012" +
    "\145\020\u017c\023\u013e\032\ufeda\035\u0179\051\155\102\u017f" +
    "\001\002\000\004\032\ufed9\001\002\000\006\021\u0187\111" +
    "\u0186\001\002\000\004\073\u0190\001\002\000\004\073\u0188" +
    "\001\002\000\022\042\165\043\166\051\272\060\162\064" +
    "\273\065\170\073\163\074\u0189\001\002\000\006\100\041" +
    "\102\040\001\002\000\004\074\u018b\001\002\000\006\100" +
    "\041\102\040\001\002\000\024\005\u0133\011\u0137\012\145" +
    "\020\u017c\023\u013e\032\ufee2\035\u0179\051\155\102\u017f\001" +
    "\002\000\004\032\ufedf\001\002\000\024\005\u0133\011\u0137" +
    "\012\145\020\u017c\023\u013e\032\ufed4\035\u0179\051\155\102" +
    "\u017f\001\002\000\004\032\ufed3\001\002\000\004\074\u0191" +
    "\001\002\000\006\100\041\102\040\001\002\000\024\005" +
    "\u0133\011\u0137\012\145\020\u017c\023\u013e\032\ufed2\035\u0179" +
    "\051\155\102\u017f\001\002\000\004\032\ufed1\001\002\000" +
    "\004\032\ufede\001\002\000\004\051\u0196\001\002\000\006" +
    "\100\041\102\040\001\002\000\036\003\ufee3\005\ufee3\011" +
    "\ufee3\012\ufee3\013\ufee3\020\ufee3\023\ufee3\027\ufee3\032\ufee3" +
    "\035\ufee3\051\ufee3\100\ufee3\102\ufee3\107\ufee3\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\u0133\011\u0137" +
    "\012\145\020\u017c\023\u013e\032\ufed5\035\u0179\051\155\102" +
    "\u017f\001\002\000\004\032\ufed6\001\002\000\004\032\ufedb" +
    "\001\002\000\006\021\u019e\111\u019d\001\002\000\004\073" +
    "\u01a7\001\002\000\004\073\u019f\001\002\000\022\042\165" +
    "\043\166\051\272\060\162\064\273\065\170\073\163\074" +
    "\u01a0\001\002\000\006\100\041\102\040\001\002\000\004" +
    "\074\u01a2\001\002\000\006\100\041\102\040\001\002\000" +
    "\024\005\u0133\011\u0137\012\145\020\u0136\023\u013e\032\ufe69" +
    "\035\u0132\051\155\102\u0139\001\002\000\004\032\ufe64\001" +
    "\002\000\024\005\u0133\011\u0137\012\145\020\u0136\023\u013e" +
    "\032\ufe59\035\u0132\051\155\102\u0139\001\002\000\004\032" +
    "\ufe58\001\002\000\004\074\u01a8\001\002\000\006\100\041" +
    "\102\040\001\002\000\024\005\u0133\011\u0137\012\145\020" +
    "\u0136\023\u013e\032\ufe57\035\u0132\051\155\102\u0139\001\002" +
    "\000\004\032\ufe56\001\002\000\004\032\ufe63\001\002\000" +
    "\004\026\u01ad\001\002\000\006\100\041\102\040\001\002" +
    "\000\022\005\u0133\011\u0137\012\145\020\u01b2\023\u013e\035" +
    "\u01b0\051\155\102\u01b5\001\002\000\030\005\u0133\011\u0137" +
    "\012\145\013\ufecb\020\u01b2\023\u013e\027\ufecb\035\u01b0\051" +
    "\155\102\u01b5\107\ufecb\001\002\000\006\010\u01e9\011\u01ea" +
    "\001\002\000\030\005\u0133\011\u0137\012\145\013\ufecc\020" +
    "\u01b2\023\u013e\027\ufecc\035\u01b0\051\155\102\u01b5\107\ufecc" +
    "\001\002\000\004\070\u01d9\001\002\000\006\100\041\102" +
    "\040\001\002\000\030\005\u0133\011\u0137\012\145\013\ufec3" +
    "\020\u01b2\023\u013e\027\ufec3\035\u01b0\051\155\102\u01b5\107" +
    "\ufec3\001\002\000\004\100\u01d4\001\002\000\010\013\u01bc" +
    "\027\u01bb\107\u01b7\001\002\000\016\042\uff3f\043\uff3f\051" +
    "\uff3f\060\uff3f\065\uff3f\073\uff3f\001\002\000\016\042\165" +
    "\043\166\051\174\060\162\065\170\073\163\001\002\000" +
    "\004\013\u01ca\001\002\000\006\100\041\102\040\001\002" +
    "\000\010\005\u01bf\100\041\102\040\001\002\000\004\005" +
    "\u01bd\001\002\000\006\100\041\102\040\001\002\000\032" +
    "\005\ufeb9\011\ufeb9\012\ufeb9\013\ufeb9\020\ufeb9\023\ufeb9\027" +
    "\ufeb9\032\ufeb9\035\ufeb9\051\ufeb9\102\ufeb9\107\ufeb9\001\002" +
    "\000\016\042\uff40\043\uff40\051\uff40\060\uff40\065\uff40\073" +
    "\uff40\001\002\000\022\005\u0133\011\u0137\012\145\020\u01b2" +
    "\023\u013e\035\u01b0\051\155\102\u01b5\001\002\000\004\013" +
    "\u01c2\001\002\000\004\005\u01c3\001\002\000\006\100\041" +
    "\102\040\001\002\000\032\005\ufeb8\011\ufeb8\012\ufeb8\013" +
    "\ufeb8\020\ufeb8\023\ufeb8\027\ufeb8\032\ufeb8\035\ufeb8\051\ufeb8" +
    "\102\ufeb8\107\ufeb8\001\002\000\022\005\u0133\011\u0137\012" +
    "\145\020\u01b2\023\u013e\035\u01b0\051\155\102\u01b5\001\002" +
    "\000\004\013\u01c7\001\002\000\004\005\u01c8\001\002\000" +
    "\006\100\041\102\040\001\002\000\032\005\ufeb7\011\ufeb7" +
    "\012\ufeb7\013\ufeb7\020\ufeb7\023\ufeb7\027\ufeb7\032\ufeb7\035" +
    "\ufeb7\051\ufeb7\102\ufeb7\107\ufeb7\001\002\000\004\005\u01cb" +
    "\001\002\000\006\100\041\102\040\001\002\000\032\005" +
    "\ufeb6\011\ufeb6\012\ufeb6\013\ufeb6\020\ufeb6\023\ufeb6\027\ufeb6" +
    "\032\ufeb6\035\ufeb6\051\ufeb6\102\ufeb6\107\ufeb6\001\002\000" +
    "\004\026\u01ce\001\002\000\006\100\041\102\040\001\002" +
    "\000\022\005\u0133\011\u0137\012\145\020\u01b2\023\u013e\035" +
    "\u01b0\051\155\102\u01b5\001\002\000\010\013\ufeb3\027\u01d3" +
    "\107\u01b7\001\002\000\004\013\ufeb2\001\002\000\006\100" +
    "\ufeb4\102\ufeb4\001\002\000\010\005\u01bf\100\ufeb5\102\ufeb5" +
    "\001\002\000\030\005\u0133\011\u0137\012\145\013\ufec8\020" +
    "\u01b2\023\u013e\027\ufec8\035\u01b0\051\155\102\u01b5\107\ufec8" +
    "\001\002\000\010\013\ufec7\027\ufec7\107\ufec7\001\002\000" +
    "\010\013\ufec2\027\ufec2\107\ufec2\001\002\000\030\005\u0133" +
    "\011\u0137\012\145\013\ufec5\020\u01b2\023\u013e\027\ufec5\035" +
    "\u01b0\051\155\102\u01b5\107\ufec5\001\002\000\010\013\ufec4" +
    "\027\ufec4\107\ufec4\001\002\000\006\021\u01db\111\u01da\001" +
    "\002\000\004\073\u01e4\001\002\000\004\073\u01dc\001\002" +
    "\000\022\042\165\043\166\051\272\060\162\064\273\065" +
    "\170\073\163\074\u01dd\001\002\000\006\100\041\102\040" +
    "\001\002\000\004\074\u01df\001\002\000\006\100\041\102" +
    "\040\001\002\000\030\005\u0133\011\u0137\012\145\013\ufecd" +
    "\020\u01b2\023\u013e\027\ufecd\035\u01b0\051\155\102\u01b5\107" +
    "\ufecd\001\002\000\010\013\ufeca\027\ufeca\107\ufeca\001\002" +
    "\000\030\005\u0133\011\u0137\012\145\013\ufebd\020\u01b2\023" +
    "\u013e\027\ufebd\035\u01b0\051\155\102\u01b5\107\ufebd\001\002" +
    "\000\010\013\ufebc\027\ufebc\107\ufebc\001\002\000\004\074" +
    "\u01e5\001\002\000\006\100\041\102\040\001\002\000\030" +
    "\005\u0133\011\u0137\012\145\013\ufebb\020\u01b2\023\u013e\027" +
    "\ufebb\035\u01b0\051\155\102\u01b5\107\ufebb\001\002\000\010" +
    "\013\ufeba\027\ufeba\107\ufeba\001\002\000\010\013\ufec9\027" +
    "\ufec9\107\ufec9\001\002\000\006\100\041\102\040\001\002" +
    "\000\006\100\041\102\040\001\002\000\030\005\u0133\011" +
    "\u0137\012\145\013\ufebf\020\u01b2\023\u013e\027\ufebf\035\u01b0" +
    "\051\155\102\u01b5\107\ufebf\001\002\000\010\013\ufec1\027" +
    "\ufec1\107\ufec1\001\002\000\030\005\u0133\011\u0137\012\145" +
    "\013\ufebe\020\u01b2\023\u013e\027\ufebe\035\u01b0\051\155\102" +
    "\u01b5\107\ufebe\001\002\000\010\013\ufec0\027\ufec0\107\ufec0" +
    "\001\002\000\010\013\ufec6\027\ufec6\107\ufec6\001\002\000" +
    "\006\100\041\102\040\001\002\000\006\100\041\102\040" +
    "\001\002\000\024\005\u0133\011\u0137\012\145\020\u0136\023" +
    "\u013e\032\ufe5b\035\u0132\051\155\102\u0139\001\002\000\004" +
    "\032\ufe5d\001\002\000\024\005\u0133\011\u0137\012\145\020" +
    "\u0136\023\u013e\032\ufe5a\035\u0132\051\155\102\u0139\001\002" +
    "\000\004\032\ufe5c\001\002\000\004\032\ufe62\001\002\000" +
    "\004\034\ufdc2\001\002\000\006\021\u01fa\111\u01f9\001\002" +
    "\000\004\073\u0203\001\002\000\004\073\u01fb\001\002\000" +
    "\022\042\165\043\166\051\272\060\162\064\273\065\170" +
    "\073\163\074\u01fc\001\002\000\006\100\041\102\040\001" +
    "\002\000\004\074\u01fe\001\002\000\006\100\041\102\040" +
    "\001\002\000\024\005\221\011\227\012\145\020\225\023" +
    "\234\034\ufdc9\035\220\051\155\102\232\001\002\000\004" +
    "\034\ufdc4\001\002\000\024\005\221\011\227\012\145\020" +
    "\225\023\234\034\ufdb7\035\220\051\155\102\232\001\002" +
    "\000\004\034\ufdb6\001\002\000\004\074\u0204\001\002\000" +
    "\006\100\041\102\040\001\002\000\024\005\221\011\227" +
    "\012\145\020\225\023\234\034\ufdb5\035\220\051\155\102" +
    "\232\001\002\000\004\034\ufdb4\001\002\000\006\100\041" +
    "\102\040\001\002\000\034\005\ufdca\011\ufdca\012\ufdca\013" +
    "\ufdca\020\ufdca\023\ufdca\027\ufdca\032\ufdca\034\ufdca\035\ufdca" +
    "\051\ufdca\102\ufdca\107\ufdca\001\002\000\004\034\ufdc3\001" +
    "\002\000\004\026\u020b\001\002\000\006\100\041\102\040" +
    "\001\002\000\022\005\221\011\227\012\145\020\u020f\023" +
    "\234\035\u020d\051\155\102\u0212\001\002\000\006\010\u0247" +
    "\023\u0246\001\002\000\030\005\221\011\227\012\145\013" +
    "\ufe85\020\u020f\023\234\027\ufe85\035\u020d\051\155\102\u0212" +
    "\107\ufe85\001\002\000\004\070\u0236\001\002\000\030\005" +
    "\221\011\227\012\145\013\ufe84\020\u020f\023\234\027\ufe84" +
    "\035\u020d\051\155\102\u0212\107\ufe84\001\002\000\006\100" +
    "\041\102\040\001\002\000\004\100\u0231\001\002\000\030" +
    "\005\221\011\227\012\145\013\ufe7c\020\u020f\023\234\027" +
    "\ufe7c\035\u020d\051\155\102\u0212\107\ufe7c\001\002\000\010" +
    "\013\u0219\027\u0216\107\u01b7\001\002\000\016\042\165\043" +
    "\166\051\174\060\162\065\170\073\163\001\002\000\010" +
    "\005\u01bf\100\041\102\040\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\013\u021c\001\002\000\004\005\u021a" +
    "\001\002\000\006\100\041\102\040\001\002\000\032\005" +
    "\ufe72\011\ufe72\012\ufe72\013\ufe72\020\ufe72\023\ufe72\027\ufe72" +
    "\034\ufe72\035\ufe72\051\ufe72\102\ufe72\107\ufe72\001\002\000" +
    "\004\005\u021d\001\002\000\006\100\041\102\040\001\002" +
    "\000\032\005\ufe6f\011\ufe6f\012\ufe6f\013\ufe6f\020\ufe6f\023" +
    "\ufe6f\027\ufe6f\034\ufe6f\035\ufe6f\051\ufe6f\102\ufe6f\107\ufe6f" +
    "\001\002\000\022\005\221\011\227\012\145\020\u020f\023" +
    "\234\035\u020d\051\155\102\u0212\001\002\000\004\013\u0221" +
    "\001\002\000\004\005\u0222\001\002\000\006\100\041\102" +
    "\040\001\002\000\032\005\ufe70\011\ufe70\012\ufe70\013\ufe70" +
    "\020\ufe70\023\ufe70\027\ufe70\034\ufe70\035\ufe70\051\ufe70\102" +
    "\ufe70\107\ufe70\001\002\000\022\005\221\011\227\012\145" +
    "\020\u020f\023\234\035\u020d\051\155\102\u0212\001\002\000" +
    "\004\013\u0226\001\002\000\004\005\u0227\001\002\000\006" +
    "\100\041\102\040\001\002\000\032\005\ufe71\011\ufe71\012" +
    "\ufe71\013\ufe71\020\ufe71\023\ufe71\027\ufe71\034\ufe71\035\ufe71" +
    "\051\ufe71\102\ufe71\107\ufe71\001\002\000\004\026\u022a\001" +
    "\002\000\006\100\041\102\040\001\002\000\022\005\221" +
    "\011\227\012\145\020\u020f\023\234\035\u020d\051\155\102" +
    "\u0212\001\002\000\010\013\ufe6c\027\u022d\107\u01b7\001\002" +
    "\000\010\005\u01bf\100\ufe6e\102\ufe6e\001\002\000\006\100" +
    "\ufe6d\102\ufe6d\001\002\000\004\013\ufe6b\001\002\000\010" +
    "\013\ufe7b\027\ufe7b\107\ufe7b\001\002\000\030\005\221\011" +
    "\227\012\145\013\ufe83\020\u020f\023\234\027\ufe83\035\u020d" +
    "\051\155\102\u0212\107\ufe83\001\002\000\010\013\ufe82\027" +
    "\ufe82\107\ufe82\001\002\000\030\005\221\011\227\012\145" +
    "\013\ufe7e\020\u020f\023\234\027\ufe7e\035\u020d\051\155\102" +
    "\u0212\107\ufe7e\001\002\000\010\013\ufe7d\027\ufe7d\107\ufe7d" +
    "\001\002\000\010\013\ufe7f\027\ufe7f\107\ufe7f\001\002\000" +
    "\006\021\u0238\111\u0237\001\002\000\004\073\u0241\001\002" +
    "\000\004\073\u0239\001\002\000\022\042\165\043\166\051" +
    "\272\060\162\064\273\065\170\073\163\074\u023a\001\002" +
    "\000\006\100\041\102\040\001\002\000\004\074\u023c\001" +
    "\002\000\006\100\041\102\040\001\002\000\030\005\221" +
    "\011\227\012\145\013\ufe86\020\u020f\023\234\027\ufe86\035" +
    "\u020d\051\155\102\u0212\107\ufe86\001\002\000\010\013\ufe81" +
    "\027\ufe81\107\ufe81\001\002\000\030\005\221\011\227\012" +
    "\145\013\ufe76\020\u020f\023\234\027\ufe76\035\u020d\051\155" +
    "\102\u0212\107\ufe76\001\002\000\010\013\ufe75\027\ufe75\107" +
    "\ufe75\001\002\000\004\074\u0242\001\002\000\006\100\041" +
    "\102\040\001\002\000\030\005\221\011\227\012\145\013" +
    "\ufe74\020\u020f\023\234\027\ufe74\035\u020d\051\155\102\u0212" +
    "\107\ufe74\001\002\000\010\013\ufe73\027\ufe73\107\ufe73\001" +
    "\002\000\010\013\ufe80\027\ufe80\107\ufe80\001\002\000\006" +
    "\100\041\102\040\001\002\000\006\100\041\102\040\001" +
    "\002\000\030\005\221\011\227\012\145\013\ufe77\020\u020f" +
    "\023\234\027\ufe77\035\u020d\051\155\102\u0212\107\ufe77\001" +
    "\002\000\010\013\ufe79\027\ufe79\107\ufe79\001\002\000\030" +
    "\005\221\011\227\012\145\013\ufe78\020\u020f\023\234\027" +
    "\ufe78\035\u020d\051\155\102\u0212\107\ufe78\001\002\000\010" +
    "\013\ufe7a\027\ufe7a\107\ufe7a\001\002\000\006\100\041\102" +
    "\040\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\024\005\221\011\227\012" +
    "\145\020\225\023\234\034\ufdb9\035\220\051\155\102\232" +
    "\001\002\000\004\034\ufdbc\001\002\000\024\005\221\011" +
    "\227\012\145\020\225\023\234\034\ufdb8\035\220\051\155" +
    "\102\232\001\002\000\004\034\ufdbb\001\002\000\024\005" +
    "\221\011\227\012\145\020\225\023\234\034\ufdba\035\220" +
    "\051\155\102\232\001\002\000\004\034\ufdbd\001\002\000" +
    "\004\034\ufdab\001\002\000\024\005\202\011\146\012\145" +
    "\020\206\023\213\034\ufdb0\035\200\051\155\102\211\001" +
    "\002\000\004\034\ufdaf\001\002\000\004\034\ufda7\001\002" +
    "\000\024\005\202\011\146\012\145\020\206\023\213\034" +
    "\ufdaa\035\200\051\155\102\211\001\002\000\004\034\ufda9" +
    "\001\002\000\006\021\u025d\111\u025c\001\002\000\004\073" +
    "\u0266\001\002\000\004\073\u025e\001\002\000\022\042\165" +
    "\043\166\051\272\060\162\064\273\065\170\073\163\074" +
    "\u025f\001\002\000\006\100\041\102\040\001\002\000\004" +
    "\074\u0261\001\002\000\006\100\041\102\040\001\002\000" +
    "\024\005\202\011\146\012\145\020\206\023\213\034\ufdb2" +
    "\035\200\051\155\102\211\001\002\000\004\034\ufdad\001" +
    "\002\000\024\005\202\011\146\012\145\020\206\023\213" +
    "\034\ufda2\035\200\051\155\102\211\001\002\000\004\034" +
    "\ufda1\001\002\000\004\074\u0267\001\002\000\006\100\041" +
    "\102\040\001\002\000\024\005\202\011\146\012\145\020" +
    "\206\023\213\034\ufda0\035\200\051\155\102\211\001\002" +
    "\000\004\034\ufd9f\001\002\000\006\100\041\102\040\001" +
    "\002\000\032\003\ufdb3\005\ufdb3\011\ufdb3\012\ufdb3\013\ufdb3" +
    "\020\ufdb3\023\ufdb3\027\ufdb3\035\ufdb3\051\ufdb3\102\ufdb3\107" +
    "\ufdb3\001\002\000\004\034\ufdac\001\002\000\004\026\u026e" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\202\011\146\012\145\020\u0272\023\213\035\u0270\051\155" +
    "\102\u0274\001\002\000\006\011\u02ca\030\u02c9\001\002\000" +
    "\030\005\202\011\146\012\145\013\ufde1\020\u0272\023\213" +
    "\027\ufde1\035\u0270\051\155\102\u0274\107\ufde1\001\002\000" +
    "\004\070\u02b9\001\002\000\006\100\041\102\040\001\002" +
    "\000\004\100\u0295\001\002\000\030\005\202\011\146\012" +
    "\145\013\ufdd8\020\u0272\023\213\027\ufdd8\035\u0270\051\155" +
    "\102\u0274\107\ufdd8\001\002\000\010\013\u027d\027\u027a\107" +
    "\u01b7\001\002\000\030\005\202\011\146\012\145\013\ufdde" +
    "\020\u0272\023\213\027\ufdde\035\u0270\051\155\102\u0274\107" +
    "\ufdde\001\002\000\010\013\ufddb\027\ufddb\107\ufddb\001\002" +
    "\000\016\042\165\043\166\051\174\060\162\065\170\073" +
    "\163\001\002\000\010\005\u01bf\100\041\102\040\001\002" +
    "\000\006\100\041\102\040\001\002\000\004\013\u0280\001" +
    "\002\000\004\005\u027e\001\002\000\006\100\041\102\040" +
    "\001\002\000\034\005\ufde6\011\ufde6\012\ufde6\013\ufde6\020" +
    "\ufde6\023\ufde6\027\ufde6\032\ufde6\034\ufde6\035\ufde6\051\ufde6" +
    "\102\ufde6\107\ufde6\001\002\000\004\005\u0281\001\002\000" +
    "\006\100\041\102\040\001\002\000\034\005\ufde3\011\ufde3" +
    "\012\ufde3\013\ufde3\020\ufde3\023\ufde3\027\ufde3\032\ufde3\034" +
    "\ufde3\035\ufde3\051\ufde3\102\ufde3\107\ufde3\001\002\000\022" +
    "\005\202\011\146\012\145\020\u0272\023\213\035\u0270\051" +
    "\155\102\u0274\001\002\000\004\013\u0285\001\002\000\004" +
    "\005\u0286\001\002\000\006\100\041\102\040\001\002\000" +
    "\034\005\ufde4\011\ufde4\012\ufde4\013\ufde4\020\ufde4\023\ufde4" +
    "\027\ufde4\032\ufde4\034\ufde4\035\ufde4\051\ufde4\102\ufde4\107" +
    "\ufde4\001\002\000\022\005\202\011\146\012\145\020\u0272" +
    "\023\213\035\u0270\051\155\102\u0274\001\002\000\004\013" +
    "\u028a\001\002\000\004\005\u028b\001\002\000\006\100\041" +
    "\102\040\001\002\000\034\005\ufde5\011\ufde5\012\ufde5\013" +
    "\ufde5\020\ufde5\023\ufde5\027\ufde5\032\ufde5\034\ufde5\035\ufde5" +
    "\051\ufde5\102\ufde5\107\ufde5\001\002\000\004\026\u028e\001" +
    "\002\000\006\100\041\102\040\001\002\000\022\005\202" +
    "\011\146\012\145\020\u0272\023\213\035\u0270\051\155\102" +
    "\u0274\001\002\000\010\013\ufdcc\027\u0291\107\u01b7\001\002" +
    "\000\010\005\u01bf\100\ufdce\102\ufdce\001\002\000\006\100" +
    "\ufdcd\102\ufdcd\001\002\000\004\013\ufdcb\001\002\000\010" +
    "\013\ufdd7\027\ufdd7\107\ufdd7\001\002\000\030\005\202\011" +
    "\146\012\145\013\ufde0\020\u0272\023\213\027\ufde0\035\u0270" +
    "\051\155\102\u0274\107\ufde0\001\002\000\010\013\ufddf\027" +
    "\ufddf\107\ufddf\001\002\000\030\005\141\011\146\012\145" +
    "\013\ufdda\020\u029b\023\156\027\ufdda\035\u0299\051\155\102" +
    "\u029e\107\ufdda\001\002\000\010\013\ufdd9\027\ufdd9\107\ufdd9" +
    "\001\002\000\004\030\u02b6\001\002\000\030\005\141\011" +
    "\146\012\145\013\ufe13\020\u029b\023\156\027\ufe13\035\u0299" +
    "\051\155\102\u029e\107\ufe13\001\002\000\004\070\u02a6\001" +
    "\002\000\006\100\041\102\040\001\002\000\030\005\141" +
    "\011\146\012\145\013\ufe0a\020\u029b\023\156\027\ufe0a\035" +
    "\u0299\051\155\102\u029e\107\ufe0a\001\002\000\004\100\u02a1" +
    "\001\002\000\030\005\141\011\146\012\145\013\ufe10\020" +
    "\u029b\023\156\027\ufe10\035\u0299\051\155\102\u029e\107\ufe10" +
    "\001\002\000\010\013\ufe0d\027\ufe0d\107\ufe0d\001\002\000" +
    "\030\005\141\011\146\012\145\013\ufe12\020\u029b\023\156" +
    "\027\ufe12\035\u0299\051\155\102\u029e\107\ufe12\001\002\000" +
    "\010\013\ufe11\027\ufe11\107\ufe11\001\002\000\010\013\ufe09" +
    "\027\ufe09\107\ufe09\001\002\000\030\005\141\011\146\012" +
    "\145\013\ufe0c\020\u029b\023\156\027\ufe0c\035\u0299\051\155" +
    "\102\u029e\107\ufe0c\001\002\000\010\013\ufe0b\027\ufe0b\107" +
    "\ufe0b\001\002\000\006\021\u02a8\111\u02a7\001\002\000\004" +
    "\073\u02b1\001\002\000\004\073\u02a9\001\002\000\022\042" +
    "\165\043\166\051\272\060\162\064\273\065\170\073\163" +
    "\074\u02aa\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\074\u02ac\001\002\000\006\100\041\102\040\001\002" +
    "\000\030\005\141\011\146\012\145\013\ufe14\020\u029b\023" +
    "\156\027\ufe14\035\u0299\051\155\102\u029e\107\ufe14\001\002" +
    "\000\010\013\ufe0f\027\ufe0f\107\ufe0f\001\002\000\030\005" +
    "\141\011\146\012\145\013\ufe06\020\u029b\023\156\027\ufe06" +
    "\035\u0299\051\155\102\u029e\107\ufe06\001\002\000\010\013" +
    "\ufe05\027\ufe05\107\ufe05\001\002\000\004\074\u02b2\001\002" +
    "\000\006\100\041\102\040\001\002\000\030\005\141\011" +
    "\146\012\145\013\ufe04\020\u029b\023\156\027\ufe04\035\u0299" +
    "\051\155\102\u029e\107\ufe04\001\002\000\010\013\ufe03\027" +
    "\ufe03\107\ufe03\001\002\000\010\013\ufe0e\027\ufe0e\107\ufe0e" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\141\011\146\012\145\013\ufe07\020\u029b\023\156\027\ufe07" +
    "\035\u0299\051\155\102\u029e\107\ufe07\001\002\000\010\013" +
    "\ufe08\027\ufe08\107\ufe08\001\002\000\006\021\u02bb\111\u02ba" +
    "\001\002\000\004\073\u02c4\001\002\000\004\073\u02bc\001" +
    "\002\000\022\042\165\043\166\051\272\060\162\064\273" +
    "\065\170\073\163\074\u02bd\001\002\000\006\100\041\102" +
    "\040\001\002\000\004\074\u02bf\001\002\000\006\100\041" +
    "\102\040\001\002\000\030\005\202\011\146\012\145\013" +
    "\ufde2\020\u0272\023\213\027\ufde2\035\u0270\051\155\102\u0274" +
    "\107\ufde2\001\002\000\010\013\ufddd\027\ufddd\107\ufddd\001" +
    "\002\000\030\005\202\011\146\012\145\013\ufdd2\020\u0272" +
    "\023\213\027\ufdd2\035\u0270\051\155\102\u0274\107\ufdd2\001" +
    "\002\000\010\013\ufdd1\027\ufdd1\107\ufdd1\001\002\000\004" +
    "\074\u02c5\001\002\000\006\100\041\102\040\001\002\000" +
    "\030\005\202\011\146\012\145\013\ufdd0\020\u0272\023\213" +
    "\027\ufdd0\035\u0270\051\155\102\u0274\107\ufdd0\001\002\000" +
    "\010\013\ufdcf\027\ufdcf\107\ufdcf\001\002\000\010\013\ufddc" +
    "\027\ufddc\107\ufddc\001\002\000\006\100\041\102\040\001" +
    "\002\000\006\100\041\102\040\001\002\000\030\005\202" +
    "\011\146\012\145\013\ufdd3\020\u0272\023\213\027\ufdd3\035" +
    "\u0270\051\155\102\u0274\107\ufdd3\001\002\000\010\013\ufdd4" +
    "\027\ufdd4\107\ufdd4\001\002\000\030\005\202\011\146\012" +
    "\145\013\ufdd5\020\u0272\023\213\027\ufdd5\035\u0270\051\155" +
    "\102\u0274\107\ufdd5\001\002\000\010\013\ufdd6\027\ufdd6\107" +
    "\ufdd6\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\024\005\202\011\146\012" +
    "\145\020\206\023\213\034\ufda3\035\200\051\155\102\211" +
    "\001\002\000\004\034\ufda5\001\002\000\024\005\202\011" +
    "\146\012\145\020\206\023\213\034\ufda4\035\200\051\155" +
    "\102\211\001\002\000\004\034\ufda6\001\002\000\016\042" +
    "\ufee6\043\ufee6\051\ufee6\060\ufee6\065\ufee6\073\ufee6\001\002" +
    "\000\020\042\ufee4\043\ufee4\051\ufee4\054\u02df\060\ufee4\065" +
    "\ufee4\073\ufee4\001\002\000\020\042\ufee5\043\ufee5\051\ufee5" +
    "\054\u02de\060\ufee5\065\ufee5\073\ufee5\001\002\000\016\042" +
    "\165\043\166\051\u02dd\060\162\065\170\073\163\001\002" +
    "\000\010\026\ufefe\100\ufefe\102\ufefe\001\002\000\026\026" +
    "\ufeff\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f" +
    "\100\ufeff\102\ufeff\110\uff9f\001\002\000\026\026\ufeef\057" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\ufeef" +
    "\102\ufeef\110\uff9d\001\002\000\012\026\ufefd\073\327\100" +
    "\ufefd\102\ufefd\001\002\000\026\026\uff00\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\073\300\100\uff00\102\uff00\110" +
    "\uff9e\001\002\000\016\042\ufee8\043\ufee8\051\ufee8\060\ufee8" +
    "\065\ufee8\073\ufee8\001\002\000\016\042\ufee7\043\ufee7\051" +
    "\ufee7\060\ufee7\065\ufee7\073\ufee7\001\002\000\016\042\165" +
    "\043\166\051\u02e5\060\162\065\170\073\163\001\002\000" +
    "\010\026\ufef9\100\ufef9\102\ufef9\001\002\000\026\026\ufefc" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\100" +
    "\ufefc\102\ufefc\110\uff9f\001\002\000\026\026\ufeed\057\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\ufeed\102" +
    "\ufeed\110\uff9d\001\002\000\012\026\ufefb\073\327\100\ufefb" +
    "\102\ufefb\001\002\000\026\026\ufefa\057\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\073\300\100\ufefa\102\ufefa\110\uff9e" +
    "\001\002\000\016\042\165\043\166\051\u02ea\060\162\065" +
    "\170\073\163\001\002\000\010\026\ufeec\100\ufeec\102\ufeec" +
    "\001\002\000\026\026\ufeea\057\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\073\uff9f\100\ufeea\102\ufeea\110\uff9f\001\002" +
    "\000\012\026\ufee9\073\327\100\ufee9\102\ufee9\001\002\000" +
    "\026\026\ufeeb\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\073\300\100\ufeeb\102\ufeeb\110\uff9e\001\002\000\016\042" +
    "\165\043\166\051\u02f0\060\162\065\170\073\163\001\002" +
    "\000\010\026\ufef1\100\ufef1\102\ufef1\001\002\000\026\026" +
    "\ufef4\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f" +
    "\100\ufef4\102\ufef4\110\uff9f\001\002\000\026\026\ufeee\057" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d\100\ufeee" +
    "\102\ufeee\110\uff9d\001\002\000\012\026\ufef2\073\327\100" +
    "\ufef2\102\ufef2\001\002\000\026\026\ufef3\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\073\300\100\ufef3\102\ufef3\110" +
    "\uff9e\001\002\000\016\042\165\043\166\051\u02f6\060\162" +
    "\065\170\073\163\001\002\000\010\026\ufef8\100\ufef8\102" +
    "\ufef8\001\002\000\026\026\ufef7\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\073\uff9f\100\ufef7\102\ufef7\110\uff9f\001" +
    "\002\000\026\026\ufef0\057\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\073\uff9d\100\ufef0\102\ufef0\110\uff9d\001\002\000" +
    "\012\026\ufef5\073\327\100\ufef5\102\ufef5\001\002\000\026" +
    "\026\ufef6\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\073" +
    "\300\100\ufef6\102\ufef6\110\uff9e\001\002\000\010\051\361" +
    "\065\321\073\363\001\002\000\022\057\341\060\347\061" +
    "\342\062\336\063\335\073\351\074\u0300\110\343\001\002" +
    "\000\006\073\327\074\u02fa\001\002\000\044\026\uff9b\051" +
    "\331\054\uff9b\055\uff9b\056\uff9b\057\341\060\337\061\342" +
    "\062\336\063\335\065\170\073\uff9b\074\uff9b\100\uff9b\101" +
    "\uff9b\102\uff9b\110\343\001\002\000\012\051\331\060\162" +
    "\065\170\073\163\001\002\000\024\026\uff99\054\uff99\055" +
    "\uff99\056\uff99\073\uff99\074\uff99\100\uff99\101\uff99\102\uff99" +
    "\001\002\000\040\026\uff94\054\uff94\055\uff94\056\uff94\057" +
    "\341\060\347\061\342\062\336\063\335\073\uff94\074\uff94" +
    "\100\uff94\101\uff94\102\uff94\110\343\001\002\000\040\026" +
    "\uff93\054\uff93\055\uff93\056\uff93\057\341\060\347\061\342" +
    "\062\336\063\335\073\uff93\074\uff93\100\uff93\101\uff93\102" +
    "\uff93\110\343\001\002\000\024\026\uff97\054\uff97\055\uff97" +
    "\056\uff97\073\uff97\074\uff97\100\uff97\101\uff97\102\uff97\001" +
    "\002\000\044\026\uff8c\051\331\054\uff8c\055\uff8c\056\uff8c" +
    "\057\341\060\337\061\342\062\336\063\335\065\170\073" +
    "\uff8c\074\uff8c\100\uff8c\101\uff8c\102\uff8c\110\343\001\002" +
    "\000\012\051\331\060\162\065\170\073\163\001\002\000" +
    "\040\026\uff83\054\uff83\055\uff83\056\uff83\057\341\060\347" +
    "\061\342\062\336\063\335\073\uff83\074\uff83\100\uff83\101" +
    "\uff83\102\uff83\110\343\001\002\000\024\026\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\073\uff8a\074\uff8a\100\uff8a\101\uff8a\102" +
    "\uff8a\001\002\000\040\026\uff86\054\uff86\055\uff86\056\uff86" +
    "\057\341\060\347\061\342\062\336\063\335\073\uff86\074" +
    "\uff86\100\uff86\101\uff86\102\uff86\110\343\001\002\000\024" +
    "\026\uff88\054\uff88\055\uff88\056\uff88\073\uff88\074\uff88\100" +
    "\uff88\101\uff88\102\uff88\001\002\000\026\051\331\057\341" +
    "\060\337\061\342\062\336\063\335\065\170\073\163\074" +
    "\u0307\110\343\001\002\000\024\026\uff79\054\uff79\055\uff79" +
    "\056\uff79\073\uff79\074\uff79\100\uff79\101\uff79\102\uff79\001" +
    "\002\000\020\042\165\043\166\051\310\060\302\065\170" +
    "\073\303\074\301\001\002\000\004\051\u032c\001\002\000" +
    "\036\003\uffb3\005\uffb3\011\uffb3\012\uffb3\013\uffb3\020\uffb3" +
    "\023\uffb3\027\uffb3\032\uffb3\034\uffb3\035\uffb3\051\uffb3\102" +
    "\uffb3\107\uffb3\001\002\000\004\100\u032b\001\002\000\010" +
    "\100\041\102\040\104\u0322\001\002\000\022\020\u030f\042" +
    "\165\043\166\051\u0316\060\162\064\u0315\065\170\073\163" +
    "\001\002\000\006\100\041\102\040\001\002\000\004\070" +
    "\u031d\001\002\000\024\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\073\uff9f\100\041\102\040\110\uff9f\001\002\000" +
    "\024\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\073\uff9d" +
    "\100\041\102\040\110\uff9d\001\002\000\036\003\uff52\005" +
    "\uff52\011\uff52\012\uff52\013\uff52\020\uff52\023\uff52\027\uff52" +
    "\032\uff52\034\uff52\035\uff52\051\uff52\102\uff52\107\uff52\001" +
    "\002\000\006\100\041\102\040\001\002\000\010\073\327" +
    "\100\041\102\040\001\002\000\006\100\041\102\040\001" +
    "\002\000\036\003\u030b\042\165\043\166\051\310\057\uff9e" +
    "\060\302\061\uff9e\062\uff9e\063\uff9e\065\170\073\u0308\100" +
    "\041\102\040\110\uff9e\001\002\000\036\003\uff65\005\uff65" +
    "\011\uff65\012\uff65\013\uff65\020\uff65\023\uff65\027\uff65\032" +
    "\uff65\034\uff65\035\uff65\051\uff65\102\uff65\107\uff65\001\002" +
    "\000\036\003\uff60\005\uff60\011\uff60\012\uff60\013\uff60\020" +
    "\uff60\023\uff60\027\uff60\032\uff60\034\uff60\035\uff60\051\uff60" +
    "\102\uff60\107\uff60\001\002\000\036\003\uff63\005\uff63\011" +
    "\uff63\012\uff63\013\uff63\020\uff63\023\uff63\027\uff63\032\uff63" +
    "\034\uff63\035\uff63\051\uff63\102\uff63\107\uff63\001\002\000" +
    "\036\003\uff5f\005\uff5f\011\uff5f\012\uff5f\013\uff5f\020\uff5f" +
    "\023\uff5f\027\uff5f\032\uff5f\034\uff5f\035\uff5f\051\uff5f\102" +
    "\uff5f\107\uff5f\001\002\000\036\003\uff64\005\uff64\011\uff64" +
    "\012\uff64\013\uff64\020\uff64\023\uff64\027\uff64\032\uff64\034" +
    "\uff64\035\uff64\051\uff64\102\uff64\107\uff64\001\002\000\036" +
    "\003\uff62\005\uff62\011\uff62\012\uff62\013\uff62\020\uff62\023" +
    "\uff62\027\uff62\032\uff62\034\uff62\035\uff62\051\uff62\102\uff62" +
    "\107\uff62\001\002\000\004\111\u031e\001\002\000\004\073" +
    "\u031f\001\002\000\004\074\u0320\001\002\000\006\100\uff4c" +
    "\102\uff4c\001\002\000\036\003\uff61\005\uff61\011\uff61\012" +
    "\uff61\013\uff61\020\uff61\023\uff61\027\uff61\032\uff61\034\uff61" +
    "\035\uff61\051\uff61\102\uff61\107\uff61\001\002\000\016\042" +
    "\165\043\166\051\310\060\302\065\170\073\u0324\001\002" +
    "\000\036\003\uffb1\005\uffb1\011\uffb1\012\uffb1\013\uffb1\020" +
    "\uffb1\023\uffb1\027\uffb1\032\uffb1\034\uffb1\035\uffb1\051\uffb1" +
    "\102\uffb1\107\uffb1\001\002\000\014\042\165\043\166\051" +
    "\310\060\302\065\170\001\002\000\036\003\uffb0\005\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\020\uffb0\023\uffb0\027\uffb0\032" +
    "\uffb0\034\uffb0\035\uffb0\051\uffb0\102\uffb0\107\uffb0\001\002" +
    "\000\004\074\u0327\001\002\000\010\100\041\102\040\104" +
    "\u0328\001\002\000\016\042\165\043\166\051\310\060\302" +
    "\065\170\073\u0324\001\002\000\036\003\uffae\005\uffae\011" +
    "\uffae\012\uffae\013\uffae\020\uffae\023\uffae\027\uffae\032\uffae" +
    "\034\uffae\035\uffae\051\uffae\102\uffae\107\uffae\001\002\000" +
    "\036\003\uffaf\005\uffaf\011\uffaf\012\uffaf\013\uffaf\020\uffaf" +
    "\023\uffaf\027\uffaf\032\uffaf\034\uffaf\035\uffaf\051\uffaf\102" +
    "\uffaf\107\uffaf\001\002\000\036\003\uffb2\005\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\020\uffb2\023\uffb2\027\uffb2\032\uffb2\034" +
    "\uffb2\035\uffb2\051\uffb2\102\uffb2\107\uffb2\001\002\000\004" +
    "\054\u032d\001\002\000\022\020\u030f\042\165\043\166\051" +
    "\u0335\060\162\064\u0334\065\170\073\163\001\002\000\006" +
    "\100\041\102\040\001\002\000\024\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\073\uff9f\100\041\102\040\110\uff9f" +
    "\001\002\000\024\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\073\uff9d\100\041\102\040\110\uff9d\001\002\000\036" +
    "\003\uff53\005\uff53\011\uff53\012\uff53\013\uff53\020\uff53\023" +
    "\uff53\027\uff53\032\uff53\034\uff53\035\uff53\051\uff53\102\uff53" +
    "\107\uff53\001\002\000\006\100\041\102\040\001\002\000" +
    "\010\073\327\100\041\102\040\001\002\000\006\100\041" +
    "\102\040\001\002\000\036\003\u030b\042\165\043\166\051" +
    "\310\057\uff9e\060\302\061\uff9e\062\uff9e\063\uff9e\065\170" +
    "\073\u0308\100\041\102\040\110\uff9e\001\002\000\036\003" +
    "\uff5e\005\uff5e\011\uff5e\012\uff5e\013\uff5e\020\uff5e\023\uff5e" +
    "\027\uff5e\032\uff5e\034\uff5e\035\uff5e\051\uff5e\102\uff5e\107" +
    "\uff5e\001\002\000\036\003\uff58\005\uff58\011\uff58\012\uff58" +
    "\013\uff58\020\uff58\023\uff58\027\uff58\032\uff58\034\uff58\035" +
    "\uff58\051\uff58\102\uff58\107\uff58\001\002\000\036\003\uff5c" +
    "\005\uff5c\011\uff5c\012\uff5c\013\uff5c\020\uff5c\023\uff5c\027" +
    "\uff5c\032\uff5c\034\uff5c\035\uff5c\051\uff5c\102\uff5c\107\uff5c" +
    "\001\002\000\036\003\uff5b\005\uff5b\011\uff5b\012\uff5b\013" +
    "\uff5b\020\uff5b\023\uff5b\027\uff5b\032\uff5b\034\uff5b\035\uff5b" +
    "\051\uff5b\102\uff5b\107\uff5b\001\002\000\036\003\uff5d\005" +
    "\uff5d\011\uff5d\012\uff5d\013\uff5d\020\uff5d\023\uff5d\027\uff5d" +
    "\032\uff5d\034\uff5d\035\uff5d\051\uff5d\102\uff5d\107\uff5d\001" +
    "\002\000\036\003\uff5a\005\uff5a\011\uff5a\012\uff5a\013\uff5a" +
    "\020\uff5a\023\uff5a\027\uff5a\032\uff5a\034\uff5a\035\uff5a\051" +
    "\uff5a\102\uff5a\107\uff5a\001\002\000\036\003\uff59\005\uff59" +
    "\011\uff59\012\uff59\013\uff59\020\uff59\023\uff59\027\uff59\032" +
    "\uff59\034\uff59\035\uff59\051\uff59\102\uff59\107\uff59\001\002" +
    "\000\006\074\u033e\104\311\001\002\000\026\057\ufe53\060" +
    "\ufe53\061\ufe53\062\ufe53\063\ufe53\073\ufe53\100\ufe53\102\ufe53" +
    "\104\u0328\110\ufe53\001\002\000\006\003\ufe25\013\ufe25\001" +
    "\002\000\026\003\ufe29\005\141\011\146\012\145\013\ufe29" +
    "\020\144\023\156\035\137\051\155\102\151\001\002\000" +
    "\006\003\ufe28\013\ufe28\001\002\000\006\003\ufe22\013\ufe22" +
    "\001\002\000\026\003\ufe27\005\141\011\146\012\145\013" +
    "\ufe27\020\144\023\156\035\137\051\155\102\151\001\002" +
    "\000\006\003\ufe24\013\ufe24\001\002\000\004\054\u0346\001" +
    "\002\000\006\060\302\065\170\001\002\000\004\037\u0348" +
    "\001\002\000\006\060\302\065\170\001\002\000\004\047" +
    "\u034a\001\002\000\006\060\302\065\170\001\002\000\006" +
    "\100\041\102\040\001\002\000\022\005\202\011\146\012" +
    "\145\020\u034f\023\213\035\u034d\051\155\102\u0352\001\002" +
    "\000\006\011\u036f\030\u036e\001\002\000\024\005\202\011" +
    "\146\012\145\020\u034f\023\213\032\ufdfc\035\u034d\051\155" +
    "\102\u0352\001\002\000\004\070\u035e\001\002\000\006\100" +
    "\041\102\040\001\002\000\004\032\u0359\001\002\000\004" +
    "\100\u0357\001\002\000\024\005\202\011\146\012\145\020" +
    "\u034f\023\213\032\ufdf3\035\u034d\051\155\102\u0352\001\002" +
    "\000\024\005\202\011\146\012\145\020\u034f\023\213\032" +
    "\ufdf9\035\u034d\051\155\102\u0352\001\002\000\004\032\ufdf6" +
    "\001\002\000\004\032\ufdf2\001\002\000\024\005\202\011" +
    "\146\012\145\020\u034f\023\213\032\ufdfb\035\u034d\051\155" +
    "\102\u0352\001\002\000\004\032\ufdfa\001\002\000\004\051" +
    "\u035a\001\002\000\006\100\041\102\040\001\002\000\036" +
    "\003\ufdfe\005\ufdfe\011\ufdfe\012\ufdfe\013\ufdfe\020\ufdfe\023" +
    "\ufdfe\027\ufdfe\032\ufdfe\034\ufdfe\035\ufdfe\051\ufdfe\102\ufdfe" +
    "\107\ufdfe\001\002\000\024\005\202\011\146\012\145\020" +
    "\u034f\023\213\032\ufdf5\035\u034d\051\155\102\u0352\001\002" +
    "\000\004\032\ufdf4\001\002\000\006\021\u0360\111\u035f\001" +
    "\002\000\004\073\u0369\001\002\000\004\073\u0361\001\002" +
    "\000\022\042\165\043\166\051\272\060\162\064\273\065" +
    "\170\073\163\074\u0362\001\002\000\006\100\041\102\040" +
    "\001\002\000\004\074\u0364\001\002\000\006\100\041\102" +
    "\040\001\002\000\024\005\202\011\146\012\145\020\u034f" +
    "\023\213\032\ufdfd\035\u034d\051\155\102\u0352\001\002\000" +
    "\004\032\ufdf8\001\002\000\024\005\202\011\146\012\145" +
    "\020\u034f\023\213\032\ufded\035\u034d\051\155\102\u0352\001" +
    "\002\000\004\032\ufdec\001\002\000\004\074\u036a\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\202\011" +
    "\146\012\145\020\u034f\023\213\032\ufdeb\035\u034d\051\155" +
    "\102\u0352\001\002\000\004\032\ufdea\001\002\000\004\032" +
    "\ufdf7\001\002\000\006\100\041\102\040\001\002\000\006" +
    "\100\041\102\040\001\002\000\024\005\202\011\146\012" +
    "\145\020\u034f\023\213\032\ufdee\035\u034d\051\155\102\u0352" +
    "\001\002\000\004\032\ufdef\001\002\000\024\005\202\011" +
    "\146\012\145\020\u034f\023\213\032\ufdf0\035\u034d\051\155" +
    "\102\u0352\001\002\000\004\032\ufdf1\001\002\000\006\022" +
    "\u0375\054\u0376\001\002\000\014\014\054\015\053\016\056" +
    "\046\055\051\052\001\002\000\022\020\u030f\042\165\043" +
    "\166\051\u037e\060\162\064\u037f\065\170\073\163\001\002" +
    "\000\006\100\uff49\102\uff49\001\002\000\024\057\uff9f\060" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\073\uff9f\100\uff4a\102\uff4a" +
    "\110\uff9f\001\002\000\024\057\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\073\uff9d\100\041\102\040\110\uff9d\001\002" +
    "\000\036\003\uff55\005\uff55\011\uff55\012\uff55\013\uff55\020" +
    "\uff55\023\uff55\027\uff55\032\uff55\034\uff55\035\uff55\051\uff55" +
    "\102\uff55\107\uff55\001\002\000\006\100\041\102\040\001" +
    "\002\000\006\100\uff48\102\uff48\001\002\000\010\073\327" +
    "\100\041\102\040\001\002\000\036\003\u030b\042\165\043" +
    "\166\051\310\057\uff9e\060\302\061\uff9e\062\uff9e\063\uff9e" +
    "\065\170\073\u0308\100\041\102\040\110\uff9e\001\002\000" +
    "\006\100\uff4b\102\uff4b\001\002\000\036\003\uff57\005\uff57" +
    "\011\uff57\012\uff57\013\uff57\020\uff57\023\uff57\027\uff57\032" +
    "\uff57\034\uff57\035\uff57\051\uff57\102\uff57\107\uff57\001\002" +
    "\000\036\003\uff66\005\uff66\011\uff66\012\uff66\013\uff66\020" +
    "\uff66\023\uff66\027\uff66\032\uff66\034\uff66\035\uff66\051\uff66" +
    "\102\uff66\107\uff66\001\002\000\036\003\uff6a\005\uff6a\011" +
    "\uff6a\012\uff6a\013\uff6a\020\uff6a\023\uff6a\027\uff6a\032\uff6a" +
    "\034\uff6a\035\uff6a\051\uff6a\102\uff6a\107\uff6a\001\002\000" +
    "\036\003\uff69\005\uff69\011\uff69\012\uff69\013\uff69\020\uff69" +
    "\023\uff69\027\uff69\032\uff69\034\uff69\035\uff69\051\uff69\102" +
    "\uff69\107\uff69\001\002\000\010\054\u0385\100\041\102\040" +
    "\001\002\000\022\020\u030f\042\165\043\166\051\u038b\060" +
    "\162\064\u037f\065\170\073\163\001\002\000\036\003\uff6c" +
    "\005\uff6c\011\uff6c\012\uff6c\013\uff6c\020\uff6c\023\uff6c\027" +
    "\uff6c\032\uff6c\034\uff6c\035\uff6c\051\uff6c\102\uff6c\107\uff6c" +
    "\001\002\000\024\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\073\uff9d\100\041\102\040\110\uff9d\001\002\000\036" +
    "\003\uff54\005\uff54\011\uff54\012\uff54\013\uff54\020\uff54\023" +
    "\uff54\027\uff54\032\uff54\034\uff54\035\uff54\051\uff54\102\uff54" +
    "\107\uff54\001\002\000\006\100\041\102\040\001\002\000" +
    "\010\073\327\100\041\102\040\001\002\000\036\003\u030b" +
    "\042\165\043\166\051\310\057\uff9e\060\302\061\uff9e\062" +
    "\uff9e\063\uff9e\065\170\073\u0308\100\041\102\040\110\uff9e" +
    "\001\002\000\036\003\uff56\005\uff56\011\uff56\012\uff56\013" +
    "\uff56\020\uff56\023\uff56\027\uff56\032\uff56\034\uff56\035\uff56" +
    "\051\uff56\102\uff56\107\uff56\001\002\000\036\003\uff67\005" +
    "\uff67\011\uff67\012\uff67\013\uff67\020\uff67\023\uff67\027\uff67" +
    "\032\uff67\034\uff67\035\uff67\051\uff67\102\uff67\107\uff67\001" +
    "\002\000\036\003\uff6b\005\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\020\uff6b\023\uff6b\027\uff6b\032\uff6b\034\uff6b\035\uff6b\051" +
    "\uff6b\102\uff6b\107\uff6b\001\002\000\036\003\uff68\005\uff68" +
    "\011\uff68\012\uff68\013\uff68\020\uff68\023\uff68\027\uff68\032" +
    "\uff68\034\uff68\035\uff68\051\uff68\102\uff68\107\uff68\001\002" +
    "\000\006\021\u0392\111\u0391\001\002\000\004\073\u039b\001" +
    "\002\000\004\073\u0393\001\002\000\022\042\165\043\166" +
    "\051\272\060\162\064\273\065\170\073\163\074\u0394\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\074\u0396" +
    "\001\002\000\006\100\041\102\040\001\002\000\026\003" +
    "\ufe2d\005\141\011\146\012\145\013\ufe2d\020\144\023\156" +
    "\035\137\051\155\102\151\001\002\000\006\003\ufe26\013" +
    "\ufe26\001\002\000\026\003\ufe1f\005\141\011\146\012\145" +
    "\013\ufe1f\020\144\023\156\035\137\051\155\102\151\001" +
    "\002\000\006\003\ufe1e\013\ufe1e\001\002\000\004\074\u039c" +
    "\001\002\000\006\100\041\102\040\001\002\000\026\003" +
    "\ufe1d\005\141\011\146\012\145\013\ufe1d\020\144\023\156" +
    "\035\137\051\155\102\151\001\002\000\006\003\ufe1c\013" +
    "\ufe1c\001\002\000\006\003\ufe2b\013\ufe2b\001\002\000\004" +
    "\026\u03a1\001\002\000\006\100\041\102\040\001\002\000" +
    "\022\005\141\011\146\012\145\020\u029b\023\156\035\u0299" +
    "\051\155\102\u029e\001\002\000\010\013\u03a8\027\u03a6\107" +
    "\u01b7\001\002\000\016\042\165\043\166\051\174\060\162" +
    "\065\170\073\163\001\002\000\004\013\u03b5\001\002\000" +
    "\010\005\u01bf\100\041\102\040\001\002\000\006\100\041" +
    "\102\040\001\002\000\004\005\u03a9\001\002\000\006\100" +
    "\041\102\040\001\002\000\032\003\ufe18\005\ufe18\011\ufe18" +
    "\012\ufe18\013\ufe18\020\ufe18\023\ufe18\027\ufe18\035\ufe18\051" +
    "\ufe18\102\ufe18\107\ufe18\001\002\000\022\005\141\011\146" +
    "\012\145\020\u029b\023\156\035\u0299\051\155\102\u029e\001" +
    "\002\000\004\013\u03ad\001\002\000\004\005\u03ae\001\002" +
    "\000\006\100\041\102\040\001\002\000\032\003\ufe16\005" +
    "\ufe16\011\ufe16\012\ufe16\013\ufe16\020\ufe16\023\ufe16\027\ufe16" +
    "\035\ufe16\051\ufe16\102\ufe16\107\ufe16\001\002\000\022\005" +
    "\141\011\146\012\145\020\u029b\023\156\035\u0299\051\155" +
    "\102\u029e\001\002\000\004\013\u03b2\001\002\000\004\005" +
    "\u03b3\001\002\000\006\100\041\102\040\001\002\000\032" +
    "\003\ufe17\005\ufe17\011\ufe17\012\ufe17\013\ufe17\020\ufe17\023" +
    "\ufe17\027\ufe17\035\ufe17\051\ufe17\102\ufe17\107\ufe17\001\002" +
    "\000\004\005\u03b6\001\002\000\006\100\041\102\040\001" +
    "\002\000\032\003\ufe15\005\ufe15\011\ufe15\012\ufe15\013\ufe15" +
    "\020\ufe15\023\ufe15\027\ufe15\035\ufe15\051\ufe15\102\ufe15\107" +
    "\ufe15\001\002\000\004\026\u03b9\001\002\000\006\100\041" +
    "\102\040\001\002\000\022\005\141\011\146\012\145\020" +
    "\u029b\023\156\035\u0299\051\155\102\u029e\001\002\000\010" +
    "\013\ufe00\027\u03bd\107\u01b7\001\002\000\004\013\ufdff\001" +
    "\002\000\010\005\u01bf\100\ufe02\102\ufe02\001\002\000\006" +
    "\100\ufe01\102\ufe01\001\002\000\004\030\u03c4\001\002\000" +
    "\014\003\ufe3d\010\ufe3d\013\ufe3d\100\ufe3d\102\ufe3d\001\002" +
    "\000\006\003\u03c2\030\u03c3\001\002\000\014\003\ufe32\010" +
    "\ufe32\013\ufe32\100\ufe32\102\ufe32\001\002\000\014\003\ufe34" +
    "\010\ufe34\013\ufe34\100\ufe34\102\ufe34\001\002\000\014\003" +
    "\ufe33\010\ufe33\013\ufe33\100\ufe33\102\ufe33\001\002\000\006" +
    "\100\041\102\040\001\002\000\026\003\ufe20\005\141\011" +
    "\146\012\145\013\ufe20\020\144\023\156\035\137\051\155" +
    "\102\151\001\002\000\006\003\ufe21\013\ufe21\001\002\000" +
    "\004\022\u03c9\001\002\000\014\014\054\015\053\016\056" +
    "\046\055\051\052\001\002\000\010\003\ufe2e\074\ufe2e\104" +
    "\u03cb\001\002\000\006\051\126\106\124\001\002\000\006" +
    "\003\ufe2f\074\ufe2f\001\002\000\006\051\126\106\124\001" +
    "\002\000\004\074\u03cf\001\002\000\006\100\u03d1\102\u03d0" +
    "\001\002\000\004\100\u048a\001\002\000\024\003\u03d9\005" +
    "\u03dc\011\u0137\012\145\020\u03de\023\234\035\u03d8\051\155" +
    "\102\u03da\001\002\000\026\003\u03d9\005\u03dc\011\u0137\012" +
    "\145\013\uffbc\020\u03de\023\234\035\u03d8\051\155\102\u03da" +
    "\001\002\000\026\003\u03d9\005\u03dc\011\u0137\012\145\013" +
    "\uffc0\020\u03de\023\234\035\u03d8\051\155\102\u03da\001\002" +
    "\000\004\013\u0477\001\002\000\034\003\uff44\005\uff44\011" +
    "\uff44\012\uff44\013\uff44\020\uff44\023\uff44\027\uff44\035\uff44" +
    "\051\uff44\100\uff44\102\uff44\107\uff44\001\002\000\006\100" +
    "\041\102\040\001\002\000\004\013\uffce\001\002\000\006" +
    "\003\u047f\010\u0480\001\002\000\010\010\u0475\013\u0477\100" +
    "\u0476\001\002\000\004\100\u0472\001\002\000\034\003\uff43" +
    "\005\uff43\011\uff43\012\uff43\013\uff43\020\uff43\023\uff43\027" +
    "\uff43\035\uff43\051\uff43\100\uff43\102\uff43\107\uff43\001\002" +
    "\000\016\042\165\043\166\051\174\060\162\065\170\073" +
    "\163\001\002\000\026\003\u03d9\005\u03dc\011\u0137\012\145" +
    "\013\uffbf\020\u03de\023\234\035\u03d8\051\155\102\u03da\001" +
    "\002\000\004\070\u03e0\001\002\000\034\003\uff45\005\uff45" +
    "\011\uff45\012\uff45\013\uff45\020\uff45\023\uff45\027\uff45\035" +
    "\uff45\051\uff45\100\uff45\102\uff45\107\uff45\001\002\000\006" +
    "\021\u03e2\111\u03e1\001\002\000\004\073\u03eb\001\002\000" +
    "\004\073\u03e3\001\002\000\022\042\165\043\166\051\272" +
    "\060\162\064\273\065\170\073\163\074\u03e4\001\002\000" +
    "\006\100\041\102\040\001\002\000\004\074\u03e6\001\002" +
    "\000\006\100\041\102\040\001\002\000\026\003\u03d9\005" +
    "\u03dc\011\u0137\012\145\013\uffc1\020\u03de\023\234\035\u03d8" +
    "\051\155\102\u03da\001\002\000\004\013\uffcc\001\002\000" +
    "\026\003\u03d9\005\u03dc\011\u0137\012\145\013\uffba\020\u03de" +
    "\023\234\035\u03d8\051\155\102\u03da\001\002\000\004\013" +
    "\uffc6\001\002\000\004\074\u03ec\001\002\000\006\100\041" +
    "\102\040\001\002\000\026\003\u03d9\005\u03dc\011\u0137\012" +
    "\145\013\uffb9\020\u03de\023\234\035\u03d8\051\155\102\u03da" +
    "\001\002\000\004\013\uffc5\001\002\000\004\013\uffca\001" +
    "\002\000\004\026\u03f1\001\002\000\006\100\041\102\040" +
    "\001\002\000\022\005\u03dc\011\u0137\012\145\020\u03f5\023" +
    "\234\035\u03f3\051\155\102\u03f8\001\002\000\004\010\u046f" +
    "\001\002\000\030\005\u03dc\011\u0137\012\145\013\uff39\020" +
    "\u03f5\023\234\027\uff39\035\u03f3\051\155\102\u03f8\107\uff39" +
    "\001\002\000\004\070\u045f\001\002\000\010\013\u0406\027" +
    "\u0405\107\u01b7\001\002\000\006\100\041\102\040\001\002" +
    "\000\004\100\u03fe\001\002\000\030\005\u03dc\011\u0137\012" +
    "\145\013\uff30\020\u03f5\023\234\027\uff30\035\u03f3\051\155" +
    "\102\u03f8\107\uff30\001\002\000\012\013\uff38\027\uff38\100" +
    "\u03fb\107\uff38\001\002\000\022\005\u03dc\011\u0137\012\145" +
    "\020\u03f5\023\234\035\u03f3\051\155\102\u03f8\001\002\000" +
    "\010\013\uff32\027\uff32\107\uff32\001\002\000\010\013\uff2f" +
    "\027\uff2f\107\uff2f\001\002\000\030\005\u03dc\011\u0137\012" +
    "\145\013\uff37\020\u03f5\023\234\027\uff37\035\u03f3\051\155" +
    "\102\u03f8\107\uff37\001\002\000\010\013\uff36\027\uff36\107" +
    "\uff36\001\002\000\030\005\u03dc\011\u0137\012\145\013\uff35" +
    "\020\u03f5\023\234\027\uff35\035\u03f3\051\155\102\u03f8\107" +
    "\uff35\001\002\000\010\013\uff31\027\uff31\107\uff31\001\002" +
    "\000\004\013\u045c\001\002\000\016\042\165\043\166\051" +
    "\174\060\162\065\170\073\163\001\002\000\006\100\041" +
    "\102\040\001\002\000\010\005\u01bf\100\041\102\040\001" +
    "\002\000\004\005\u0407\001\002\000\006\100\041\102\040" +
    "\001\002\000\034\003\uff3e\005\uff3e\011\uff3e\012\uff3e\013" +
    "\uff3e\020\uff3e\023\uff3e\027\uff3e\035\uff3e\051\uff3e\100\uff3e" +
    "\102\uff3e\107\uff3e\001\002\000\022\005\u03dc\011\u0137\012" +
    "\145\020\u040d\023\234\035\u040b\051\155\102\u040f\001\002" +
    "\000\004\013\u042c\001\002\000\004\010\u0429\001\002\000" +
    "\024\005\u03dc\011\u0137\012\145\013\uff27\020\u03f5\023\234" +
    "\035\u03f3\051\155\102\u03f8\001\002\000\004\070\u0419\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\100\u0415" +
    "\001\002\000\024\005\u03dc\011\u0137\012\145\013\uff1e\020" +
    "\u040d\023\234\035\u040b\051\155\102\u040f\001\002\000\006" +
    "\013\uff26\100\u0412\001\002\000\022\005\u03dc\011\u0137\012" +
    "\145\020\u040d\023\234\035\u040b\051\155\102\u040f\001\002" +
    "\000\004\013\uff20\001\002\000\004\013\uff1d\001\002\000" +
    "\024\005\u03dc\011\u0137\012\145\013\uff25\020\u040d\023\234" +
    "\035\u040b\051\155\102\u040f\001\002\000\004\013\uff24\001" +
    "\002\000\024\005\u03dc\011\u0137\012\145\013\uff23\020\u040d" +
    "\023\234\035\u040b\051\155\102\u040f\001\002\000\004\013" +
    "\uff1f\001\002\000\006\021\u041b\111\u041a\001\002\000\004" +
    "\073\u0424\001\002\000\004\073\u041c\001\002\000\022\042" +
    "\165\043\166\051\272\060\162\064\273\065\170\073\163" +
    "\074\u041d\001\002\000\006\100\041\102\040\001\002\000" +
    "\004\074\u041f\001\002\000\006\100\041\102\040\001\002" +
    "\000\024\005\u03dc\011\u0137\012\145\013\uff28\020\u040d\023" +
    "\234\035\u040b\051\155\102\u040f\001\002\000\004\013\uff22" +
    "\001\002\000\024\005\u03dc\011\u0137\012\145\013\uff1a\020" +
    "\u040d\023\234\035\u040b\051\155\102\u040f\001\002\000\004" +
    "\013\uff19\001\002\000\004\074\u0425\001\002\000\006\100" +
    "\041\102\040\001\002\000\024\005\u03dc\011\u0137\012\145" +
    "\013\uff18\020\u040d\023\234\035\u040b\051\155\102\u040f\001" +
    "\002\000\004\013\uff17\001\002\000\004\013\uff21\001\002" +
    "\000\006\100\041\102\040\001\002\000\024\005\u03dc\011" +
    "\u0137\012\145\013\uff1b\020\u040d\023\234\035\u040b\051\155" +
    "\102\u040f\001\002\000\004\013\uff1c\001\002\000\004\005" +
    "\u042d\001\002\000\006\100\041\102\040\001\002\000\034" +
    "\003\uff3d\005\uff3d\011\uff3d\012\uff3d\013\uff3d\020\uff3d\023" +
    "\uff3d\027\uff3d\035\uff3d\051\uff3d\100\uff3d\102\uff3d\107\uff3d" +
    "\001\002\000\022\005\u03dc\011\u0137\012\145\020\u040d\023" +
    "\234\035\u040b\051\155\102\u040f\001\002\000\004\013\u0431" +
    "\001\002\000\004\005\u0432\001\002\000\006\100\041\102" +
    "\040\001\002\000\034\003\uff3c\005\uff3c\011\uff3c\012\uff3c" +
    "\013\uff3c\020\uff3c\023\uff3c\027\uff3c\035\uff3c\051\uff3c\100" +
    "\uff3c\102\uff3c\107\uff3c\001\002\000\004\026\u0435\001\002" +
    "\000\006\100\041\102\040\001\002\000\022\005\u03dc\011" +
    "\u0137\012\145\020\u0439\023\234\035\u0437\051\155\102\u043b" +
    "\001\002\000\004\010\u0459\001\002\000\030\005\u03dc\011" +
    "\u0137\012\145\013\uff15\020\u0439\023\234\027\uff15\035\u0437" +
    "\051\155\102\u043b\107\uff15\001\002\000\004\070\u0449\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\100\u0445" +
    "\001\002\000\030\005\u03dc\011\u0137\012\145\013\uff0c\020" +
    "\u0439\023\234\027\uff0c\035\u0437\051\155\102\u043b\107\uff0c" +
    "\001\002\000\012\013\uff14\027\uff14\100\u0442\107\uff14\001" +
    "\002\000\010\013\uff01\027\u0441\107\u01b7\001\002\000\004" +
    "\013\uff02\001\002\000\006\100\uff04\102\uff04\001\002\000" +
    "\010\005\u01bf\100\uff03\102\uff03\001\002\000\022\005\u03dc" +
    "\011\u0137\012\145\020\u0439\023\234\035\u0437\051\155\102" +
    "\u043b\001\002\000\010\013\uff0e\027\uff0e\107\uff0e\001\002" +
    "\000\010\013\uff0b\027\uff0b\107\uff0b\001\002\000\030\005" +
    "\u03dc\011\u0137\012\145\013\uff13\020\u0439\023\234\027\uff13" +
    "\035\u0437\051\155\102\u043b\107\uff13\001\002\000\010\013" +
    "\uff12\027\uff12\107\uff12\001\002\000\030\005\u03dc\011\u0137" +
    "\012\145\013\uff11\020\u0439\023\234\027\uff11\035\u0437\051" +
    "\155\102\u043b\107\uff11\001\002\000\010\013\uff0d\027\uff0d" +
    "\107\uff0d\001\002\000\006\021\u044b\111\u044a\001\002\000" +
    "\004\073\u0454\001\002\000\004\073\u044c\001\002\000\022" +
    "\042\165\043\166\051\272\060\162\064\273\065\170\073" +
    "\163\074\u044d\001\002\000\006\100\041\102\040\001\002" +
    "\000\004\074\u044f\001\002\000\006\100\041\102\040\001" +
    "\002\000\030\005\u03dc\011\u0137\012\145\013\uff16\020\u0439" +
    "\023\234\027\uff16\035\u0437\051\155\102\u043b\107\uff16\001" +
    "\002\000\010\013\uff10\027\uff10\107\uff10\001\002\000\030" +
    "\005\u03dc\011\u0137\012\145\013\uff08\020\u0439\023\234\027" +
    "\uff08\035\u0437\051\155\102\u043b\107\uff08\001\002\000\010" +
    "\013\uff07\027\uff07\107\uff07\001\002\000\004\074\u0455\001" +
    "\002\000\006\100\041\102\040\001\002\000\030\005\u03dc" +
    "\011\u0137\012\145\013\uff06\020\u0439\023\234\027\uff06\035" +
    "\u0437\051\155\102\u043b\107\uff06\001\002\000\010\013\uff05" +
    "\027\uff05\107\uff05\001\002\000\010\013\uff0f\027\uff0f\107" +
    "\uff0f\001\002\000\006\100\041\102\040\001\002\000\030" +
    "\005\u03dc\011\u0137\012\145\013\uff09\020\u0439\023\234\027" +
    "\uff09\035\u0437\051\155\102\u043b\107\uff09\001\002\000\010" +
    "\013\uff0a\027\uff0a\107\uff0a\001\002\000\004\005\u045d\001" +
    "\002\000\006\100\041\102\040\001\002\000\034\003\uff3b" +
    "\005\uff3b\011\uff3b\012\uff3b\013\uff3b\020\uff3b\023\uff3b\027" +
    "\uff3b\035\uff3b\051\uff3b\100\uff3b\102\uff3b\107\uff3b\001\002" +
    "\000\006\021\u0461\111\u0460\001\002\000\004\073\u046a\001" +
    "\002\000\004\073\u0462\001\002\000\022\042\165\043\166" +
    "\051\272\060\162\064\273\065\170\073\163\074\u0463\001" +
    "\002\000\006\100\041\102\040\001\002\000\004\074\u0465" +
    "\001\002\000\006\100\041\102\040\001\002\000\030\005" +
    "\u03dc\011\u0137\012\145\013\uff3a\020\u03f5\023\234\027\uff3a" +
    "\035\u03f3\051\155\102\u03f8\107\uff3a\001\002\000\010\013" +
    "\uff34\027\uff34\107\uff34\001\002\000\030\005\u03dc\011\u0137" +
    "\012\145\013\uff2c\020\u03f5\023\234\027\uff2c\035\u03f3\051" +
    "\155\102\u03f8\107\uff2c\001\002\000\010\013\uff2b\027\uff2b" +
    "\107\uff2b\001\002\000\004\074\u046b\001\002\000\006\100" +
    "\041\102\040\001\002\000\030\005\u03dc\011\u0137\012\145" +
    "\013\uff2a\020\u03f5\023\234\027\uff2a\035\u03f3\051\155\102" +
    "\u03f8\107\uff2a\001\002\000\010\013\uff29\027\uff29\107\uff29" +
    "\001\002\000\010\013\uff33\027\uff33\107\uff33\001\002\000" +
    "\006\100\041\102\040\001\002\000\030\005\u03dc\011\u0137" +
    "\012\145\013\uff2d\020\u03f5\023\234\027\uff2d\035\u03f3\051" +
    "\155\102\u03f8\107\uff2d\001\002\000\010\013\uff2e\027\uff2e" +
    "\107\uff2e\001\002\000\026\003\u03d9\005\u03dc\011\u0137\012" +
    "\145\013\uffbe\020\u03de\023\234\035\u03d8\051\155\102\u03da" +
    "\001\002\000\004\013\uffcd\001\002\000\004\013\uffb6\001" +
    "\002\000\006\100\041\102\040\001\002\000\026\003\u03d9" +
    "\005\u03dc\011\u0137\012\145\013\uffb7\020\u03de\023\234\035" +
    "\u03d8\051\155\102\u03da\001\002\000\006\003\u0478\010\u0479" +
    "\001\002\000\006\100\041\102\040\001\002\000\006\100" +
    "\041\102\040\001\002\000\006\013\uffb5\100\uffb5\001\002" +
    "\000\006\013\uffb4\100\uffb4\001\002\000\004\013\uffc4\001" +
    "\002\000\026\003\u03d9\005\u03dc\011\u0137\012\145\013\uffb8" +
    "\020\u03de\023\234\035\u03d8\051\155\102\u03da\001\002\000" +
    "\004\013\uffc2\001\002\000\006\100\041\102\040\001\002" +
    "\000\006\100\041\102\040\001\002\000\026\003\u03d9\005" +
    "\u03dc\011\u0137\012\145\013\uffbb\020\u03de\023\234\035\u03d8" +
    "\051\155\102\u03da\001\002\000\004\013\uffc7\001\002\000" +
    "\024\003\u03d9\005\u03dc\011\u0137\012\145\020\u03de\023\234" +
    "\035\u03d8\051\155\102\u03da\001\002\000\004\013\uffc3\001" +
    "\002\000\026\003\u03d9\005\u03dc\011\u0137\012\145\013\uffbd" +
    "\020\u03de\023\234\035\u03d8\051\155\102\u03da\001\002\000" +
    "\004\013\uffc9\001\002\000\006\013\uffe5\100\uffe5\001\002" +
    "\000\004\013\uffcb\001\002\000\004\013\uffc8\001\002\000" +
    "\024\003\u03d9\005\u03dc\011\u0137\012\145\020\u03de\023\234" +
    "\035\u03d8\051\155\102\u03da\001\002\000\004\013\u0477\001" +
    "\002\000\006\013\uffda\100\uffda\001\002\000\004\074\u048e" +
    "\001\002\000\006\100\u0490\102\u048f\001\002\000\004\100" +
    "\u0493\001\002\000\024\003\u03d9\005\u03dc\011\u0137\012\145" +
    "\020\u03de\023\234\035\u03d8\051\155\102\u03da\001\002\000" +
    "\004\013\u0477\001\002\000\006\013\uffe9\100\uffe9\001\002" +
    "\000\024\003\u03d9\005\u03dc\011\u0137\012\145\020\u03de\023" +
    "\234\035\u03d8\051\155\102\u03da\001\002\000\004\013\u0477" +
    "\001\002\000\006\013\uffdf\100\uffdf\001\002\000\006\051" +
    "\113\103\112\001\002\000\004\013\ufff0\001\002\000\020" +
    "\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4\102" +
    "\032\001\002\000\004\013\uffee\001\002\000\004\013\uffef" +
    "\001\002\000\020\003\031\006\033\010\023\013\uffd4\033" +
    "\025\100\uffd4\102\032\001\002\000\004\013\uffed\001\002" +
    "\000\006\002\ufff9\102\ufff9\001\002\000\006\003\u04a0\007" +
    "\u049f\001\002\000\006\002\ufff3\102\ufff3\001\002\000\006" +
    "\002\ufff2\102\ufff2\001\002\000\004\051\u04d5\001\002\000" +
    "\006\003\u04a3\051\u04a4\001\002\000\004\073\u04cd\001\002" +
    "\000\006\003\u04a5\073\u04a6\001\002\000\006\051\126\106" +
    "\124\001\002\000\010\003\u04a7\051\126\106\124\001\002" +
    "\000\004\074\u04c0\001\002\000\006\003\u04a9\074\u04aa\001" +
    "\002\000\004\022\u04bb\001\002\000\006\003\u04ac\022\u04ab" +
    "\001\002\000\016\003\u04b2\014\054\015\053\016\056\046" +
    "\055\051\052\001\002\000\014\014\054\015\053\016\056" +
    "\046\055\051\052\001\002\000\006\100\041\102\040\001" +
    "\002\000\022\005\141\011\146\012\145\020\144\023\156" +
    "\035\137\051\155\102\151\001\002\000\006\003\u03bf\013" +
    "\u03c1\001\002\000\014\003\ufe36\010\ufe36\013\ufe36\100\ufe36" +
    "\102\ufe36\001\002\000\006\100\041\102\040\001\002\000" +
    "\006\100\041\102\040\001\002\000\022\005\141\011\146" +
    "\012\145\020\144\023\156\035\137\051\155\102\151\001" +
    "\002\000\006\003\u03bf\013\u03c1\001\002\000\014\003\ufe35" +
    "\010\ufe35\013\ufe35\100\ufe35\102\ufe35\001\002\000\024\003" +
    "\u04b8\005\141\011\146\012\145\020\144\023\156\035\137" +
    "\051\155\102\151\001\002\000\006\003\u03bf\013\u03c1\001" +
    "\002\000\006\003\u03bf\013\u03c1\001\002\000\014\003\ufe3c" +
    "\010\ufe3c\013\ufe3c\100\ufe3c\102\ufe3c\001\002\000\014\003" +
    "\ufe3e\010\ufe3e\013\ufe3e\100\ufe3e\102\ufe3e\001\002\000\014" +
    "\014\054\015\053\016\056\046\055\051\052\001\002\000" +
    "\006\100\041\102\040\001\002\000\022\005\141\011\146" +
    "\012\145\020\144\023\156\035\137\051\155\102\151\001" +
    "\002\000\006\003\u03bf\013\u03c1\001\002\000\014\003\ufe37" +
    "\010\ufe37\013\ufe37\100\ufe37\102\ufe37\001\002\000\004\022" +
    "\u04c1\001\002\000\014\014\054\015\053\016\056\046\055" +
    "\051\052\001\002\000\006\100\041\102\040\001\002\000" +
    "\022\005\141\011\146\012\145\020\144\023\156\035\137" +
    "\051\155\102\151\001\002\000\006\003\u03bf\013\u03c1\001" +
    "\002\000\014\003\ufe38\010\ufe38\013\ufe38\100\ufe38\102\ufe38" +
    "\001\002\000\004\074\u04c7\001\002\000\004\022\u04c8\001" +
    "\002\000\014\014\054\015\053\016\056\046\055\051\052" +
    "\001\002\000\006\100\041\102\040\001\002\000\022\005" +
    "\141\011\146\012\145\020\144\023\156\035\137\051\155" +
    "\102\151\001\002\000\006\003\u03bf\013\u03c1\001\002\000" +
    "\014\003\ufe39\010\ufe39\013\ufe39\100\ufe39\102\ufe39\001\002" +
    "\000\006\051\126\106\124\001\002\000\004\074\u04cf\001" +
    "\002\000\004\022\u04d0\001\002\000\014\014\054\015\053" +
    "\016\056\046\055\051\052\001\002\000\006\100\041\102" +
    "\040\001\002\000\022\005\141\011\146\012\145\020\144" +
    "\023\156\035\137\051\155\102\151\001\002\000\006\003" +
    "\u03bf\013\u03c1\001\002\000\014\003\ufe3a\010\ufe3a\013\ufe3a" +
    "\100\ufe3a\102\ufe3a\001\002\000\004\073\u04d6\001\002\000" +
    "\006\051\126\106\124\001\002\000\004\074\u04d8\001\002" +
    "\000\004\022\u04d9\001\002\000\014\014\054\015\053\016" +
    "\056\046\055\051\052\001\002\000\006\100\041\102\040" +
    "\001\002\000\022\005\141\011\146\012\145\020\144\023" +
    "\156\035\137\051\155\102\151\001\002\000\006\003\u03bf" +
    "\013\u03c1\001\002\000\014\003\ufe3b\010\ufe3b\013\ufe3b\100" +
    "\ufe3b\102\ufe3b\001\002\000\020\003\031\006\033\010\023" +
    "\013\uffd4\033\025\100\uffd4\102\032\001\002\000\004\013" +
    "\uffec\001\002\000\006\003\u0516\073\u0517\001\002\000\004" +
    "\073\u050c\001\002\000\006\003\u04e3\073\u04e4\001\002\000" +
    "\006\051\126\106\124\001\002\000\010\003\u04e5\051\126" +
    "\106\124\001\002\000\004\074\u04fb\001\002\000\006\003" +
    "\u04e7\074\u04e8\001\002\000\006\100\u04f5\102\u04f4\001\002" +
    "\000\010\003\u04ea\100\u04eb\102\u04e9\001\002\000\004\100" +
    "\u04f1\001\002\000\004\100\u04ee\001\002\000\024\003\u03d9" +
    "\005\u03dc\011\u0137\012\145\020\u03de\023\234\035\u03d8\051" +
    "\155\102\u03da\001\002\000\004\013\u0477\001\002\000\006" +
    "\013\uffe6\100\uffe6\001\002\000\024\003\u03d9\005\u03dc\011" +
    "\u0137\012\145\020\u03de\023\234\035\u03d8\051\155\102\u03da" +
    "\001\002\000\004\013\u0477\001\002\000\006\013\uffd5\100" +
    "\uffd5\001\002\000\024\003\u03d9\005\u03dc\011\u0137\012\145" +
    "\020\u03de\023\234\035\u03d8\051\155\102\u03da\001\002\000" +
    "\004\013\u0477\001\002\000\006\013\uffdb\100\uffdb\001\002" +
    "\000\004\100\u04f8\001\002\000\024\003\u03d9\005\u03dc\011" +
    "\u0137\012\145\020\u03de\023\234\035\u03d8\051\155\102\u03da" +
    "\001\002\000\004\013\u0477\001\002\000\006\013\uffe1\100" +
    "\uffe1\001\002\000\024\003\u03d9\005\u03dc\011\u0137\012\145" +
    "\020\u03de\023\234\035\u03d8\051\155\102\u03da\001\002\000" +
    "\004\013\u0477\001\002\000\006\013\uffd6\100\uffd6\001\002" +
    "\000\006\100\u04fd\102\u04fc\001\002\000\004\100\u0500\001" +
    "\002\000\024\003\u03d9\005\u03dc\011\u0137\012\145\020\u03de" +
    "\023\234\035\u03d8\051\155\102\u03da\001\002\000\004\013" +
    "\u0477\001\002\000\006\013\uffe2\100\uffe2\001\002\000\024" +
    "\003\u03d9\005\u03dc\011\u0137\012\145\020\u03de\023\234\035" +
    "\u03d8\051\155\102\u03da\001\002\000\004\013\u0477\001\002" +
    "\000\006\013\uffd7\100\uffd7\001\002\000\004\074\u0504\001" +
    "\002\000\006\100\u0506\102\u0505\001\002\000\004\100\u0509" +
    "\001\002\000\024\003\u03d9\005\u03dc\011\u0137\012\145\020" +
    "\u03de\023\234\035\u03d8\051\155\102\u03da\001\002\000\004" +
    "\013\u0477\001\002\000\006\013\uffe3\100\uffe3\001\002\000" +
    "\024\003\u03d9\005\u03dc\011\u0137\012\145\020\u03de\023\234" +
    "\035\u03d8\051\155\102\u03da\001\002\000\004\013\u0477\001" +
    "\002\000\006\013\uffd8\100\uffd8\001\002\000\006\051\126" +
    "\106\124\001\002\000\004\074\u050e\001\002\000\006\100" +
    "\u0510\102\u050f\001\002\000\004\100\u0513\001\002\000\024" +
    "\003\u03d9\005\u03dc\011\u0137\012\145\020\u03de\023\234\035" +
    "\u03d8\051\155\102\u03da\001\002\000\004\013\u0477\001\002" +
    "\000\006\013\uffe4\100\uffe4\001\002\000\024\003\u03d9\005" +
    "\u03dc\011\u0137\012\145\020\u03de\023\234\035\u03d8\051\155" +
    "\102\u03da\001\002\000\004\013\u0477\001\002\000\006\013" +
    "\uffd9\100\uffd9\001\002\000\004\074\u052c\001\002\000\006" +
    "\003\u0518\074\u0519\001\002\000\006\100\u0526\102\u0525\001" +
    "\002\000\010\003\u051b\100\u051c\102\u051a\001\002\000\004" +
    "\100\u0522\001\002\000\004\100\u051f\001\002\000\024\003" +
    "\u03d9\005\u03dc\011\u0137\012\145\020\u03de\023\234\035\u03d8" +
    "\051\155\102\u03da\001\002\000\004\013\u0477\001\002\000" +
    "\006\013\uffea\100\uffea\001\002\000\024\003\u03d9\005\u03dc" +
    "\011\u0137\012\145\020\u03de\023\234\035\u03d8\051\155\102" +
    "\u03da\001\002\000\004\013\u0477\001\002\000\006\013\uffdc" +
    "\100\uffdc\001\002\000\024\003\u03d9\005\u03dc\011\u0137\012" +
    "\145\020\u03de\023\234\035\u03d8\051\155\102\u03da\001\002" +
    "\000\004\013\u0477\001\002\000\006\013\uffe0\100\uffe0\001" +
    "\002\000\004\100\u0529\001\002\000\024\003\u03d9\005\u03dc" +
    "\011\u0137\012\145\020\u03de\023\234\035\u03d8\051\155\102" +
    "\u03da\001\002\000\004\013\u0477\001\002\000\006\013\uffe7" +
    "\100\uffe7\001\002\000\024\003\u03d9\005\u03dc\011\u0137\012" +
    "\145\020\u03de\023\234\035\u03d8\051\155\102\u03da\001\002" +
    "\000\004\013\u0477\001\002\000\006\013\uffdd\100\uffdd\001" +
    "\002\000\006\100\u052e\102\u052d\001\002\000\004\100\u0531" +
    "\001\002\000\024\003\u03d9\005\u03dc\011\u0137\012\145\020" +
    "\u03de\023\234\035\u03d8\051\155\102\u03da\001\002\000\004" +
    "\013\u0477\001\002\000\006\013\uffe8\100\uffe8\001\002\000" +
    "\024\003\u03d9\005\u03dc\011\u0137\012\145\020\u03de\023\234" +
    "\035\u03d8\051\155\102\u03da\001\002\000\004\013\u0477\001" +
    "\002\000\006\013\uffde\100\uffde\001\002\000\020\003\031" +
    "\006\033\010\023\013\uffd4\033\025\100\uffd4\102\032\001" +
    "\002\000\004\013\u049e\001\002\000\006\002\ufff4\102\ufff4" +
    "\001\002\000\004\002\001\001\002\000\004\051\u054e\001" +
    "\002\000\006\003\u053a\051\u053b\001\002\000\006\100\u0548" +
    "\102\u0547\001\002\000\010\003\u053d\100\u053e\102\u053c\001" +
    "\002\000\004\100\u0544\001\002\000\004\100\u0541\001\002" +
    "\000\020\003\031\006\033\010\023\013\uffd4\033\025\100" +
    "\uffd4\102\032\001\002\000\004\013\u049e\001\002\000\006" +
    "\002\ufffc\102\ufffc\001\002\000\020\003\031\006\033\010" +
    "\023\013\uffd4\033\025\100\uffd4\102\032\001\002\000\004" +
    "\013\u049e\001\002\000\006\002\ufff7\102\ufff7\001\002\000" +
    "\020\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4" +
    "\102\032\001\002\000\004\013\u049e\001\002\000\006\002" +
    "\ufff8\102\ufff8\001\002\000\004\100\u054b\001\002\000\020" +
    "\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4\102" +
    "\032\001\002\000\004\013\u049e\001\002\000\006\002\ufffb" +
    "\102\ufffb\001\002\000\020\003\031\006\033\010\023\013" +
    "\uffd4\033\025\100\uffd4\102\032\001\002\000\004\013\u049e" +
    "\001\002\000\006\002\ufff6\102\ufff6\001\002\000\006\100" +
    "\u0550\102\u054f\001\002\000\004\100\u0553\001\002\000\020" +
    "\003\031\006\033\010\023\013\uffd4\033\025\100\uffd4\102" +
    "\032\001\002\000\004\013\u049e\001\002\000\006\002\ufffa" +
    "\102\ufffa\001\002\000\020\003\031\006\033\010\023\013" +
    "\uffd4\033\025\100\uffd4\102\032\001\002\000\004\013\u049e" +
    "\001\002\000\006\002\ufff5\102\ufff5\001\002\000\012\002" +
    "\ufffd\003\010\006\005\102\004\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0555\000\010\002\005\003\010\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\004\125\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\023\021\025\053\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\130\u049c\001\001" +
    "\000\006\010\u0499\121\u049a\001\001\000\006\010\u0496\121" +
    "\u0497\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\100\001\001\000\004\121\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\042\001\001\000\004\132" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\060\001\001\000\004\012\050\001" +
    "\001\000\004\121\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\057\001\001\000\002\001\001\000\004" +
    "\121\063\001\001\000\004\121\062\001\001\000\002\001" +
    "\001\000\004\052\064\001\001\000\002\001\001\000\004" +
    "\012\066\001\001\000\004\121\067\001\001\000\004\052" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\101" +
    "\001\001\000\004\132\102\001\001\000\002\001\001\000" +
    "\004\121\104\001\001\000\004\052\105\001\001\000\004" +
    "\132\106\001\001\000\002\001\001\000\012\007\027\010" +
    "\023\021\110\053\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\116\001\001\000\004\052\117\001\001" +
    "\000\004\132\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\127\001\001\000" +
    "\002\001\001\000\004\011\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\134\001\001\000\004\121" +
    "\135\001\001\000\022\013\137\015\141\050\146\054\153" +
    "\055\152\057\142\066\151\114\147\001\001\000\002\001" +
    "\001\000\004\131\u03bf\001\001\000\016\017\171\024\163" +
    "\030\u039f\050\170\113\166\123\172\001\001\000\022\013" +
    "\u039e\015\141\050\146\054\153\055\152\057\142\066\151" +
    "\114\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0342\001\001" +
    "\000\022\013\u0341\015\141\050\146\054\153\055\152\057" +
    "\142\066\151\114\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\u033e\015\141\050" +
    "\146\054\153\055\152\057\142\066\151\114\147\001\001" +
    "\000\012\024\304\113\305\115\u030b\122\u0309\001\001\000" +
    "\004\116\156\001\001\000\016\017\171\024\163\030\174" +
    "\050\170\113\166\123\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\361\001\001\000\012\017\u02f8" +
    "\050\267\113\327\123\u02f7\001\001\000\004\031\u02f0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u02ea" +
    "\001\001\000\002\001\001\000\004\031\u02e5\001\001\000" +
    "\004\031\u02df\001\001\000\004\020\347\001\001\000\004" +
    "\031\u02d7\001\001\000\004\121\175\001\001\000\022\015" +
    "\202\050\206\057\204\061\211\062\176\064\200\067\203" +
    "\114\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\171\024\163\030\u026c\050\170" +
    "\113\166\123\172\001\001\000\022\015\202\050\206\057" +
    "\204\061\211\062\176\064\200\067\u026b\114\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0258\001\001\000\022\015\202\050\206\057\204" +
    "\061\211\062\176\064\200\067\u0257\114\207\001\001\000" +
    "\002\001\001\000\022\015\202\050\206\057\204\061\211" +
    "\062\176\064\200\067\u0254\114\207\001\001\000\004\116" +
    "\213\001\001\000\016\017\171\024\163\030\214\050\170" +
    "\113\166\123\172\001\001\000\004\121\215\001\001\000" +
    "\022\015\221\041\222\043\225\044\216\046\232\050\227" +
    "\065\223\114\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\171\024\163\030\u0209\050\170\113\166" +
    "\123\172\001\001\000\022\015\221\041\222\043\225\044" +
    "\216\046\232\050\227\065\u0208\114\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\221\041\222\043\225\044\216\046\232\050\227\065\u01f6" +
    "\114\230\001\001\000\002\001\001\000\004\121\u0126\001" +
    "\001\000\022\015\221\041\222\043\225\044\216\046\232" +
    "\050\227\065\u0125\114\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\234\001\001\000\016\017\171" +
    "\024\163\030\235\050\170\113\166\123\172\001\001\000" +
    "\004\121\236\001\001\000\022\015\240\041\222\042\242" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\002\001\001\000\022\015\240\041\222\042\u011f\043\243" +
    "\044\216\046\232\050\244\114\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\240\041\222\042\254" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\004\121\252\001\001\000\022\015\240\041\222\042\251" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\002\001\001\000\022\015\240\041\222\042\250\043\243" +
    "\044\216\046\232\050\244\114\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\240\041\222\042\253" +
    "\043\243\044\216\046\232\050\244\114\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\270\023\266\024\264\050\267" +
    "\113\265\123\172\001\001\000\004\121\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\270\023\274\024\264\050\267\113\265" +
    "\123\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\270\023\321\024\264\050\267\113\265\123\172" +
    "\001\001\000\012\024\304\051\303\113\305\115\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\304" +
    "\113\305\115\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\304\051\312\113\305\115\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\304\051\317\113\305\115\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\270\023" +
    "\324\024\264\050\267\113\265\123\172\001\001\000\002" +
    "\001\001\000\016\017\270\023\u0111\024\264\050\267\113" +
    "\265\123\172\001\001\000\012\017\332\050\267\113\327" +
    "\123\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\347\001\001\000\002\001\001\000\014\017\343" +
    "\020\337\050\267\113\327\123\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\361\001\001\000\012" +
    "\017\345\050\267\113\327\123\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\355\050\267\113\327\120\357\123\356" +
    "\001\001\000\012\017\352\050\267\113\327\123\351\001" +
    "\001\000\004\020\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\u0106\020\u0104\050\267\113\327\123\u0105\001\001\000" +
    "\012\017\365\050\267\113\327\123\364\001\001\000\004" +
    "\050\u0102\001\001\000\004\020\347\001\001\000\002\001" +
    "\001\000\014\017\371\020\367\050\267\113\327\123\370" +
    "\001\001\000\012\017\373\050\267\113\327\123\372\001" +
    "\001\000\004\020\347\001\001\000\002\001\001\000\004" +
    "\020\347\001\001\000\002\001\001\000\014\017\376\020" +
    "\375\050\267\113\327\123\377\001\001\000\012\017\u0101" +
    "\050\267\113\327\123\u0100\001\001\000\002\001\001\000" +
    "\004\020\347\001\001\000\004\020\347\001\001\000\002" +
    "\001\001\000\014\017\u0106\020\u0104\050\267\113\327\123" +
    "\u0105\001\001\000\014\017\u0109\020\u0108\050\267\113\327" +
    "\123\u010a\001\001\000\014\017\355\050\267\113\327\120" +
    "\u0107\123\356\001\001\000\004\020\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\u010b\050\267\113" +
    "\327\123\172\001\001\000\002\001\001\000\004\020\347" +
    "\001\001\000\002\001\001\000\014\017\u010e\020\u010d\050" +
    "\267\113\327\123\172\001\001\000\012\017\u0110\050\267" +
    "\113\327\123\u010f\001\001\000\002\001\001\000\004\020" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0113\001\001\000\022\015\240\041\222\042\u0114\043" +
    "\243\044\216\046\232\050\244\114\245\001\001\000\002" +
    "\001\001\000\016\017\270\023\u0116\024\264\050\267\113" +
    "\265\123\172\001\001\000\002\001\001\000\016\017\270" +
    "\023\u0118\024\264\050\267\113\265\123\172\001\001\000" +
    "\002\001\001\000\022\015\240\041\222\042\u011a\043\243" +
    "\044\216\046\232\050\244\114\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u011d\001\001\000\022" +
    "\015\240\041\222\042\u011e\043\243\044\216\046\232\050" +
    "\244\114\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0121\001\001\000\022\015\240\041\222\042" +
    "\u0122\043\243\044\216\046\232\050\244\114\245\001\001" +
    "\000\002\001\001\000\022\015\221\041\222\043\225\044" +
    "\216\046\232\050\227\065\u0124\114\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\221\041\222\043" +
    "\225\044\216\046\232\050\227\065\u0127\114\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\u012a\001" +
    "\001\000\002\001\001\000\004\113\u012c\001\001\000\002" +
    "\001\001\000\004\113\u012e\001\001\000\004\121\u012f\001" +
    "\001\000\022\015\u0133\032\u0134\034\u0130\035\u0139\037\u013c" +
    "\047\u013b\050\u0137\114\u013a\001\001\000\022\015\u0133\032" +
    "\u0134\034\u0130\035\u0139\037\u013c\047\u01f5\050\u0137\114\u013a" +
    "\001\001\000\002\001\001\000\016\017\171\024\163\030" +
    "\u01ab\050\170\113\166\123\172\001\001\000\022\015\u0133" +
    "\032\u0134\034\u0130\035\u0139\037\u013c\047\u01aa\050\u0137\114" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u016d\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\u0133\032\u0134\034\u0130\035\u0139" +
    "\037\u013c\047\u016a\050\u0137\114\u013a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\u013e\001\001\000\016" +
    "\017\171\024\163\030\u013f\050\170\113\166\123\172\001" +
    "\001\000\004\121\u0140\001\001\000\022\015\u0142\040\u0148" +
    "\041\222\043\u0144\044\216\046\232\050\u0145\114\u0146\001" +
    "\001\000\002\001\001\000\022\015\u0142\040\u0160\041\222" +
    "\043\u0144\044\216\046\232\050\u0145\114\u0146\001\001\000" +
    "\002\001\001\000\022\015\u0142\040\u0150\041\222\043\u0144" +
    "\044\216\046\232\050\u0145\114\u0146\001\001\000\004\121" +
    "\u014e\001\001\000\022\015\u0142\040\u014d\041\222\043\u0144" +
    "\044\216\046\232\050\u0145\114\u0146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u014a\001\001\000\002" +
    "\001\001\000\022\015\u0142\040\u014c\041\222\043\u0144\044" +
    "\216\046\232\050\u0145\114\u0146\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0142\040\u014f\041\222\043" +
    "\u0144\044\216\046\232\050\u0145\114\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\270\023\u0156\024\264" +
    "\050\267\113\265\123\172\001\001\000\004\121\u015a\001" +
    "\001\000\002\001\001\000\004\121\u0158\001\001\000\022" +
    "\015\u0142\040\u0159\041\222\043\u0144\044\216\046\232\050" +
    "\u0145\114\u0146\001\001\000\002\001\001\000\022\015\u0142" +
    "\040\u015b\041\222\043\u0144\044\216\046\232\050\u0145\114" +
    "\u0146\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u015e\001\001\000\022\015\u0142\040\u015f\041\222\043" +
    "\u0144\044\216\046\232\050\u0145\114\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0165\001\001\000" +
    "\004\121\u0163\001\001\000\022\015\u0142\040\u0164\041\222" +
    "\043\u0144\044\216\046\232\050\u0145\114\u0146\001\001\000" +
    "\002\001\001\000\022\015\u0142\040\u0166\041\222\043\u0144" +
    "\044\216\046\232\050\u0145\114\u0146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0169\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\u0133\032\u0134\034" +
    "\u0130\035\u0139\037\u013c\047\u016c\050\u0137\114\u013a\001\001" +
    "\000\002\001\001\000\022\015\u0133\032\u0134\034\u0130\035" +
    "\u0139\037\u013c\047\u016e\050\u0137\114\u013a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u0171\001\001\000" +
    "\002\001\001\000\004\113\u0173\001\001\000\002\001\001" +
    "\000\004\113\u0175\001\001\000\004\121\u0176\001\001\000" +
    "\022\015\u017a\032\u0134\033\u0179\034\u0177\035\u0139\037\u013c" +
    "\050\u017c\114\u017d\001\001\000\022\015\u017a\032\u0134\033" +
    "\u019a\034\u0177\035\u0139\037\u013c\050\u017c\114\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u017a\032" +
    "\u0134\033\u0193\034\u0177\035\u0139\037\u013c\050\u017c\114\u017d" +
    "\001\001\000\002\001\001\000\004\121\u0182\001\001\000" +
    "\022\015\u017a\032\u0134\033\u0181\034\u0177\035\u0139\037\u013c" +
    "\050\u017c\114\u017d\001\001\000\002\001\001\000\022\015" +
    "\u017a\032\u0134\033\u0180\034\u0177\035\u0139\037\u013c\050\u017c" +
    "\114\u017d\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\u017a\032\u0134\033\u0183\034\u0177\035\u0139\037\u013c" +
    "\050\u017c\114\u017d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\270" +
    "\023\u0189\024\264\050\267\113\265\123\172\001\001\000" +
    "\004\121\u018d\001\001\000\002\001\001\000\004\121\u018b" +
    "\001\001\000\022\015\u017a\032\u0134\033\u018c\034\u0177\035" +
    "\u0139\037\u013c\050\u017c\114\u017d\001\001\000\002\001\001" +
    "\000\022\015\u017a\032\u0134\033\u018e\034\u0177\035\u0139\037" +
    "\u013c\050\u017c\114\u017d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0191\001\001\000\022\015\u017a\032" +
    "\u0134\033\u0192\034\u0177\035\u0139\037\u013c\050\u017c\114\u017d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0196\001\001\000\002\001\001\000\004" +
    "\121\u0198\001\001\000\022\015\u017a\032\u0134\033\u0199\034" +
    "\u0177\035\u0139\037\u013c\050\u017c\114\u017d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\270\023\u01a0\024\264" +
    "\050\267\113\265\123\172\001\001\000\004\121\u01a4\001" +
    "\001\000\002\001\001\000\004\121\u01a2\001\001\000\022" +
    "\015\u0133\032\u0134\034\u0130\035\u0139\037\u013c\047\u01a3\050" +
    "\u0137\114\u013a\001\001\000\002\001\001\000\022\015\u0133" +
    "\032\u0134\034\u0130\035\u0139\037\u013c\047\u01a5\050\u0137\114" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u01a8\001\001\000\022\015\u0133\032\u0134\034\u0130\035" +
    "\u0139\037\u013c\047\u01a9\050\u0137\114\u013a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u01ad\001\001\000\022\015\u01b0\032\u0134\034\u01ae\035\u0139" +
    "\037\u013c\050\u01b2\100\u01b5\114\u01b3\001\001\000\022\015" +
    "\u01b0\032\u0134\034\u01ae\035\u0139\037\u013c\050\u01b2\100\u01ee" +
    "\114\u01b3\001\001\000\002\001\001\000\022\015\u01b0\032" +
    "\u0134\034\u01ae\035\u0139\037\u013c\050\u01b2\100\u01e7\114\u01b3" +
    "\001\001\000\002\001\001\000\004\121\u01d6\001\001\000" +
    "\022\015\u01b0\032\u0134\034\u01ae\035\u0139\037\u013c\050\u01b2" +
    "\100\u01d5\114\u01b3\001\001\000\002\001\001\000\010\036" +
    "\u01b9\110\u01b8\117\u01b7\001\001\000\002\001\001\000\016" +
    "\017\171\024\163\030\u01cc\050\170\113\166\123\172\001" +
    "\001\000\002\001\001\000\004\121\u01c4\001\001\000\004" +
    "\121\u01bf\001\001\000\002\001\001\000\004\121\u01bd\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u01b0" +
    "\032\u0134\034\u01ae\035\u0139\037\u013c\050\u01b2\100\u01c0\114" +
    "\u01b3\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u01c3\001\001\000\002\001\001\000\022\015\u01b0\032" +
    "\u0134\034\u01ae\035\u0139\037\u013c\050\u01b2\100\u01c5\114\u01b3" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u01c8\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u01cb\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u01ce\001\001\000\022\015\u01b0\032\u0134\034\u01ae" +
    "\035\u0139\037\u013c\050\u01b2\100\u01cf\114\u01b3\001\001\000" +
    "\010\036\u01d1\110\u01d0\117\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u01b0\032" +
    "\u0134\034\u01ae\035\u0139\037\u013c\050\u01b2\100\u01d4\114\u01b3" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\u01b0\032\u0134\034\u01ae\035\u0139\037\u013c\050\u01b2\100\u01d7" +
    "\114\u01b3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\270\023\u01dd" +
    "\024\264\050\267\113\265\123\172\001\001\000\004\121" +
    "\u01e1\001\001\000\002\001\001\000\004\121\u01df\001\001" +
    "\000\022\015\u01b0\032\u0134\034\u01ae\035\u0139\037\u013c\050" +
    "\u01b2\100\u01e0\114\u01b3\001\001\000\002\001\001\000\022" +
    "\015\u01b0\032\u0134\034\u01ae\035\u0139\037\u013c\050\u01b2\100" +
    "\u01e2\114\u01b3\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u01e5\001\001\000\022\015\u01b0\032\u0134\034" +
    "\u01ae\035\u0139\037\u013c\050\u01b2\100\u01e6\114\u01b3\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u01ec\001" +
    "\001\000\004\121\u01ea\001\001\000\022\015\u01b0\032\u0134" +
    "\034\u01ae\035\u0139\037\u013c\050\u01b2\100\u01eb\114\u01b3\001" +
    "\001\000\002\001\001\000\022\015\u01b0\032\u0134\034\u01ae" +
    "\035\u0139\037\u013c\050\u01b2\100\u01ed\114\u01b3\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u01f3\001\001" +
    "\000\004\121\u01f1\001\001\000\022\015\u0133\032\u0134\034" +
    "\u0130\035\u0139\037\u013c\047\u01f2\050\u0137\114\u013a\001\001" +
    "\000\002\001\001\000\022\015\u0133\032\u0134\034\u0130\035" +
    "\u0139\037\u013c\047\u01f4\050\u0137\114\u013a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\270" +
    "\023\u01fc\024\264\050\267\113\265\123\172\001\001\000" +
    "\004\121\u0200\001\001\000\002\001\001\000\004\121\u01fe" +
    "\001\001\000\022\015\221\041\222\043\225\044\216\046" +
    "\232\050\227\065\u01ff\114\230\001\001\000\002\001\001" +
    "\000\022\015\221\041\222\043\225\044\216\046\232\050" +
    "\227\065\u0201\114\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0204\001\001\000\022\015\221\041" +
    "\222\043\225\044\216\046\232\050\227\065\u0205\114\230" +
    "\001\001\000\002\001\001\000\004\121\u0207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u020b\001\001\000\022\015\u020d\041\222\043\u020f\044" +
    "\216\046\232\050\u0210\101\u0213\114\u0212\001\001\000\002" +
    "\001\001\000\022\015\u020d\041\222\043\u020f\044\216\046" +
    "\232\050\u0210\101\u0244\114\u0212\001\001\000\002\001\001" +
    "\000\022\015\u020d\041\222\043\u020f\044\216\046\232\050" +
    "\u0210\101\u0234\114\u0212\001\001\000\004\121\u0232\001\001" +
    "\000\002\001\001\000\022\015\u020d\041\222\043\u020f\044" +
    "\216\046\232\050\u0210\101\u022f\114\u0212\001\001\000\010" +
    "\045\u0216\106\u0217\117\u0214\001\001\000\016\017\171\024" +
    "\163\030\u0228\050\170\113\166\123\172\001\001\000\004" +
    "\121\u0223\001\001\000\004\121\u021e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u021a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u021d\001\001\000" +
    "\002\001\001\000\022\015\u020d\041\222\043\u020f\044\216" +
    "\046\232\050\u0210\101\u021f\114\u0212\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0222\001\001\000\002" +
    "\001\001\000\022\015\u020d\041\222\043\u020f\044\216\046" +
    "\232\050\u0210\101\u0224\114\u0212\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0227\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u022a\001\001\000\022" +
    "\015\u020d\041\222\043\u020f\044\216\046\232\050\u0210\101" +
    "\u022b\114\u0212\001\001\000\010\045\u022d\106\u022e\117\u0214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u020d\041\222\043\u020f" +
    "\044\216\046\232\050\u0210\101\u0231\114\u0212\001\001\000" +
    "\002\001\001\000\022\015\u020d\041\222\043\u020f\044\216" +
    "\046\232\050\u0210\101\u0233\114\u0212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\270\023\u023a\024\264\050" +
    "\267\113\265\123\172\001\001\000\004\121\u023e\001\001" +
    "\000\002\001\001\000\004\121\u023c\001\001\000\022\015" +
    "\u020d\041\222\043\u020f\044\216\046\232\050\u0210\101\u023d" +
    "\114\u0212\001\001\000\002\001\001\000\022\015\u020d\041" +
    "\222\043\u020f\044\216\046\232\050\u0210\101\u023f\114\u0212" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0242\001\001\000\022\015\u020d\041\222\043\u020f\044\216" +
    "\046\232\050\u0210\101\u0243\114\u0212\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0249\001\001\000\004" +
    "\121\u0247\001\001\000\022\015\u020d\041\222\043\u020f\044" +
    "\216\046\232\050\u0210\101\u0248\114\u0212\001\001\000\002" +
    "\001\001\000\022\015\u020d\041\222\043\u020f\044\216\046" +
    "\232\050\u0210\101\u024a\114\u0212\001\001\000\002\001\001" +
    "\000\004\121\u0252\001\001\000\004\121\u0250\001\001\000" +
    "\004\121\u024e\001\001\000\022\015\221\041\222\043\225" +
    "\044\216\046\232\050\227\065\u024f\114\230\001\001\000" +
    "\002\001\001\000\022\015\221\041\222\043\225\044\216" +
    "\046\232\050\227\065\u0251\114\230\001\001\000\002\001" +
    "\001\000\022\015\221\041\222\043\225\044\216\046\232" +
    "\050\227\065\u0253\114\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\202\050\206\057\204\061\211" +
    "\062\176\064\200\067\u0256\114\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\202\050\206\057\204" +
    "\061\211\062\176\064\200\067\u0259\114\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\270\023\u025f\024\264\050\267\113" +
    "\265\123\172\001\001\000\004\121\u0263\001\001\000\002" +
    "\001\001\000\004\121\u0261\001\001\000\022\015\202\050" +
    "\206\057\204\061\211\062\176\064\200\067\u0262\114\207" +
    "\001\001\000\002\001\001\000\022\015\202\050\206\057" +
    "\204\061\211\062\176\064\200\067\u0264\114\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0267\001" +
    "\001\000\022\015\202\050\206\057\204\061\211\062\176" +
    "\064\200\067\u0268\114\207\001\001\000\002\001\001\000" +
    "\004\121\u026a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u026e\001\001\000\022\015" +
    "\u0270\050\u0272\057\204\061\u0276\062\176\064\200\103\u0275" +
    "\114\u0274\001\001\000\002\001\001\000\022\015\u0270\050" +
    "\u0272\057\204\061\u0276\062\176\064\200\103\u02c7\114\u0274" +
    "\001\001\000\002\001\001\000\004\121\u0296\001\001\000" +
    "\002\001\001\000\022\015\u0270\050\u0272\057\204\061\u0276" +
    "\062\176\064\200\103\u0293\114\u0274\001\001\000\010\063" +
    "\u027a\112\u027b\117\u0278\001\001\000\022\015\u0270\050\u0272" +
    "\057\204\061\u0276\062\176\064\200\103\u0277\114\u0274\001" +
    "\001\000\002\001\001\000\016\017\171\024\163\030\u028c" +
    "\050\170\113\166\123\172\001\001\000\004\121\u0287\001" +
    "\001\000\004\121\u0282\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u027e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0281\001\001\000\002\001\001" +
    "\000\022\015\u0270\050\u0272\057\204\061\u0276\062\176\064" +
    "\200\103\u0283\114\u0274\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0286\001\001\000\002\001\001\000" +
    "\022\015\u0270\050\u0272\057\204\061\u0276\062\176\064\200" +
    "\103\u0288\114\u0274\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u028b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u028e\001\001\000\022\015\u0270\050" +
    "\u0272\057\204\061\u0276\062\176\064\200\103\u028f\114\u0274" +
    "\001\001\000\010\063\u0291\112\u0292\117\u0278\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\u0270\050\u0272\057\204\061\u0276\062" +
    "\176\064\200\103\u0295\114\u0274\001\001\000\002\001\001" +
    "\000\022\015\u0299\050\u029b\054\u029e\055\152\057\142\066" +
    "\151\102\u0297\114\u029c\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\u0299\050\u029b\054\u029e\055\152\057" +
    "\142\066\151\102\u02b4\114\u029c\001\001\000\002\001\001" +
    "\000\004\121\u02a3\001\001\000\022\015\u0299\050\u029b\054" +
    "\u029e\055\152\057\142\066\151\102\u02a2\114\u029c\001\001" +
    "\000\002\001\001\000\022\015\u0299\050\u029b\054\u029e\055" +
    "\152\057\142\066\151\102\u029f\114\u029c\001\001\000\002" +
    "\001\001\000\022\015\u0299\050\u029b\054\u029e\055\152\057" +
    "\142\066\151\102\u02a1\114\u029c\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0299\050\u029b\054\u029e\055" +
    "\152\057\142\066\151\102\u02a4\114\u029c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\270\023\u02aa\024\264\050\267\113\265" +
    "\123\172\001\001\000\004\121\u02ae\001\001\000\002\001" +
    "\001\000\004\121\u02ac\001\001\000\022\015\u0299\050\u029b" +
    "\054\u029e\055\152\057\142\066\151\102\u02ad\114\u029c\001" +
    "\001\000\002\001\001\000\022\015\u0299\050\u029b\054\u029e" +
    "\055\152\057\142\066\151\102\u02af\114\u029c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u02b2\001\001" +
    "\000\022\015\u0299\050\u029b\054\u029e\055\152\057\142\066" +
    "\151\102\u02b3\114\u029c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u02b6\001\001\000\022\015\u0299\050" +
    "\u029b\054\u029e\055\152\057\142\066\151\102\u02b7\114\u029c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\270\023\u02bd\024\264" +
    "\050\267\113\265\123\172\001\001\000\004\121\u02c1\001" +
    "\001\000\002\001\001\000\004\121\u02bf\001\001\000\022" +
    "\015\u0270\050\u0272\057\204\061\u0276\062\176\064\200\103" +
    "\u02c0\114\u0274\001\001\000\002\001\001\000\022\015\u0270" +
    "\050\u0272\057\204\061\u0276\062\176\064\200\103\u02c2\114" +
    "\u0274\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u02c5\001\001\000\022\015\u0270\050\u0272\057\204\061" +
    "\u0276\062\176\064\200\103\u02c6\114\u0274\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u02cc\001\001\000" +
    "\004\121\u02ca\001\001\000\022\015\u0270\050\u0272\057\204" +
    "\061\u0276\062\176\064\200\103\u02cb\114\u0274\001\001\000" +
    "\002\001\001\000\022\015\u0270\050\u0272\057\204\061\u0276" +
    "\062\176\064\200\103\u02cd\114\u0274\001\001\000\002\001" +
    "\001\000\004\121\u02d2\001\001\000\004\121\u02d0\001\001" +
    "\000\022\015\202\050\206\057\204\061\211\062\176\064" +
    "\200\067\u02d1\114\207\001\001\000\002\001\001\000\022" +
    "\015\202\050\206\057\204\061\211\062\176\064\200\067" +
    "\u02d3\114\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\u02db\024" +
    "\u02d8\050\u02da\113\u02d9\123\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\u02e3\024\u02e0\050\u02e2\113\u02e1\123\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\u02e8\024\u02e6\050" +
    "\267\113\u02e7\123\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\u02ee\024\u02eb\050\u02ed\113\u02ec\123\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u02f4\024\u02f1\050\u02f3" +
    "\113\u02f2\123\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0305\001\001\000\004\020\347\001\001\000" +
    "\002\001\001\000\014\017\u02fb\020\u02fa\050\267\113\327" +
    "\123\u02fc\001\001\000\012\017\u02fe\050\267\113\327\123" +
    "\u02fd\001\001\000\002\001\001\000\004\020\347\001\001" +
    "\000\004\020\347\001\001\000\002\001\001\000\014\017" +
    "\u0302\020\u0300\050\267\113\327\123\u0301\001\001\000\012" +
    "\017\u0304\050\267\113\327\123\u0303\001\001\000\004\020" +
    "\347\001\001\000\002\001\001\000\004\020\347\001\001" +
    "\000\002\001\001\000\014\017\u0106\020\u0104\050\267\113" +
    "\327\123\u0105\001\001\000\002\001\001\000\012\024\304" +
    "\051\303\113\305\115\u033c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0322\001\001" +
    "\000\020\017\u0313\024\u030d\050\u0310\113\u030f\114\u0311\123" +
    "\172\124\u0312\001\001\000\004\121\u0320\001\001\000\002" +
    "\001\001\000\004\121\u031b\001\001\000\004\121\u031a\001" +
    "\001\000\002\001\001\000\004\121\u0319\001\001\000\004" +
    "\121\u0318\001\001\000\004\121\u0317\001\001\000\014\024" +
    "\304\113\305\115\u030b\121\u0316\122\u0309\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\304\113\305\115\u030b\122\u0324" +
    "\001\001\000\002\001\001\000\010\024\304\113\305\115" +
    "\u0325\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0328\001\001\000\012\024\304\113\305\115\u030b\122" +
    "\u0329\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\u0332\024\u032d\050" +
    "\u032f\113\u032e\114\u0330\123\172\124\u0331\001\001\000\004" +
    "\121\u033b\001\001\000\004\121\u033a\001\001\000\004\121" +
    "\u0339\001\001\000\002\001\001\000\004\121\u0338\001\001" +
    "\000\004\121\u0337\001\001\000\004\121\u0336\001\001\000" +
    "\014\024\304\113\305\115\u030b\121\u0335\122\u0309\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0328\001\001\000" +
    "\002\001\001\000\022\013\u0340\015\141\050\146\054\153" +
    "\055\152\057\142\066\151\114\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\u0343\015\141\050\146" +
    "\054\153\055\152\057\142\066\151\114\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\113\u0346\001\001" +
    "\000\002\001\001\000\004\113\u0348\001\001\000\002\001" +
    "\001\000\004\113\u034a\001\001\000\004\121\u034b\001\001" +
    "\000\022\015\u034d\050\u034f\057\204\060\u0350\061\u0353\062" +
    "\176\064\200\114\u0352\001\001\000\002\001\001\000\022" +
    "\015\u034d\050\u034f\057\204\060\u036c\061\u0353\062\176\064" +
    "\200\114\u0352\001\001\000\002\001\001\000\004\121\u035b" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\u034d\050\u034f\057\204\060\u0355\061\u0353\062\176\064\200" +
    "\114\u0352\001\001\000\022\015\u034d\050\u034f\057\204\060" +
    "\u0354\061\u0353\062\176\064\200\114\u0352\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\u034d\050\u034f\057" +
    "\204\060\u0357\061\u0353\062\176\064\200\114\u0352\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u035a\001" +
    "\001\000\002\001\001\000\022\015\u034d\050\u034f\057\204" +
    "\060\u035c\061\u0353\062\176\064\200\114\u0352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\270\023\u0362\024\264\050\267\113" +
    "\265\123\172\001\001\000\004\121\u0366\001\001\000\002" +
    "\001\001\000\004\121\u0364\001\001\000\022\015\u034d\050" +
    "\u034f\057\204\060\u0365\061\u0353\062\176\064\200\114\u0352" +
    "\001\001\000\002\001\001\000\022\015\u034d\050\u034f\057" +
    "\204\060\u0367\061\u0353\062\176\064\200\114\u0352\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u036a\001" +
    "\001\000\022\015\u034d\050\u034f\057\204\060\u036b\061\u0353" +
    "\062\176\064\200\114\u0352\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0371\001\001\000\004\121\u036f" +
    "\001\001\000\022\015\u034d\050\u034f\057\204\060\u0370\061" +
    "\u0353\062\176\064\200\114\u0352\001\001\000\002\001\001" +
    "\000\022\015\u034d\050\u034f\057\204\060\u0372\061\u0353\062" +
    "\176\064\200\114\u0352\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0383\001\001\000\022\016\u037a\017" +
    "\u037c\024\u0376\050\u0378\113\u0377\114\u0379\123\172\124\u037b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0382\001\001\000\002\001\001\000\004\121\u0381\001\001" +
    "\000\002\001\001\000\004\121\u0380\001\001\000\014\024" +
    "\304\113\305\115\u030b\121\u037f\122\u0309\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0385\001\001\000\022" +
    "\016\u0388\017\u0389\024\u0376\050\u0386\113\u0377\114\u0387\123" +
    "\172\124\u037b\001\001\000\002\001\001\000\004\121\u038e" +
    "\001\001\000\002\001\001\000\004\121\u038d\001\001\000" +
    "\004\121\u038c\001\001\000\014\024\304\113\305\115\u030b" +
    "\121\u038b\122\u0309\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\270\023" +
    "\u0394\024\264\050\267\113\265\123\172\001\001\000\004" +
    "\121\u0398\001\001\000\002\001\001\000\004\121\u0396\001" +
    "\001\000\022\013\u0397\015\141\050\146\054\153\055\152" +
    "\057\142\066\151\114\147\001\001\000\002\001\001\000" +
    "\022\013\u0399\015\141\050\146\054\153\055\152\057\142" +
    "\066\151\114\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u039c\001\001\000\022\013\u039d\015\141" +
    "\050\146\054\153\055\152\057\142\066\151\114\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u03a1\001\001\000\022\015\u0299\050\u029b\054" +
    "\u029e\055\152\057\142\066\151\102\u03a2\114\u029c\001\001" +
    "\000\010\056\u03a6\111\u03a4\117\u03a3\001\001\000\016\017" +
    "\171\024\163\030\u03b7\050\170\113\166\123\172\001\001" +
    "\000\002\001\001\000\004\121\u03af\001\001\000\004\121" +
    "\u03aa\001\001\000\002\001\001\000\004\121\u03a9\001\001" +
    "\000\002\001\001\000\022\015\u0299\050\u029b\054\u029e\055" +
    "\152\057\142\066\151\102\u03ab\114\u029c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u03ae\001\001\000" +
    "\002\001\001\000\022\015\u0299\050\u029b\054\u029e\055\152" +
    "\057\142\066\151\102\u03b0\114\u029c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u03b3\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u03b6\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u03b9\001\001" +
    "\000\022\015\u0299\050\u029b\054\u029e\055\152\057\142\066" +
    "\151\102\u03ba\114\u029c\001\001\000\010\056\u03bd\111\u03bb" +
    "\117\u03a3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u03c5\001\001\000\022\013\u03c6\015\141" +
    "\050\146\054\153\055\152\057\142\066\151\114\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u03c9" +
    "\001\001\000\002\001\001\000\004\011\u03cb\001\001\000" +
    "\002\001\001\000\004\011\u03cd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\015\u03d2\022" +
    "\u03d3\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1" +
    "\126\u03d6\001\001\000\024\015\u03d2\022\u0488\025\u03dc\026" +
    "\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001" +
    "\000\024\015\u03d2\022\u0487\025\u03dc\026\u03de\032\u03d4\041" +
    "\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000\004\127\u0486" +
    "\001\001\000\002\001\001\000\004\121\u0484\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\127\u0473\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\171\024" +
    "\163\030\u03ef\050\170\113\166\123\172\001\001\000\024" +
    "\015\u03d2\022\u03ee\025\u03dc\026\u03de\032\u03d4\041\u03da\050" +
    "\u03d5\114\u03d1\126\u03d6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\270\023\u03e4\024\264\050\267\113\265" +
    "\123\172\001\001\000\004\121\u03e8\001\001\000\002\001" +
    "\001\000\004\121\u03e6\001\001\000\024\015\u03d2\022\u03e7" +
    "\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126" +
    "\u03d6\001\001\000\002\001\001\000\024\015\u03d2\022\u03e9" +
    "\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126" +
    "\u03d6\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u03ec\001\001\000\024\015\u03d2\022\u03ed\025\u03dc\026" +
    "\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u03f1\001\001\000\022\015\u03f3\025\u03f9\026\u03de" +
    "\032\u03d4\041\u03da\050\u03f6\077\u03f5\114\u03f8\001\001\000" +
    "\002\001\001\000\022\015\u03f3\025\u03f9\026\u03de\032\u03d4" +
    "\041\u03da\050\u03f6\077\u046d\114\u03f8\001\001\000\002\001" +
    "\001\000\010\027\u0403\107\u0401\117\u0402\001\001\000\004" +
    "\121\u03ff\001\001\000\002\001\001\000\022\015\u03f3\025" +
    "\u03f9\026\u03de\032\u03d4\041\u03da\050\u03f6\077\u03fc\114\u03f8" +
    "\001\001\000\002\001\001\000\022\015\u03f3\025\u03f9\026" +
    "\u03de\032\u03d4\041\u03da\050\u03f6\077\u03fb\114\u03f8\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u03f3\025" +
    "\u03f9\026\u03de\032\u03d4\041\u03da\050\u03f6\077\u03fe\114\u03f8" +
    "\001\001\000\002\001\001\000\022\015\u03f3\025\u03f9\026" +
    "\u03de\032\u03d4\041\u03da\050\u03f6\077\u0400\114\u03f8\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\171\024" +
    "\163\030\u0433\050\170\113\166\123\172\001\001\000\004" +
    "\121\u042e\001\001\000\004\121\u0408\001\001\000\002\001" +
    "\001\000\004\121\u0407\001\001\000\002\001\001\000\022" +
    "\015\u040b\025\u0410\026\u03de\032\u03d4\041\u03da\050\u040d\114" +
    "\u040f\133\u0409\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\u03f3\025\u03f9\026\u03de\032\u03d4\041\u03da\050" +
    "\u03f6\077\u0427\114\u03f8\001\001\000\002\001\001\000\004" +
    "\121\u0416\001\001\000\002\001\001\000\022\015\u040b\025" +
    "\u0410\026\u03de\032\u03d4\041\u03da\050\u040d\114\u040f\133\u0413" +
    "\001\001\000\002\001\001\000\022\015\u040b\025\u0410\026" +
    "\u03de\032\u03d4\041\u03da\050\u040d\114\u040f\133\u0412\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u040b\025" +
    "\u0410\026\u03de\032\u03d4\041\u03da\050\u040d\114\u040f\133\u0415" +
    "\001\001\000\002\001\001\000\022\015\u040b\025\u0410\026" +
    "\u03de\032\u03d4\041\u03da\050\u040d\114\u040f\133\u0417\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\270\023\u041d\024\264\050\267" +
    "\113\265\123\172\001\001\000\004\121\u0421\001\001\000" +
    "\002\001\001\000\004\121\u041f\001\001\000\022\015\u040b" +
    "\025\u0410\026\u03de\032\u03d4\041\u03da\050\u040d\114\u040f\133" +
    "\u0420\001\001\000\002\001\001\000\022\015\u040b\025\u0410" +
    "\026\u03de\032\u03d4\041\u03da\050\u040d\114\u040f\133\u0422\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0425" +
    "\001\001\000\022\015\u040b\025\u0410\026\u03de\032\u03d4\041" +
    "\u03da\050\u040d\114\u040f\133\u0426\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0429\001\001\000\022\015" +
    "\u040b\025\u0410\026\u03de\032\u03d4\041\u03da\050\u040d\114\u040f" +
    "\133\u042a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u042d\001\001\000\002\001\001\000\022\015\u040b" +
    "\025\u0410\026\u03de\032\u03d4\041\u03da\050\u040d\114\u040f\133" +
    "\u042f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0432\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0435\001\001\000\022\015\u0437\025\u043c\026\u03de" +
    "\032\u03d4\041\u03da\050\u0439\114\u043b\134\u043d\001\001\000" +
    "\002\001\001\000\022\015\u0437\025\u043c\026\u03de\032\u03d4" +
    "\041\u03da\050\u0439\114\u043b\134\u0457\001\001\000\002\001" +
    "\001\000\004\121\u0446\001\001\000\002\001\001\000\022" +
    "\015\u0437\025\u043c\026\u03de\032\u03d4\041\u03da\050\u0439\114" +
    "\u043b\134\u0443\001\001\000\002\001\001\000\010\027\u043f" +
    "\107\u043e\117\u0402\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u0437\025\u043c\026\u03de" +
    "\032\u03d4\041\u03da\050\u0439\114\u043b\134\u0442\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\u0437\025\u043c" +
    "\026\u03de\032\u03d4\041\u03da\050\u0439\114\u043b\134\u0445\001" +
    "\001\000\002\001\001\000\022\015\u0437\025\u043c\026\u03de" +
    "\032\u03d4\041\u03da\050\u0439\114\u043b\134\u0447\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\270\023\u044d\024\264\050\267\113" +
    "\265\123\172\001\001\000\004\121\u0451\001\001\000\002" +
    "\001\001\000\004\121\u044f\001\001\000\022\015\u0437\025" +
    "\u043c\026\u03de\032\u03d4\041\u03da\050\u0439\114\u043b\134\u0450" +
    "\001\001\000\002\001\001\000\022\015\u0437\025\u043c\026" +
    "\u03de\032\u03d4\041\u03da\050\u0439\114\u043b\134\u0452\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0455\001" +
    "\001\000\022\015\u0437\025\u043c\026\u03de\032\u03d4\041\u03da" +
    "\050\u0439\114\u043b\134\u0456\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0459\001\001\000\022\015\u0437" +
    "\025\u043c\026\u03de\032\u03d4\041\u03da\050\u0439\114\u043b\134" +
    "\u045a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u045d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\270\023\u0463" +
    "\024\264\050\267\113\265\123\172\001\001\000\004\121" +
    "\u0467\001\001\000\002\001\001\000\004\121\u0465\001\001" +
    "\000\022\015\u03f3\025\u03f9\026\u03de\032\u03d4\041\u03da\050" +
    "\u03f6\077\u0466\114\u03f8\001\001\000\002\001\001\000\022" +
    "\015\u03f3\025\u03f9\026\u03de\032\u03d4\041\u03da\050\u03f6\077" +
    "\u0468\114\u03f8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u046b\001\001\000\022\015\u03f3\025\u03f9\026" +
    "\u03de\032\u03d4\041\u03da\050\u03f6\077\u046c\114\u03f8\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u046f\001" +
    "\001\000\022\015\u03f3\025\u03f9\026\u03de\032\u03d4\041\u03da" +
    "\050\u03f6\077\u0470\114\u03f8\001\001\000\002\001\001\000" +
    "\024\015\u03d2\022\u0472\025\u03dc\026\u03de\032\u03d4\041\u03da" +
    "\050\u03d5\114\u03d1\126\u03d6\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u047c\001\001\000\024\015\u03d2" +
    "\022\u047b\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114" +
    "\u03d1\126\u03d6\001\001\000\002\001\001\000\004\121\u047a" +
    "\001\001\000\004\121\u0479\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\u03d2\022\u047d" +
    "\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126" +
    "\u03d6\001\001\000\002\001\001\000\004\121\u0482\001\001" +
    "\000\004\121\u0480\001\001\000\024\015\u03d2\022\u0481\025" +
    "\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6" +
    "\001\001\000\002\001\001\000\024\015\u03d2\022\u0483\025" +
    "\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6" +
    "\001\001\000\002\001\001\000\024\015\u03d2\022\u0485\025" +
    "\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\u03d2\022\u048a\025\u03dc" +
    "\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001" +
    "\001\000\004\127\u048b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\u03d2\022\u0490\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5" +
    "\114\u03d1\126\u03d6\001\001\000\004\127\u0491\001\001\000" +
    "\002\001\001\000\024\015\u03d2\022\u0493\025\u03dc\026\u03de" +
    "\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000" +
    "\004\127\u0494\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\027\010\023\021\u0498\053" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\027\010\023\021\u049b\053\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u04c5\001\001" +
    "\000\004\011\u04a7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u04b0" +
    "\001\001\000\004\012\u04ac\001\001\000\004\121\u04ad\001" +
    "\001\000\022\013\u04ae\015\141\050\146\054\153\055\152" +
    "\057\142\066\151\114\147\001\001\000\004\131\u04af\001" +
    "\001\000\002\001\001\000\004\121\u04b5\001\001\000\004" +
    "\121\u04b2\001\001\000\022\013\u04b3\015\141\050\146\054" +
    "\153\055\152\057\142\066\151\114\147\001\001\000\004" +
    "\131\u04b4\001\001\000\002\001\001\000\022\013\u04b6\015" +
    "\141\050\146\054\153\055\152\057\142\066\151\114\147" +
    "\001\001\000\004\131\u04b9\001\001\000\004\131\u04b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u04bb" +
    "\001\001\000\004\121\u04bc\001\001\000\022\013\u04bd\015" +
    "\141\050\146\054\153\055\152\057\142\066\151\114\147" +
    "\001\001\000\004\131\u04be\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u04c1\001\001\000\004\121\u04c2" +
    "\001\001\000\022\013\u04c3\015\141\050\146\054\153\055" +
    "\152\057\142\066\151\114\147\001\001\000\004\131\u04c4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u04c8\001\001\000\004\121\u04c9\001\001" +
    "\000\022\013\u04ca\015\141\050\146\054\153\055\152\057" +
    "\142\066\151\114\147\001\001\000\004\131\u04cb\001\001" +
    "\000\002\001\001\000\004\011\u04cd\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u04d0\001\001\000\004" +
    "\121\u04d1\001\001\000\022\013\u04d2\015\141\050\146\054" +
    "\153\055\152\057\142\066\151\114\147\001\001\000\004" +
    "\131\u04d3\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u04d6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u04d9\001\001\000\004\121\u04da\001\001\000" +
    "\022\013\u04db\015\141\050\146\054\153\055\152\057\142" +
    "\066\151\114\147\001\001\000\004\131\u04dc\001\001\000" +
    "\002\001\001\000\012\007\027\010\023\021\u04de\053\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0502\001\001\000\004" +
    "\011\u04e5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\u03d2\022\u04eb\025\u03dc\026\u03de\032" +
    "\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000\004" +
    "\127\u04ec\001\001\000\002\001\001\000\024\015\u03d2\022" +
    "\u04ee\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1" +
    "\126\u03d6\001\001\000\004\127\u04ef\001\001\000\002\001" +
    "\001\000\024\015\u03d2\022\u04f1\025\u03dc\026\u03de\032\u03d4" +
    "\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000\004\127" +
    "\u04f2\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\015\u03d2\022\u04f5\025\u03dc\026\u03de\032\u03d4\041\u03da\050" +
    "\u03d5\114\u03d1\126\u03d6\001\001\000\004\127\u04f6\001\001" +
    "\000\002\001\001\000\024\015\u03d2\022\u04f8\025\u03dc\026" +
    "\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001" +
    "\000\004\127\u04f9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\u03d2\022\u04fd\025\u03dc" +
    "\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001" +
    "\001\000\004\127\u04fe\001\001\000\002\001\001\000\024" +
    "\015\u03d2\022\u0500\025\u03dc\026\u03de\032\u03d4\041\u03da\050" +
    "\u03d5\114\u03d1\126\u03d6\001\001\000\004\127\u0501\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\u03d2\022\u0506\025\u03dc\026\u03de" +
    "\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000" +
    "\004\127\u0507\001\001\000\002\001\001\000\024\015\u03d2" +
    "\022\u0509\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114" +
    "\u03d1\126\u03d6\001\001\000\004\127\u050a\001\001\000\002" +
    "\001\001\000\004\011\u050c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\u03d2\022\u0510" +
    "\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126" +
    "\u03d6\001\001\000\004\127\u0511\001\001\000\002\001\001" +
    "\000\024\015\u03d2\022\u0513\025\u03dc\026\u03de\032\u03d4\041" +
    "\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000\004\127\u0514" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\015\u03d2\022\u051c\025\u03dc\026" +
    "\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001" +
    "\000\004\127\u051d\001\001\000\002\001\001\000\024\015" +
    "\u03d2\022\u051f\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5" +
    "\114\u03d1\126\u03d6\001\001\000\004\127\u0520\001\001\000" +
    "\002\001\001\000\024\015\u03d2\022\u0522\025\u03dc\026\u03de" +
    "\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000" +
    "\004\127\u0523\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\u03d2\022\u0526\025\u03dc\026\u03de\032\u03d4\041" +
    "\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000\004\127\u0527" +
    "\001\001\000\002\001\001\000\024\015\u03d2\022\u0529\025" +
    "\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126\u03d6" +
    "\001\001\000\004\127\u052a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\u03d2\022\u052e" +
    "\025\u03dc\026\u03de\032\u03d4\041\u03da\050\u03d5\114\u03d1\126" +
    "\u03d6\001\001\000\004\127\u052f\001\001\000\002\001\001" +
    "\000\024\015\u03d2\022\u0531\025\u03dc\026\u03de\032\u03d4\041" +
    "\u03da\050\u03d5\114\u03d1\126\u03d6\001\001\000\004\127\u0532" +
    "\001\001\000\002\001\001\000\012\007\027\010\023\021" +
    "\u0534\053\026\001\001\000\004\130\u0535\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\027\010\023\021\u053e\053" +
    "\026\001\001\000\004\130\u053f\001\001\000\002\001\001" +
    "\000\012\007\027\010\023\021\u0541\053\026\001\001\000" +
    "\004\130\u0542\001\001\000\002\001\001\000\012\007\027" +
    "\010\023\021\u0544\053\026\001\001\000\004\130\u0545\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\023\021\u0548\053\026\001\001\000\004\130\u0549\001" +
    "\001\000\002\001\001\000\012\007\027\010\023\021\u054b" +
    "\053\026\001\001\000\004\130\u054c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\023\021\u0550\053\026\001\001\000\004\130\u0551\001" +
    "\001\000\002\001\001\000\012\007\027\010\023\021\u0553" +
    "\053\026\001\001\000\004\130\u0554\001\001\000\002\001" +
    "\001\000\010\002\u0556\003\010\004\006\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol symbol;
    public String token;
    public Symbol irrecuperable;
    ArrayList<String> lista = new ArrayList<String>();
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosModule = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosStructure = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosElseMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosElseIfMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosForMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosWhileMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosForFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosWhileFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosWhileFor = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosForWhile = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosWhileForFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosForWhileFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfWhileMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfForMain = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfForFuncion = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosIfWhileFuncion = new ArrayList<Nodo>();
    

    public static Arbol arbol;
    public Nodo n_module;
    public String idea;
 
    
    
 @Override
    public void syntax_error(Symbol symbol){
        if(symbol.value.toString().startsWith("\n")){symbol.value = " salto de linea ";}
        if(!symbol.value.toString().startsWith("Error irrecuperable")){
        lista.add("Error en la linea: " + (symbol.left+1)  + " ,Columna: " + (symbol.right+1) + ". NO SE ESPARABA UN: " + symbol.value);
        irrecuperable = symbol;
        }
    }
 @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
        token = "Error irrecuperable en la linea: " + (irrecuperable.left+1)  + " ,Columna: " + (irrecuperable.right+1) + ". NO SE ESPARABA UN: " + irrecuperable.value;
    }
    public ArrayList<String> getError(){
        return  lista;
    }
    public Arbol getArbol(){
        return arbol;
    }
    public String getUnrecovery(){
        return token;
    }

    public void guardarNodoRaiz(String nodo){
        n_module = new Nodo(nodo);
        arbol= new Arbol(n_module);
    }

    public Nodo getRaiz(){
        return n_module;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 664: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 663: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 662: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 661: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.wirteLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 660: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 659: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 658: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 657: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 656: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 655: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 654: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 653: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 652: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 651: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 650: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 649: // INFOR_WHILE_FUNCION ::= DECLARACION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 648: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.witeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 647: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 646: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 645: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 644: // INFOR_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 643: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 642: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosWhileForFuncion);
                                                                                                                                            for(Nodo n : parser.hijosWhileFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 641: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 640: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 639: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 638: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("else");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 637: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 636: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 635: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 634: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 633: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 632: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 631: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 630: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 629: // INIF_WHILE_FUNCION ::= LLAMAR_SUB INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 628: // INIF_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 627: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 626: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 625: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 624: // INIF_WHILE_FUNCION ::= DECLARACION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 623: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 622: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 621: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 620: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 619: // INIF_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 618: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 617: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 616: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 615: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("else");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                                        parser.hijosIfWhileFuncion.add(parser.getRaiz());
                                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // INWHILE_FUNCION ::= LLAMAR_SUB INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // INWHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // INWHILE_FUNCION ::= DECLARACION INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // INWHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosWhileFuncion);
                                                                                                                                            for(Nodo n : parser.hijosWhileFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // INWHILE_FOR_FUNCION ::= DECLARACION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // INWHILE_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosWhileForFuncion);
                                                                                                                                            for(Nodo n : parser.hijosWhileFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;
		
                                                                                                                                                        
                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                                        
                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                                        
                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("else");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // INIF_FOR_FUNCION ::= LLAMAR_SUB INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // INIF_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // INIF_FOR_FUNCION ::= DECLARACION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // INIF_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("else");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                                        parser.guardarNodoRaiz("if condicion then");
                                                                                                                                                        parser.hijosIfForFuncion.add(parser.getRaiz());
                                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // INFOR_FUNCION ::= LLAMAR_SUB INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // INFOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // INFOR_FUNCION ::= DECLARACION INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // INFOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("for identificador igual numero to numero step numero");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            for(Nodo n : parser.hijosForFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("next identificador");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION else_ 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // INIF_FUNCION ::= LLAMAR_SUB INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // INIF_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // INIF_FUNCION ::= DECLARACION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // INIF_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosFuncion);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION else_ FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosFuncion);
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosFuncion);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // INFUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // INFUNCION ::= exit function_ FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("exit function");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // INFUNCION ::= LLAMAR_SUB INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("subproceso");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // INFUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("subproceso");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // INFUNCION ::= DECLARACION INFUNCION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // INFUNCION ::= DECLARACION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosFuncion.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // PIE_FUNCION ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // PIE_FUNCION ::= error function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // PIE_FUNCION ::= end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_FUNCION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as error FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC error TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO error as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // FUNCION_ ::= private_ function_ identificador parentesisA error parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // FUNCION_ ::= private_ function_ identificador error PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // FUNCION_ ::= private_ function_ error parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // FUNCION_ ::= private_ error identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT error PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // FUNCION_ ::= error function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION PIE_FUNCION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("public function identificador()");
                                                                                                                                            Collections.reverse(parser.hijosFuncion);
                                                                                                                                            for(Nodo n : parser.hijosFuncion){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosModule.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // PIE_STRUCT ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // PIE_STRUCT ::= error struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // PIE_STRUCT ::= end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_STRUCT",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // STRUCT_ ::= Public_ struct_ error FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // STRUCT_ ::= Public_ error identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // STRUCT_ ::= error struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // STRUCT_ ::= Public_ struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA PIE_STRUCT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("public struct identificador");
                                                                                                                                            Collections.reverse(parser.hijosStructure);
                                                                                                                                            for(Nodo n : parser.hijosStructure){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosModule.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // DECLARACIONSENCILLA ::= dim identificador error TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // DECLARACIONSENCILLA ::= dim error as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // DECLARACIONSENCILLA ::= dim identificador as error FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // DECLARACIONSENCILLA ::= dim identificador error TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // DECLARACIONSENCILLA ::= dim error as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("Dim identificador AS Type");
                                                                                                                                            parser.hijosStructure.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("Dim identificador AS Type");
                                                                                                                                            parser.hijosStructure.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INFOR_WHILE ::= LLAMAR_SUB INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INFOR_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INFOR_WHILE ::= DECLARACION INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // INFOR_WHILE ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForWhile.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("for identificador igual numero to numero step numero");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijosForWhile);
                                                                                                                                            for(Nodo n : parser.hijosForWhile){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("next identificador");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE else_ 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE else_ FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // INIF_WHILE ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // INIF_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // INIF_WHILE ::= exit sub FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // INIF_WHILE ::= exit do_ FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // INIF_WHILE ::= LLAMAR_SUB INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // INIF_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // INIF_WHILE ::= DECLARACION INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // INIF_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // INWHILE_MAIN ::= LLAMAR_SUB INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // INWHILE_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // INWHILE_MAIN ::= DECLARACION INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INWHILE_MAIN ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_MAIN loop FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            for(Nodo n : parser.hijosWhileMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit do");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // INWHILE_FOR ::= LLAMAR_SUB INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // INWHILE_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INWHILE_FOR ::= DECLARACION INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INWHILE_FOR ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosWhileFor.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR loop FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("do while condicion");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            for(Nodo n : parser.hijosWhileFor){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("Loop");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR else_ 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR else_ FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INIF_FOR ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INIF_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // INIF_FOR ::= exit sub FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INIF_FOR ::= exit for_ FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INIF_FOR ::= LLAMAR_SUB INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INIF_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // INIF_FOR ::= DECLARACION INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INIF_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit for");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INFOR_MAIN ::= LLAMAR_SUB INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INFOR_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INFOR_MAIN ::= DECLARACION INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INFOR_MAIN ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosForMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_MAIN next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("for identificador igual numero to numero step numero");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            for(Nodo n : parser.hijosForMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            Nodo tmp = new Nodo("next identificador");
                                                                                                                                            parser.getRaiz().agregarHijo(tmp);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosElseIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_ELSEIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;
		 
                                                                                                                                              
                                                                                                                                            System.out.println(parser.hijosElseIfMain.toString());
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            for(Nodo n : parser.hijosElseIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_ELSEIF else_ 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_ELSEIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INIF_ELSEIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INIF_ELSEIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INIF_ELSEIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INIF_ELSEIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INIF_ELSEIF ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INIF_ELSEIF ::= exit sub FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INIF_ELSEIF ::= LLAMAR_SUB INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // INIF_ELSEIF ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // INIF_ELSEIF ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // INIF_ELSEIF ::= SENTENCIA_MAIN findelinea INIF_ELSEIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // INIF_ELSEIF ::= DECLARACION INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // INIF_ELSEIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // INIF_ELSEIF ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // INIF_ELSEIF ::= comentario findelinea INIF_ELSEIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // INIF_ELSEIF ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // INIF_ELSEIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INIF_ELSEIF ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INIF_ELSEIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSEIF",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INIF_ELSE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INIF_ELSE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INIF_ELSE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INIF_ELSE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INIF_ELSE ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INIF_ELSE ::= exit sub FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INIF_ELSE ::= LLAMAR_SUB INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INIF_ELSE ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INIF_ELSE ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INIF_ELSE ::= SENTENCIA_MAIN findelinea INIF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INIF_ELSE ::= DECLARACION INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INIF_ELSE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INIF_ELSE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INIF_ELSE ::= comentario findelinea INIF_ELSE 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INIF_ELSE ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INIF_ELSE ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INIF_ELSE ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INIF_ELSE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosElseMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_ELSE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INIF ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INIF ::= exit sub FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit sub");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // INIF ::= LLAMAR_SUB INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INIF ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INIF ::= DECLARACION INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INIF ::= DECLARACION 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeLine()");
                                                                                                                                            parser.hijosIfMain.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            parser.hijosElseIfMain.clear();
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN FIN_CON_COMENT INIF_ELSE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("elseif condicion then"); 
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF else_ FIN_CON_COMENT INIF_ELSE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("else");
                                                                                                                                            for(Nodo n : parser.hijosElseMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("if condicion then");
                                                                                                                                            for(Nodo n : parser.hijosIfMain){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TYPEDECLARE ::= READLINE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // READLINE_FUNCION ::= console_ punto readline parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READLINE_FUNCION",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DECLARACION ::= identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION ::= identificador punto identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION ::= dim identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLARACION ::= dim identificador as TYPE_ igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION ::= dim identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACION ::= identificador punto identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION ::= identificador punto identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION ::= identificador punto identificador igual NUMERO FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION ::= identificador punto identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION ::= identificador punto identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACION ::= identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARACION ::= identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION ::= identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECLARACION ::= identificador igual NUMERO FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECLARACION ::= identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECLARACION ::= identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DECLARACION ::= identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARACION ::= dim identificador igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACION ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERACION_AR ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERACION_AR ::= OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERADOR_ARITMETICO ::= mod_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERADOR_ARITMETICO ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERADOR_ARITMETICO ::= div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERADOR_ARITMETICO ::= mult 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERADOR_ARITMETICO ::= resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERADOR_ARITMETICO ::= suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION_ARITMETICA ::= parentesisA resta LLAMAR_FUNCION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERANDOS_TYPE ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERANDOS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERANDOS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETROS_SUB ::= PARAMETROS_TYPE coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMETROS_SUB ::= PARAMETROS_TYPE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LLAMAR_SUB ::= identificador error findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LLAMAR_SUB ::= identificador PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PIE_SUB ::= end_ error FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_SUB",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PIE_SUB ::= end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_SUB",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ULTIMO ::= error PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ULTIMO ::= error findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ULTIMO ::= error sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ULTIMO ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ULTIMO ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ULTIMO ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("exit subproceso");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ULTIMO ::= LLAMAR_SUB 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("subproceso");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ULTIMO ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ULTIMO ::= comentario findelinea 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ULTIMO ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ULTIMO ::= DECLARACION 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ULTIMO ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;
		 
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ULTIMO",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INMAIN ::= error sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INMAIN ::= exit error FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INMAIN ::= error findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.readline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INMAIN ::= exit sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("exit subproceso");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INMAIN ::= LLAMAR_SUB INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("subproceso");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("funcion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INMAIN ::= DECLARACION INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("declaracion");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("console.writeline()");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("comentario");
                                                                                                                                            parser.hijos.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INMAIN ::= ULTIMO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMENTARIO_ILIMITADO ::= comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMENTARIO_ILIMITADO ::= comentario findelinea COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMENTARIO_ILIMITADO ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FIN_CON_COMENT ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FIN_CON_COMENT ::= findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MAIN ::= sub identificador parentesisA PARAMETRO error comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MAIN ::= sub identificador parentesisA error parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAIN ::= sub identificador error PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MAIN ::= sub error parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MAIN ::= error identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MAIN ::= sub main_ parentesisA parentesisC error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MAIN ::= sub main_ parentesisA error comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MAIN ::= sub main_ error parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MAIN ::= error main_ parentesisA parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MAIN ::= sub main_ parentesisA parentesisC comentario findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MAIN ::= sub identificador parentesisA PARAMETRO error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MAIN ::= sub identificador parentesisA error parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MAIN ::= sub identificador error PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MAIN ::= sub error parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MAIN ::= error identificador parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAIN ::= sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MAIN ::= sub main_ parentesisA error findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN ::= sub main_ error parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= error main_ parentesisA parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= sub main_ parentesisA parentesisC findelinea INMAIN PIE_SUB 
            {
              Object RESULT =null;
		
                                                                                                                                            parser.guardarNodoRaiz("sub main()");
                                                                                                                                            Collections.reverse(parser.hijos);
                                                                                                                                            for(Nodo n : parser.hijos){
                                                                                                                                                    parser.getRaiz().agregarHijo(n);
                                                                                                                                            }
                                                                                                                                            parser.hijosModule.add(parser.getRaiz());
                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NEXT_MODULE ::= comentario findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NEXT_MODULE ::= FUNCION_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NEXT_MODULE ::= STRUCT_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PIE_MODULE ::= end_ error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_MODULE",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PIE_MODULE ::= end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIE_MODULE",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODULE ::= error Module identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODULE ::= Public_ error identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODULE ::= Public_ Module error comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODULE ::= Public_ Module identificador error findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODULE ::= Public_ Module identificador comentario findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODULE ::= error Module identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MODULE ::= Public_ error identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MODULE ::= Public_ Module error findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE PIE_MODULE 
            {
              Object RESULT =null;
		
                                                                                                                                        parser.guardarNodoRaiz("public module()");
                                                                                                                                        for(Nodo n : parser.hijosModule){
                                                                                                                                        parser.getRaiz().agregarHijo(n);
                                                                                                                                        }
                                                                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // UC ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // UC ::= comentario findelinea UC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

