
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 16 23:33:20 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 16 23:33:20 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01ae\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\003\005\000\002\003\006\000\002\005\003" +
    "\000\002\005\005\000\002\005\003\000\002\005\005\000" +
    "\002\004\011\000\002\004\012\000\002\021\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\010\014" +
    "\000\002\010\014\000\002\010\015\000\002\010\015\000" +
    "\002\022\011\000\002\022\003\000\002\022\003\000\002" +
    "\022\004\000\002\022\005\000\002\022\004\000\002\022" +
    "\012\000\002\022\004\000\002\022\004\000\002\022\005" +
    "\000\002\022\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\006\000\002\114\004\000\002\113\003\000\002" +
    "\113\004\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\007\000\002" +
    "\017\005\000\002\017\007\000\002\017\010\000\002\017" +
    "\011\000\002\017\010\000\002\017\011\000\002\017\012" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\120\003\000\002\120\003\000\002\015\006\000\002\015" +
    "\010\000\002\015\006\000\002\015\006\000\002\015\010" +
    "\000\002\015\010\000\002\015\006\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\006\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\006\000\002\015\010\000" +
    "\002\121\004\000\002\121\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\116\003\000\002" +
    "\116\003\000\002\117\004\000\002\117\003\000\002\122" +
    "\003\000\002\122\004\000\002\026\012\000\002\026\015" +
    "\000\002\026\015\000\002\026\013\000\002\077\011\000" +
    "\002\077\003\000\002\077\003\000\002\077\004\000\002" +
    "\077\005\000\002\077\004\000\002\077\012\000\002\077" +
    "\004\000\002\077\005\000\002\077\005\000\002\077\006" +
    "\000\002\077\005\000\002\027\010\000\002\027\010\000" +
    "\002\107\010\000\002\107\007\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\031\004\000\002\031\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\017\000\002\033" +
    "\011\000\002\033\003\000\002\033\003\000\002\033\012" +
    "\000\002\033\004\000\002\033\004\000\002\033\005\000" +
    "\002\033\004\000\002\033\004\000\002\033\005\000\002" +
    "\033\006\000\002\033\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\100\011\000\002\100\003" +
    "\000\002\100\003\000\002\100\012\000\002\100\004\000" +
    "\002\100\004\000\002\100\005\000\002\100\004\000\002" +
    "\100\004\000\002\100\005\000\002\100\006\000\002\100" +
    "\006\000\002\100\005\000\002\100\005\000\002\035\012" +
    "\000\002\035\015\000\002\035\015\000\002\035\013\000" +
    "\002\036\010\000\002\036\010\000\002\110\007\000\002" +
    "\110\010\000\002\037\011\000\002\040\011\000\002\040" +
    "\003\000\002\040\003\000\002\040\004\000\002\040\005" +
    "\000\002\040\012\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\005\000\002\040\006\000\002" +
    "\040\006\000\002\040\005\000\002\040\005\000\002\041" +
    "\011\000\002\042\011\000\002\042\003\000\002\042\003" +
    "\000\002\042\004\000\002\042\005\000\002\042\012\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\005\000\002\042\006\000\002\042\005\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\101\011" +
    "\000\002\101\003\000\002\101\003\000\002\101\004\000" +
    "\002\101\005\000\002\101\012\000\002\101\004\000\002" +
    "\101\004\000\002\101\004\000\002\101\005\000\002\101" +
    "\006\000\002\101\006\000\002\101\005\000\002\101\005" +
    "\000\002\044\012\000\002\044\015\000\002\044\015\000" +
    "\002\044\013\000\002\045\010\000\002\045\010\000\002" +
    "\106\007\000\002\106\010\000\002\046\017\000\002\047" +
    "\011\000\002\047\003\000\002\047\004\000\002\047\005" +
    "\000\002\047\003\000\002\047\012\000\002\047\004\000" +
    "\002\047\004\000\002\047\004\000\002\047\005\000\002" +
    "\047\006\000\002\047\006\000\002\047\005\000\002\047" +
    "\005\000\002\050\005\000\002\050\005\000\002\051\004" +
    "\000\002\051\005\000\002\051\007\000\002\051\006\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\052\007\000\002\052\010\000\002\007\011\000\002\053" +
    "\016\000\002\011\005\000\002\011\007\000\002\011\010" +
    "\000\002\011\006\000\002\013\011\000\002\013\003\000" +
    "\002\013\003\000\002\013\004\000\002\013\005\000\002" +
    "\013\004\000\002\013\012\000\002\013\004\000\002\013" +
    "\004\000\002\013\005\000\002\013\006\000\002\013\005" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\055\012\000\002\055\015\000\002\055\015\000\002" +
    "\055\013\000\002\102\011\000\002\102\003\000\002\102" +
    "\004\000\002\102\005\000\002\102\003\000\002\102\012" +
    "\000\002\102\004\000\002\102\004\000\002\102\004\000" +
    "\002\102\005\000\002\102\006\000\002\102\005\000\002" +
    "\056\010\000\002\056\010\000\002\111\007\000\002\111" +
    "\010\000\002\057\017\000\002\060\011\000\002\060\003" +
    "\000\002\060\004\000\002\060\005\000\002\060\003\000" +
    "\002\060\012\000\002\060\004\000\002\060\004\000\002" +
    "\060\004\000\002\060\005\000\002\060\006\000\002\060" +
    "\005\000\002\060\006\000\002\060\005\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\062\012\000" +
    "\002\062\015\000\002\062\015\000\002\062\013\000\002" +
    "\103\011\000\002\103\003\000\002\103\004\000\002\103" +
    "\005\000\002\103\003\000\002\103\012\000\002\103\004" +
    "\000\002\103\004\000\002\103\004\000\002\103\005\000" +
    "\002\103\006\000\002\103\005\000\002\103\006\000\002" +
    "\103\005\000\002\063\010\000\002\063\010\000\002\112" +
    "\007\000\002\112\010\000\002\064\011\000\002\065\011" +
    "\000\002\065\003\000\002\065\003\000\002\065\004\000" +
    "\002\065\005\000\002\065\012\000\002\065\004\000\002" +
    "\065\004\000\002\065\004\000\002\065\005\000\002\065" +
    "\006\000\002\065\006\000\002\065\006\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\066\011\000" +
    "\002\067\011\000\002\067\003\000\002\067\004\000\002" +
    "\067\005\000\002\067\003\000\002\067\012\000\002\067" +
    "\004\000\002\067\004\000\002\067\004\000\002\067\005" +
    "\000\002\067\006\000\002\067\006\000\002\067\005\000" +
    "\002\067\005\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\071\012\000\002\071\014\000\002\071" +
    "\016\000\002\071\011\000\002\071\013\000\002\104\011" +
    "\000\002\104\003\000\002\104\004\000\002\104\005\000" +
    "\002\104\003\000\002\104\012\000\002\104\004\000\002" +
    "\104\004\000\002\104\004\000\002\104\005\000\002\104" +
    "\006\000\002\104\006\000\002\104\005\000\002\104\005" +
    "\000\002\074\010\000\002\074\010\000\002\105\007\000" +
    "\002\105\010\000\002\072\017\000\002\073\011\000\002" +
    "\073\003\000\002\073\003\000\002\073\004\000\002\073" +
    "\005\000\002\073\012\000\002\073\004\000\002\073\004" +
    "\000\002\073\004\000\002\073\005\000\002\073\006\000" +
    "\002\073\006\000\002\073\006\000\002\073\005\000\002" +
    "\073\005\000\002\073\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0353\000\004\004\004\001\002\000\006\017\u034f\051" +
    "\u034d\001\002\000\004\002\u034c\001\002\000\004\006\007" +
    "\001\002\000\004\007\012\001\002\000\006\002\000\100" +
    "\011\001\002\000\004\002\uffff\001\002\000\004\051\013" +
    "\001\002\000\006\100\015\102\014\001\002\000\004\100" +
    "\u0348\001\002\000\010\006\017\033\020\102\016\001\002" +
    "\000\004\100\u0346\001\002\000\006\010\031\025\u033a\001" +
    "\002\000\004\030\u023b\001\002\000\006\013\ufff6\100\u0239" +
    "\001\002\000\006\006\025\100\u0237\001\002\000\004\013" +
    "\u0234\001\002\000\006\006\025\100\027\001\002\000\004" +
    "\010\031\001\002\000\004\013\ufff4\001\002\000\010\006" +
    "\017\033\020\102\016\001\002\000\004\013\ufff2\001\002" +
    "\000\006\051\033\103\032\001\002\000\004\073\u0227\001" +
    "\002\000\004\073\034\001\002\000\006\051\037\106\035" +
    "\001\002\000\004\051\u0222\001\002\000\004\074\051\001" +
    "\002\000\004\022\040\001\002\000\014\014\044\015\043" +
    "\016\046\046\045\051\042\001\002\000\006\074\ufeed\104" +
    "\047\001\002\000\014\054\uffa4\074\uffa4\100\uffa4\102\uffa4" +
    "\104\uffa4\001\002\000\014\054\uffa7\074\uffa7\100\uffa7\102" +
    "\uffa7\104\uffa7\001\002\000\014\054\uffa6\074\uffa6\100\uffa6" +
    "\102\uffa6\104\uffa6\001\002\000\014\054\uffa5\074\uffa5\100" +
    "\uffa5\102\uffa5\104\uffa5\001\002\000\014\054\uffa8\074\uffa8" +
    "\100\uffa8\102\uffa8\104\uffa8\001\002\000\006\051\037\106" +
    "\035\001\002\000\004\074\ufeec\001\002\000\006\100\053" +
    "\102\052\001\002\000\004\100\u021e\001\002\000\022\005" +
    "\056\011\065\012\063\020\062\023\074\035\055\051\072" +
    "\102\066\001\002\000\032\005\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\020\uff9e\023\uff9e\027\uff9e\035\uff9e\051\uff9e\100\uff9e" +
    "\102\uff9e\107\uff9e\001\002\000\004\010\u021b\001\002\000" +
    "\016\042\102\043\104\051\111\060\100\065\106\073\101" +
    "\001\002\000\032\005\uff9c\011\uff9c\012\uff9c\013\uff9c\020" +
    "\uff9c\023\uff9c\027\uff9c\035\uff9c\051\uff9c\100\uff9c\102\uff9c" +
    "\107\uff9c\001\002\000\006\100\u01e3\102\u01e2\001\002\000" +
    "\032\005\uff9d\011\uff9d\012\uff9d\013\uff9d\020\uff9d\023\uff9d" +
    "\027\uff9d\035\uff9d\051\uff9d\100\uff9d\102\uff9d\107\uff9d\001" +
    "\002\000\004\070\u01db\001\002\000\004\051\u01cb\001\002" +
    "\000\004\100\u01c9\001\002\000\004\051\u01a7\001\002\000" +
    "\004\100\u01a5\001\002\000\004\100\u01a3\001\002\000\024" +
    "\005\056\011\065\012\063\013\uffe9\020\062\023\074\035" +
    "\055\051\072\102\066\001\002\000\004\013\u01a0\001\002" +
    "\000\022\042\102\043\104\051\146\054\135\060\100\065" +
    "\144\070\134\073\u019c\001\002\000\024\005\056\011\065" +
    "\012\063\013\uffea\020\062\023\074\035\055\051\072\102" +
    "\066\001\002\000\006\024\077\036\076\001\002\000\016" +
    "\042\102\043\104\051\111\060\100\065\106\073\101\001" +
    "\002\000\016\042\uff9b\043\uff9b\051\uff9b\060\uff9b\065\uff9b" +
    "\073\uff9b\001\002\000\016\042\uff9a\043\uff9a\051\uff9a\060" +
    "\uff9a\065\uff9a\073\uff9a\001\002\000\004\065\u019a\001\002" +
    "\000\004\065\u0193\001\002\000\024\026\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\074\uffa0\100\uffa0\101\uffa0\102\uffa0\104\uffa0" +
    "\001\002\000\010\054\u0171\055\u0173\056\u0172\001\002\000" +
    "\024\026\uff9f\054\uff9f\055\uff9f\056\uff9f\074\uff9f\100\uff9f" +
    "\101\uff9f\102\uff9f\104\uff9f\001\002\000\010\054\u0171\055" +
    "\u0173\056\u0172\001\002\000\040\026\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\u0161\060\u0162\061\u0166\062\u0167\063\u0165\073" +
    "\uffc1\074\uffdc\100\uffdc\101\uffdc\102\uffdc\110\u0164\001\002" +
    "\000\010\054\u0171\055\u0173\056\u0172\001\002\000\012\054" +
    "\u0171\055\u0173\056\u0172\073\uffc0\001\002\000\012\054\u0171" +
    "\055\u0173\056\u0172\073\136\001\002\000\004\073\u015f\001" +
    "\002\000\006\100\115\102\114\001\002\000\004\100\u015e" +
    "\001\002\000\036\005\uff97\011\uff97\012\uff97\013\uff97\020" +
    "\uff97\023\uff97\027\uff97\032\uff97\034\uff97\035\uff97\051\uff97" +
    "\100\uff97\102\uff97\107\uff97\001\002\000\022\005\121\011" +
    "\126\012\063\020\123\023\074\035\120\051\133\102\130" +
    "\001\002\000\032\005\uff22\011\uff22\012\uff22\013\uff22\020" +
    "\uff22\023\uff22\027\uff22\034\uff22\035\uff22\051\uff22\102\uff22" +
    "\107\uff22\001\002\000\004\023\u015b\001\002\000\016\042" +
    "\102\043\104\051\111\060\100\065\106\073\101\001\002" +
    "\000\032\005\uff20\011\uff20\012\uff20\013\uff20\020\uff20\023" +
    "\uff20\027\uff20\034\uff20\035\uff20\051\uff20\102\uff20\107\uff20" +
    "\001\002\000\004\070\u011c\001\002\000\004\034\u011a\001" +
    "\002\000\024\005\121\011\126\012\063\020\123\023\074" +
    "\034\uff2c\035\120\051\133\102\130\001\002\000\004\051" +
    "\203\001\002\000\004\100\201\001\002\000\004\100\177" +
    "\001\002\000\032\005\uff21\011\uff21\012\uff21\013\uff21\020" +
    "\uff21\023\uff21\027\uff21\034\uff21\035\uff21\051\uff21\102\uff21" +
    "\107\uff21\001\002\000\024\005\121\011\126\012\063\020" +
    "\123\023\074\034\uff2d\035\120\051\133\102\130\001\002" +
    "\000\010\054\135\070\134\073\136\001\002\000\004\051" +
    "\166\001\002\000\020\042\102\043\104\051\163\060\100" +
    "\064\164\065\106\073\101\001\002\000\020\042\102\043" +
    "\104\051\146\060\100\065\144\073\140\074\137\001\002" +
    "\000\016\026\ufefa\054\ufefa\055\ufefa\056\ufefa\100\ufefa\102" +
    "\ufefa\001\002\000\014\042\102\043\104\051\146\060\100" +
    "\065\144\001\002\000\016\026\ufef9\054\ufef9\055\ufef9\056" +
    "\ufef9\100\ufef9\102\ufef9\001\002\000\006\074\ufef3\104\ufef3" +
    "\001\002\000\006\074\ufef2\104\ufef2\001\002\000\016\037" +
    "\uffdc\047\uffdc\074\uffdc\100\uffdc\102\uffdc\104\uffdc\001\002" +
    "\000\006\074\150\104\147\001\002\000\006\074\ufef4\104" +
    "\ufef4\001\002\000\016\042\102\043\104\051\146\060\100" +
    "\065\144\073\140\001\002\000\016\026\ufef8\054\ufef8\055" +
    "\ufef8\056\ufef8\100\ufef8\102\ufef8\001\002\000\016\026\ufef7" +
    "\054\ufef7\055\ufef7\056\ufef7\100\ufef7\102\ufef7\001\002\000" +
    "\004\074\153\001\002\000\006\074\155\104\154\001\002" +
    "\000\016\042\102\043\104\051\146\060\100\065\144\073" +
    "\140\001\002\000\016\026\ufef5\054\ufef5\055\ufef5\056\ufef5" +
    "\100\ufef5\102\ufef5\001\002\000\016\026\ufef6\054\ufef6\055" +
    "\ufef6\056\ufef6\100\ufef6\102\ufef6\001\002\000\006\100\uffb4" +
    "\102\uffb4\001\002\000\006\100\uffb5\102\uffb5\001\002\000" +
    "\006\100\uffb7\102\uffb7\001\002\000\010\073\uffc0\100\uffb6" +
    "\102\uffb6\001\002\000\010\073\136\100\uffb8\102\uffb8\001" +
    "\002\000\004\100\165\001\002\000\006\100\uffb3\102\uffb3" +
    "\001\002\000\004\054\167\001\002\000\020\042\102\043" +
    "\104\051\175\060\100\064\174\065\106\073\101\001\002" +
    "\000\006\100\uffae\102\uffae\001\002\000\006\100\uffaf\102" +
    "\uffaf\001\002\000\006\100\uffb1\102\uffb1\001\002\000\010" +
    "\073\uffc0\100\uffb0\102\uffb0\001\002\000\006\100\uffad\102" +
    "\uffad\001\002\000\010\073\136\100\uffb2\102\uffb2\001\002" +
    "\000\004\034\uff28\001\002\000\024\005\121\011\126\012" +
    "\063\020\123\023\074\034\uff2b\035\120\051\133\102\130" +
    "\001\002\000\004\034\uff2a\001\002\000\024\005\121\011" +
    "\126\012\063\020\123\023\074\034\uff26\035\120\051\133" +
    "\102\130\001\002\000\004\034\uff25\001\002\000\004\054" +
    "\204\001\002\000\006\060\100\065\144\001\002\000\004" +
    "\037\206\001\002\000\006\060\100\065\144\001\002\000" +
    "\004\047\210\001\002\000\006\060\100\065\144\001\002" +
    "\000\006\100\115\102\114\001\002\000\022\005\215\011" +
    "\065\012\063\020\217\023\226\035\214\051\133\102\222" +
    "\001\002\000\024\005\215\011\065\012\063\020\217\023" +
    "\226\032\uff04\035\214\051\133\102\222\001\002\000\006" +
    "\011\u0113\023\u0112\001\002\000\016\042\102\043\104\051" +
    "\111\060\100\065\106\073\101\001\002\000\032\005\uff56" +
    "\011\uff56\012\uff56\013\uff56\020\uff56\023\uff56\027\uff56\032" +
    "\uff56\035\uff56\051\uff56\102\uff56\107\uff56\001\002\000\004" +
    "\070\321\001\002\000\004\100\317\001\002\000\032\005" +
    "\uff57\011\uff57\012\uff57\013\uff57\020\uff57\023\uff57\027\uff57" +
    "\032\uff57\035\uff57\051\uff57\102\uff57\107\uff57\001\002\000" +
    "\004\100\315\001\002\000\004\032\312\001\002\000\024" +
    "\005\215\011\065\012\063\020\217\023\226\032\uff07\035" +
    "\214\051\133\102\222\001\002\000\032\005\uff55\011\uff55" +
    "\012\uff55\013\uff55\020\uff55\023\uff55\027\uff55\032\uff55\035" +
    "\uff55\051\uff55\102\uff55\107\uff55\001\002\000\006\024\077" +
    "\036\076\001\002\000\016\042\102\043\104\051\111\060" +
    "\100\065\106\073\101\001\002\000\006\100\115\102\114" +
    "\001\002\000\022\005\121\011\126\012\063\020\233\023" +
    "\074\035\232\051\133\102\236\001\002\000\006\011\304" +
    "\023\303\001\002\000\004\070\251\001\002\000\024\005" +
    "\121\011\126\012\063\020\233\023\074\034\uff3b\035\232" +
    "\051\133\102\236\001\002\000\004\100\246\001\002\000" +
    "\004\100\244\001\002\000\024\005\121\011\126\012\063" +
    "\020\233\023\074\034\uff3c\035\232\051\133\102\236\001" +
    "\002\000\004\034\241\001\002\000\006\100\115\102\114" +
    "\001\002\000\032\005\uff3e\011\uff3e\012\uff3e\013\uff3e\020" +
    "\uff3e\023\uff3e\027\uff3e\032\uff3e\035\uff3e\051\uff3e\102\uff3e" +
    "\107\uff3e\001\002\000\004\034\uff37\001\002\000\024\005" +
    "\121\011\126\012\063\020\233\023\074\034\uff3a\035\232" +
    "\051\133\102\236\001\002\000\004\034\uff39\001\002\000" +
    "\024\005\121\011\126\012\063\020\233\023\074\034\uff35" +
    "\035\232\051\133\102\236\001\002\000\004\034\uff34\001" +
    "\002\000\004\034\uff36\001\002\000\004\021\252\001\002" +
    "\000\004\073\253\001\002\000\020\042\102\043\104\051" +
    "\260\060\100\064\261\065\106\073\101\001\002\000\006" +
    "\074\uffd8\101\301\001\002\000\006\074\uffd9\101\277\001" +
    "\002\000\004\074\274\001\002\000\010\073\uffc0\074\uffd5" +
    "\101\272\001\002\000\010\070\264\074\uffd7\101\265\001" +
    "\002\000\006\074\uffda\101\262\001\002\000\020\042\102" +
    "\043\104\051\260\060\100\064\261\065\106\073\101\001" +
    "\002\000\004\074\uffd4\001\002\000\004\051\267\001\002" +
    "\000\020\042\102\043\104\051\260\060\100\064\261\065" +
    "\106\073\101\001\002\000\004\074\uffd0\001\002\000\006" +
    "\074\uffd6\101\270\001\002\000\020\042\102\043\104\051" +
    "\260\060\100\064\261\065\106\073\101\001\002\000\004" +
    "\074\uffcf\001\002\000\020\042\102\043\104\051\260\060" +
    "\100\064\261\065\106\073\101\001\002\000\004\074\uffd2" +
    "\001\002\000\004\100\275\001\002\000\024\005\121\011" +
    "\126\012\063\020\233\023\074\034\uff3d\035\232\051\133" +
    "\102\236\001\002\000\004\034\uff38\001\002\000\020\042" +
    "\102\043\104\051\260\060\100\064\261\065\106\073\101" +
    "\001\002\000\004\074\uffd3\001\002\000\020\042\102\043" +
    "\104\051\260\060\100\064\261\065\106\073\101\001\002" +
    "\000\004\074\uffd1\001\002\000\004\100\307\001\002\000" +
    "\004\100\305\001\002\000\024\005\121\011\126\012\063" +
    "\020\233\023\074\034\uff30\035\232\051\133\102\236\001" +
    "\002\000\004\034\uff32\001\002\000\024\005\121\011\126" +
    "\012\063\020\233\023\074\034\uff31\035\232\051\133\102" +
    "\236\001\002\000\004\034\uff33\001\002\000\004\032\uff02" +
    "\001\002\000\004\051\313\001\002\000\006\100\115\102" +
    "\114\001\002\000\032\005\uff09\011\uff09\012\uff09\013\uff09" +
    "\020\uff09\023\uff09\027\uff09\034\uff09\035\uff09\051\uff09\102" +
    "\uff09\107\uff09\001\002\000\024\005\215\011\065\012\063" +
    "\020\217\023\226\032\uff06\035\214\051\133\102\222\001" +
    "\002\000\004\032\uff05\001\002\000\024\005\215\011\065" +
    "\012\063\020\217\023\226\032\uff00\035\214\051\133\102" +
    "\222\001\002\000\004\032\ufeff\001\002\000\004\021\322" +
    "\001\002\000\004\073\323\001\002\000\020\042\102\043" +
    "\104\051\260\060\100\064\261\065\106\073\101\001\002" +
    "\000\004\074\325\001\002\000\004\100\326\001\002\000" +
    "\024\005\215\011\065\012\063\020\217\023\226\032\uff08" +
    "\035\214\051\133\102\222\001\002\000\004\032\uff03\001" +
    "\002\000\004\026\331\001\002\000\006\100\115\102\114" +
    "\001\002\000\022\005\215\011\065\012\063\020\335\023" +
    "\226\035\334\051\133\102\337\001\002\000\030\005\215" +
    "\011\065\012\063\013\uff52\020\335\023\226\027\uff52\035" +
    "\334\051\133\102\337\107\uff52\001\002\000\006\010\u010b" +
    "\011\u010c\001\002\000\004\070\u0104\001\002\000\004\100" +
    "\u0102\001\002\000\004\100\u0100\001\002\000\010\013\350" +
    "\027\346\107\343\001\002\000\030\005\215\011\065\012" +
    "\063\013\uff53\020\335\023\226\027\uff53\035\334\051\133" +
    "\102\337\107\uff53\001\002\000\010\013\uff50\027\uff50\107" +
    "\uff50\001\002\000\016\042\uff98\043\uff98\051\uff98\060\uff98" +
    "\065\uff98\073\uff98\001\002\000\016\042\102\043\104\051" +
    "\111\060\100\065\106\073\101\001\002\000\004\013\366" +
    "\001\002\000\010\005\360\100\115\102\114\001\002\000" +
    "\006\100\115\102\114\001\002\000\004\005\351\001\002" +
    "\000\006\100\115\102\114\001\002\000\032\005\uff46\011" +
    "\uff46\012\uff46\013\uff46\020\uff46\023\uff46\027\uff46\032\uff46" +
    "\035\uff46\051\uff46\102\uff46\107\uff46\001\002\000\022\005" +
    "\215\011\065\012\063\020\335\023\226\035\334\051\133" +
    "\102\337\001\002\000\004\013\355\001\002\000\004\005" +
    "\356\001\002\000\006\100\115\102\114\001\002\000\032" +
    "\005\uff44\011\uff44\012\uff44\013\uff44\020\uff44\023\uff44\027" +
    "\uff44\032\uff44\035\uff44\051\uff44\102\uff44\107\uff44\001\002" +
    "\000\016\042\uff99\043\uff99\051\uff99\060\uff99\065\uff99\073" +
    "\uff99\001\002\000\022\005\215\011\065\012\063\020\335" +
    "\023\226\035\334\051\133\102\337\001\002\000\004\013" +
    "\363\001\002\000\004\005\364\001\002\000\006\100\115" +
    "\102\114\001\002\000\032\005\uff45\011\uff45\012\uff45\013" +
    "\uff45\020\uff45\023\uff45\027\uff45\032\uff45\035\uff45\051\uff45" +
    "\102\uff45\107\uff45\001\002\000\004\005\367\001\002\000" +
    "\006\100\115\102\114\001\002\000\032\005\uff43\011\uff43" +
    "\012\uff43\013\uff43\020\uff43\023\uff43\027\uff43\032\uff43\035" +
    "\uff43\051\uff43\102\uff43\107\uff43\001\002\000\004\026\372" +
    "\001\002\000\006\100\115\102\114\001\002\000\022\005" +
    "\215\011\065\012\063\020\335\023\226\035\334\051\133" +
    "\102\337\001\002\000\010\013\uff40\027\377\107\343\001" +
    "\002\000\004\013\uff3f\001\002\000\006\100\uff41\102\uff41" +
    "\001\002\000\010\005\360\100\uff42\102\uff42\001\002\000" +
    "\030\005\215\011\065\012\063\013\uff4f\020\335\023\226" +
    "\027\uff4f\035\334\051\133\102\337\107\uff4f\001\002\000" +
    "\010\013\uff4e\027\uff4e\107\uff4e\001\002\000\030\005\215" +
    "\011\065\012\063\013\uff4c\020\335\023\226\027\uff4c\035" +
    "\334\051\133\102\337\107\uff4c\001\002\000\010\013\uff4b" +
    "\027\uff4b\107\uff4b\001\002\000\004\021\u0105\001\002\000" +
    "\004\073\u0106\001\002\000\020\042\102\043\104\051\260" +
    "\060\100\064\261\065\106\073\101\001\002\000\004\074" +
    "\u0108\001\002\000\004\100\u0109\001\002\000\030\005\215" +
    "\011\065\012\063\013\uff54\020\335\023\226\027\uff54\035" +
    "\334\051\133\102\337\107\uff54\001\002\000\010\013\uff51" +
    "\027\uff51\107\uff51\001\002\000\004\100\u010f\001\002\000" +
    "\004\100\u010d\001\002\000\030\005\215\011\065\012\063" +
    "\013\uff48\020\335\023\226\027\uff48\035\334\051\133\102" +
    "\337\107\uff48\001\002\000\010\013\uff4a\027\uff4a\107\uff4a" +
    "\001\002\000\030\005\215\011\065\012\063\013\uff47\020" +
    "\335\023\226\027\uff47\035\334\051\133\102\337\107\uff47" +
    "\001\002\000\010\013\uff49\027\uff49\107\uff49\001\002\000" +
    "\010\013\uff4d\027\uff4d\107\uff4d\001\002\000\004\100\u0116" +
    "\001\002\000\004\100\u0114\001\002\000\024\005\215\011" +
    "\065\012\063\020\217\023\226\032\ufefc\035\214\051\133" +
    "\102\222\001\002\000\004\032\ufefe\001\002\000\024\005" +
    "\215\011\065\012\063\020\217\023\226\032\ufefb\035\214" +
    "\051\133\102\222\001\002\000\004\032\ufefd\001\002\000" +
    "\004\032\uff01\001\002\000\004\034\uff27\001\002\000\006" +
    "\100\115\102\114\001\002\000\034\005\uff2f\011\uff2f\012" +
    "\uff2f\013\uff2f\020\uff2f\023\uff2f\027\uff2f\034\uff2f\035\uff2f" +
    "\051\uff2f\100\uff2f\102\uff2f\107\uff2f\001\002\000\004\021" +
    "\u011d\001\002\000\004\073\u011e\001\002\000\020\042\102" +
    "\043\104\051\260\060\100\064\261\065\106\073\101\001" +
    "\002\000\004\074\u0120\001\002\000\004\100\u0121\001\002" +
    "\000\024\005\121\011\126\012\063\020\123\023\074\034" +
    "\uff2e\035\120\051\133\102\130\001\002\000\004\034\uff29" +
    "\001\002\000\004\026\u0124\001\002\000\006\100\115\102" +
    "\114\001\002\000\022\005\121\011\126\012\063\020\u0127" +
    "\023\074\035\u0126\051\133\102\u012a\001\002\000\006\010" +
    "\u0156\023\u0155\001\002\000\004\070\u014e\001\002\000\030" +
    "\005\121\011\126\012\063\013\uff1d\020\u0127\023\074\027" +
    "\uff1d\035\u0126\051\133\102\u012a\107\uff1d\001\002\000\004" +
    "\100\u014b\001\002\000\004\100\u0149\001\002\000\010\013" +
    "\u0132\027\u012f\107\343\001\002\000\030\005\121\011\126" +
    "\012\063\013\uff1e\020\u0127\023\074\027\uff1e\035\u0126\051" +
    "\133\102\u012a\107\uff1e\001\002\000\010\013\uff19\027\uff19" +
    "\107\uff19\001\002\000\016\042\102\043\104\051\111\060" +
    "\100\065\106\073\101\001\002\000\010\005\360\100\115" +
    "\102\114\001\002\000\006\100\115\102\114\001\002\000" +
    "\004\013\u0135\001\002\000\004\005\u0133\001\002\000\006" +
    "\100\115\102\114\001\002\000\032\005\uff11\011\uff11\012" +
    "\uff11\013\uff11\020\uff11\023\uff11\027\uff11\034\uff11\035\uff11" +
    "\051\uff11\102\uff11\107\uff11\001\002\000\004\005\u0136\001" +
    "\002\000\006\100\115\102\114\001\002\000\032\005\uff0e" +
    "\011\uff0e\012\uff0e\013\uff0e\020\uff0e\023\uff0e\027\uff0e\034" +
    "\uff0e\035\uff0e\051\uff0e\102\uff0e\107\uff0e\001\002\000\022" +
    "\005\121\011\126\012\063\020\u0127\023\074\035\u0126\051" +
    "\133\102\u012a\001\002\000\004\013\u013a\001\002\000\004" +
    "\005\u013b\001\002\000\006\100\115\102\114\001\002\000" +
    "\032\005\uff0f\011\uff0f\012\uff0f\013\uff0f\020\uff0f\023\uff0f" +
    "\027\uff0f\034\uff0f\035\uff0f\051\uff0f\102\uff0f\107\uff0f\001" +
    "\002\000\022\005\121\011\126\012\063\020\u0127\023\074" +
    "\035\u0126\051\133\102\u012a\001\002\000\004\013\u013f\001" +
    "\002\000\004\005\u0140\001\002\000\006\100\115\102\114" +
    "\001\002\000\032\005\uff10\011\uff10\012\uff10\013\uff10\020" +
    "\uff10\023\uff10\027\uff10\034\uff10\035\uff10\051\uff10\102\uff10" +
    "\107\uff10\001\002\000\004\026\u0143\001\002\000\006\100" +
    "\115\102\114\001\002\000\022\005\121\011\126\012\063" +
    "\020\u0127\023\074\035\u0126\051\133\102\u012a\001\002\000" +
    "\010\013\uff0b\027\u0146\107\343\001\002\000\010\005\360" +
    "\100\uff0d\102\uff0d\001\002\000\006\100\uff0c\102\uff0c\001" +
    "\002\000\004\013\uff0a\001\002\000\030\005\121\011\126" +
    "\012\063\013\uff1c\020\u0127\023\074\027\uff1c\035\u0126\051" +
    "\133\102\u012a\107\uff1c\001\002\000\010\013\uff1b\027\uff1b" +
    "\107\uff1b\001\002\000\030\005\121\011\126\012\063\013" +
    "\uff17\020\u0127\023\074\027\uff17\035\u0126\051\133\102\u012a" +
    "\107\uff17\001\002\000\010\013\uff16\027\uff16\107\uff16\001" +
    "\002\000\010\013\uff18\027\uff18\107\uff18\001\002\000\004" +
    "\021\u014f\001\002\000\004\073\u0150\001\002\000\020\042" +
    "\102\043\104\051\260\060\100\064\261\065\106\073\101" +
    "\001\002\000\004\074\u0152\001\002\000\004\100\u0153\001" +
    "\002\000\030\005\121\011\126\012\063\013\uff1f\020\u0127" +
    "\023\074\027\uff1f\035\u0126\051\133\102\u012a\107\uff1f\001" +
    "\002\000\010\013\uff1a\027\uff1a\107\uff1a\001\002\000\004" +
    "\100\u0159\001\002\000\004\100\u0157\001\002\000\030\005" +
    "\121\011\126\012\063\013\uff12\020\u0127\023\074\027\uff12" +
    "\035\u0126\051\133\102\u012a\107\uff12\001\002\000\010\013" +
    "\uff14\027\uff14\107\uff14\001\002\000\030\005\121\011\126" +
    "\012\063\013\uff13\020\u0127\023\074\027\uff13\035\u0126\051" +
    "\133\102\u012a\107\uff13\001\002\000\010\013\uff15\027\uff15" +
    "\107\uff15\001\002\000\004\100\u015c\001\002\000\024\005" +
    "\121\011\126\012\063\020\123\023\074\034\uff23\035\120" +
    "\051\133\102\130\001\002\000\004\034\uff24\001\002\000" +
    "\036\005\uff96\011\uff96\012\uff96\013\uff96\020\uff96\023\uff96" +
    "\027\uff96\032\uff96\034\uff96\035\uff96\051\uff96\100\uff96\102" +
    "\uff96\107\uff96\001\002\000\004\065\u0160\001\002\000\016" +
    "\057\u0161\060\u0162\061\u0166\062\u0167\063\u0165\110\u0164\001" +
    "\002\000\006\065\uffc7\073\uffc7\001\002\000\006\065\uffc6" +
    "\073\uffc6\001\002\000\006\065\u0168\073\101\001\002\000" +
    "\006\065\uffc2\073\uffc2\001\002\000\006\065\uffc3\073\uffc3" +
    "\001\002\000\006\065\uffc5\073\uffc5\001\002\000\006\065" +
    "\uffc4\073\uffc4\001\002\000\040\026\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\u0161\060\u0162\061\u0166\062\u0167\063\u0165\073" +
    "\uffc1\074\uffc1\100\uffc1\101\uffc1\102\uffc1\110\u0164\001\002" +
    "\000\024\026\uffc0\054\uffc0\055\uffc0\056\uffc0\073\uffc0\074" +
    "\uffc0\100\uffc0\101\uffc0\102\uffc0\001\002\000\006\073\u015f" +
    "\074\u016b\001\002\000\042\026\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\u0161\060\u0162\061\u0166\062\u0167\063\u0165\065\u0168" +
    "\073\uffca\074\uffca\100\uffca\101\uffca\102\uffca\110\u0164\001" +
    "\002\000\006\065\u0168\073\101\001\002\000\024\026\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\073\uffc9\074\uffc9\100\uffc9\101" +
    "\uffc9\102\uffc9\001\002\000\024\026\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\073\uffc8\074\uffc8\100\uffc8\101\uffc8\102\uffc8\001" +
    "\002\000\006\065\u0168\073\101\001\002\000\024\026\uffce" +
    "\054\uffce\055\uffce\056\uffce\073\u015f\074\uffce\100\uffce\101" +
    "\uffce\102\uffce\001\002\000\016\042\uff67\043\uff67\051\uff67" +
    "\060\uff67\065\uff67\073\uff67\001\002\000\020\042\uff65\043" +
    "\uff65\051\uff65\054\u017b\060\uff65\065\uff65\073\uff65\001\002" +
    "\000\020\042\uff66\043\uff66\051\uff66\054\u017a\060\uff66\065" +
    "\uff66\073\uff66\001\002\000\016\042\102\043\104\051\u0179" +
    "\060\100\065\106\073\101\001\002\000\010\026\uff7f\100" +
    "\uff7f\102\uff7f\001\002\000\010\026\uff80\100\uff80\102\uff80" +
    "\001\002\000\010\026\uff70\100\uff70\102\uff70\001\002\000" +
    "\012\026\uff7e\073\uffc0\100\uff7e\102\uff7e\001\002\000\012" +
    "\026\uff81\073\136\100\uff81\102\uff81\001\002\000\016\042" +
    "\uff69\043\uff69\051\uff69\060\uff69\065\uff69\073\uff69\001\002" +
    "\000\016\042\uff68\043\uff68\051\uff68\060\uff68\065\uff68\073" +
    "\uff68\001\002\000\016\042\102\043\104\051\u0181\060\100" +
    "\065\106\073\101\001\002\000\010\026\uff7a\100\uff7a\102" +
    "\uff7a\001\002\000\010\026\uff7d\100\uff7d\102\uff7d\001\002" +
    "\000\010\026\uff6e\100\uff6e\102\uff6e\001\002\000\012\026" +
    "\uff7c\073\uffc0\100\uff7c\102\uff7c\001\002\000\012\026\uff7b" +
    "\073\136\100\uff7b\102\uff7b\001\002\000\016\042\102\043" +
    "\104\051\u0186\060\100\065\106\073\101\001\002\000\010" +
    "\026\uff6d\100\uff6d\102\uff6d\001\002\000\010\026\uff6b\100" +
    "\uff6b\102\uff6b\001\002\000\012\026\uff6a\073\uffc0\100\uff6a" +
    "\102\uff6a\001\002\000\010\026\uff6c\100\uff6c\102\uff6c\001" +
    "\002\000\016\042\102\043\104\051\u018c\060\100\065\106" +
    "\073\101\001\002\000\010\026\uff72\100\uff72\102\uff72\001" +
    "\002\000\010\026\uff75\100\uff75\102\uff75\001\002\000\010" +
    "\026\uff6f\100\uff6f\102\uff6f\001\002\000\012\026\uff73\073" +
    "\uffc0\100\uff73\102\uff73\001\002\000\012\026\uff74\073\136" +
    "\100\uff74\102\uff74\001\002\000\016\042\102\043\104\051" +
    "\u0192\060\100\065\106\073\101\001\002\000\010\026\uff79" +
    "\100\uff79\102\uff79\001\002\000\010\026\uff78\100\uff78\102" +
    "\uff78\001\002\000\010\026\uff71\100\uff71\102\uff71\001\002" +
    "\000\012\026\uff76\073\uffc0\100\uff76\102\uff76\001\002\000" +
    "\012\026\uff77\073\136\100\uff77\102\uff77\001\002\000\016" +
    "\057\u0161\060\u0162\061\u0166\062\u0167\063\u0165\110\u0164\001" +
    "\002\000\006\065\u0168\073\101\001\002\000\006\073\u015f" +
    "\074\u0196\001\002\000\042\026\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\057\u0161\060\u0162\061\u0166\062\u0167\063\u0165\065\u0168" +
    "\073\uffcd\074\uffcd\100\uffcd\101\uffcd\102\uffcd\110\u0164\001" +
    "\002\000\006\065\u0168\073\101\001\002\000\024\026\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\073\uffcc\074\uffcc\100\uffcc\101" +
    "\uffcc\102\uffcc\001\002\000\024\026\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\073\uffcb\074\uffcb\100\uffcb\101\uffcb\102\uffcb\001" +
    "\002\000\030\026\uffdb\037\uffdb\047\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\074\uffdb\100\uffdb\101\uffdb\102\uffdb\104\uffdb\001" +
    "\002\000\004\013\uffe4\001\002\000\020\042\102\043\104" +
    "\051\146\060\100\065\144\073\140\074\137\001\002\000" +
    "\004\100\uffdd\001\002\000\006\074\u019f\104\147\001\002" +
    "\000\010\074\155\100\ufef8\104\154\001\002\000\004\010" +
    "\u01a1\001\002\000\006\013\uffee\100\uffee\001\002\000\004" +
    "\013\uffe3\001\002\000\024\005\056\011\065\012\063\013" +
    "\uffe1\020\062\023\074\035\055\051\072\102\066\001\002" +
    "\000\004\013\uffe0\001\002\000\024\005\056\011\065\012" +
    "\063\013\uffe8\020\062\023\074\035\055\051\072\102\066" +
    "\001\002\000\004\013\uffe7\001\002\000\004\054\u01a8\001" +
    "\002\000\006\060\100\065\144\001\002\000\004\037\u01aa" +
    "\001\002\000\006\060\100\065\144\001\002\000\004\047" +
    "\u01ac\001\002\000\006\060\100\065\144\001\002\000\006" +
    "\100\115\102\114\001\002\000\022\005\215\011\065\012" +
    "\063\020\u01b2\023\226\035\u01b0\051\133\102\u01b4\001\002" +
    "\000\024\005\215\011\065\012\063\020\u01b2\023\226\032" +
    "\uff61\035\u01b0\051\133\102\u01b4\001\002\000\004\011\u01c5" +
    "\001\002\000\004\032\u01c2\001\002\000\004\070\u01bb\001" +
    "\002\000\004\100\u01b9\001\002\000\004\100\u01b7\001\002" +
    "\000\024\005\215\011\065\012\063\020\u01b2\023\226\032" +
    "\uff62\035\u01b0\051\133\102\u01b4\001\002\000\004\032\uff5f" +
    "\001\002\000\024\005\215\011\065\012\063\020\u01b2\023" +
    "\226\032\uff5e\035\u01b0\051\133\102\u01b4\001\002\000\004" +
    "\032\uff5d\001\002\000\024\005\215\011\065\012\063\020" +
    "\u01b2\023\226\032\uff5b\035\u01b0\051\133\102\u01b4\001\002" +
    "\000\004\032\uff5a\001\002\000\004\021\u01bc\001\002\000" +
    "\004\073\u01bd\001\002\000\020\042\102\043\104\051\260" +
    "\060\100\064\261\065\106\073\101\001\002\000\004\074" +
    "\u01bf\001\002\000\004\100\u01c0\001\002\000\024\005\215" +
    "\011\065\012\063\020\u01b2\023\226\032\uff63\035\u01b0\051" +
    "\133\102\u01b4\001\002\000\004\032\uff60\001\002\000\004" +
    "\051\u01c3\001\002\000\006\100\115\102\114\001\002\000" +
    "\034\005\uff64\011\uff64\012\uff64\013\uff64\020\uff64\023\uff64" +
    "\027\uff64\032\uff64\035\uff64\051\uff64\100\uff64\102\uff64\107" +
    "\uff64\001\002\000\004\100\u01c6\001\002\000\024\005\215" +
    "\011\065\012\063\020\u01b2\023\226\032\uff58\035\u01b0\051" +
    "\133\102\u01b4\001\002\000\004\032\uff59\001\002\000\004" +
    "\032\uff5c\001\002\000\024\005\056\011\065\012\063\013" +
    "\uffe6\020\062\023\074\035\055\051\072\102\066\001\002" +
    "\000\004\013\uffe2\001\002\000\006\022\u01cc\054\u01cd\001" +
    "\002\000\014\014\044\015\043\016\046\046\045\051\042" +
    "\001\002\000\020\042\102\043\104\051\u01d4\060\100\064" +
    "\u01d3\065\106\073\101\001\002\000\006\100\uffa1\102\uffa1" +
    "\001\002\000\006\100\uffa2\102\uffa2\001\002\000\006\100" +
    "\uffbc\102\uffbc\001\002\000\006\100\uffbd\102\uffbd\001\002" +
    "\000\010\073\uffc0\100\uffb9\102\uffb9\001\002\000\006\100" +
    "\uffa3\102\uffa3\001\002\000\010\073\136\100\uffac\102\uffac" +
    "\001\002\000\010\054\u01d6\100\uffbf\102\uffbf\001\002\000" +
    "\020\042\102\043\104\051\u01da\060\100\064\u01d3\065\106" +
    "\073\101\001\002\000\006\100\uffbb\102\uffbb\001\002\000" +
    "\006\100\uffbe\102\uffbe\001\002\000\010\073\uffc0\100\uffba" +
    "\102\uffba\001\002\000\010\073\136\100\uffab\102\uffab\001" +
    "\002\000\004\021\u01dc\001\002\000\004\073\u01dd\001\002" +
    "\000\020\042\102\043\104\051\260\060\100\064\261\065" +
    "\106\073\101\001\002\000\004\074\u01df\001\002\000\004" +
    "\100\u01e0\001\002\000\024\005\056\011\065\012\063\013" +
    "\uffeb\020\062\023\074\035\055\051\072\102\066\001\002" +
    "\000\004\013\uffe5\001\002\000\004\100\u01e4\001\002\000" +
    "\034\005\uffaa\011\uffaa\012\uffaa\013\uffaa\020\uffaa\023\uffaa" +
    "\027\uffaa\032\uffaa\034\uffaa\035\uffaa\051\uffaa\102\uffaa\107" +
    "\uffaa\001\002\000\034\005\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\020\uffa9\023\uffa9\027\uffa9\032\uffa9\034\uffa9\035\uffa9\051" +
    "\uffa9\102\uffa9\107\uffa9\001\002\000\004\026\u01e6\001\002" +
    "\000\006\100\115\102\114\001\002\000\022\005\056\011" +
    "\065\012\063\020\u01e9\023\074\035\u01e8\051\133\102\u01ec" +
    "\001\002\000\004\010\u0218\001\002\000\004\070\u0211\001" +
    "\002\000\010\013\u01fa\027\u01f9\107\343\001\002\000\004" +
    "\100\u01f4\001\002\000\004\100\u01f2\001\002\000\012\013" +
    "\uff8f\027\uff8f\100\u01f0\107\uff8f\001\002\000\030\005\056" +
    "\011\065\012\063\013\uff90\020\u01e9\023\074\027\uff90\035" +
    "\u01e8\051\133\102\u01ec\107\uff90\001\002\000\010\013\uff8a" +
    "\027\uff8a\107\uff8a\001\002\000\022\005\056\011\065\012" +
    "\063\020\u01e9\023\074\035\u01e8\051\133\102\u01ec\001\002" +
    "\000\010\013\uff89\027\uff89\107\uff89\001\002\000\030\005" +
    "\056\011\065\012\063\013\uff8e\020\u01e9\023\074\027\uff8e" +
    "\035\u01e8\051\133\102\u01ec\107\uff8e\001\002\000\010\013" +
    "\uff8d\027\uff8d\107\uff8d\001\002\000\030\005\056\011\065" +
    "\012\063\013\uff8c\020\u01e9\023\074\027\uff8c\035\u01e8\051" +
    "\133\102\u01ec\107\uff8c\001\002\000\010\013\uff88\027\uff88" +
    "\107\uff88\001\002\000\016\042\102\043\104\051\111\060" +
    "\100\065\106\073\101\001\002\000\004\013\u0207\001\002" +
    "\000\006\100\115\102\114\001\002\000\010\005\360\100" +
    "\115\102\114\001\002\000\004\005\u01fb\001\002\000\006" +
    "\100\115\102\114\001\002\000\032\005\uff95\011\uff95\012" +
    "\uff95\013\uff95\020\uff95\023\uff95\027\uff95\035\uff95\051\uff95" +
    "\100\uff95\102\uff95\107\uff95\001\002\000\022\005\056\011" +
    "\065\012\063\020\u01e9\023\074\035\u01e8\051\133\102\u01ec" +
    "\001\002\000\004\013\u01ff\001\002\000\004\005\u0200\001" +
    "\002\000\006\100\115\102\114\001\002\000\032\005\uff94" +
    "\011\uff94\012\uff94\013\uff94\020\uff94\023\uff94\027\uff94\035" +
    "\uff94\051\uff94\100\uff94\102\uff94\107\uff94\001\002\000\022" +
    "\005\056\011\065\012\063\020\u01e9\023\074\035\u01e8\051" +
    "\133\102\u01ec\001\002\000\004\013\u0204\001\002\000\004" +
    "\005\u0205\001\002\000\006\100\115\102\114\001\002\000" +
    "\032\005\uff93\011\uff93\012\uff93\013\uff93\020\uff93\023\uff93" +
    "\027\uff93\035\uff93\051\uff93\100\uff93\102\uff93\107\uff93\001" +
    "\002\000\004\005\u0208\001\002\000\006\100\115\102\114" +
    "\001\002\000\032\005\uff92\011\uff92\012\uff92\013\uff92\020" +
    "\uff92\023\uff92\027\uff92\035\uff92\051\uff92\100\uff92\102\uff92" +
    "\107\uff92\001\002\000\004\026\u020b\001\002\000\006\100" +
    "\115\102\114\001\002\000\022\005\056\011\065\012\063" +
    "\020\u01e9\023\074\035\u01e8\051\133\102\u01ec\001\002\000" +
    "\010\013\uff82\027\u0210\107\343\001\002\000\004\013\uff83" +
    "\001\002\000\006\100\uff85\102\uff85\001\002\000\010\005" +
    "\360\100\uff84\102\uff84\001\002\000\004\021\u0212\001\002" +
    "\000\004\073\u0213\001\002\000\020\042\102\043\104\051" +
    "\260\060\100\064\261\065\106\073\101\001\002\000\004" +
    "\074\u0215\001\002\000\004\100\u0216\001\002\000\030\005" +
    "\056\011\065\012\063\013\uff91\020\u01e9\023\074\027\uff91" +
    "\035\u01e8\051\133\102\u01ec\107\uff91\001\002\000\010\013" +
    "\uff8b\027\uff8b\107\uff8b\001\002\000\004\100\u0219\001\002" +
    "\000\030\005\056\011\065\012\063\013\uff86\020\u01e9\023" +
    "\074\027\uff86\035\u01e8\051\133\102\u01ec\107\uff86\001\002" +
    "\000\010\013\uff87\027\uff87\107\uff87\001\002\000\004\100" +
    "\u021c\001\002\000\024\005\056\011\065\012\063\013\uffdf" +
    "\020\062\023\074\035\055\051\072\102\066\001\002\000" +
    "\004\013\uffde\001\002\000\022\005\056\011\065\012\063" +
    "\020\062\023\074\035\055\051\072\102\066\001\002\000" +
    "\004\013\u0220\001\002\000\004\010\u0221\001\002\000\006" +
    "\013\uffec\100\uffec\001\002\000\004\022\u0223\001\002\000" +
    "\014\014\044\015\043\016\046\046\045\051\042\001\002" +
    "\000\006\074\ufeea\104\u0225\001\002\000\006\051\037\106" +
    "\035\001\002\000\004\074\ufeeb\001\002\000\004\074\u0228" +
    "\001\002\000\006\100\u022a\102\u0229\001\002\000\004\100" +
    "\u022f\001\002\000\022\005\056\011\065\012\063\020\062" +
    "\023\074\035\055\051\072\102\066\001\002\000\004\013" +
    "\u022c\001\002\000\004\010\u022d\001\002\000\004\100\u022e" +
    "\001\002\000\006\013\uffef\100\uffef\001\002\000\022\005" +
    "\056\011\065\012\063\020\062\023\074\035\055\051\072" +
    "\102\066\001\002\000\004\013\u0231\001\002\000\004\010" +
    "\u0232\001\002\000\004\100\u0233\001\002\000\006\013\uffed" +
    "\100\uffed\001\002\000\004\007\u0235\001\002\000\006\002" +
    "\ufff8\100\ufff8\001\002\000\004\013\ufff5\001\002\000\010" +
    "\006\017\033\020\102\016\001\002\000\004\013\ufff3\001" +
    "\002\000\010\006\017\033\020\102\016\001\002\000\004" +
    "\013\ufff1\001\002\000\004\051\u023c\001\002\000\004\073" +
    "\u023d\001\002\000\006\051\037\106\035\001\002\000\004" +
    "\074\u023f\001\002\000\004\022\u0240\001\002\000\014\014" +
    "\044\015\043\016\046\046\045\051\042\001\002\000\006" +
    "\100\115\102\114\001\002\000\022\005\u0245\011\u0249\012" +
    "\063\020\u0247\023\u024f\035\u0243\051\133\102\u024a\001\002" +
    "\000\004\030\u0337\001\002\000\004\013\u0335\001\002\000" +
    "\016\042\102\043\104\051\111\060\100\065\106\073\101" +
    "\001\002\000\032\005\ufedc\011\ufedc\012\ufedc\013\ufedc\020" +
    "\ufedc\023\ufedc\027\ufedc\034\ufedc\035\ufedc\051\ufedc\102\ufedc" +
    "\107\ufedc\001\002\000\004\070\u030f\001\002\000\004\100" +
    "\u030d\001\002\000\004\051\u02e8\001\002\000\004\100\u02e6" +
    "\001\002\000\032\005\ufedb\011\ufedb\012\ufedb\013\ufedb\020" +
    "\ufedb\023\ufedb\027\ufedb\034\ufedb\035\ufedb\051\ufedb\102\ufedb" +
    "\107\ufedb\001\002\000\032\005\ufedd\011\ufedd\012\ufedd\013" +
    "\ufedd\020\ufedd\023\ufedd\027\ufedd\034\ufedd\035\ufedd\051\ufedd" +
    "\102\ufedd\107\ufedd\001\002\000\024\005\u0245\011\u0249\012" +
    "\063\013\ufee7\020\u0247\023\u024f\035\u0243\051\133\102\u024a" +
    "\001\002\000\024\005\u0245\011\u0249\012\063\013\ufee8\020" +
    "\u0247\023\u024f\035\u0243\051\133\102\u024a\001\002\000\006" +
    "\024\077\036\076\001\002\000\016\042\102\043\104\051" +
    "\111\060\100\065\106\073\101\001\002\000\006\100\115" +
    "\102\114\001\002\000\022\005\u0256\011\u0249\012\063\020" +
    "\u0259\023\u025e\035\u0254\051\133\102\u025b\001\002\000\034" +
    "\005\ufeb7\011\ufeb7\012\ufeb7\013\ufeb7\020\ufeb7\023\ufeb7\027" +
    "\ufeb7\032\ufeb7\034\ufeb7\035\ufeb7\051\ufeb7\102\ufeb7\107\ufeb7" +
    "\001\002\000\006\023\u02de\030\u02df\001\002\000\034\005" +
    "\ufeb5\011\ufeb5\012\ufeb5\013\ufeb5\020\ufeb5\023\ufeb5\027\ufeb5" +
    "\032\ufeb5\034\ufeb5\035\ufeb5\051\ufeb5\102\ufeb5\107\ufeb5\001" +
    "\002\000\016\042\102\043\104\051\111\060\100\065\106" +
    "\073\101\001\002\000\004\034\u02a4\001\002\000\034\005" +
    "\ufeb6\011\ufeb6\012\ufeb6\013\ufeb6\020\ufeb6\023\ufeb6\027\ufeb6" +
    "\032\ufeb6\034\ufeb6\035\ufeb6\051\ufeb6\102\ufeb6\107\ufeb6\001" +
    "\002\000\004\070\u029d\001\002\000\004\100\u0285\001\002" +
    "\000\004\100\u0283\001\002\000\024\005\u0256\011\u0249\012" +
    "\063\020\u0259\023\u025e\034\ufe8b\035\u0254\051\133\102\u025b" +
    "\001\002\000\024\005\u0256\011\u0249\012\063\020\u0259\023" +
    "\u025e\034\ufe88\035\u0254\051\133\102\u025b\001\002\000\006" +
    "\024\077\036\076\001\002\000\016\042\102\043\104\051" +
    "\111\060\100\065\106\073\101\001\002\000\006\100\115" +
    "\102\114\001\002\000\022\005\121\011\126\012\063\020" +
    "\u0264\023\074\035\u0262\051\133\102\u0267\001\002\000\010" +
    "\011\u027a\023\u0278\030\u0279\001\002\000\004\034\u0276\001" +
    "\002\000\004\070\u026f\001\002\000\024\005\121\011\126" +
    "\012\063\020\123\023\074\034\ufe9b\035\120\051\133\102" +
    "\130\001\002\000\004\100\u026c\001\002\000\004\100\u026a" +
    "\001\002\000\024\005\121\011\126\012\063\020\123\023" +
    "\074\034\ufe9c\035\120\051\133\102\130\001\002\000\004" +
    "\034\ufe97\001\002\000\024\005\121\011\126\012\063\020" +
    "\u0264\023\074\034\ufe9a\035\u0262\051\133\102\u0267\001\002" +
    "\000\004\034\ufe99\001\002\000\024\005\121\011\126\012" +
    "\063\020\123\023\074\034\ufe95\035\120\051\133\102\130" +
    "\001\002\000\004\034\ufe94\001\002\000\004\034\ufe96\001" +
    "\002\000\004\021\u0270\001\002\000\004\073\u0271\001\002" +
    "\000\020\042\102\043\104\051\260\060\100\064\261\065" +
    "\106\073\101\001\002\000\004\074\u0273\001\002\000\004" +
    "\100\u0274\001\002\000\024\005\121\011\126\012\063\020" +
    "\123\023\074\034\ufe9d\035\120\051\133\102\130\001\002" +
    "\000\004\034\ufe98\001\002\000\006\100\115\102\114\001" +
    "\002\000\034\005\ufe9e\011\ufe9e\012\ufe9e\013\ufe9e\020\ufe9e" +
    "\023\ufe9e\027\ufe9e\032\ufe9e\034\ufe9e\035\ufe9e\051\ufe9e\102" +
    "\ufe9e\107\ufe9e\001\002\000\004\100\u027f\001\002\000\004" +
    "\100\u027d\001\002\000\004\100\u027b\001\002\000\024\005" +
    "\121\011\126\012\063\020\123\023\074\034\ufe8f\035\120" +
    "\051\133\102\130\001\002\000\004\034\ufe92\001\002\000" +
    "\024\005\121\011\126\012\063\020\123\023\074\034\ufe8e" +
    "\035\120\051\133\102\130\001\002\000\004\034\ufe91\001" +
    "\002\000\024\005\121\011\126\012\063\020\123\023\074" +
    "\034\ufe90\035\120\051\133\102\130\001\002\000\004\034" +
    "\ufe93\001\002\000\004\034\ufe85\001\002\000\004\034\ufe86" +
    "\001\002\000\024\005\u0256\011\u0249\012\063\020\u0259\023" +
    "\u025e\034\ufe8a\035\u0254\051\133\102\u025b\001\002\000\004" +
    "\034\ufe89\001\002\000\024\005\u0245\011\u0249\012\063\020" +
    "\u0288\023\u024f\034\ufe84\035\u0287\051\133\102\u028a\001\002" +
    "\000\004\034\ufe83\001\002\000\004\030\u029a\001\002\000" +
    "\004\070\u0293\001\002\000\004\100\u0291\001\002\000\004" +
    "\100\u028f\001\002\000\032\005\u0245\011\u0249\012\063\013" +
    "\ufed2\020\u0288\023\u024f\027\ufed2\034\ufed2\035\u0287\051\133" +
    "\102\u028a\107\ufed2\001\002\000\032\005\u0245\011\u0249\012" +
    "\063\013\ufed5\020\u0288\023\u024f\027\ufed5\034\ufed5\035\u0287" +
    "\051\133\102\u028a\107\ufed5\001\002\000\012\013\ufed0\027" +
    "\ufed0\034\ufed0\107\ufed0\001\002\000\012\013\ufecf\027\ufecf" +
    "\034\ufecf\107\ufecf\001\002\000\032\005\u0245\011\u0249\012" +
    "\063\013\ufed4\020\u0288\023\u024f\027\ufed4\034\ufed4\035\u0287" +
    "\051\133\102\u028a\107\ufed4\001\002\000\012\013\ufed3\027" +
    "\ufed3\034\ufed3\107\ufed3\001\002\000\032\005\u0245\011\u0249" +
    "\012\063\013\ufece\020\u0288\023\u024f\027\ufece\034\ufece\035" +
    "\u0287\051\133\102\u028a\107\ufece\001\002\000\012\013\ufecd" +
    "\027\ufecd\034\ufecd\107\ufecd\001\002\000\004\021\u0294\001" +
    "\002\000\004\073\u0295\001\002\000\020\042\102\043\104" +
    "\051\260\060\100\064\261\065\106\073\101\001\002\000" +
    "\004\074\u0297\001\002\000\004\100\u0298\001\002\000\032" +
    "\005\u0245\011\u0249\012\063\013\ufed6\020\u0288\023\u024f\027" +
    "\ufed6\034\ufed6\035\u0287\051\133\102\u028a\107\ufed6\001\002" +
    "\000\012\013\ufed1\027\ufed1\034\ufed1\107\ufed1\001\002\000" +
    "\004\100\u029b\001\002\000\032\005\u0245\011\u0249\012\063" +
    "\013\ufecb\020\u0288\023\u024f\027\ufecb\034\ufecb\035\u0287\051" +
    "\133\102\u028a\107\ufecb\001\002\000\012\013\ufecc\027\ufecc" +
    "\034\ufecc\107\ufecc\001\002\000\004\021\u029e\001\002\000" +
    "\004\073\u029f\001\002\000\020\042\102\043\104\051\260" +
    "\060\100\064\261\065\106\073\101\001\002\000\004\074" +
    "\u02a1\001\002\000\004\100\u02a2\001\002\000\024\005\u0256" +
    "\011\u0249\012\063\020\u0259\023\u025e\034\ufe8c\035\u0254\051" +
    "\133\102\u025b\001\002\000\004\034\ufe87\001\002\000\006" +
    "\100\115\102\114\001\002\000\032\005\ufe8d\011\ufe8d\012" +
    "\ufe8d\013\ufe8d\020\ufe8d\023\ufe8d\027\ufe8d\034\ufe8d\035\ufe8d" +
    "\051\ufe8d\102\ufe8d\107\ufe8d\001\002\000\004\026\u02a7\001" +
    "\002\000\006\100\115\102\114\001\002\000\022\005\u0256" +
    "\011\u0249\012\063\020\u02aa\023\u025e\035\u02a9\051\133\102" +
    "\u02ac\001\002\000\006\011\u02d9\030\u02d8\001\002\000\004" +
    "\070\u02d1\001\002\000\004\100\u02cf\001\002\000\004\100" +
    "\u02cd\001\002\000\010\013\u02b6\027\u02b3\107\343\001\002" +
    "\000\030\005\u0256\011\u0249\012\063\013\ufeaf\020\u02aa\023" +
    "\u025e\027\ufeaf\035\u02a9\051\133\102\u02ac\107\ufeaf\001\002" +
    "\000\030\005\u0256\011\u0249\012\063\013\ufeac\020\u02aa\023" +
    "\u025e\027\ufeac\035\u02a9\051\133\102\u02ac\107\ufeac\001\002" +
    "\000\010\013\ufea9\027\ufea9\107\ufea9\001\002\000\010\013" +
    "\ufeaa\027\ufeaa\107\ufeaa\001\002\000\016\042\102\043\104" +
    "\051\111\060\100\065\106\073\101\001\002\000\010\005" +
    "\360\100\115\102\114\001\002\000\006\100\115\102\114" +
    "\001\002\000\004\013\u02b9\001\002\000\004\005\u02b7\001" +
    "\002\000\006\100\115\102\114\001\002\000\034\005\ufeb4" +
    "\011\ufeb4\012\ufeb4\013\ufeb4\020\ufeb4\023\ufeb4\027\ufeb4\032" +
    "\ufeb4\034\ufeb4\035\ufeb4\051\ufeb4\102\ufeb4\107\ufeb4\001\002" +
    "\000\004\005\u02ba\001\002\000\006\100\115\102\114\001" +
    "\002\000\034\005\ufeb1\011\ufeb1\012\ufeb1\013\ufeb1\020\ufeb1" +
    "\023\ufeb1\027\ufeb1\032\ufeb1\034\ufeb1\035\ufeb1\051\ufeb1\102" +
    "\ufeb1\107\ufeb1\001\002\000\022\005\u0256\011\u0249\012\063" +
    "\020\u02aa\023\u025e\035\u02a9\051\133\102\u02ac\001\002\000" +
    "\004\013\u02be\001\002\000\004\005\u02bf\001\002\000\006" +
    "\100\115\102\114\001\002\000\034\005\ufeb2\011\ufeb2\012" +
    "\ufeb2\013\ufeb2\020\ufeb2\023\ufeb2\027\ufeb2\032\ufeb2\034\ufeb2" +
    "\035\ufeb2\051\ufeb2\102\ufeb2\107\ufeb2\001\002\000\022\005" +
    "\u0256\011\u0249\012\063\020\u02aa\023\u025e\035\u02a9\051\133" +
    "\102\u02ac\001\002\000\004\013\u02c3\001\002\000\004\005" +
    "\u02c4\001\002\000\006\100\115\102\114\001\002\000\034" +
    "\005\ufeb3\011\ufeb3\012\ufeb3\013\ufeb3\020\ufeb3\023\ufeb3\027" +
    "\ufeb3\032\ufeb3\034\ufeb3\035\ufeb3\051\ufeb3\102\ufeb3\107\ufeb3" +
    "\001\002\000\004\026\u02c7\001\002\000\006\100\115\102" +
    "\114\001\002\000\022\005\u0256\011\u0249\012\063\020\u02aa" +
    "\023\u025e\035\u02a9\051\133\102\u02ac\001\002\000\010\013" +
    "\ufea0\027\u02ca\107\343\001\002\000\010\005\360\100\ufea2" +
    "\102\ufea2\001\002\000\006\100\ufea1\102\ufea1\001\002\000" +
    "\004\013\ufe9f\001\002\000\030\005\u0256\011\u0249\012\063" +
    "\013\ufeae\020\u02aa\023\u025e\027\ufeae\035\u02a9\051\133\102" +
    "\u02ac\107\ufeae\001\002\000\010\013\ufead\027\ufead\107\ufead" +
    "\001\002\000\030\005\u0245\011\u0249\012\063\013\ufea8\020" +
    "\u0288\023\u024f\027\ufea8\035\u0287\051\133\102\u028a\107\ufea8" +
    "\001\002\000\010\013\ufea7\027\ufea7\107\ufea7\001\002\000" +
    "\004\021\u02d2\001\002\000\004\073\u02d3\001\002\000\020" +
    "\042\102\043\104\051\260\060\100\064\261\065\106\073" +
    "\101\001\002\000\004\074\u02d5\001\002\000\004\100\u02d6" +
    "\001\002\000\030\005\u0256\011\u0249\012\063\013\ufeb0\020" +
    "\u02aa\023\u025e\027\ufeb0\035\u02a9\051\133\102\u02ac\107\ufeb0" +
    "\001\002\000\010\013\ufeab\027\ufeab\107\ufeab\001\002\000" +
    "\004\100\u02dc\001\002\000\004\100\u02da\001\002\000\030" +
    "\005\u0256\011\u0249\012\063\013\ufea3\020\u02aa\023\u025e\027" +
    "\ufea3\035\u02a9\051\133\102\u02ac\107\ufea3\001\002\000\010" +
    "\013\ufea4\027\ufea4\107\ufea4\001\002\000\030\005\u0256\011" +
    "\u0249\012\063\013\ufea5\020\u02aa\023\u025e\027\ufea5\035\u02a9" +
    "\051\133\102\u02ac\107\ufea5\001\002\000\010\013\ufea6\027" +
    "\ufea6\107\ufea6\001\002\000\004\100\u02e2\001\002\000\004" +
    "\100\u02e0\001\002\000\024\005\u0245\011\u0249\012\063\020" +
    "\u0288\023\u024f\034\ufe7f\035\u0287\051\133\102\u028a\001\002" +
    "\000\004\034\ufe81\001\002\000\024\005\u0245\011\u0249\012" +
    "\063\020\u0288\023\u024f\034\ufe80\035\u0287\051\133\102\u028a" +
    "\001\002\000\004\034\ufe82\001\002\000\004\013\ufee2\001" +
    "\002\000\004\013\ufee1\001\002\000\024\005\u0245\011\u0249" +
    "\012\063\013\ufee6\020\u0247\023\u024f\035\u0243\051\133\102" +
    "\u024a\001\002\000\004\013\ufee5\001\002\000\004\054\u02e9" +
    "\001\002\000\006\060\100\065\144\001\002\000\004\037" +
    "\u02eb\001\002\000\006\060\100\065\144\001\002\000\004" +
    "\047\u02ed\001\002\000\006\060\100\065\144\001\002\000" +
    "\006\100\115\102\114\001\002\000\022\005\u0256\011\u0249" +
    "\012\063\020\u02f1\023\u025e\035\u02f0\051\133\102\u02f4\001" +
    "\002\000\006\011\u0308\030\u0307\001\002\000\004\070\u0300" +
    "\001\002\000\004\100\u02fe\001\002\000\004\032\u02fb\001" +
    "\002\000\004\100\u02f9\001\002\000\024\005\u0256\011\u0249" +
    "\012\063\020\u02f1\023\u025e\032\ufec1\035\u02f0\051\133\102" +
    "\u02f4\001\002\000\024\005\u0256\011\u0249\012\063\020\u02f1" +
    "\023\u025e\032\ufec4\035\u02f0\051\133\102\u02f4\001\002\000" +
    "\004\032\ufebf\001\002\000\004\032\ufebe\001\002\000\024" +
    "\005\u0256\011\u0249\012\063\020\u02f1\023\u025e\032\ufec3\035" +
    "\u02f0\051\133\102\u02f4\001\002\000\004\032\ufec2\001\002" +
    "\000\004\051\u02fc\001\002\000\006\100\115\102\114\001" +
    "\002\000\034\005\ufec6\011\ufec6\012\ufec6\013\ufec6\020\ufec6" +
    "\023\ufec6\027\ufec6\032\ufec6\034\ufec6\035\ufec6\051\ufec6\102" +
    "\ufec6\107\ufec6\001\002\000\024\005\u0256\011\u0249\012\063" +
    "\020\u02f1\023\u025e\032\ufebd\035\u02f0\051\133\102\u02f4\001" +
    "\002\000\004\032\ufebc\001\002\000\004\021\u0301\001\002" +
    "\000\004\073\u0302\001\002\000\020\042\102\043\104\051" +
    "\260\060\100\064\261\065\106\073\101\001\002\000\004" +
    "\074\u0304\001\002\000\004\100\u0305\001\002\000\024\005" +
    "\u0256\011\u0249\012\063\020\u02f1\023\u025e\032\ufec5\035\u02f0" +
    "\051\133\102\u02f4\001\002\000\004\032\ufec0\001\002\000" +
    "\004\100\u030b\001\002\000\004\100\u0309\001\002\000\024" +
    "\005\u0256\011\u0249\012\063\020\u02f1\023\u025e\032\ufeb8\035" +
    "\u02f0\051\133\102\u02f4\001\002\000\004\032\ufeb9\001\002" +
    "\000\024\005\u0256\011\u0249\012\063\020\u02f1\023\u025e\032" +
    "\ufeba\035\u02f0\051\133\102\u02f4\001\002\000\004\032\ufebb" +
    "\001\002\000\024\005\u0245\011\u0249\012\063\013\ufee4\020" +
    "\u0247\023\u024f\035\u0243\051\133\102\u024a\001\002\000\004" +
    "\013\ufee0\001\002\000\004\021\u0310\001\002\000\004\073" +
    "\u0311\001\002\000\020\042\102\043\104\051\260\060\100" +
    "\064\261\065\106\073\101\001\002\000\004\074\u0313\001" +
    "\002\000\004\100\u0314\001\002\000\024\005\u0245\011\u0249" +
    "\012\063\013\ufee9\020\u0247\023\u024f\035\u0243\051\133\102" +
    "\u024a\001\002\000\004\013\ufee3\001\002\000\004\026\u0317" +
    "\001\002\000\006\100\115\102\114\001\002\000\022\005" +
    "\u0245\011\u0249\012\063\020\u0288\023\u024f\035\u0287\051\133" +
    "\102\u028a\001\002\000\010\013\u031e\027\u031b\107\343\001" +
    "\002\000\016\042\102\043\104\051\111\060\100\065\106" +
    "\073\101\001\002\000\010\005\360\100\115\102\114\001" +
    "\002\000\004\013\u0326\001\002\000\006\100\115\102\114" +
    "\001\002\000\004\005\u031f\001\002\000\006\100\115\102" +
    "\114\001\002\000\032\005\ufeda\011\ufeda\012\ufeda\013\ufeda" +
    "\020\ufeda\023\ufeda\027\ufeda\034\ufeda\035\ufeda\051\ufeda\102" +
    "\ufeda\107\ufeda\001\002\000\022\005\u0245\011\u0249\012\063" +
    "\020\u0288\023\u024f\035\u0287\051\133\102\u028a\001\002\000" +
    "\004\013\u0323\001\002\000\004\005\u0324\001\002\000\006" +
    "\100\115\102\114\001\002\000\032\005\ufed8\011\ufed8\012" +
    "\ufed8\013\ufed8\020\ufed8\023\ufed8\027\ufed8\034\ufed8\035\ufed8" +
    "\051\ufed8\102\ufed8\107\ufed8\001\002\000\004\005\u0327\001" +
    "\002\000\006\100\115\102\114\001\002\000\032\005\ufed7" +
    "\011\ufed7\012\ufed7\013\ufed7\020\ufed7\023\ufed7\027\ufed7\034" +
    "\ufed7\035\ufed7\051\ufed7\102\ufed7\107\ufed7\001\002\000\022" +
    "\005\u0245\011\u0249\012\063\020\u0288\023\u024f\035\u0287\051" +
    "\133\102\u028a\001\002\000\004\013\u032b\001\002\000\004" +
    "\005\u032c\001\002\000\006\100\115\102\114\001\002\000" +
    "\032\005\ufed9\011\ufed9\012\ufed9\013\ufed9\020\ufed9\023\ufed9" +
    "\027\ufed9\034\ufed9\035\ufed9\051\ufed9\102\ufed9\107\ufed9\001" +
    "\002\000\004\026\u032f\001\002\000\006\100\115\102\114" +
    "\001\002\000\022\005\u0245\011\u0249\012\063\020\u0288\023" +
    "\u024f\035\u0287\051\133\102\u028a\001\002\000\010\013\ufec8" +
    "\027\u0332\107\343\001\002\000\010\005\360\100\ufeca\102" +
    "\ufeca\001\002\000\004\013\ufec7\001\002\000\006\100\ufec9" +
    "\102\ufec9\001\002\000\004\030\u0336\001\002\000\006\006" +
    "\ufeee\100\ufeee\001\002\000\004\100\u0338\001\002\000\024" +
    "\005\u0245\011\u0249\012\063\013\ufede\020\u0247\023\u024f\035" +
    "\u0243\051\133\102\u024a\001\002\000\004\013\ufedf\001\002" +
    "\000\004\051\u033b\001\002\000\006\100\115\102\114\001" +
    "\002\000\004\012\u033e\001\002\000\004\013\u0344\001\002" +
    "\000\004\051\u033f\001\002\000\004\022\u0340\001\002\000" +
    "\014\014\044\015\043\016\046\046\045\051\042\001\002" +
    "\000\004\100\u0342\001\002\000\006\012\u033e\013\ufef1\001" +
    "\002\000\004\013\ufef0\001\002\000\004\025\u0345\001\002" +
    "\000\006\006\ufeef\100\ufeef\001\002\000\010\006\017\033" +
    "\020\102\016\001\002\000\004\013\ufff0\001\002\000\010" +
    "\006\017\033\020\102\016\001\002\000\004\013\u034a\001" +
    "\002\000\004\007\u034b\001\002\000\006\002\ufff7\100\ufff7" +
    "\001\002\000\004\002\001\001\002\000\006\070\u0354\100" +
    "\ufffc\001\002\000\004\100\u0352\001\002\000\006\070\u0350" +
    "\100\ufffa\001\002\000\006\017\u034f\051\u034d\001\002\000" +
    "\004\100\ufff9\001\002\000\006\004\004\006\ufffe\001\002" +
    "\000\004\006\ufffd\001\002\000\006\017\u034f\051\u034d\001" +
    "\002\000\004\100\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0353\000\006\002\004\003\005\001\001\000\004\005" +
    "\u034d\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\021\010\020\021\022\053\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0235\001\001\000\002\001\001\000\004\010" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\021\010\020\021\027\053\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\057\022\070\025\067\026\053\032\060" +
    "\041\056\050\063\114\066\121\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\107\024\102\030\u01e4" +
    "\050\106\113\104\120\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\057\022\u01a1\025\067" +
    "\026\053\032\060\041\056\050\063\114\066\121\072\001" +
    "\001\000\002\001\001\000\012\024\141\051\u019c\113\142" +
    "\115\144\001\001\000\024\015\057\022\u019a\025\067\026" +
    "\053\032\060\041\056\050\063\114\066\121\072\001\001" +
    "\000\004\116\074\001\001\000\016\017\107\024\102\030" +
    "\112\050\106\113\104\120\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u018c\001\001\000\002\001\001" +
    "\000\004\031\u0186\001\001\000\004\020\u016e\001\001\000" +
    "\004\031\u0181\001\001\000\004\031\u017b\001\001\000\004" +
    "\031\u0173\001\001\000\002\001\001\000\004\122\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\057" +
    "\041\121\042\123\043\124\044\116\046\130\050\126\121" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\107\024\102\030\u0122\050\106\113\104\120\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\057\041\121\042\u0118\043\124\044\116\046" +
    "\130\050\126\121\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\041\121\042\175\043\124\044\116\046\130\050\126" +
    "\121\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\161\024\156\050\160\113\157\120\111\001\001" +
    "\000\012\024\141\051\140\113\142\115\144\001\001\000" +
    "\002\001\001\000\010\024\141\113\142\115\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\141\051\150\113\142\115\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\141\051\155\113\142\115\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\172\024\167\050\171\113\170\120\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\041\121\042\177\043\124" +
    "\044\116\046\130\050\126\121\131\001\001\000\002\001" +
    "\001\000\022\015\057\041\121\042\201\043\124\044\116" +
    "\046\130\050\126\121\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\204\001\001\000\002\001\001" +
    "\000\004\113\206\001\001\000\002\001\001\000\004\113" +
    "\210\001\001\000\004\122\211\001\001\000\022\015\057" +
    "\032\215\034\212\035\220\037\224\047\222\050\217\121" +
    "\223\001\001\000\022\015\057\032\215\034\212\035\220" +
    "\037\224\047\u0117\050\217\121\223\001\001\000\002\001" +
    "\001\000\016\017\107\024\102\030\327\050\106\113\104" +
    "\120\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\057\032\215\034\212\035\220\037" +
    "\224\047\310\050\217\121\223\001\001\000\002\001\001" +
    "\000\004\116\226\001\001\000\016\017\107\024\102\030" +
    "\227\050\106\113\104\120\111\001\001\000\004\122\230" +
    "\001\001\000\022\015\057\040\237\041\121\043\233\044" +
    "\116\046\130\050\234\121\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\057\040\247\041\121\043" +
    "\233\044\116\046\130\050\234\121\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\057\040\242\041" +
    "\121\043\233\044\116\046\130\050\234\121\236\001\001" +
    "\000\002\001\001\000\004\122\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\040\244\041\121" +
    "\043\233\044\116\046\130\050\234\121\236\001\001\000" +
    "\002\001\001\000\022\015\057\040\246\041\121\043\233" +
    "\044\116\046\130\050\234\121\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\256\023\255\024\253\113\254\120\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\256\023\262\024\253\113\254\120\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\256\023" +
    "\265\024\253\113\254\120\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\256\023\270\024\253\113" +
    "\254\120\111\001\001\000\002\001\001\000\014\017\256" +
    "\023\272\024\253\113\254\120\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\040\275\041\121" +
    "\043\233\044\116\046\130\050\234\121\236\001\001\000" +
    "\002\001\001\000\014\017\256\023\277\024\253\113\254" +
    "\120\111\001\001\000\002\001\001\000\014\017\256\023" +
    "\301\024\253\113\254\120\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\057\040" +
    "\305\041\121\043\233\044\116\046\130\050\234\121\236" +
    "\001\001\000\002\001\001\000\022\015\057\040\307\041" +
    "\121\043\233\044\116\046\130\050\234\121\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\313\001\001\000\002\001\001\000\022\015\057" +
    "\032\215\034\212\035\220\037\224\047\315\050\217\121" +
    "\223\001\001\000\002\001\001\000\022\015\057\032\215" +
    "\034\212\035\220\037\224\047\317\050\217\121\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\256\023\323\024\253\113\254\120\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\057" +
    "\032\215\034\212\035\220\037\224\047\326\050\217\121" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\122\331\001\001\000\022\015\057\032\215\034\332\035" +
    "\220\037\224\050\335\100\337\121\340\001\001\000\022" +
    "\015\057\032\215\034\332\035\220\037\224\050\335\100" +
    "\u0110\121\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\346\110" +
    "\344\117\343\001\001\000\022\015\057\032\215\034\332" +
    "\035\220\037\224\050\335\100\341\121\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\107\024\102" +
    "\030\370\050\106\113\104\120\111\001\001\000\002\001" +
    "\001\000\004\122\360\001\001\000\004\122\352\001\001" +
    "\000\002\001\001\000\004\122\351\001\001\000\002\001" +
    "\001\000\022\015\057\032\215\034\332\035\220\037\224" +
    "\050\335\100\353\121\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\057\032\215\034\332\035" +
    "\220\037\224\050\335\100\361\121\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\122\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\122\372\001" +
    "\001\000\022\015\057\032\215\034\332\035\220\037\224" +
    "\050\335\100\373\121\340\001\001\000\010\036\375\110" +
    "\374\117\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\057\032\215\034\332\035" +
    "\220\037\224\050\335\100\u0100\121\340\001\001\000\002" +
    "\001\001\000\022\015\057\032\215\034\332\035\220\037" +
    "\224\050\335\100\u0102\121\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\256\023" +
    "\u0106\024\253\113\254\120\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\057\032\215\034\332\035" +
    "\220\037\224\050\335\100\u0109\121\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\032\215\034\332\035\220\037\224\050\335\100\u010d" +
    "\121\340\001\001\000\002\001\001\000\022\015\057\032" +
    "\215\034\332\035\220\037\224\050\335\100\u010f\121\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\032\215\034\212" +
    "\035\220\037\224\047\u0114\050\217\121\223\001\001\000" +
    "\002\001\001\000\022\015\057\032\215\034\212\035\220" +
    "\037\224\047\u0116\050\217\121\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\122\u011a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\256\023\u011e\024\253\113\254\120\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\041\121\042\u0121\043\124\044\116\046\130\050\126" +
    "\121\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u0124\001\001\000\022\015\057\041\121\043\u0127" +
    "\044\116\046\130\050\u0128\101\u012a\121\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\041\121" +
    "\043\u0127\044\116\046\130\050\u0128\101\u014c\121\u012b\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\u012f" +
    "\106\u0130\117\u012d\001\001\000\022\015\057\041\121\043" +
    "\u0127\044\116\046\130\050\u0128\101\u012c\121\u012b\001\001" +
    "\000\002\001\001\000\016\017\107\024\102\030\u0141\050" +
    "\106\113\104\120\111\001\001\000\004\122\u013c\001\001" +
    "\000\004\122\u0137\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\u0136\001\001\000\002\001\001\000" +
    "\022\015\057\041\121\043\u0127\044\116\046\130\050\u0128" +
    "\101\u0138\121\u012b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u013b\001\001\000\002\001\001\000\022" +
    "\015\057\041\121\043\u0127\044\116\046\130\050\u0128\101" +
    "\u013d\121\u012b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u0140\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u0143\001\001\000\022\015\057\041\121" +
    "\043\u0127\044\116\046\130\050\u0128\101\u0144\121\u012b\001" +
    "\001\000\010\045\u0146\106\u0147\117\u012d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\041\121\043\u0127\044\116\046\130\050\u0128\101\u0149" +
    "\121\u012b\001\001\000\002\001\001\000\022\015\057\041" +
    "\121\043\u0127\044\116\046\130\050\u0128\101\u014b\121\u012b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\256\023\u0150\024\253" +
    "\113\254\120\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\057\041\121\043\u0127\044\116\046\130" +
    "\050\u0128\101\u0153\121\u012b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\041\121" +
    "\043\u0127\044\116\046\130\050\u0128\101\u0157\121\u012b\001" +
    "\001\000\002\001\001\000\022\015\057\041\121\043\u0127" +
    "\044\116\046\130\050\u0128\101\u0159\121\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\041\121" +
    "\042\u015c\043\124\044\116\046\130\050\126\121\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0162\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u0168\120\u0169\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u016e\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u0168\020\u016b\120\u016c\001\001\000\006\017" +
    "\u0168\120\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\u0168\120\u016f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\u0177\024\u0174\050\u0176\113\u0175\120\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\u017f\024\u017c\050\u017e\113\u017d\120\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\u0184" +
    "\024\u0182\113\u0183\120\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\u018a\024\u0187\050\u0189\113\u0188\120\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\u0190\024\u018d\050" +
    "\u018f\113\u018e\120\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0193\001\001\000\006\017\u0168\120\u0194" +
    "\001\001\000\002\001\001\000\010\017\u0168\020\u0196\120" +
    "\u0197\001\001\000\006\017\u0168\120\u0198\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\141\051\140\113\142\115\u019d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\015\057\022\u01a3\025\067\026\053\032\060\041\056\050" +
    "\063\114\066\121\072\001\001\000\002\001\001\000\024" +
    "\015\057\022\u01a5\025\067\026\053\032\060\041\056\050" +
    "\063\114\066\121\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\113\u01a8\001\001\000\002\001\001\000" +
    "\004\113\u01aa\001\001\000\002\001\001\000\004\113\u01ac" +
    "\001\001\000\004\122\u01ad\001\001\000\022\015\057\032" +
    "\215\033\u01b0\034\u01ae\035\220\037\224\050\u01b2\121\u01b4" +
    "\001\001\000\022\015\057\032\215\033\u01c7\034\u01ae\035" +
    "\220\037\224\050\u01b2\121\u01b4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\032\215\033\u01b5\034\u01ae" +
    "\035\220\037\224\050\u01b2\121\u01b4\001\001\000\002\001" +
    "\001\000\022\015\057\032\215\033\u01b7\034\u01ae\035\220" +
    "\037\224\050\u01b2\121\u01b4\001\001\000\002\001\001\000" +
    "\022\015\057\032\215\033\u01b9\034\u01ae\035\220\037\224" +
    "\050\u01b2\121\u01b4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\256\023\u01bd\024\253" +
    "\113\254\120\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\057\032\215\033\u01c0\034\u01ae\035\220" +
    "\037\224\050\u01b2\121\u01b4\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\u01c3\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\057\032\215\033\u01c6\034" +
    "\u01ae\035\220\037\224\050\u01b2\121\u01b4\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\057\022\u01c9\025" +
    "\067\026\053\032\060\041\056\050\063\114\066\121\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u01d4\001\001\000\016\016\u01d0\017\u01d1\024\u01cd\050\u01cf" +
    "\113\u01ce\120\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\u01d7\017\u01d8\024\u01cd\050\u01d6\113\u01ce\120\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\256\023\u01dd\024\253\113\254\120\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\057" +
    "\022\u01e0\025\067\026\053\032\060\041\056\050\063\114" +
    "\066\121\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u01e6\001\001\000\022\015\057\025\u01ec\026\053" +
    "\032\060\041\056\050\u01ea\077\u01e9\121\u01ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\u01f7\107\u01f6" +
    "\117\u01f5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\025\u01ec\026\053\032\060" +
    "\041\056\050\u01ea\077\u01ee\121\u01ed\001\001\000\002\001" +
    "\001\000\022\015\057\025\u01ec\026\053\032\060\041\056" +
    "\050\u01ea\077\u01f0\121\u01ed\001\001\000\002\001\001\000" +
    "\022\015\057\025\u01ec\026\053\032\060\041\056\050\u01ea" +
    "\077\u01f2\121\u01ed\001\001\000\002\001\001\000\022\015" +
    "\057\025\u01ec\026\053\032\060\041\056\050\u01ea\077\u01f4" +
    "\121\u01ed\001\001\000\002\001\001\000\016\017\107\024" +
    "\102\030\u0209\050\106\113\104\120\111\001\001\000\002" +
    "\001\001\000\004\122\u0201\001\001\000\004\122\u01fc\001" +
    "\001\000\002\001\001\000\004\122\u01fb\001\001\000\002" +
    "\001\001\000\022\015\057\025\u01ec\026\053\032\060\041" +
    "\056\050\u01ea\077\u01fd\121\u01ed\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\122\u0200\001\001\000\002\001" +
    "\001\000\022\015\057\025\u01ec\026\053\032\060\041\056" +
    "\050\u01ea\077\u0202\121\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\u0205\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\122\u0208\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\122\u020b\001\001\000\022" +
    "\015\057\025\u01ec\026\053\032\060\041\056\050\u01ea\077" +
    "\u020c\121\u01ed\001\001\000\010\027\u020e\107\u020d\117\u01f5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\256" +
    "\023\u0213\024\253\113\254\120\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\025\u01ec\026\053" +
    "\032\060\041\056\050\u01ea\077\u0216\121\u01ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\025\u01ec" +
    "\026\053\032\060\041\056\050\u01ea\077\u0219\121\u01ed\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\057" +
    "\022\u021c\025\067\026\053\032\060\041\056\050\063\114" +
    "\066\121\072\001\001\000\002\001\001\000\024\015\057" +
    "\022\u021e\025\067\026\053\032\060\041\056\050\063\114" +
    "\066\121\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0223\001" +
    "\001\000\002\001\001\000\004\011\u0225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\057\022\u022a\025\067\026\053\032\060" +
    "\041\056\050\063\114\066\121\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\057\022\u022f\025\067\026\053\032\060\041" +
    "\056\050\063\114\066\121\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\021\010\020\021\u0237\053\023\001\001\000\002\001" +
    "\001\000\012\007\021\010\020\021\u0239\053\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u023d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0240\001\001\000\004\122\u0241\001\001\000" +
    "\022\013\u0243\015\057\050\u0247\054\u024c\055\u024b\057\u0245" +
    "\066\u024a\121\u024d\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\107\024\102\030\u0315\050\106\113\104" +
    "\120\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\u02e4\015\057\050" +
    "\u0247\054\u024c\055\u024b\057\u0245\066\u024a\121\u024d\001\001" +
    "\000\022\013\u02e3\015\057\050\u0247\054\u024c\055\u024b\057" +
    "\u0245\066\u024a\121\u024d\001\001\000\004\116\u024f\001\001" +
    "\000\016\017\107\024\102\030\u0250\050\106\113\104\120" +
    "\111\001\001\000\004\122\u0251\001\001\000\022\015\057" +
    "\050\u0259\057\u0257\061\u025c\062\u0252\064\u0254\067\u0256\121" +
    "\u025b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\107\024\102\030\u02a5\050\106\113" +
    "\104\120\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\050\u0259\057\u0257\061\u025c\062\u0252\064\u0254" +
    "\067\u0281\121\u025b\001\001\000\022\015\057\050\u0259\057" +
    "\u0257\061\u025c\062\u0252\064\u0254\067\u0280\121\u025b\001\001" +
    "\000\004\116\u025e\001\001\000\016\017\107\024\102\030" +
    "\u025f\050\106\113\104\120\111\001\001\000\004\122\u0260" +
    "\001\001\000\022\015\057\041\121\043\u0264\044\116\046" +
    "\130\050\u0265\065\u0262\121\u0267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\057\041" +
    "\121\042\u026d\043\124\044\116\046\130\050\126\121\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\041\121\042\u0268\043\124\044\116\046\130\050\126" +
    "\121\131\001\001\000\002\001\001\000\022\015\057\041" +
    "\121\043\u0264\044\116\046\130\050\u0265\065\u026a\121\u0267" +
    "\001\001\000\002\001\001\000\022\015\057\041\121\042" +
    "\u026c\043\124\044\116\046\130\050\126\121\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\256\023\u0271\024\253\113\254" +
    "\120\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\041\121\042\u0274\043\124\044\116\046\130" +
    "\050\126\121\131\001\001\000\002\001\001\000\004\122" +
    "\u0276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\057\041\121\042" +
    "\u027b\043\124\044\116\046\130\050\126\121\131\001\001" +
    "\000\002\001\001\000\022\015\057\041\121\042\u027d\043" +
    "\124\044\116\046\130\050\126\121\131\001\001\000\002" +
    "\001\001\000\022\015\057\041\121\042\u027f\043\124\044" +
    "\116\046\130\050\126\121\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\057\050" +
    "\u0259\057\u0257\061\u025c\062\u0252\064\u0254\067\u0283\121\u025b" +
    "\001\001\000\002\001\001\000\022\015\057\050\u0288\054" +
    "\u028a\055\u024b\057\u0245\066\u024a\102\u0285\121\u028b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\050\u0288" +
    "\054\u028a\055\u024b\057\u0245\066\u024a\102\u028d\121\u028b\001" +
    "\001\000\022\015\057\050\u0288\054\u028a\055\u024b\057\u0245" +
    "\066\u024a\102\u028c\121\u028b\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\050\u0288\054\u028a\055\u024b" +
    "\057\u0245\066\u024a\102\u028f\121\u028b\001\001\000\002\001" +
    "\001\000\022\015\057\050\u0288\054\u028a\055\u024b\057\u0245" +
    "\066\u024a\102\u0291\121\u028b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\256\023\u0295" +
    "\024\253\113\254\120\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\050\u0288\054\u028a\055\u024b" +
    "\057\u0245\066\u024a\102\u0298\121\u028b\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\050\u0288\054\u028a" +
    "\055\u024b\057\u0245\066\u024a\102\u029b\121\u028b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\256\023\u029f\024\253\113\254\120\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\050\u0259" +
    "\057\u0257\061\u025c\062\u0252\064\u0254\067\u02a2\121\u025b\001" +
    "\001\000\002\001\001\000\004\122\u02a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\u02a7\001\001\000" +
    "\022\015\057\050\u02aa\057\u0257\061\u02ae\062\u0252\064\u0254" +
    "\103\u02ac\121\u02ad\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\063\u02b3" +
    "\112\u02b4\117\u02b1\001\001\000\022\015\057\050\u02aa\057" +
    "\u0257\061\u02ae\062\u0252\064\u0254\103\u02b0\121\u02ad\001\001" +
    "\000\022\015\057\050\u02aa\057\u0257\061\u02ae\062\u0252\064" +
    "\u0254\103\u02af\121\u02ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\107\024\102\030\u02c5\050\106\113" +
    "\104\120\111\001\001\000\004\122\u02c0\001\001\000\004" +
    "\122\u02bb\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u02b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u02ba\001\001\000\002\001\001\000\022\015" +
    "\057\050\u02aa\057\u0257\061\u02ae\062\u0252\064\u0254\103\u02bc" +
    "\121\u02ad\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u02bf\001\001\000\002\001\001\000\022\015\057" +
    "\050\u02aa\057\u0257\061\u02ae\062\u0252\064\u0254\103\u02c1\121" +
    "\u02ad\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\122\u02c4\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u02c7\001\001\000\022\015\057\050\u02aa\057\u0257" +
    "\061\u02ae\062\u0252\064\u0254\103\u02c8\121\u02ad\001\001\000" +
    "\010\063\u02ca\112\u02cb\117\u02b1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\057\050" +
    "\u02aa\057\u0257\061\u02ae\062\u0252\064\u0254\103\u02cd\121\u02ad" +
    "\001\001\000\002\001\001\000\022\015\057\050\u0288\054" +
    "\u028a\055\u024b\057\u0245\066\u024a\102\u02cf\121\u028b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\256\023\u02d3\024\253\113\254\120\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\057\050" +
    "\u02aa\057\u0257\061\u02ae\062\u0252\064\u0254\103\u02d6\121\u02ad" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\057\050\u02aa\057\u0257\061\u02ae\062\u0252" +
    "\064\u0254\103\u02da\121\u02ad\001\001\000\002\001\001\000" +
    "\022\015\057\050\u02aa\057\u0257\061\u02ae\062\u0252\064\u0254" +
    "\103\u02dc\121\u02ad\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\050\u0288\054\u028a" +
    "\055\u024b\057\u0245\066\u024a\102\u02e0\121\u028b\001\001\000" +
    "\002\001\001\000\022\015\057\050\u0288\054\u028a\055\u024b" +
    "\057\u0245\066\u024a\102\u02e2\121\u028b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\u02e6" +
    "\015\057\050\u0247\054\u024c\055\u024b\057\u0245\066\u024a\121" +
    "\u024d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\u02e9\001\001\000\002\001\001\000\004\113\u02eb\001" +
    "\001\000\002\001\001\000\004\113\u02ed\001\001\000\004" +
    "\122\u02ee\001\001\000\022\015\057\050\u02f1\057\u0257\060" +
    "\u02f2\061\u02f4\062\u0252\064\u0254\121\u02f5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\050\u02f1\057\u0257" +
    "\060\u02f7\061\u02f4\062\u0252\064\u0254\121\u02f5\001\001\000" +
    "\022\015\057\050\u02f1\057\u0257\060\u02f6\061\u02f4\062\u0252" +
    "\064\u0254\121\u02f5\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\057\050\u02f1\057\u0257\060\u02f9\061\u02f4" +
    "\062\u0252\064\u0254\121\u02f5\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\u02fc\001\001\000\002\001\001" +
    "\000\022\015\057\050\u02f1\057\u0257\060\u02fe\061\u02f4\062" +
    "\u0252\064\u0254\121\u02f5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\256\023\u0302\024" +
    "\253\113\254\120\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\057\050\u02f1\057\u0257\060\u0305\061" +
    "\u02f4\062\u0252\064\u0254\121\u02f5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\057\050" +
    "\u02f1\057\u0257\060\u0309\061\u02f4\062\u0252\064\u0254\121\u02f5" +
    "\001\001\000\002\001\001\000\022\015\057\050\u02f1\057" +
    "\u0257\060\u030b\061\u02f4\062\u0252\064\u0254\121\u02f5\001\001" +
    "\000\002\001\001\000\022\013\u030d\015\057\050\u0247\054" +
    "\u024c\055\u024b\057\u0245\066\u024a\121\u024d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\256\023\u0311\024\253\113\254\120\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\u0314\015\057\050" +
    "\u0247\054\u024c\055\u024b\057\u0245\066\u024a\121\u024d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\122\u0317\001" +
    "\001\000\022\015\057\050\u0288\054\u028a\055\u024b\057\u0245" +
    "\066\u024a\102\u0318\121\u028b\001\001\000\010\056\u031c\111" +
    "\u031b\117\u0319\001\001\000\016\017\107\024\102\030\u032d" +
    "\050\106\113\104\120\111\001\001\000\004\122\u0328\001" +
    "\001\000\002\001\001\000\004\122\u0320\001\001\000\002" +
    "\001\001\000\004\122\u031f\001\001\000\002\001\001\000" +
    "\022\015\057\050\u0288\054\u028a\055\u024b\057\u0245\066\u024a" +
    "\102\u0321\121\u028b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u0324\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\u0327\001\001\000\002\001\001\000" +
    "\022\015\057\050\u0288\054\u028a\055\u024b\057\u0245\066\u024a" +
    "\102\u0329\121\u028b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u032c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\u032f\001\001\000\022\015\057\050" +
    "\u0288\054\u028a\055\u024b\057\u0245\066\u024a\102\u0330\121\u028b" +
    "\001\001\000\010\056\u0333\111\u0332\117\u0319\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\u0338\015\057\050\u0247\054\u024c\055\u024b\057\u0245\066\u024a" +
    "\121\u024d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u033b\001\001\000\004\052\u033c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0340\001\001\000\002\001\001\000\004\052\u0342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\021\010\020\021\u0346\053\023\001\001\000\002" +
    "\001\001\000\012\007\021\010\020\021\u0348\053\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u0350\001\001\000\002\001\001" +
    "\000\004\003\u0352\001\001\000\002\001\001\000\004\005" +
    "\u0354\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // INFOR_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // INFOR_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // INFOR_WHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // INFOR_WHILE_FUNCION ::= exit function_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // INFOR_WHILE_FUNCION ::= exit for_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // INFOR_WHILE_FUNCION ::= exit do_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INFOR_WHILE_FUNCION ::= DECLARACION_GENERAL INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INFOR_WHILE_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // INIF_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // INIF_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // INIF_WHILE_FUNCION ::= exit for_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // INIF_WHILE_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // INIF_WHILE_FUNCION ::= DECLARACION_GENERAL INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INIF_WHILE_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // INWHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // INWHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // INWHILE_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // INWHILE_FUNCION ::= exit do_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INWHILE_FUNCION ::= DECLARACION_GENERAL INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // INWHILE_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // INWHILE_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // INWHILE_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // INWHILE_FOR_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // INWHILE_FOR_FUNCION ::= exit function_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // INWHILE_FOR_FUNCION ::= exit for_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // INWHILE_FOR_FUNCION ::= exit do_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INWHILE_FOR_FUNCION ::= DECLARACION_GENERAL INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INWHILE_FOR_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // INIF_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // INIF_FOR_FUNCION ::= exit for_ findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // INIF_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // INIF_FOR_FUNCION ::= exit function_ findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INIF_FOR_FUNCION ::= DECLARACION_GENERAL INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INIF_FOR_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // INFOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // INFOR_FUNCION ::= exit for_ findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INFOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INFOR_FUNCION ::= exit function_ findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INFOR_FUNCION ::= DECLARACION_GENERAL INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INFOR_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INIF_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INIF_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INIF_FUNCION ::= DECLARACION_GENERAL INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INIF_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION else_ FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INFUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INFUNCION ::= exit function_ findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // INFUNCION ::= LLAMAR_FUNCION findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // INFUNCION ::= DECLARACION_GENERAL INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // INFUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INFUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // STRUCT_ ::= Public_ struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INFOR_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INFOR_WHILE ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INFOR_WHILE ::= exit do_ findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INFOR_WHILE ::= exit for_ findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INFOR_WHILE ::= DECLARACION_GENERAL INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INFOR_WHILE ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE else_ FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // INIF_WHILE ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // INIF_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // INIF_WHILE ::= exit sub findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INIF_WHILE ::= exit do_ findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INIF_WHILE ::= LLAMAR_FUNCION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INIF_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INIF_WHILE ::= DECLARACION_GENERAL INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INIF_WHILE ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INWHILE_MAIN ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INWHILE_MAIN ::= exit do_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INWHILE_MAIN ::= DECLARACION_GENERAL INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INWHILE_MAIN ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_MAIN loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INWHILE_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INWHILE_FOR ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INWHILE_FOR ::= exit for_ findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INWHILE_FOR ::= exit do_ findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INWHILE_FOR ::= DECLARACION_GENERAL INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // INWHILE_FOR ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR else_ FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // INIF_FOR ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // INIF_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // INIF_FOR ::= exit sub findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INIF_FOR ::= exit for_ findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INIF_FOR ::= LLAMAR_FUNCION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INIF_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INIF_FOR ::= DECLARACION_GENERAL INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INIF_FOR ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INFOR_MAIN ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INFOR_MAIN ::= exit for_ findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INFOR_MAIN ::= DECLARACION_GENERAL INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INFOR_MAIN ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_MAIN next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INIF ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INIF ::= exit sub findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INIF ::= LLAMAR_FUNCION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INIF ::= DECLARACION_GENERAL INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INIF ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INIF ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF else_ FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FIN_CON_COMENT ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FIN_CON_COMENT ::= findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION_GENERAL ::= DECLARACION comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_GENERAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION_GENERAL ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_GENERAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= dim identificador as TYPE_ igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= dim identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= identificador punto identificador igual texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= identificador punto identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= identificador punto identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= identificador punto identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= identificador igual texto_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= dim identificador igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= dim identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_AR ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_AR ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADOR_ARITMETICO ::= mod_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADOR_ARITMETICO ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERADOR_ARITMETICO ::= div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERADOR_ARITMETICO ::= mult 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERADOR_ARITMETICO ::= resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERADOR_ARITMETICO ::= suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION_ARITMETICA ::= OPERACION_AR parentesisA numero OPERADOR_ARITMETICO OPERACION_AR parentesisC OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION_ARITMETICA ::= OPERACION_AR parentesisA numero OPERADOR_ARITMETICO OPERACION_AR parentesisC OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION_ARITMETICA ::= OPERACION_AR parentesisA numero OPERADOR_ARITMETICO OPERACION_AR parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION_ARITMETICA ::= parentesisA numero OPERADOR_ARITMETICO OPERACION_AR parentesisC OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION_ARITMETICA ::= parentesisA numero OPERADOR_ARITMETICO OPERACION_AR parentesisC OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_ARITMETICA ::= parentesisA numero OPERADOR_ARITMETICO OPERACION_AR parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION_ARITMETICA ::= numero OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLAMAR_SUB ::= identificador PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INMAIN ::= exit sub findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INMAIN ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INMAIN ::= LLAMAR_SUB findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INMAIN ::= LLAMAR_SUB findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INMAIN ::= LLAMAR_FUNCION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INMAIN ::= DECLARACION_GENERAL INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INMAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INMAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INMAIN ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN end_ sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MAIN ::= Public_ sub main_ parentesisA parentesisC comentario findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN end_ sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEXT_MODULE ::= comentario findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEXT_MODULE ::= FUNCION_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NEXT_MODULE ::= STRUCT_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODULE ::= Public_ Module identificador comentario findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

