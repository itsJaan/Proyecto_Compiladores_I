
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 19 05:47:49 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 19 05:47:49 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0243\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\003\005" +
    "\000\002\003\006\000\002\003\005\000\002\005\003\000" +
    "\002\005\005\000\002\005\003\000\002\005\005\000\002" +
    "\005\005\000\002\004\011\000\002\004\012\000\002\021" +
    "\003\000\002\021\004\000\002\021\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\010\014\000\002\010\015\000\002" +
    "\010\015\000\002\010\016\000\002\121\003\000\002\121" +
    "\004\000\002\125\004\000\002\125\005\000\002\125\003" +
    "\000\002\022\011\000\002\022\003\000\002\022\003\000" +
    "\002\022\004\000\002\022\005\000\002\022\004\000\002" +
    "\022\012\000\002\022\004\000\002\022\004\000\002\022" +
    "\005\000\002\022\003\000\002\022\004\000\002\022\005" +
    "\000\002\022\006\000\002\022\010\000\002\022\011\000" +
    "\002\022\010\000\002\022\011\000\002\022\005\000\002" +
    "\114\004\000\002\122\004\000\002\122\005\000\002\122" +
    "\007\000\002\122\006\000\002\113\003\000\002\113\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\007\000\002\123\003" +
    "\000\002\123\003\000\002\123\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\006\000\002\017\006\000\002" +
    "\017\007\000\002\017\007\000\002\017\010\000\002\017" +
    "\006\000\002\017\006\000\002\017\007\000\002\017\010" +
    "\000\002\017\006\000\002\017\007\000\002\017\010\000" +
    "\002\017\007\000\002\017\010\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\017\007\000\002\017" +
    "\007\000\002\017\010\000\002\017\007\000\002\017\010" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\007\000\002\017\010\000\002\017\010\000\002" +
    "\017\007\000\002\017\004\000\002\017\005\000\002\017" +
    "\005\000\002\017\006\000\002\017\006\000\002\017\007" +
    "\000\002\017\010\000\002\017\011\000\002\017\010\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\120" +
    "\003\000\002\120\003\000\002\015\007\000\002\015\011" +
    "\000\002\015\007\000\002\015\007\000\002\015\011\000" +
    "\002\015\011\000\002\015\007\000\002\015\006\000\002" +
    "\015\006\000\002\015\006\000\002\015\005\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\010" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\007\000\002\015\011\000\002\015\006\000\002\015" +
    "\010\000\002\015\007\000\002\015\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\124\007\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\116\003\000\002\116\003\000" +
    "\002\117\004\000\002\117\003\000\002\026\012\000\002" +
    "\026\015\000\002\026\015\000\002\026\013\000\002\077" +
    "\011\000\002\077\003\000\002\077\003\000\002\077\004" +
    "\000\002\077\005\000\002\077\004\000\002\077\012\000" +
    "\002\077\004\000\002\077\005\000\002\077\005\000\002" +
    "\077\003\000\002\077\004\000\002\077\006\000\002\077" +
    "\005\000\002\077\010\000\002\077\011\000\002\077\010" +
    "\000\002\077\011\000\002\027\010\000\002\027\010\000" +
    "\002\107\010\000\002\107\007\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\031\004\000\002\031\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\017\000\002\033" +
    "\011\000\002\033\003\000\002\033\003\000\002\033\012" +
    "\000\002\033\004\000\002\033\004\000\002\033\005\000" +
    "\002\033\004\000\002\033\004\000\002\033\005\000\002" +
    "\033\003\000\002\033\004\000\002\033\006\000\002\033" +
    "\005\000\002\033\010\000\002\033\011\000\002\033\010" +
    "\000\002\033\011\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\100\011\000\002\100\003\000\002" +
    "\100\003\000\002\100\012\000\002\100\004\000\002\100" +
    "\004\000\002\100\005\000\002\100\004\000\002\100\004" +
    "\000\002\100\005\000\002\100\003\000\002\100\004\000" +
    "\002\100\006\000\002\100\006\000\002\100\005\000\002" +
    "\100\005\000\002\100\010\000\002\100\011\000\002\100" +
    "\010\000\002\100\011\000\002\035\012\000\002\035\015" +
    "\000\002\035\015\000\002\035\013\000\002\036\010\000" +
    "\002\036\010\000\002\110\007\000\002\110\010\000\002" +
    "\037\011\000\002\040\011\000\002\040\003\000\002\040" +
    "\003\000\002\040\004\000\002\040\005\000\002\040\012" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\005\000\002\040\003\000\002\040\004\000\002" +
    "\040\006\000\002\040\006\000\002\040\005\000\002\040" +
    "\005\000\002\040\010\000\002\040\011\000\002\040\010" +
    "\000\002\040\011\000\002\041\011\000\002\042\011\000" +
    "\002\042\003\000\002\042\003\000\002\042\004\000\002" +
    "\042\005\000\002\042\012\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\005\000\002\042\003" +
    "\000\002\042\004\000\002\042\006\000\002\042\005\000" +
    "\002\042\010\000\002\042\011\000\002\042\010\000\002" +
    "\042\011\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\101\011\000\002\101\003\000\002\101\003" +
    "\000\002\101\004\000\002\101\005\000\002\101\012\000" +
    "\002\101\004\000\002\101\004\000\002\101\004\000\002" +
    "\101\005\000\002\101\003\000\002\101\004\000\002\101" +
    "\006\000\002\101\006\000\002\101\005\000\002\101\005" +
    "\000\002\101\010\000\002\101\011\000\002\101\010\000" +
    "\002\101\011\000\002\044\012\000\002\044\015\000\002" +
    "\044\015\000\002\044\013\000\002\045\010\000\002\045" +
    "\010\000\002\106\007\000\002\106\010\000\002\046\017" +
    "\000\002\047\011\000\002\047\003\000\002\047\004\000" +
    "\002\047\005\000\002\047\003\000\002\047\012\000\002" +
    "\047\004\000\002\047\004\000\002\047\004\000\002\047" +
    "\005\000\002\047\003\000\002\047\004\000\002\047\006" +
    "\000\002\047\006\000\002\047\005\000\002\047\005\000" +
    "\002\047\010\000\002\047\011\000\002\047\010\000\002" +
    "\047\011\000\002\050\005\000\002\050\005\000\002\051" +
    "\004\000\002\051\005\000\002\051\007\000\002\051\006" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\052\007\000\002\052\010\000\002\007\011\000\002" +
    "\053\016\000\002\011\005\000\002\011\007\000\002\011" +
    "\010\000\002\011\006\000\002\013\011\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\013\005\000" +
    "\002\013\004\000\002\013\012\000\002\013\004\000\002" +
    "\013\004\000\002\013\005\000\002\013\003\000\002\013" +
    "\004\000\002\013\006\000\002\013\005\000\002\013\010" +
    "\000\002\013\011\000\002\013\010\000\002\013\011\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\055\012\000\002\055\015\000\002\055\015\000\002\055" +
    "\013\000\002\102\011\000\002\102\003\000\002\102\004" +
    "\000\002\102\005\000\002\102\003\000\002\102\012\000" +
    "\002\102\004\000\002\102\004\000\002\102\004\000\002" +
    "\102\005\000\002\102\003\000\002\102\004\000\002\102" +
    "\006\000\002\102\005\000\002\102\010\000\002\102\011" +
    "\000\002\102\010\000\002\102\011\000\002\056\010\000" +
    "\002\056\010\000\002\111\007\000\002\111\010\000\002" +
    "\057\017\000\002\060\011\000\002\060\003\000\002\060" +
    "\004\000\002\060\005\000\002\060\003\000\002\060\012" +
    "\000\002\060\004\000\002\060\004\000\002\060\004\000" +
    "\002\060\005\000\002\060\003\000\002\060\004\000\002" +
    "\060\006\000\002\060\005\000\002\060\006\000\002\060" +
    "\005\000\002\060\010\000\002\060\011\000\002\060\010" +
    "\000\002\060\011\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\062\012\000\002\062\015\000\002" +
    "\062\015\000\002\062\013\000\002\103\011\000\002\103" +
    "\003\000\002\103\004\000\002\103\005\000\002\103\003" +
    "\000\002\103\012\000\002\103\004\000\002\103\004\000" +
    "\002\103\004\000\002\103\005\000\002\103\003\000\002" +
    "\103\004\000\002\103\006\000\002\103\005\000\002\103" +
    "\006\000\002\103\005\000\002\103\010\000\002\103\011" +
    "\000\002\103\010\000\002\103\011\000\002\063\010\000" +
    "\002\063\010\000\002\112\007\000\002\112\010\000\002" +
    "\064\011\000\002\065\011\000\002\065\003\000\002\065" +
    "\003\000\002\065\004\000\002\065\005\000\002\065\012" +
    "\000\002\065\004\000\002\065\004\000\002\065\004\000" +
    "\002\065\005\000\002\065\003\000\002\065\004\000\002" +
    "\065\006\000\002\065\006\000\002\065\006\000\002\065" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\010" +
    "\000\002\065\011\000\002\065\010\000\002\065\011\000" +
    "\002\066\011\000\002\067\011\000\002\067\003\000\002" +
    "\067\004\000\002\067\005\000\002\067\003\000\002\067" +
    "\012\000\002\067\004\000\002\067\004\000\002\067\004" +
    "\000\002\067\005\000\002\067\003\000\002\067\004\000" +
    "\002\067\006\000\002\067\006\000\002\067\005\000\002" +
    "\067\005\000\002\067\010\000\002\067\011\000\002\067" +
    "\010\000\002\067\011\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\071\012\000\002\071\014\000" +
    "\002\071\016\000\002\071\011\000\002\071\013\000\002" +
    "\104\011\000\002\104\003\000\002\104\004\000\002\104" +
    "\005\000\002\104\003\000\002\104\012\000\002\104\004" +
    "\000\002\104\004\000\002\104\004\000\002\104\005\000" +
    "\002\104\003\000\002\104\004\000\002\104\006\000\002" +
    "\104\006\000\002\104\005\000\002\104\005\000\002\104" +
    "\010\000\002\104\011\000\002\104\010\000\002\104\011" +
    "\000\002\074\010\000\002\074\010\000\002\105\007\000" +
    "\002\105\010\000\002\072\017\000\002\073\011\000\002" +
    "\073\003\000\002\073\003\000\002\073\004\000\002\073" +
    "\005\000\002\073\012\000\002\073\004\000\002\073\004" +
    "\000\002\073\004\000\002\073\005\000\002\073\003\000" +
    "\002\073\004\000\002\073\006\000\002\073\006\000\002" +
    "\073\006\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\010\000\002\073\011\000\002\073\010" +
    "\000\002\073\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u044a\000\010\003\007\004\004\102\005\001\002\000" +
    "\010\003\u0441\017\u0444\051\u0442\001\002\000\004\100\u043f" +
    "\001\002\000\004\002\u043e\001\002\000\004\100\u043c\001" +
    "\002\000\004\006\011\001\002\000\004\007\017\001\002" +
    "\000\006\002\000\102\014\001\002\000\004\002\uffff\001" +
    "\002\000\006\002\uffe2\100\015\001\002\000\006\002\uffe4" +
    "\102\014\001\002\000\004\002\uffe3\001\002\000\004\051" +
    "\020\001\002\000\006\100\022\102\021\001\002\000\004" +
    "\100\u0438\001\002\000\012\003\025\006\024\033\026\102" +
    "\023\001\002\000\004\100\u0436\001\002\000\006\010\041" +
    "\025\u042a\001\002\000\004\100\u0428\001\002\000\004\030" +
    "\u02ed\001\002\000\006\013\ufff2\100\u02eb\001\002\000\010" +
    "\006\034\100\036\102\033\001\002\000\004\013\u02e6\001" +
    "\002\000\010\006\034\100\036\102\033\001\002\000\004" +
    "\100\u02e5\001\002\000\004\010\041\001\002\000\004\013" +
    "\ufff0\001\002\000\046\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\020\uffe6\023\uffe6\027\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\051\uffe6\100\uffe6\102\uffe6" +
    "\107\uffe6\001\002\000\012\003\025\006\024\033\026\102" +
    "\023\001\002\000\004\013\uffee\001\002\000\006\051\043" +
    "\103\042\001\002\000\004\073\u02d8\001\002\000\004\073" +
    "\044\001\002\000\006\051\046\106\045\001\002\000\004" +
    "\051\u02d3\001\002\000\004\022\u02cf\001\002\000\004\074" +
    "\050\001\002\000\006\100\052\102\051\001\002\000\004" +
    "\100\u02ca\001\002\000\024\003\063\005\055\011\064\012" +
    "\062\020\061\023\073\035\054\051\072\102\066\001\002" +
    "\000\034\003\uff61\005\uff61\011\uff61\012\uff61\013\uff61\020" +
    "\uff61\023\uff61\027\uff61\035\uff61\051\uff61\100\uff61\102\uff61" +
    "\107\uff61\001\002\000\004\010\u02c7\001\002\000\016\042" +
    "\102\043\103\051\111\060\077\065\105\073\100\001\002" +
    "\000\034\003\uff5f\005\uff5f\011\uff5f\012\uff5f\013\uff5f\020" +
    "\uff5f\023\uff5f\027\uff5f\035\uff5f\051\uff5f\100\uff5f\102\uff5f" +
    "\107\uff5f\001\002\000\026\003\063\005\055\011\064\012" +
    "\062\013\uffe0\020\061\023\073\035\054\051\072\102\066" +
    "\001\002\000\034\003\uff60\005\uff60\011\uff60\012\uff60\013" +
    "\uff60\020\uff60\023\uff60\027\uff60\035\uff60\051\uff60\100\uff60" +
    "\102\uff60\107\uff60\001\002\000\004\070\u0277\001\002\000" +
    "\004\051\u0256\001\002\000\004\100\u0254\001\002\000\004" +
    "\051\u0228\001\002\000\006\100\036\102\033\001\002\000" +
    "\004\100\u0224\001\002\000\026\003\063\005\055\011\064" +
    "\012\062\013\uffd7\020\061\023\073\035\054\051\072\102" +
    "\066\001\002\000\026\003\063\005\055\011\064\012\062" +
    "\013\uffdf\020\061\023\073\035\054\051\072\102\066\001" +
    "\002\000\004\013\u021f\001\002\000\022\042\102\043\103" +
    "\051\235\054\u01ef\060\141\065\105\070\u01ec\073\u01eb\001" +
    "\002\000\006\024\076\036\075\001\002\000\016\042\102" +
    "\043\103\051\111\060\077\065\105\073\100\001\002\000" +
    "\016\042\uff5e\043\uff5e\051\uff5e\060\uff5e\065\uff5e\073\uff5e" +
    "\001\002\000\016\042\uff5d\043\uff5d\051\uff5d\060\uff5d\065" +
    "\uff5d\073\uff5d\001\002\000\010\051\307\065\142\073\311" +
    "\001\002\000\012\051\257\060\u01da\065\105\073\100\001" +
    "\002\000\010\054\u01b8\055\u01ba\056\u01b9\001\002\000\024" +
    "\026\uff63\054\uff63\055\uff63\056\uff63\074\uff63\100\uff63\101" +
    "\uff63\102\uff63\104\uff63\001\002\000\024\026\uff62\054\uff62" +
    "\055\uff62\056\uff62\074\uff62\100\uff62\101\uff62\102\uff62\104" +
    "\uff62\001\002\000\026\054\u01b8\055\u01ba\056\u01b9\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\073\uffbb\110\uffbb\001" +
    "\002\000\100\003\uffc9\005\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\020\uffc9\023\uffc9\026\uffc9\027\uffc9\032\uffc9\034\uffc9\035" +
    "\uffc9\037\uffc9\047\uffc9\051\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\073\uffc9\074" +
    "\uffc9\100\uffc9\101\uffc9\102\uffc9\104\uffc9\107\uffc9\110\uffc9" +
    "\001\002\000\026\054\u01b8\055\u01ba\056\u01b9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9\110\uffb9\001\002" +
    "\000\012\054\u01b8\055\u01ba\056\u01b9\073\255\001\002\000" +
    "\020\057\267\060\275\061\270\062\264\063\263\073\277" +
    "\110\271\001\002\000\026\054\u01b8\055\u01ba\056\u01b9\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\073\226\110\uffba" +
    "\001\002\000\006\100\036\102\033\001\002\000\022\005" +
    "\116\011\124\012\062\020\121\023\073\035\115\051\072" +
    "\102\126\001\002\000\032\005\ufec9\011\ufec9\012\ufec9\013" +
    "\ufec9\020\ufec9\023\ufec9\027\ufec9\034\ufec9\035\ufec9\051\ufec9" +
    "\102\ufec9\107\ufec9\001\002\000\004\023\u01b5\001\002\000" +
    "\016\042\102\043\103\051\111\060\077\065\105\073\100" +
    "\001\002\000\024\005\116\011\124\012\062\020\121\023" +
    "\073\034\ufeda\035\115\051\072\102\126\001\002\000\032" +
    "\005\ufec7\011\ufec7\012\ufec7\013\ufec7\020\ufec7\023\ufec7\027" +
    "\ufec7\034\ufec7\035\ufec7\051\ufec7\102\ufec7\107\ufec7\001\002" +
    "\000\004\070\u0163\001\002\000\004\034\u0161\001\002\000" +
    "\024\005\116\011\124\012\062\020\121\023\073\034\ufed9" +
    "\035\115\051\072\102\126\001\002\000\004\051\136\001" +
    "\002\000\006\100\036\102\033\001\002\000\004\100\132" +
    "\001\002\000\024\005\116\011\124\012\062\020\121\023" +
    "\073\034\ufed1\035\115\051\072\102\126\001\002\000\032" +
    "\005\ufec8\011\ufec8\012\ufec8\013\ufec8\020\ufec8\023\ufec8\027" +
    "\ufec8\034\ufec8\035\ufec8\051\ufec8\102\ufec8\107\ufec8\001\002" +
    "\000\004\034\ufed0\001\002\000\024\005\116\011\124\012" +
    "\062\020\121\023\073\034\ufed8\035\115\051\072\102\126" +
    "\001\002\000\004\034\ufed7\001\002\000\024\005\116\011" +
    "\124\012\062\020\121\023\073\034\ufed3\035\115\051\072" +
    "\102\126\001\002\000\004\034\ufed2\001\002\000\004\054" +
    "\137\001\002\000\006\060\141\065\105\001\002\000\004" +
    "\037\143\001\002\000\004\065\142\001\002\000\100\003" +
    "\uffc8\005\uffc8\011\uffc8\012\uffc8\013\uffc8\020\uffc8\023\uffc8" +
    "\026\uffc8\027\uffc8\032\uffc8\034\uffc8\035\uffc8\037\uffc8\047" +
    "\uffc8\051\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\073\uffc8\074\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\104\uffc8\107\uffc8\110\uffc8\001\002\000\006" +
    "\060\141\065\105\001\002\000\004\047\145\001\002\000" +
    "\006\060\141\065\105\001\002\000\006\100\036\102\033" +
    "\001\002\000\022\005\152\011\064\012\062\020\155\023" +
    "\164\035\151\051\072\102\157\001\002\000\024\005\152" +
    "\011\064\012\062\020\155\023\164\032\ufea5\035\151\051" +
    "\072\102\157\001\002\000\006\011\u015a\023\u0159\001\002" +
    "\000\016\042\102\043\103\051\111\060\077\065\105\073" +
    "\100\001\002\000\024\005\152\011\064\012\062\020\155" +
    "\023\164\032\ufea8\035\151\051\072\102\157\001\002\000" +
    "\032\005\uff0f\011\uff0f\012\uff0f\013\uff0f\020\uff0f\023\uff0f" +
    "\027\uff0f\032\uff0f\035\uff0f\051\uff0f\102\uff0f\107\uff0f\001" +
    "\002\000\004\070\u0105\001\002\000\006\100\036\102\033" +
    "\001\002\000\004\100\u0101\001\002\000\032\005\uff10\011" +
    "\uff10\012\uff10\013\uff10\020\uff10\023\uff10\027\uff10\032\uff10" +
    "\035\uff10\051\uff10\102\uff10\107\uff10\001\002\000\024\005" +
    "\152\011\064\012\062\020\155\023\164\032\ufe9f\035\151" +
    "\051\072\102\157\001\002\000\004\032\375\001\002\000" +
    "\032\005\uff0e\011\uff0e\012\uff0e\013\uff0e\020\uff0e\023\uff0e" +
    "\027\uff0e\032\uff0e\035\uff0e\051\uff0e\102\uff0e\107\uff0e\001" +
    "\002\000\006\024\076\036\075\001\002\000\016\042\102" +
    "\043\103\051\111\060\077\065\105\073\100\001\002\000" +
    "\006\100\036\102\033\001\002\000\022\005\116\011\124" +
    "\012\062\020\172\023\073\035\170\051\072\102\176\001" +
    "\002\000\006\011\370\023\367\001\002\000\024\005\116" +
    "\011\124\012\062\020\172\023\073\034\ufeef\035\170\051" +
    "\072\102\176\001\002\000\004\070\210\001\002\000\024" +
    "\005\116\011\124\012\062\020\172\023\073\034\ufeee\035" +
    "\170\051\072\102\176\001\002\000\006\100\036\102\033" +
    "\001\002\000\024\005\116\011\124\012\062\020\172\023" +
    "\073\034\ufee6\035\170\051\072\102\176\001\002\000\004" +
    "\100\202\001\002\000\004\034\200\001\002\000\006\100" +
    "\036\102\033\001\002\000\032\005\ufef1\011\ufef1\012\ufef1" +
    "\013\ufef1\020\ufef1\023\ufef1\027\ufef1\032\ufef1\035\ufef1\051" +
    "\ufef1\102\ufef1\107\ufef1\001\002\000\024\005\116\011\124" +
    "\012\062\020\172\023\073\034\ufeed\035\170\051\072\102" +
    "\176\001\002\000\004\034\ufeec\001\002\000\004\034\ufee5" +
    "\001\002\000\024\005\116\011\124\012\062\020\172\023" +
    "\073\034\ufee8\035\170\051\072\102\176\001\002\000\004" +
    "\034\ufee7\001\002\000\004\034\ufee9\001\002\000\006\021" +
    "\212\111\211\001\002\000\004\073\362\001\002\000\004" +
    "\073\213\001\002\000\022\042\102\043\103\051\223\060" +
    "\077\064\222\065\105\073\100\074\214\001\002\000\006" +
    "\100\036\102\033\001\002\000\006\074\uffc5\101\356\001" +
    "\002\000\024\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\073\uffbb\074\uffc6\101\354\110\uffbb\001\002\000\004\074" +
    "\351\001\002\000\040\026\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9\074" +
    "\uffb9\100\uffb9\101\uffb9\102\uffb9\110\uffb9\001\002\000\010" +
    "\073\255\074\uffc2\101\254\001\002\000\006\074\uffc7\101" +
    "\252\001\002\000\026\057\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\070\224\073\226\074\uffc4\101\225\110\uffba\001" +
    "\002\000\004\051\247\001\002\000\020\042\102\043\103" +
    "\051\223\060\077\064\222\065\105\073\100\001\002\000" +
    "\020\042\102\043\103\051\235\060\141\065\105\073\230" +
    "\074\227\001\002\000\044\026\ufe95\051\ufe95\054\ufe95\055" +
    "\ufe95\056\ufe95\057\ufe95\060\ufe95\061\ufe95\062\ufe95\063\ufe95" +
    "\065\ufe95\073\ufe95\074\ufe95\100\ufe95\101\ufe95\102\ufe95\110" +
    "\ufe95\001\002\000\014\042\102\043\103\051\235\060\141" +
    "\065\105\001\002\000\044\026\ufe94\051\ufe94\054\ufe94\055" +
    "\ufe94\056\ufe94\057\ufe94\060\ufe94\061\ufe94\062\ufe94\063\ufe94" +
    "\065\ufe94\073\ufe94\074\ufe94\100\ufe94\101\ufe94\102\ufe94\110" +
    "\ufe94\001\002\000\012\074\ufe8e\100\ufe8e\102\ufe8e\104\ufe8e" +
    "\001\002\000\012\074\ufe8d\100\ufe8d\102\ufe8d\104\ufe8d\001" +
    "\002\000\006\074\237\104\236\001\002\000\012\074\ufe8f" +
    "\100\ufe8f\102\ufe8f\104\ufe8f\001\002\000\016\042\102\043" +
    "\103\051\235\060\141\065\105\073\230\001\002\000\044" +
    "\026\ufe93\051\ufe93\054\ufe93\055\ufe93\056\ufe93\057\ufe93\060" +
    "\ufe93\061\ufe93\062\ufe93\063\ufe93\065\ufe93\073\ufe93\074\ufe93" +
    "\100\ufe93\101\ufe93\102\ufe93\110\ufe93\001\002\000\044\026" +
    "\ufe92\051\ufe92\054\ufe92\055\ufe92\056\ufe92\057\ufe92\060\ufe92" +
    "\061\ufe92\062\ufe92\063\ufe92\065\ufe92\073\ufe92\074\ufe92\100" +
    "\ufe92\101\ufe92\102\ufe92\110\ufe92\001\002\000\004\074\242" +
    "\001\002\000\006\074\244\104\243\001\002\000\016\042" +
    "\102\043\103\051\235\060\141\065\105\073\230\001\002" +
    "\000\044\026\ufe90\051\ufe90\054\ufe90\055\ufe90\056\ufe90\057" +
    "\ufe90\060\ufe90\061\ufe90\062\ufe90\063\ufe90\065\ufe90\073\ufe90" +
    "\074\ufe90\100\ufe90\101\ufe90\102\ufe90\110\ufe90\001\002\000" +
    "\044\026\ufe91\051\ufe91\054\ufe91\055\ufe91\056\ufe91\057\ufe91" +
    "\060\ufe91\061\ufe91\062\ufe91\063\ufe91\065\ufe91\073\ufe91\074" +
    "\ufe91\100\ufe91\101\ufe91\102\ufe91\110\ufe91\001\002\000\004" +
    "\074\uffbd\001\002\000\006\074\uffc3\101\250\001\002\000" +
    "\020\042\102\043\103\051\223\060\077\064\222\065\105" +
    "\073\100\001\002\000\004\074\uffbc\001\002\000\020\042" +
    "\102\043\103\051\223\060\077\064\222\065\105\073\100" +
    "\001\002\000\004\074\uffc1\001\002\000\020\042\102\043" +
    "\103\051\223\060\077\064\222\065\105\073\100\001\002" +
    "\000\012\051\257\060\077\065\105\073\100\001\002\000" +
    "\040\026\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\073\uffbb\074\uffbb\100\uffbb\101" +
    "\uffbb\102\uffbb\110\uffbb\001\002\000\040\026\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\073\226\074\uffba\100\uffba\101\uffba\102\uffba\110\uffba" +
    "\001\002\000\022\057\267\060\275\061\270\062\264\063" +
    "\263\073\277\074\343\110\271\001\002\000\006\073\255" +
    "\074\262\001\002\000\044\026\uffb6\051\257\054\uffb6\055" +
    "\uffb6\056\uffb6\057\267\060\265\061\270\062\264\063\263" +
    "\065\105\073\uffb6\074\uffb6\100\uffb6\101\uffb6\102\uffb6\110" +
    "\271\001\002\000\012\051\uff8c\060\uff8c\065\uff8c\073\uff8c" +
    "\001\002\000\012\051\uff8d\060\uff8d\065\uff8d\073\uff8d\001" +
    "\002\000\012\051\uff8f\060\uff8f\065\uff8f\073\311\001\002" +
    "\000\012\051\257\060\077\065\105\073\100\001\002\000" +
    "\012\051\uff90\060\uff90\065\uff90\073\uff90\001\002\000\012" +
    "\051\uff8e\060\uff8e\065\uff8e\073\uff8e\001\002\000\012\051" +
    "\uff8b\060\uff8b\065\uff8b\073\uff8b\001\002\000\024\026\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\073\uffb4\074\uffb4\100\uffb4\101" +
    "\uffb4\102\uffb4\001\002\000\040\026\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\267\060\275\061\270\062\264\063\263\073" +
    "\uffae\074\uffae\100\uffae\101\uffae\102\uffae\110\271\001\002" +
    "\000\024\026\uffb2\054\uffb2\055\uffb2\056\uffb2\073\uffb2\074" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\001\002\000\012\051\uff8f" +
    "\060\uff8f\065\uff8f\073\uff8f\001\002\000\012\051\257\060" +
    "\077\065\105\073\100\001\002\000\012\051\257\060\077" +
    "\065\105\073\100\001\002\000\022\057\267\060\275\061" +
    "\270\062\264\063\263\073\277\074\303\110\271\001\002" +
    "\000\006\073\255\074\302\001\002\000\024\026\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\073\uffb1\074\uffb1\100\uffb1\101\uffb1" +
    "\102\uffb1\001\002\000\024\026\uffa0\054\uffa0\055\uffa0\056" +
    "\uffa0\073\uffa0\074\uffa0\100\uffa0\101\uffa0\102\uffa0\001\002" +
    "\000\024\026\uff89\054\uff89\055\uff89\056\uff89\073\255\074" +
    "\uff89\100\uff89\101\uff89\102\uff89\001\002\000\040\026\uff8a" +
    "\054\uff8a\055\uff8a\056\uff8a\057\267\060\275\061\270\062" +
    "\264\063\263\073\277\074\uff8a\100\uff8a\101\uff8a\102\uff8a" +
    "\110\271\001\002\000\024\026\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\073\uffb8\074\uffb8\100\uffb8\101\uffb8\102\uffb8\001\002" +
    "\000\004\073\226\001\002\000\044\026\uff99\051\257\054" +
    "\uff99\055\uff99\056\uff99\057\267\060\265\061\270\062\264" +
    "\063\263\065\105\073\100\074\uff99\100\uff99\101\uff99\102" +
    "\uff99\110\271\001\002\000\012\051\257\060\312\065\105" +
    "\073\100\001\002\000\010\051\307\065\142\073\311\001" +
    "\002\000\022\057\267\060\275\061\270\062\264\063\263" +
    "\073\277\074\323\110\271\001\002\000\006\073\255\074" +
    "\315\001\002\000\044\026\uffad\051\257\054\uffad\055\uffad" +
    "\056\uffad\057\267\060\265\061\270\062\264\063\263\065" +
    "\105\073\uffad\074\uffad\100\uffad\101\uffad\102\uffad\110\271" +
    "\001\002\000\012\051\257\060\077\065\105\073\100\001" +
    "\002\000\024\026\uffac\054\uffac\055\uffac\056\uffac\073\uffac" +
    "\074\uffac\100\uffac\101\uffac\102\uffac\001\002\000\040\026" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\267\060\275\061\270" +
    "\062\264\063\263\073\uffaa\074\uffaa\100\uffaa\101\uffaa\102" +
    "\uffaa\110\271\001\002\000\040\026\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\267\060\275\061\270\062\264\063\263\073" +
    "\uffa9\074\uffa9\100\uffa9\101\uffa9\102\uffa9\110\271\001\002" +
    "\000\024\026\uffab\054\uffab\055\uffab\056\uffab\073\uffab\074" +
    "\uffab\100\uffab\101\uffab\102\uffab\001\002\000\044\026\uff9e" +
    "\051\257\054\uff9e\055\uff9e\056\uff9e\057\267\060\265\061" +
    "\270\062\264\063\263\065\105\073\uff9e\074\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\110\271\001\002\000\012\051\257\060" +
    "\077\065\105\073\100\001\002\000\024\026\uff9d\054\uff9d" +
    "\055\uff9d\056\uff9d\073\uff9d\074\uff9d\100\uff9d\101\uff9d\102" +
    "\uff9d\001\002\000\040\026\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\057\267\060\275\061\270\062\264\063\263\073\uff9a\074" +
    "\uff9a\100\uff9a\101\uff9a\102\uff9a\110\271\001\002\000\040" +
    "\026\uff9b\054\uff9b\055\uff9b\056\uff9b\057\267\060\275\061" +
    "\270\062\264\063\263\073\uff9b\074\uff9b\100\uff9b\101\uff9b" +
    "\102\uff9b\110\271\001\002\000\024\026\uff9c\054\uff9c\055" +
    "\uff9c\056\uff9c\073\uff9c\074\uff9c\100\uff9c\101\uff9c\102\uff9c" +
    "\001\002\000\026\051\257\057\267\060\265\061\270\062" +
    "\264\063\263\065\105\073\100\074\332\110\271\001\002" +
    "\000\044\026\uff94\051\257\054\uff94\055\uff94\056\uff94\057" +
    "\267\060\265\061\270\062\264\063\263\065\105\073\uff94" +
    "\074\uff94\100\uff94\101\uff94\102\uff94\110\271\001\002\000" +
    "\012\051\257\060\077\065\105\073\100\001\002\000\024" +
    "\026\uff97\054\uff97\055\uff97\056\uff97\073\255\074\uff97\100" +
    "\uff97\101\uff97\102\uff97\001\002\000\040\026\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\267\060\275\061\270\062\264\063" +
    "\263\073\277\074\uff98\100\uff98\101\uff98\102\uff98\110\271" +
    "\001\002\000\024\026\uff96\054\uff96\055\uff96\056\uff96\073" +
    "\uff96\074\uff96\100\uff96\101\uff96\102\uff96\001\002\000\012" +
    "\051\257\060\077\065\105\073\100\001\002\000\024\026" +
    "\uff93\054\uff93\055\uff93\056\uff93\073\uff93\074\uff93\100\uff93" +
    "\101\uff93\102\uff93\001\002\000\040\026\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\267\060\275\061\270\062\264\063\263" +
    "\073\uff91\074\uff91\100\uff91\101\uff91\102\uff91\110\271\001" +
    "\002\000\024\026\uff92\054\uff92\055\uff92\056\uff92\073\uff92" +
    "\074\uff92\100\uff92\101\uff92\102\uff92\001\002\000\044\026" +
    "\uffa7\051\257\054\uffa7\055\uffa7\056\uffa7\057\267\060\265" +
    "\061\270\062\264\063\263\065\105\073\uffa7\074\uffa7\100" +
    "\uffa7\101\uffa7\102\uffa7\110\271\001\002\000\012\051\257" +
    "\060\077\065\105\073\100\001\002\000\024\026\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\073\uffa5\074\uffa5\100\uffa5\101\uffa5" +
    "\102\uffa5\001\002\000\040\026\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\267\060\275\061\270\062\264\063\263\073\uffa1" +
    "\074\uffa1\100\uffa1\101\uffa1\102\uffa1\110\271\001\002\000" +
    "\024\026\uffa3\054\uffa3\055\uffa3\056\uffa3\073\uffa3\074\uffa3" +
    "\100\uffa3\101\uffa3\102\uffa3\001\002\000\004\074\uffbf\001" +
    "\002\000\006\100\036\102\033\001\002\000\024\005\116" +
    "\011\124\012\062\020\172\023\073\034\ufef0\035\170\051" +
    "\072\102\176\001\002\000\004\034\ufeeb\001\002\000\020" +
    "\042\102\043\103\051\223\060\077\064\222\065\105\073" +
    "\100\001\002\000\004\074\uffc0\001\002\000\020\042\102" +
    "\043\103\051\223\060\077\064\222\065\105\073\100\001" +
    "\002\000\004\074\uffbe\001\002\000\024\005\116\011\124" +
    "\012\062\020\172\023\073\034\ufee0\035\170\051\072\102" +
    "\176\001\002\000\004\034\ufedf\001\002\000\004\074\363" +
    "\001\002\000\006\100\036\102\033\001\002\000\024\005" +
    "\116\011\124\012\062\020\172\023\073\034\ufede\035\170" +
    "\051\072\102\176\001\002\000\004\034\ufedd\001\002\000" +
    "\004\034\ufeea\001\002\000\006\100\036\102\033\001\002" +
    "\000\006\100\036\102\033\001\002\000\024\005\116\011" +
    "\124\012\062\020\172\023\073\034\ufee1\035\170\051\072" +
    "\102\176\001\002\000\004\034\ufee3\001\002\000\024\005" +
    "\116\011\124\012\062\020\172\023\073\034\ufee2\035\170" +
    "\051\072\102\176\001\002\000\004\034\ufee4\001\002\000" +
    "\004\051\376\001\002\000\006\100\036\102\033\001\002" +
    "\000\032\005\ufeaa\011\ufeaa\012\ufeaa\013\ufeaa\020\ufeaa\023" +
    "\ufeaa\027\ufeaa\034\ufeaa\035\ufeaa\051\ufeaa\102\ufeaa\107\ufeaa" +
    "\001\002\000\004\032\ufe9e\001\002\000\024\005\152\011" +
    "\064\012\062\020\155\023\164\032\ufea7\035\151\051\072" +
    "\102\157\001\002\000\004\032\ufea6\001\002\000\024\005" +
    "\152\011\064\012\062\020\155\023\164\032\ufea1\035\151" +
    "\051\072\102\157\001\002\000\004\032\ufea0\001\002\000" +
    "\006\021\u0107\111\u0106\001\002\000\004\073\u0110\001\002" +
    "\000\004\073\u0108\001\002\000\022\042\102\043\103\051" +
    "\223\060\077\064\222\065\105\073\100\074\u0109\001\002" +
    "\000\006\100\036\102\033\001\002\000\004\074\u010b\001" +
    "\002\000\006\100\036\102\033\001\002\000\024\005\152" +
    "\011\064\012\062\020\155\023\164\032\ufea9\035\151\051" +
    "\072\102\157\001\002\000\004\032\ufea4\001\002\000\024" +
    "\005\152\011\064\012\062\020\155\023\164\032\ufe99\035" +
    "\151\051\072\102\157\001\002\000\004\032\ufe98\001\002" +
    "\000\004\074\u0111\001\002\000\006\100\036\102\033\001" +
    "\002\000\024\005\152\011\064\012\062\020\155\023\164" +
    "\032\ufe97\035\151\051\072\102\157\001\002\000\004\032" +
    "\ufe96\001\002\000\004\032\ufea3\001\002\000\004\026\u0116" +
    "\001\002\000\006\100\036\102\033\001\002\000\022\005" +
    "\152\011\064\012\062\020\u011b\023\164\035\u0119\051\072" +
    "\102\u011e\001\002\000\030\005\152\011\064\012\062\013" +
    "\uff0b\020\u011b\023\164\027\uff0b\035\u0119\051\072\102\u011e" +
    "\107\uff0b\001\002\000\006\010\u0152\011\u0153\001\002\000" +
    "\030\005\152\011\064\012\062\013\uff0c\020\u011b\023\164" +
    "\027\uff0c\035\u0119\051\072\102\u011e\107\uff0c\001\002\000" +
    "\004\070\u0142\001\002\000\006\100\036\102\033\001\002" +
    "\000\030\005\152\011\064\012\062\013\uff03\020\u011b\023" +
    "\164\027\uff03\035\u0119\051\072\102\u011e\107\uff03\001\002" +
    "\000\004\100\u013d\001\002\000\010\013\u0125\027\u0123\107" +
    "\u0120\001\002\000\016\042\uff5b\043\uff5b\051\uff5b\060\uff5b" +
    "\065\uff5b\073\uff5b\001\002\000\016\042\102\043\103\051" +
    "\111\060\077\065\105\073\100\001\002\000\004\013\u0133" +
    "\001\002\000\010\005\u012d\100\036\102\033\001\002\000" +
    "\006\100\036\102\033\001\002\000\004\005\u0126\001\002" +
    "\000\006\100\036\102\033\001\002\000\032\005\ufef9\011" +
    "\ufef9\012\ufef9\013\ufef9\020\ufef9\023\ufef9\027\ufef9\032\ufef9" +
    "\035\ufef9\051\ufef9\102\ufef9\107\ufef9\001\002\000\022\005" +
    "\152\011\064\012\062\020\u011b\023\164\035\u0119\051\072" +
    "\102\u011e\001\002\000\004\013\u012a\001\002\000\004\005" +
    "\u012b\001\002\000\006\100\036\102\033\001\002\000\032" +
    "\005\ufef7\011\ufef7\012\ufef7\013\ufef7\020\ufef7\023\ufef7\027" +
    "\ufef7\032\ufef7\035\ufef7\051\ufef7\102\ufef7\107\ufef7\001\002" +
    "\000\016\042\uff5c\043\uff5c\051\uff5c\060\uff5c\065\uff5c\073" +
    "\uff5c\001\002\000\022\005\152\011\064\012\062\020\u011b" +
    "\023\164\035\u0119\051\072\102\u011e\001\002\000\004\013" +
    "\u0130\001\002\000\004\005\u0131\001\002\000\006\100\036" +
    "\102\033\001\002\000\032\005\ufef8\011\ufef8\012\ufef8\013" +
    "\ufef8\020\ufef8\023\ufef8\027\ufef8\032\ufef8\035\ufef8\051\ufef8" +
    "\102\ufef8\107\ufef8\001\002\000\004\005\u0134\001\002\000" +
    "\006\100\036\102\033\001\002\000\032\005\ufef6\011\ufef6" +
    "\012\ufef6\013\ufef6\020\ufef6\023\ufef6\027\ufef6\032\ufef6\035" +
    "\ufef6\051\ufef6\102\ufef6\107\ufef6\001\002\000\004\026\u0137" +
    "\001\002\000\006\100\036\102\033\001\002\000\022\005" +
    "\152\011\064\012\062\020\u011b\023\164\035\u0119\051\072" +
    "\102\u011e\001\002\000\010\013\ufef3\027\u013b\107\u0120\001" +
    "\002\000\004\013\ufef2\001\002\000\010\005\u012d\100\ufef5" +
    "\102\ufef5\001\002\000\006\100\ufef4\102\ufef4\001\002\000" +
    "\030\005\152\011\064\012\062\013\uff08\020\u011b\023\164" +
    "\027\uff08\035\u0119\051\072\102\u011e\107\uff08\001\002\000" +
    "\010\013\uff07\027\uff07\107\uff07\001\002\000\010\013\uff02" +
    "\027\uff02\107\uff02\001\002\000\030\005\152\011\064\012" +
    "\062\013\uff05\020\u011b\023\164\027\uff05\035\u0119\051\072" +
    "\102\u011e\107\uff05\001\002\000\010\013\uff04\027\uff04\107" +
    "\uff04\001\002\000\006\021\u0144\111\u0143\001\002\000\004" +
    "\073\u014d\001\002\000\004\073\u0145\001\002\000\022\042" +
    "\102\043\103\051\223\060\077\064\222\065\105\073\100" +
    "\074\u0146\001\002\000\006\100\036\102\033\001\002\000" +
    "\004\074\u0148\001\002\000\006\100\036\102\033\001\002" +
    "\000\030\005\152\011\064\012\062\013\uff0d\020\u011b\023" +
    "\164\027\uff0d\035\u0119\051\072\102\u011e\107\uff0d\001\002" +
    "\000\010\013\uff0a\027\uff0a\107\uff0a\001\002\000\030\005" +
    "\152\011\064\012\062\013\ufefd\020\u011b\023\164\027\ufefd" +
    "\035\u0119\051\072\102\u011e\107\ufefd\001\002\000\010\013" +
    "\ufefc\027\ufefc\107\ufefc\001\002\000\004\074\u014e\001\002" +
    "\000\006\100\036\102\033\001\002\000\030\005\152\011" +
    "\064\012\062\013\ufefb\020\u011b\023\164\027\ufefb\035\u0119" +
    "\051\072\102\u011e\107\ufefb\001\002\000\010\013\ufefa\027" +
    "\ufefa\107\ufefa\001\002\000\010\013\uff09\027\uff09\107\uff09" +
    "\001\002\000\006\100\036\102\033\001\002\000\006\100" +
    "\036\102\033\001\002\000\030\005\152\011\064\012\062" +
    "\013\ufeff\020\u011b\023\164\027\ufeff\035\u0119\051\072\102" +
    "\u011e\107\ufeff\001\002\000\010\013\uff01\027\uff01\107\uff01" +
    "\001\002\000\030\005\152\011\064\012\062\013\ufefe\020" +
    "\u011b\023\164\027\ufefe\035\u0119\051\072\102\u011e\107\ufefe" +
    "\001\002\000\010\013\uff00\027\uff00\107\uff00\001\002\000" +
    "\010\013\uff06\027\uff06\107\uff06\001\002\000\006\100\036" +
    "\102\033\001\002\000\006\100\036\102\033\001\002\000" +
    "\024\005\152\011\064\012\062\020\155\023\164\032\ufe9b" +
    "\035\151\051\072\102\157\001\002\000\004\032\ufe9d\001" +
    "\002\000\024\005\152\011\064\012\062\020\155\023\164" +
    "\032\ufe9a\035\151\051\072\102\157\001\002\000\004\032" +
    "\ufe9c\001\002\000\004\032\ufea2\001\002\000\004\034\ufed4" +
    "\001\002\000\006\100\036\102\033\001\002\000\036\003" +
    "\ufedc\005\ufedc\011\ufedc\012\ufedc\013\ufedc\020\ufedc\023\ufedc" +
    "\027\ufedc\034\ufedc\035\ufedc\051\ufedc\100\ufedc\102\ufedc\107" +
    "\ufedc\001\002\000\006\021\u0165\111\u0164\001\002\000\004" +
    "\073\u016e\001\002\000\004\073\u0166\001\002\000\022\042" +
    "\102\043\103\051\223\060\077\064\222\065\105\073\100" +
    "\074\u0167\001\002\000\006\100\036\102\033\001\002\000" +
    "\004\074\u0169\001\002\000\006\100\036\102\033\001\002" +
    "\000\024\005\116\011\124\012\062\020\121\023\073\034" +
    "\ufedb\035\115\051\072\102\126\001\002\000\004\034\ufed6" +
    "\001\002\000\024\005\116\011\124\012\062\020\121\023" +
    "\073\034\ufecd\035\115\051\072\102\126\001\002\000\004" +
    "\034\ufecc\001\002\000\004\074\u016f\001\002\000\006\100" +
    "\036\102\033\001\002\000\024\005\116\011\124\012\062" +
    "\020\121\023\073\034\ufecb\035\115\051\072\102\126\001" +
    "\002\000\004\034\ufeca\001\002\000\004\034\ufed5\001\002" +
    "\000\004\026\u0174\001\002\000\006\100\036\102\033\001" +
    "\002\000\022\005\116\011\124\012\062\020\u0178\023\073" +
    "\035\u0176\051\072\102\u017b\001\002\000\006\010\u01b0\023" +
    "\u01af\001\002\000\030\005\116\011\124\012\062\013\ufec5" +
    "\020\u0178\023\073\027\ufec5\035\u0176\051\072\102\u017b\107" +
    "\ufec5\001\002\000\004\070\u019f\001\002\000\030\005\116" +
    "\011\124\012\062\013\ufec4\020\u0178\023\073\027\ufec4\035" +
    "\u0176\051\072\102\u017b\107\ufec4\001\002\000\006\100\036" +
    "\102\033\001\002\000\004\100\u019a\001\002\000\030\005" +
    "\116\011\124\012\062\013\ufebc\020\u0178\023\073\027\ufebc" +
    "\035\u0176\051\072\102\u017b\107\ufebc\001\002\000\010\013" +
    "\u0182\027\u017f\107\u0120\001\002\000\016\042\102\043\103" +
    "\051\111\060\077\065\105\073\100\001\002\000\010\005" +
    "\u012d\100\036\102\033\001\002\000\006\100\036\102\033" +
    "\001\002\000\004\013\u0185\001\002\000\004\005\u0183\001" +
    "\002\000\006\100\036\102\033\001\002\000\032\005\ufeb2" +
    "\011\ufeb2\012\ufeb2\013\ufeb2\020\ufeb2\023\ufeb2\027\ufeb2\034" +
    "\ufeb2\035\ufeb2\051\ufeb2\102\ufeb2\107\ufeb2\001\002\000\004" +
    "\005\u0186\001\002\000\006\100\036\102\033\001\002\000" +
    "\032\005\ufeaf\011\ufeaf\012\ufeaf\013\ufeaf\020\ufeaf\023\ufeaf" +
    "\027\ufeaf\034\ufeaf\035\ufeaf\051\ufeaf\102\ufeaf\107\ufeaf\001" +
    "\002\000\022\005\116\011\124\012\062\020\u0178\023\073" +
    "\035\u0176\051\072\102\u017b\001\002\000\004\013\u018a\001" +
    "\002\000\004\005\u018b\001\002\000\006\100\036\102\033" +
    "\001\002\000\032\005\ufeb0\011\ufeb0\012\ufeb0\013\ufeb0\020" +
    "\ufeb0\023\ufeb0\027\ufeb0\034\ufeb0\035\ufeb0\051\ufeb0\102\ufeb0" +
    "\107\ufeb0\001\002\000\022\005\116\011\124\012\062\020" +
    "\u0178\023\073\035\u0176\051\072\102\u017b\001\002\000\004" +
    "\013\u018f\001\002\000\004\005\u0190\001\002\000\006\100" +
    "\036\102\033\001\002\000\032\005\ufeb1\011\ufeb1\012\ufeb1" +
    "\013\ufeb1\020\ufeb1\023\ufeb1\027\ufeb1\034\ufeb1\035\ufeb1\051" +
    "\ufeb1\102\ufeb1\107\ufeb1\001\002\000\004\026\u0193\001\002" +
    "\000\006\100\036\102\033\001\002\000\022\005\116\011" +
    "\124\012\062\020\u0178\023\073\035\u0176\051\072\102\u017b" +
    "\001\002\000\010\013\ufeac\027\u0196\107\u0120\001\002\000" +
    "\010\005\u012d\100\ufeae\102\ufeae\001\002\000\006\100\ufead" +
    "\102\ufead\001\002\000\004\013\ufeab\001\002\000\010\013" +
    "\ufebb\027\ufebb\107\ufebb\001\002\000\030\005\116\011\124" +
    "\012\062\013\ufec3\020\u0178\023\073\027\ufec3\035\u0176\051" +
    "\072\102\u017b\107\ufec3\001\002\000\010\013\ufec2\027\ufec2" +
    "\107\ufec2\001\002\000\030\005\116\011\124\012\062\013" +
    "\ufebe\020\u0178\023\073\027\ufebe\035\u0176\051\072\102\u017b" +
    "\107\ufebe\001\002\000\010\013\ufebd\027\ufebd\107\ufebd\001" +
    "\002\000\010\013\ufebf\027\ufebf\107\ufebf\001\002\000\006" +
    "\021\u01a1\111\u01a0\001\002\000\004\073\u01aa\001\002\000" +
    "\004\073\u01a2\001\002\000\022\042\102\043\103\051\223" +
    "\060\077\064\222\065\105\073\100\074\u01a3\001\002\000" +
    "\006\100\036\102\033\001\002\000\004\074\u01a5\001\002" +
    "\000\006\100\036\102\033\001\002\000\030\005\116\011" +
    "\124\012\062\013\ufec6\020\u0178\023\073\027\ufec6\035\u0176" +
    "\051\072\102\u017b\107\ufec6\001\002\000\010\013\ufec1\027" +
    "\ufec1\107\ufec1\001\002\000\030\005\116\011\124\012\062" +
    "\013\ufeb6\020\u0178\023\073\027\ufeb6\035\u0176\051\072\102" +
    "\u017b\107\ufeb6\001\002\000\010\013\ufeb5\027\ufeb5\107\ufeb5" +
    "\001\002\000\004\074\u01ab\001\002\000\006\100\036\102" +
    "\033\001\002\000\030\005\116\011\124\012\062\013\ufeb4" +
    "\020\u0178\023\073\027\ufeb4\035\u0176\051\072\102\u017b\107" +
    "\ufeb4\001\002\000\010\013\ufeb3\027\ufeb3\107\ufeb3\001\002" +
    "\000\010\013\ufec0\027\ufec0\107\ufec0\001\002\000\006\100" +
    "\036\102\033\001\002\000\006\100\036\102\033\001\002" +
    "\000\030\005\116\011\124\012\062\013\ufeb7\020\u0178\023" +
    "\073\027\ufeb7\035\u0176\051\072\102\u017b\107\ufeb7\001\002" +
    "\000\010\013\ufeb9\027\ufeb9\107\ufeb9\001\002\000\030\005" +
    "\116\011\124\012\062\013\ufeb8\020\u0178\023\073\027\ufeb8" +
    "\035\u0176\051\072\102\u017b\107\ufeb8\001\002\000\010\013" +
    "\ufeba\027\ufeba\107\ufeba\001\002\000\006\100\036\102\033" +
    "\001\002\000\024\005\116\011\124\012\062\020\121\023" +
    "\073\034\ufece\035\115\051\072\102\126\001\002\000\004" +
    "\034\ufecf\001\002\000\016\042\uff26\043\uff26\051\uff26\060" +
    "\uff26\065\uff26\073\uff26\001\002\000\020\042\uff24\043\uff24" +
    "\051\uff24\054\u01c2\060\uff24\065\uff24\073\uff24\001\002\000" +
    "\020\042\uff25\043\uff25\051\uff25\054\u01c1\060\uff25\065\uff25" +
    "\073\uff25\001\002\000\016\042\102\043\103\051\u01c0\060" +
    "\077\065\105\073\100\001\002\000\010\026\uff3e\100\uff3e" +
    "\102\uff3e\001\002\000\026\026\uff3f\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\073\uffbb\100\uff3f\102\uff3f\110\uffbb" +
    "\001\002\000\026\026\uff2f\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\073\uffb9\100\uff2f\102\uff2f\110\uffb9\001\002" +
    "\000\012\026\uff3d\073\255\100\uff3d\102\uff3d\001\002\000" +
    "\026\026\uff40\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\073\226\100\uff40\102\uff40\110\uffba\001\002\000\016\042" +
    "\uff28\043\uff28\051\uff28\060\uff28\065\uff28\073\uff28\001\002" +
    "\000\016\042\uff27\043\uff27\051\uff27\060\uff27\065\uff27\073" +
    "\uff27\001\002\000\016\042\102\043\103\051\u01c8\060\077" +
    "\065\105\073\100\001\002\000\010\026\uff39\100\uff39\102" +
    "\uff39\001\002\000\026\026\uff3c\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\073\uffbb\100\uff3c\102\uff3c\110\uffbb\001" +
    "\002\000\026\026\uff2d\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\073\uffb9\100\uff2d\102\uff2d\110\uffb9\001\002\000" +
    "\012\026\uff3b\073\255\100\uff3b\102\uff3b\001\002\000\026" +
    "\026\uff3a\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\073" +
    "\226\100\uff3a\102\uff3a\110\uffba\001\002\000\016\042\102" +
    "\043\103\051\u01cd\060\077\065\105\073\100\001\002\000" +
    "\010\026\uff2c\100\uff2c\102\uff2c\001\002\000\026\026\uff2a" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\073\uffbb\100" +
    "\uff2a\102\uff2a\110\uffbb\001\002\000\012\026\uff29\073\255" +
    "\100\uff29\102\uff29\001\002\000\026\026\uff2b\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\uffba\073\226\100\uff2b\102\uff2b" +
    "\110\uffba\001\002\000\016\042\102\043\103\051\u01d3\060" +
    "\077\065\105\073\100\001\002\000\010\026\uff31\100\uff31" +
    "\102\uff31\001\002\000\026\026\uff34\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\073\uffbb\100\uff34\102\uff34\110\uffbb" +
    "\001\002\000\026\026\uff2e\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\073\uffb9\100\uff2e\102\uff2e\110\uffb9\001\002" +
    "\000\012\026\uff32\073\255\100\uff32\102\uff32\001\002\000" +
    "\026\026\uff33\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\073\226\100\uff33\102\uff33\110\uffba\001\002\000\016\042" +
    "\102\043\103\051\u01d9\060\077\065\105\073\100\001\002" +
    "\000\010\026\uff38\100\uff38\102\uff38\001\002\000\026\026" +
    "\uff37\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\073\uffbb" +
    "\100\uff37\102\uff37\110\uffbb\001\002\000\026\026\uff30\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9\100\uff30" +
    "\102\uff30\110\uffb9\001\002\000\012\026\uff35\073\255\100" +
    "\uff35\102\uff35\001\002\000\026\026\uff36\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\073\226\100\uff36\102\uff36\110" +
    "\uffba\001\002\000\010\051\307\065\142\073\311\001\002" +
    "\000\022\057\267\060\275\061\270\062\264\063\263\073" +
    "\277\074\u01e3\110\271\001\002\000\006\073\255\074\u01dd" +
    "\001\002\000\044\026\uffb7\051\257\054\uffb7\055\uffb7\056" +
    "\uffb7\057\267\060\265\061\270\062\264\063\263\065\105" +
    "\073\uffb7\074\uffb7\100\uffb7\101\uffb7\102\uffb7\110\271\001" +
    "\002\000\012\051\257\060\077\065\105\073\100\001\002" +
    "\000\024\026\uffb5\054\uffb5\055\uffb5\056\uffb5\073\uffb5\074" +
    "\uffb5\100\uffb5\101\uffb5\102\uffb5\001\002\000\040\026\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\267\060\275\061\270\062" +
    "\264\063\263\073\uffb0\074\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\110\271\001\002\000\040\026\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\267\060\275\061\270\062\264\063\263\073\uffaf" +
    "\074\uffaf\100\uffaf\101\uffaf\102\uffaf\110\271\001\002\000" +
    "\024\026\uffb3\054\uffb3\055\uffb3\056\uffb3\073\uffb3\074\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\001\002\000\044\026\uffa8\051" +
    "\257\054\uffa8\055\uffa8\056\uffa8\057\267\060\265\061\270" +
    "\062\264\063\263\065\105\073\uffa8\074\uffa8\100\uffa8\101" +
    "\uffa8\102\uffa8\110\271\001\002\000\012\051\257\060\077" +
    "\065\105\073\100\001\002\000\024\026\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\073\uffa6\074\uffa6\100\uffa6\101\uffa6\102\uffa6" +
    "\001\002\000\040\026\uff9f\054\uff9f\055\uff9f\056\uff9f\057" +
    "\267\060\275\061\270\062\264\063\263\073\uff9f\074\uff9f" +
    "\100\uff9f\101\uff9f\102\uff9f\110\271\001\002\000\040\026" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\057\267\060\275\061\270" +
    "\062\264\063\263\073\uffa2\074\uffa2\100\uffa2\101\uffa2\102" +
    "\uffa2\110\271\001\002\000\024\026\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\073\uffa4\074\uffa4\100\uffa4\101\uffa4\102\uffa4\001" +
    "\002\000\026\051\257\057\267\060\265\061\270\062\264" +
    "\063\263\065\105\073\100\074\u01ea\110\271\001\002\000" +
    "\024\026\uff95\054\uff95\055\uff95\056\uff95\073\uff95\074\uff95" +
    "\100\uff95\101\uff95\102\uff95\001\002\000\020\042\102\043" +
    "\103\051\235\060\141\065\105\073\230\074\227\001\002" +
    "\000\004\051\u020c\001\002\000\036\003\uffce\005\uffce\011" +
    "\uffce\012\uffce\013\uffce\020\uffce\023\uffce\027\uffce\032\uffce" +
    "\034\uffce\035\uffce\051\uffce\102\uffce\107\uffce\001\002\000" +
    "\010\100\036\102\033\104\u0203\001\002\000\022\020\u01f1" +
    "\042\102\043\103\051\u01f7\060\077\064\u01f8\065\105\073" +
    "\100\001\002\000\006\100\036\102\033\001\002\000\004" +
    "\070\u01fe\001\002\000\054\003\uff7e\005\uff7e\011\uff7e\012" +
    "\uff7e\013\uff7e\020\uff7e\023\uff7e\027\uff7e\032\uff7e\034\uff7e" +
    "\035\uff7e\051\uff7e\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\073\uffbb\102\uff7e\107\uff7e\110\uffbb\001\002\000\024" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9\100" +
    "\036\102\033\110\uffb9\001\002\000\036\003\uff6e\005\uff6e" +
    "\011\uff6e\012\uff6e\013\uff6e\020\uff6e\023\uff6e\027\uff6e\032" +
    "\uff6e\034\uff6e\035\uff6e\051\uff6e\102\uff6e\107\uff6e\001\002" +
    "\000\006\100\036\102\033\001\002\000\010\073\255\100" +
    "\036\102\033\001\002\000\034\042\102\043\103\051\235" +
    "\057\uffba\060\141\061\uffba\062\uffba\063\uffba\065\105\073" +
    "\u01eb\100\036\102\033\110\uffba\001\002\000\006\100\036" +
    "\102\033\001\002\000\036\003\uff7c\005\uff7c\011\uff7c\012" +
    "\uff7c\013\uff7c\020\uff7c\023\uff7c\027\uff7c\032\uff7c\034\uff7c" +
    "\035\uff7c\051\uff7c\102\uff7c\107\uff7c\001\002\000\036\003" +
    "\uff81\005\uff81\011\uff81\012\uff81\013\uff81\020\uff81\023\uff81" +
    "\027\uff81\032\uff81\034\uff81\035\uff81\051\uff81\102\uff81\107" +
    "\uff81\001\002\000\036\003\uff7f\005\uff7f\011\uff7f\012\uff7f" +
    "\013\uff7f\020\uff7f\023\uff7f\027\uff7f\032\uff7f\034\uff7f\035" +
    "\uff7f\051\uff7f\102\uff7f\107\uff7f\001\002\000\036\003\uff7b" +
    "\005\uff7b\011\uff7b\012\uff7b\013\uff7b\020\uff7b\023\uff7b\027" +
    "\uff7b\032\uff7b\034\uff7b\035\uff7b\051\uff7b\102\uff7b\107\uff7b" +
    "\001\002\000\036\003\uff80\005\uff80\011\uff80\012\uff80\013" +
    "\uff80\020\uff80\023\uff80\027\uff80\032\uff80\034\uff80\035\uff80" +
    "\051\uff80\102\uff80\107\uff80\001\002\000\004\111\u01ff\001" +
    "\002\000\004\073\u0200\001\002\000\004\074\u0201\001\002" +
    "\000\006\100\uff68\102\uff68\001\002\000\036\003\uff7d\005" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\020\uff7d\023\uff7d\027\uff7d" +
    "\032\uff7d\034\uff7d\035\uff7d\051\uff7d\102\uff7d\107\uff7d\001" +
    "\002\000\016\042\102\043\103\051\235\060\141\065\105" +
    "\073\u0205\001\002\000\036\003\uffcd\005\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\020\uffcd\023\uffcd\027\uffcd\032\uffcd\034\uffcd" +
    "\035\uffcd\051\uffcd\102\uffcd\107\uffcd\001\002\000\014\042" +
    "\102\043\103\051\235\060\141\065\105\001\002\000\036" +
    "\003\uffcc\005\uffcc\011\uffcc\012\uffcc\013\uffcc\020\uffcc\023" +
    "\uffcc\027\uffcc\032\uffcc\034\uffcc\035\uffcc\051\uffcc\102\uffcc" +
    "\107\uffcc\001\002\000\004\074\u0208\001\002\000\010\100" +
    "\036\102\033\104\u0209\001\002\000\016\042\102\043\103" +
    "\051\235\060\141\065\105\073\u0205\001\002\000\036\003" +
    "\uffca\005\uffca\011\uffca\012\uffca\013\uffca\020\uffca\023\uffca" +
    "\027\uffca\032\uffca\034\uffca\035\uffca\051\uffca\102\uffca\107" +
    "\uffca\001\002\000\036\003\uffcb\005\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\020\uffcb\023\uffcb\027\uffcb\032\uffcb\034\uffcb\035" +
    "\uffcb\051\uffcb\102\uffcb\107\uffcb\001\002\000\004\054\u020d" +
    "\001\002\000\022\020\u01f1\042\102\043\103\051\u0214\060" +
    "\077\064\u0215\065\105\073\100\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\073\uffbb\100\036\102\033\110\uffbb\001\002" +
    "\000\024\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073" +
    "\uffb9\100\036\102\033\110\uffb9\001\002\000\036\003\uff6f" +
    "\005\uff6f\011\uff6f\012\uff6f\013\uff6f\020\uff6f\023\uff6f\027" +
    "\uff6f\032\uff6f\034\uff6f\035\uff6f\051\uff6f\102\uff6f\107\uff6f" +
    "\001\002\000\006\100\036\102\033\001\002\000\010\073" +
    "\255\100\036\102\033\001\002\000\034\042\102\043\103" +
    "\051\235\057\uffba\060\141\061\uffba\062\uffba\063\uffba\065" +
    "\105\073\u01eb\100\036\102\033\110\uffba\001\002\000\006" +
    "\100\036\102\033\001\002\000\036\003\uff74\005\uff74\011" +
    "\uff74\012\uff74\013\uff74\020\uff74\023\uff74\027\uff74\032\uff74" +
    "\034\uff74\035\uff74\051\uff74\102\uff74\107\uff74\001\002\000" +
    "\036\003\uff7a\005\uff7a\011\uff7a\012\uff7a\013\uff7a\020\uff7a" +
    "\023\uff7a\027\uff7a\032\uff7a\034\uff7a\035\uff7a\051\uff7a\102" +
    "\uff7a\107\uff7a\001\002\000\036\003\uff78\005\uff78\011\uff78" +
    "\012\uff78\013\uff78\020\uff78\023\uff78\027\uff78\032\uff78\034" +
    "\uff78\035\uff78\051\uff78\102\uff78\107\uff78\001\002\000\036" +
    "\003\uff77\005\uff77\011\uff77\012\uff77\013\uff77\020\uff77\023" +
    "\uff77\027\uff77\032\uff77\034\uff77\035\uff77\051\uff77\102\uff77" +
    "\107\uff77\001\002\000\036\003\uff79\005\uff79\011\uff79\012" +
    "\uff79\013\uff79\020\uff79\023\uff79\027\uff79\032\uff79\034\uff79" +
    "\035\uff79\051\uff79\102\uff79\107\uff79\001\002\000\036\003" +
    "\uff76\005\uff76\011\uff76\012\uff76\013\uff76\020\uff76\023\uff76" +
    "\027\uff76\032\uff76\034\uff76\035\uff76\051\uff76\102\uff76\107" +
    "\uff76\001\002\000\036\003\uff75\005\uff75\011\uff75\012\uff75" +
    "\013\uff75\020\uff75\023\uff75\027\uff75\032\uff75\034\uff75\035" +
    "\uff75\051\uff75\102\uff75\107\uff75\001\002\000\006\074\u021e" +
    "\104\236\001\002\000\026\057\ufe93\060\ufe93\061\ufe93\062" +
    "\ufe93\063\ufe93\073\ufe93\100\ufe93\102\ufe93\104\u0209\110\ufe93" +
    "\001\002\000\004\010\u0220\001\002\000\006\100\036\102" +
    "\033\001\002\000\006\013\uffe9\100\uffe9\001\002\000\004" +
    "\013\uffd9\001\002\000\004\013\uffd6\001\002\000\026\003" +
    "\063\005\055\011\064\012\062\013\uffde\020\061\023\073" +
    "\035\054\051\072\102\066\001\002\000\004\013\uffdd\001" +
    "\002\000\026\003\063\005\055\011\064\012\062\013\uffdc" +
    "\020\061\023\073\035\054\051\072\102\066\001\002\000" +
    "\004\013\uffd8\001\002\000\004\054\u0229\001\002\000\006" +
    "\060\141\065\105\001\002\000\004\037\u022b\001\002\000" +
    "\006\060\141\065\105\001\002\000\004\047\u022d\001\002" +
    "\000\006\060\141\065\105\001\002\000\006\100\036\102" +
    "\033\001\002\000\022\005\152\011\064\012\062\020\u0234" +
    "\023\164\035\u0231\051\072\102\u0237\001\002\000\024\005" +
    "\152\011\064\012\062\020\u0234\023\164\032\uff20\035\u0231" +
    "\051\072\102\u0237\001\002\000\004\011\u0250\001\002\000" +
    "\004\032\u024d\001\002\000\024\005\152\011\064\012\062" +
    "\020\u0234\023\164\032\uff21\035\u0231\051\072\102\u0237\001" +
    "\002\000\004\070\u023d\001\002\000\006\100\036\102\033" +
    "\001\002\000\024\005\152\011\064\012\062\020\u0234\023" +
    "\164\032\uff18\035\u0231\051\072\102\u0237\001\002\000\004" +
    "\100\u0238\001\002\000\024\005\152\011\064\012\062\020" +
    "\u0234\023\164\032\uff1d\035\u0231\051\072\102\u0237\001\002" +
    "\000\004\032\uff1c\001\002\000\004\032\uff17\001\002\000" +
    "\024\005\152\011\064\012\062\020\u0234\023\164\032\uff1a" +
    "\035\u0231\051\072\102\u0237\001\002\000\004\032\uff19\001" +
    "\002\000\006\021\u023f\111\u023e\001\002\000\004\073\u0248" +
    "\001\002\000\004\073\u0240\001\002\000\022\042\102\043" +
    "\103\051\223\060\077\064\222\065\105\073\100\074\u0241" +
    "\001\002\000\006\100\036\102\033\001\002\000\004\074" +
    "\u0243\001\002\000\006\100\036\102\033\001\002\000\024" +
    "\005\152\011\064\012\062\020\u0234\023\164\032\uff22\035" +
    "\u0231\051\072\102\u0237\001\002\000\004\032\uff1f\001\002" +
    "\000\024\005\152\011\064\012\062\020\u0234\023\164\032" +
    "\uff14\035\u0231\051\072\102\u0237\001\002\000\004\032\uff13" +
    "\001\002\000\004\074\u0249\001\002\000\006\100\036\102" +
    "\033\001\002\000\024\005\152\011\064\012\062\020\u0234" +
    "\023\164\032\uff12\035\u0231\051\072\102\u0237\001\002\000" +
    "\004\032\uff11\001\002\000\004\032\uff1e\001\002\000\004" +
    "\051\u024e\001\002\000\006\100\036\102\033\001\002\000" +
    "\036\003\uff23\005\uff23\011\uff23\012\uff23\013\uff23\020\uff23" +
    "\023\uff23\027\uff23\032\uff23\035\uff23\051\uff23\100\uff23\102" +
    "\uff23\107\uff23\001\002\000\006\100\036\102\033\001\002" +
    "\000\024\005\152\011\064\012\062\020\u0234\023\164\032" +
    "\uff15\035\u0231\051\072\102\u0237\001\002\000\004\032\uff16" +
    "\001\002\000\004\032\uff1b\001\002\000\024\003\063\005" +
    "\055\011\064\012\062\020\061\023\073\035\054\051\072" +
    "\102\066\001\002\000\004\013\uffcf\001\002\000\006\022" +
    "\u0257\054\u0258\001\002\000\014\014\u0269\015\u0268\016\u026b" +
    "\046\u026a\051\u0267\001\002\000\022\020\u01f1\042\102\043" +
    "\103\051\u0260\060\077\064\u0261\065\105\073\100\001\002" +
    "\000\006\100\uff65\102\uff65\001\002\000\024\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\073\uffbb\100\uff66\102\uff66" +
    "\110\uffbb\001\002\000\024\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\073\uffb9\100\036\102\033\110\uffb9\001\002" +
    "\000\036\003\uff71\005\uff71\011\uff71\012\uff71\013\uff71\020" +
    "\uff71\023\uff71\027\uff71\032\uff71\034\uff71\035\uff71\051\uff71" +
    "\102\uff71\107\uff71\001\002\000\006\100\036\102\033\001" +
    "\002\000\006\100\uff64\102\uff64\001\002\000\010\073\255" +
    "\100\036\102\033\001\002\000\034\042\102\043\103\051" +
    "\235\057\uffba\060\141\061\uffba\062\uffba\063\uffba\065\105" +
    "\073\u01eb\100\036\102\033\110\uffba\001\002\000\006\100" +
    "\uff67\102\uff67\001\002\000\036\003\uff73\005\uff73\011\uff73" +
    "\012\uff73\013\uff73\020\uff73\023\uff73\027\uff73\032\uff73\034" +
    "\uff73\035\uff73\051\uff73\102\uff73\107\uff73\001\002\000\036" +
    "\003\uff82\005\uff82\011\uff82\012\uff82\013\uff82\020\uff82\023" +
    "\uff82\027\uff82\032\uff82\034\uff82\035\uff82\051\uff82\102\uff82" +
    "\107\uff82\001\002\000\036\003\uff86\005\uff86\011\uff86\012" +
    "\uff86\013\uff86\020\uff86\023\uff86\027\uff86\032\uff86\034\uff86" +
    "\035\uff86\051\uff86\102\uff86\107\uff86\001\002\000\036\003" +
    "\uff85\005\uff85\011\uff85\012\uff85\013\uff85\020\uff85\023\uff85" +
    "\027\uff85\032\uff85\034\uff85\035\uff85\051\uff85\102\uff85\107" +
    "\uff85\001\002\000\010\054\u026c\100\036\102\033\001\002" +
    "\000\014\054\uff69\074\uff69\100\uff69\102\uff69\104\uff69\001" +
    "\002\000\014\054\uff6c\074\uff6c\100\uff6c\102\uff6c\104\uff6c" +
    "\001\002\000\014\054\uff6b\074\uff6b\100\uff6b\102\uff6b\104" +
    "\uff6b\001\002\000\014\054\uff6a\074\uff6a\100\uff6a\102\uff6a" +
    "\104\uff6a\001\002\000\014\054\uff6d\074\uff6d\100\uff6d\102" +
    "\uff6d\104\uff6d\001\002\000\022\020\u01f1\042\102\043\103" +
    "\051\u0272\060\077\064\u0261\065\105\073\100\001\002\000" +
    "\036\003\uff88\005\uff88\011\uff88\012\uff88\013\uff88\020\uff88" +
    "\023\uff88\027\uff88\032\uff88\034\uff88\035\uff88\051\uff88\102" +
    "\uff88\107\uff88\001\002\000\024\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\073\uffb9\100\036\102\033\110\uffb9\001" +
    "\002\000\036\003\uff70\005\uff70\011\uff70\012\uff70\013\uff70" +
    "\020\uff70\023\uff70\027\uff70\032\uff70\034\uff70\035\uff70\051" +
    "\uff70\102\uff70\107\uff70\001\002\000\006\100\036\102\033" +
    "\001\002\000\010\073\255\100\036\102\033\001\002\000" +
    "\034\042\102\043\103\051\235\057\uffba\060\141\061\uffba" +
    "\062\uffba\063\uffba\065\105\073\u01eb\100\036\102\033\110" +
    "\uffba\001\002\000\036\003\uff72\005\uff72\011\uff72\012\uff72" +
    "\013\uff72\020\uff72\023\uff72\027\uff72\032\uff72\034\uff72\035" +
    "\uff72\051\uff72\102\uff72\107\uff72\001\002\000\036\003\uff83" +
    "\005\uff83\011\uff83\012\uff83\013\uff83\020\uff83\023\uff83\027" +
    "\uff83\032\uff83\034\uff83\035\uff83\051\uff83\102\uff83\107\uff83" +
    "\001\002\000\036\003\uff87\005\uff87\011\uff87\012\uff87\013" +
    "\uff87\020\uff87\023\uff87\027\uff87\032\uff87\034\uff87\035\uff87" +
    "\051\uff87\102\uff87\107\uff87\001\002\000\036\003\uff84\005" +
    "\uff84\011\uff84\012\uff84\013\uff84\020\uff84\023\uff84\027\uff84" +
    "\032\uff84\034\uff84\035\uff84\051\uff84\102\uff84\107\uff84\001" +
    "\002\000\006\021\u0279\111\u0278\001\002\000\004\073\u0282" +
    "\001\002\000\004\073\u027a\001\002\000\022\042\102\043" +
    "\103\051\223\060\077\064\222\065\105\073\100\074\u027b" +
    "\001\002\000\006\100\036\102\033\001\002\000\004\074" +
    "\u027d\001\002\000\006\100\036\102\033\001\002\000\026" +
    "\003\063\005\055\011\064\012\062\013\uffe1\020\061\023" +
    "\073\035\054\051\072\102\066\001\002\000\004\013\uffdb" +
    "\001\002\000\026\003\063\005\055\011\064\012\062\013" +
    "\uffd3\020\061\023\073\035\054\051\072\102\066\001\002" +
    "\000\004\013\uffd2\001\002\000\004\074\u0283\001\002\000" +
    "\006\100\036\102\033\001\002\000\026\003\063\005\055" +
    "\011\064\012\062\013\uffd1\020\061\023\073\035\054\051" +
    "\072\102\066\001\002\000\004\013\uffd0\001\002\000\004" +
    "\013\uffda\001\002\000\004\026\u0288\001\002\000\006\100" +
    "\036\102\033\001\002\000\022\005\055\011\064\012\062" +
    "\020\u028c\023\073\035\u028a\051\072\102\u028f\001\002\000" +
    "\004\010\u02c4\001\002\000\030\005\055\011\064\012\062" +
    "\013\uff55\020\u028c\023\073\027\uff55\035\u028a\051\072\102" +
    "\u028f\107\uff55\001\002\000\004\070\u02b4\001\002\000\010" +
    "\013\u029d\027\u029c\107\u0120\001\002\000\006\100\036\102" +
    "\033\001\002\000\004\100\u0295\001\002\000\030\005\055" +
    "\011\064\012\062\013\uff4c\020\u028c\023\073\027\uff4c\035" +
    "\u028a\051\072\102\u028f\107\uff4c\001\002\000\012\013\uff54" +
    "\027\uff54\100\u0292\107\uff54\001\002\000\022\005\055\011" +
    "\064\012\062\020\u028c\023\073\035\u028a\051\072\102\u028f" +
    "\001\002\000\010\013\uff4e\027\uff4e\107\uff4e\001\002\000" +
    "\010\013\uff4b\027\uff4b\107\uff4b\001\002\000\030\005\055" +
    "\011\064\012\062\013\uff53\020\u028c\023\073\027\uff53\035" +
    "\u028a\051\072\102\u028f\107\uff53\001\002\000\010\013\uff52" +
    "\027\uff52\107\uff52\001\002\000\030\005\055\011\064\012" +
    "\062\013\uff51\020\u028c\023\073\027\uff51\035\u028a\051\072" +
    "\102\u028f\107\uff51\001\002\000\010\013\uff4d\027\uff4d\107" +
    "\uff4d\001\002\000\004\013\u02b1\001\002\000\016\042\102" +
    "\043\103\051\111\060\077\065\105\073\100\001\002\000" +
    "\006\100\036\102\033\001\002\000\010\005\u012d\100\036" +
    "\102\033\001\002\000\004\005\u029e\001\002\000\006\100" +
    "\036\102\033\001\002\000\034\003\uff5a\005\uff5a\011\uff5a" +
    "\012\uff5a\013\uff5a\020\uff5a\023\uff5a\027\uff5a\035\uff5a\051" +
    "\uff5a\100\uff5a\102\uff5a\107\uff5a\001\002\000\022\005\055" +
    "\011\064\012\062\020\u028c\023\073\035\u028a\051\072\102" +
    "\u028f\001\002\000\004\013\u02a2\001\002\000\004\005\u02a3" +
    "\001\002\000\006\100\036\102\033\001\002\000\034\003" +
    "\uff59\005\uff59\011\uff59\012\uff59\013\uff59\020\uff59\023\uff59" +
    "\027\uff59\035\uff59\051\uff59\100\uff59\102\uff59\107\uff59\001" +
    "\002\000\022\005\055\011\064\012\062\020\u028c\023\073" +
    "\035\u028a\051\072\102\u028f\001\002\000\004\013\u02a7\001" +
    "\002\000\004\005\u02a8\001\002\000\006\100\036\102\033" +
    "\001\002\000\034\003\uff58\005\uff58\011\uff58\012\uff58\013" +
    "\uff58\020\uff58\023\uff58\027\uff58\035\uff58\051\uff58\100\uff58" +
    "\102\uff58\107\uff58\001\002\000\004\026\u02ab\001\002\000" +
    "\006\100\036\102\033\001\002\000\022\005\055\011\064" +
    "\012\062\020\u028c\023\073\035\u028a\051\072\102\u028f\001" +
    "\002\000\010\013\uff41\027\u02b0\107\u0120\001\002\000\004" +
    "\013\uff42\001\002\000\006\100\uff44\102\uff44\001\002\000" +
    "\010\005\u012d\100\uff43\102\uff43\001\002\000\004\005\u02b2" +
    "\001\002\000\006\100\036\102\033\001\002\000\034\003" +
    "\uff57\005\uff57\011\uff57\012\uff57\013\uff57\020\uff57\023\uff57" +
    "\027\uff57\035\uff57\051\uff57\100\uff57\102\uff57\107\uff57\001" +
    "\002\000\006\021\u02b6\111\u02b5\001\002\000\004\073\u02bf" +
    "\001\002\000\004\073\u02b7\001\002\000\022\042\102\043" +
    "\103\051\223\060\077\064\222\065\105\073\100\074\u02b8" +
    "\001\002\000\006\100\036\102\033\001\002\000\004\074" +
    "\u02ba\001\002\000\006\100\036\102\033\001\002\000\030" +
    "\005\055\011\064\012\062\013\uff56\020\u028c\023\073\027" +
    "\uff56\035\u028a\051\072\102\u028f\107\uff56\001\002\000\010" +
    "\013\uff50\027\uff50\107\uff50\001\002\000\030\005\055\011" +
    "\064\012\062\013\uff48\020\u028c\023\073\027\uff48\035\u028a" +
    "\051\072\102\u028f\107\uff48\001\002\000\010\013\uff47\027" +
    "\uff47\107\uff47\001\002\000\004\074\u02c0\001\002\000\006" +
    "\100\036\102\033\001\002\000\030\005\055\011\064\012" +
    "\062\013\uff46\020\u028c\023\073\027\uff46\035\u028a\051\072" +
    "\102\u028f\107\uff46\001\002\000\010\013\uff45\027\uff45\107" +
    "\uff45\001\002\000\010\013\uff4f\027\uff4f\107\uff4f\001\002" +
    "\000\006\100\036\102\033\001\002\000\030\005\055\011" +
    "\064\012\062\013\uff49\020\u028c\023\073\027\uff49\035\u028a" +
    "\051\072\102\u028f\107\uff49\001\002\000\010\013\uff4a\027" +
    "\uff4a\107\uff4a\001\002\000\006\100\036\102\033\001\002" +
    "\000\026\003\063\005\055\011\064\012\062\013\uffd5\020" +
    "\061\023\073\035\054\051\072\102\066\001\002\000\004" +
    "\013\uffd4\001\002\000\024\003\063\005\055\011\064\012" +
    "\062\020\061\023\073\035\054\051\072\102\066\001\002" +
    "\000\004\013\u02cc\001\002\000\004\010\u02cd\001\002\000" +
    "\006\100\036\102\033\001\002\000\006\013\uffe7\100\uffe7" +
    "\001\002\000\014\014\u0269\015\u0268\016\u026b\046\u026a\051" +
    "\u0267\001\002\000\006\074\ufe88\104\u02d1\001\002\000\006" +
    "\051\046\106\045\001\002\000\004\074\ufe87\001\002\000" +
    "\004\022\u02d4\001\002\000\014\014\u0269\015\u0268\016\u026b" +
    "\046\u026a\051\u0267\001\002\000\006\074\ufe85\104\u02d6\001" +
    "\002\000\006\051\046\106\045\001\002\000\004\074\ufe86" +
    "\001\002\000\004\074\u02d9\001\002\000\006\100\u02db\102" +
    "\u02da\001\002\000\004\100\u02e0\001\002\000\024\003\063" +
    "\005\055\011\064\012\062\020\061\023\073\035\054\051" +
    "\072\102\066\001\002\000\004\013\u02dd\001\002\000\004" +
    "\010\u02de\001\002\000\006\100\036\102\033\001\002\000" +
    "\006\013\uffea\100\uffea\001\002\000\024\003\063\005\055" +
    "\011\064\012\062\020\061\023\073\035\054\051\072\102" +
    "\066\001\002\000\004\013\u02e2\001\002\000\004\010\u02e3" +
    "\001\002\000\006\100\036\102\033\001\002\000\006\013" +
    "\uffe8\100\uffe8\001\002\000\046\003\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\011\uffe5\012\uffe5\013\uffe5\020\uffe5\023\uffe5\027" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\051\uffe5\100\uffe5" +
    "\102\uffe5\107\uffe5\001\002\000\004\007\u02e7\001\002\000" +
    "\006\002\ufff4\102\ufff4\001\002\000\004\013\ufff1\001\002" +
    "\000\012\003\025\006\024\033\026\102\023\001\002\000" +
    "\004\013\uffef\001\002\000\012\003\025\006\024\033\026" +
    "\102\023\001\002\000\004\013\uffed\001\002\000\004\051" +
    "\u02ee\001\002\000\004\073\u02ef\001\002\000\006\051\046" +
    "\106\045\001\002\000\004\074\u02f1\001\002\000\004\022" +
    "\u02f2\001\002\000\014\014\u0269\015\u0268\016\u026b\046\u026a" +
    "\051\u0267\001\002\000\006\100\036\102\033\001\002\000" +
    "\022\005\u02f6\011\u02fb\012\062\020\u02fa\023\u0302\035\u02f5" +
    "\051\072\102\u02fe\001\002\000\004\030\u0425\001\002\000" +
    "\016\042\102\043\103\051\111\060\077\065\105\073\100" +
    "\001\002\000\004\013\u0404\001\002\000\024\005\u02f6\011" +
    "\u02fb\012\062\013\ufe83\020\u02fa\023\u0302\035\u02f5\051\072" +
    "\102\u02fe\001\002\000\030\005\ufe71\011\ufe71\012\ufe71\013" +
    "\ufe71\020\ufe71\023\ufe71\027\ufe71\035\ufe71\051\ufe71\102\ufe71" +
    "\107\ufe71\001\002\000\004\070\u03f4\001\002\000\004\051" +
    "\u03c5\001\002\000\006\100\036\102\033\001\002\000\024" +
    "\005\u02f6\011\u02fb\012\062\013\ufe7a\020\u02fa\023\u0302\035" +
    "\u02f5\051\072\102\u02fe\001\002\000\004\100\u03c0\001\002" +
    "\000\030\005\ufe70\011\ufe70\012\ufe70\013\ufe70\020\ufe70\023" +
    "\ufe70\027\ufe70\035\ufe70\051\ufe70\102\ufe70\107\ufe70\001\002" +
    "\000\024\005\u02f6\011\u02fb\012\062\013\ufe82\020\u02fa\023" +
    "\u0302\035\u02f5\051\072\102\u02fe\001\002\000\030\005\ufe72" +
    "\011\ufe72\012\ufe72\013\ufe72\020\ufe72\023\ufe72\027\ufe72\035" +
    "\ufe72\051\ufe72\102\ufe72\107\ufe72\001\002\000\006\024\076" +
    "\036\075\001\002\000\016\042\102\043\103\051\111\060" +
    "\077\065\105\073\100\001\002\000\006\100\036\102\033" +
    "\001\002\000\022\005\u0309\011\u02fb\012\062\020\u030d\023" +
    "\u0312\035\u0307\051\072\102\u0310\001\002\000\034\005\ufe40" +
    "\011\ufe40\012\ufe40\013\ufe40\020\ufe40\023\ufe40\027\ufe40\032" +
    "\ufe40\034\ufe40\035\ufe40\051\ufe40\102\ufe40\107\ufe40\001\002" +
    "\000\006\023\u03b9\030\u03ba\001\002\000\034\005\ufe3e\011" +
    "\ufe3e\012\ufe3e\013\ufe3e\020\ufe3e\023\ufe3e\027\ufe3e\032\ufe3e" +
    "\034\ufe3e\035\ufe3e\051\ufe3e\102\ufe3e\107\ufe3e\001\002\000" +
    "\016\042\102\043\103\051\111\060\077\065\105\073\100" +
    "\001\002\000\024\005\u0309\011\u02fb\012\062\020\u030d\023" +
    "\u0312\034\ufe08\035\u0307\051\072\102\u0310\001\002\000\004" +
    "\034\u0354\001\002\000\034\005\ufe3f\011\ufe3f\012\ufe3f\013" +
    "\ufe3f\020\ufe3f\023\ufe3f\027\ufe3f\032\ufe3f\034\ufe3f\035\ufe3f" +
    "\051\ufe3f\102\ufe3f\107\ufe3f\001\002\000\004\070\u0345\001" +
    "\002\000\006\100\036\102\033\001\002\000\024\005\u0309" +
    "\011\u02fb\012\062\020\u030d\023\u0312\034\ufdff\035\u0307\051" +
    "\072\102\u0310\001\002\000\004\100\u0340\001\002\000\024" +
    "\005\u0309\011\u02fb\012\062\020\u030d\023\u0312\034\ufe05\035" +
    "\u0307\051\072\102\u0310\001\002\000\006\024\076\036\075" +
    "\001\002\000\016\042\102\043\103\051\111\060\077\065" +
    "\105\073\100\001\002\000\006\100\036\102\033\001\002" +
    "\000\022\005\116\011\124\012\062\020\u0319\023\073\035" +
    "\u0316\051\072\102\u031d\001\002\000\010\011\u0338\023\u0336" +
    "\030\u0337\001\002\000\024\005\116\011\124\012\062\020" +
    "\u0319\023\073\034\ufe1f\035\u0316\051\072\102\u031d\001\002" +
    "\000\004\034\u0333\001\002\000\004\070\u0324\001\002\000" +
    "\024\005\116\011\124\012\062\020\u0319\023\073\034\ufe1e" +
    "\035\u0316\051\072\102\u031d\001\002\000\006\100\036\102" +
    "\033\001\002\000\024\005\116\011\124\012\062\020\u0319" +
    "\023\073\034\ufe16\035\u0316\051\072\102\u031d\001\002\000" +
    "\004\100\u031e\001\002\000\024\005\116\011\124\012\062" +
    "\020\u0319\023\073\034\ufe1d\035\u0316\051\072\102\u031d\001" +
    "\002\000\004\034\ufe1c\001\002\000\004\034\ufe15\001\002" +
    "\000\024\005\116\011\124\012\062\020\u0319\023\073\034" +
    "\ufe18\035\u0316\051\072\102\u031d\001\002\000\004\034\ufe17" +
    "\001\002\000\004\034\ufe19\001\002\000\006\021\u0326\111" +
    "\u0325\001\002\000\004\073\u032f\001\002\000\004\073\u0327" +
    "\001\002\000\022\042\102\043\103\051\223\060\077\064" +
    "\222\065\105\073\100\074\u0328\001\002\000\006\100\036" +
    "\102\033\001\002\000\004\074\u032a\001\002\000\006\100" +
    "\036\102\033\001\002\000\024\005\116\011\124\012\062" +
    "\020\u0319\023\073\034\ufe20\035\u0316\051\072\102\u031d\001" +
    "\002\000\004\034\ufe1b\001\002\000\024\005\116\011\124" +
    "\012\062\020\u0319\023\073\034\ufe0e\035\u0316\051\072\102" +
    "\u031d\001\002\000\004\034\ufe0d\001\002\000\004\074\u0330" +
    "\001\002\000\006\100\036\102\033\001\002\000\024\005" +
    "\116\011\124\012\062\020\u0319\023\073\034\ufe0c\035\u0316" +
    "\051\072\102\u031d\001\002\000\004\034\ufe0b\001\002\000" +
    "\006\100\036\102\033\001\002\000\034\005\ufe21\011\ufe21" +
    "\012\ufe21\013\ufe21\020\ufe21\023\ufe21\027\ufe21\032\ufe21\034" +
    "\ufe21\035\ufe21\051\ufe21\102\ufe21\107\ufe21\001\002\000\004" +
    "\034\ufe1a\001\002\000\006\100\036\102\033\001\002\000" +
    "\006\100\036\102\033\001\002\000\006\100\036\102\033" +
    "\001\002\000\024\005\116\011\124\012\062\020\u0319\023" +
    "\073\034\ufe10\035\u0316\051\072\102\u031d\001\002\000\004" +
    "\034\ufe13\001\002\000\024\005\116\011\124\012\062\020" +
    "\u0319\023\073\034\ufe0f\035\u0316\051\072\102\u031d\001\002" +
    "\000\004\034\ufe12\001\002\000\024\005\116\011\124\012" +
    "\062\020\u0319\023\073\034\ufe11\035\u0316\051\072\102\u031d" +
    "\001\002\000\004\034\ufe14\001\002\000\004\034\ufe02\001" +
    "\002\000\024\005\u0309\011\u02fb\012\062\020\u030d\023\u0312" +
    "\034\ufe07\035\u0307\051\072\102\u0310\001\002\000\004\034" +
    "\ufe06\001\002\000\004\034\ufdfe\001\002\000\024\005\u0309" +
    "\011\u02fb\012\062\020\u030d\023\u0312\034\ufe01\035\u0307\051" +
    "\072\102\u0310\001\002\000\004\034\ufe00\001\002\000\006" +
    "\021\u0347\111\u0346\001\002\000\004\073\u0350\001\002\000" +
    "\004\073\u0348\001\002\000\022\042\102\043\103\051\223" +
    "\060\077\064\222\065\105\073\100\074\u0349\001\002\000" +
    "\006\100\036\102\033\001\002\000\004\074\u034b\001\002" +
    "\000\006\100\036\102\033\001\002\000\024\005\u0309\011" +
    "\u02fb\012\062\020\u030d\023\u0312\034\ufe09\035\u0307\051\072" +
    "\102\u0310\001\002\000\004\034\ufe04\001\002\000\024\005" +
    "\u0309\011\u02fb\012\062\020\u030d\023\u0312\034\ufdf9\035\u0307" +
    "\051\072\102\u0310\001\002\000\004\034\ufdf8\001\002\000" +
    "\004\074\u0351\001\002\000\006\100\036\102\033\001\002" +
    "\000\024\005\u0309\011\u02fb\012\062\020\u030d\023\u0312\034" +
    "\ufdf7\035\u0307\051\072\102\u0310\001\002\000\004\034\ufdf6" +
    "\001\002\000\006\100\036\102\033\001\002\000\030\005" +
    "\ufe0a\011\ufe0a\012\ufe0a\013\ufe0a\020\ufe0a\023\ufe0a\027\ufe0a" +
    "\035\ufe0a\051\ufe0a\102\ufe0a\107\ufe0a\001\002\000\004\034" +
    "\ufe03\001\002\000\004\026\u0358\001\002\000\006\100\036" +
    "\102\033\001\002\000\022\005\u0309\011\u02fb\012\062\020" +
    "\u035c\023\u0312\035\u035a\051\072\102\u035e\001\002\000\006" +
    "\011\u03b4\030\u03b3\001\002\000\030\005\u0309\011\u02fb\012" +
    "\062\013\ufe38\020\u035c\023\u0312\027\ufe38\035\u035a\051\072" +
    "\102\u035e\107\ufe38\001\002\000\004\070\u03a3\001\002\000" +
    "\006\100\036\102\033\001\002\000\004\100\u037f\001\002" +
    "\000\030\005\u0309\011\u02fb\012\062\013\ufe2f\020\u035c\023" +
    "\u0312\027\ufe2f\035\u035a\051\072\102\u035e\107\ufe2f\001\002" +
    "\000\010\013\u0367\027\u0364\107\u0120\001\002\000\030\005" +
    "\u0309\011\u02fb\012\062\013\ufe35\020\u035c\023\u0312\027\ufe35" +
    "\035\u035a\051\072\102\u035e\107\ufe35\001\002\000\010\013" +
    "\ufe32\027\ufe32\107\ufe32\001\002\000\016\042\102\043\103" +
    "\051\111\060\077\065\105\073\100\001\002\000\010\005" +
    "\u012d\100\036\102\033\001\002\000\006\100\036\102\033" +
    "\001\002\000\004\013\u036a\001\002\000\004\005\u0368\001" +
    "\002\000\006\100\036\102\033\001\002\000\034\005\ufe3d" +
    "\011\ufe3d\012\ufe3d\013\ufe3d\020\ufe3d\023\ufe3d\027\ufe3d\032" +
    "\ufe3d\034\ufe3d\035\ufe3d\051\ufe3d\102\ufe3d\107\ufe3d\001\002" +
    "\000\004\005\u036b\001\002\000\006\100\036\102\033\001" +
    "\002\000\034\005\ufe3a\011\ufe3a\012\ufe3a\013\ufe3a\020\ufe3a" +
    "\023\ufe3a\027\ufe3a\032\ufe3a\034\ufe3a\035\ufe3a\051\ufe3a\102" +
    "\ufe3a\107\ufe3a\001\002\000\022\005\u0309\011\u02fb\012\062" +
    "\020\u035c\023\u0312\035\u035a\051\072\102\u035e\001\002\000" +
    "\004\013\u036f\001\002\000\004\005\u0370\001\002\000\006" +
    "\100\036\102\033\001\002\000\034\005\ufe3b\011\ufe3b\012" +
    "\ufe3b\013\ufe3b\020\ufe3b\023\ufe3b\027\ufe3b\032\ufe3b\034\ufe3b" +
    "\035\ufe3b\051\ufe3b\102\ufe3b\107\ufe3b\001\002\000\022\005" +
    "\u0309\011\u02fb\012\062\020\u035c\023\u0312\035\u035a\051\072" +
    "\102\u035e\001\002\000\004\013\u0374\001\002\000\004\005" +
    "\u0375\001\002\000\006\100\036\102\033\001\002\000\034" +
    "\005\ufe3c\011\ufe3c\012\ufe3c\013\ufe3c\020\ufe3c\023\ufe3c\027" +
    "\ufe3c\032\ufe3c\034\ufe3c\035\ufe3c\051\ufe3c\102\ufe3c\107\ufe3c" +
    "\001\002\000\004\026\u0378\001\002\000\006\100\036\102" +
    "\033\001\002\000\022\005\u0309\011\u02fb\012\062\020\u035c" +
    "\023\u0312\035\u035a\051\072\102\u035e\001\002\000\010\013" +
    "\ufe23\027\u037b\107\u0120\001\002\000\010\005\u012d\100\ufe25" +
    "\102\ufe25\001\002\000\006\100\ufe24\102\ufe24\001\002\000" +
    "\004\013\ufe22\001\002\000\010\013\ufe2e\027\ufe2e\107\ufe2e" +
    "\001\002\000\030\005\u0309\011\u02fb\012\062\013\ufe37\020" +
    "\u035c\023\u0312\027\ufe37\035\u035a\051\072\102\u035e\107\ufe37" +
    "\001\002\000\010\013\ufe36\027\ufe36\107\ufe36\001\002\000" +
    "\030\005\u02f6\011\u02fb\012\062\013\ufe31\020\u0385\023\u0302" +
    "\027\ufe31\035\u0383\051\072\102\u0388\107\ufe31\001\002\000" +
    "\010\013\ufe30\027\ufe30\107\ufe30\001\002\000\004\030\u03a0" +
    "\001\002\000\030\005\u02f6\011\u02fb\012\062\013\ufe6a\020" +
    "\u0385\023\u0302\027\ufe6a\035\u0383\051\072\102\u0388\107\ufe6a" +
    "\001\002\000\004\070\u0390\001\002\000\006\100\036\102" +
    "\033\001\002\000\030\005\u02f6\011\u02fb\012\062\013\ufe61" +
    "\020\u0385\023\u0302\027\ufe61\035\u0383\051\072\102\u0388\107" +
    "\ufe61\001\002\000\004\100\u038b\001\002\000\030\005\u02f6" +
    "\011\u02fb\012\062\013\ufe67\020\u0385\023\u0302\027\ufe67\035" +
    "\u0383\051\072\102\u0388\107\ufe67\001\002\000\010\013\ufe64" +
    "\027\ufe64\107\ufe64\001\002\000\030\005\u02f6\011\u02fb\012" +
    "\062\013\ufe69\020\u0385\023\u0302\027\ufe69\035\u0383\051\072" +
    "\102\u0388\107\ufe69\001\002\000\010\013\ufe68\027\ufe68\107" +
    "\ufe68\001\002\000\010\013\ufe60\027\ufe60\107\ufe60\001\002" +
    "\000\030\005\u02f6\011\u02fb\012\062\013\ufe63\020\u0385\023" +
    "\u0302\027\ufe63\035\u0383\051\072\102\u0388\107\ufe63\001\002" +
    "\000\010\013\ufe62\027\ufe62\107\ufe62\001\002\000\006\021" +
    "\u0392\111\u0391\001\002\000\004\073\u039b\001\002\000\004" +
    "\073\u0393\001\002\000\022\042\102\043\103\051\223\060" +
    "\077\064\222\065\105\073\100\074\u0394\001\002\000\006" +
    "\100\036\102\033\001\002\000\004\074\u0396\001\002\000" +
    "\006\100\036\102\033\001\002\000\030\005\u02f6\011\u02fb" +
    "\012\062\013\ufe6b\020\u0385\023\u0302\027\ufe6b\035\u0383\051" +
    "\072\102\u0388\107\ufe6b\001\002\000\010\013\ufe66\027\ufe66" +
    "\107\ufe66\001\002\000\030\005\u02f6\011\u02fb\012\062\013" +
    "\ufe5d\020\u0385\023\u0302\027\ufe5d\035\u0383\051\072\102\u0388" +
    "\107\ufe5d\001\002\000\010\013\ufe5c\027\ufe5c\107\ufe5c\001" +
    "\002\000\004\074\u039c\001\002\000\006\100\036\102\033" +
    "\001\002\000\030\005\u02f6\011\u02fb\012\062\013\ufe5b\020" +
    "\u0385\023\u0302\027\ufe5b\035\u0383\051\072\102\u0388\107\ufe5b" +
    "\001\002\000\010\013\ufe5a\027\ufe5a\107\ufe5a\001\002\000" +
    "\010\013\ufe65\027\ufe65\107\ufe65\001\002\000\006\100\036" +
    "\102\033\001\002\000\030\005\u02f6\011\u02fb\012\062\013" +
    "\ufe5e\020\u0385\023\u0302\027\ufe5e\035\u0383\051\072\102\u0388" +
    "\107\ufe5e\001\002\000\010\013\ufe5f\027\ufe5f\107\ufe5f\001" +
    "\002\000\006\021\u03a5\111\u03a4\001\002\000\004\073\u03ae" +
    "\001\002\000\004\073\u03a6\001\002\000\022\042\102\043" +
    "\103\051\223\060\077\064\222\065\105\073\100\074\u03a7" +
    "\001\002\000\006\100\036\102\033\001\002\000\004\074" +
    "\u03a9\001\002\000\006\100\036\102\033\001\002\000\030" +
    "\005\u0309\011\u02fb\012\062\013\ufe39\020\u035c\023\u0312\027" +
    "\ufe39\035\u035a\051\072\102\u035e\107\ufe39\001\002\000\010" +
    "\013\ufe34\027\ufe34\107\ufe34\001\002\000\030\005\u0309\011" +
    "\u02fb\012\062\013\ufe29\020\u035c\023\u0312\027\ufe29\035\u035a" +
    "\051\072\102\u035e\107\ufe29\001\002\000\010\013\ufe28\027" +
    "\ufe28\107\ufe28\001\002\000\004\074\u03af\001\002\000\006" +
    "\100\036\102\033\001\002\000\030\005\u0309\011\u02fb\012" +
    "\062\013\ufe27\020\u035c\023\u0312\027\ufe27\035\u035a\051\072" +
    "\102\u035e\107\ufe27\001\002\000\010\013\ufe26\027\ufe26\107" +
    "\ufe26\001\002\000\010\013\ufe33\027\ufe33\107\ufe33\001\002" +
    "\000\006\100\036\102\033\001\002\000\006\100\036\102" +
    "\033\001\002\000\030\005\u0309\011\u02fb\012\062\013\ufe2a" +
    "\020\u035c\023\u0312\027\ufe2a\035\u035a\051\072\102\u035e\107" +
    "\ufe2a\001\002\000\010\013\ufe2b\027\ufe2b\107\ufe2b\001\002" +
    "\000\030\005\u0309\011\u02fb\012\062\013\ufe2c\020\u035c\023" +
    "\u0312\027\ufe2c\035\u035a\051\072\102\u035e\107\ufe2c\001\002" +
    "\000\010\013\ufe2d\027\ufe2d\107\ufe2d\001\002\000\006\100" +
    "\036\102\033\001\002\000\006\100\036\102\033\001\002" +
    "\000\024\005\u0309\011\u02fb\012\062\020\u030d\023\u0312\034" +
    "\ufdfa\035\u0307\051\072\102\u0310\001\002\000\004\034\ufdfc" +
    "\001\002\000\024\005\u0309\011\u02fb\012\062\020\u030d\023" +
    "\u0312\034\ufdfb\035\u0307\051\072\102\u0310\001\002\000\004" +
    "\034\ufdfd\001\002\000\004\013\ufe7c\001\002\000\024\005" +
    "\u02f6\011\u02fb\012\062\013\ufe81\020\u02fa\023\u0302\035\u02f5" +
    "\051\072\102\u02fe\001\002\000\004\013\ufe80\001\002\000" +
    "\004\013\ufe79\001\002\000\024\005\u02f6\011\u02fb\012\062" +
    "\013\ufe7f\020\u02fa\023\u0302\035\u02f5\051\072\102\u02fe\001" +
    "\002\000\004\013\ufe7b\001\002\000\004\054\u03c6\001\002" +
    "\000\006\060\141\065\105\001\002\000\004\037\u03c8\001" +
    "\002\000\006\060\141\065\105\001\002\000\004\047\u03ca" +
    "\001\002\000\006\060\141\065\105\001\002\000\006\100" +
    "\036\102\033\001\002\000\022\005\u0309\011\u02fb\012\062" +
    "\020\u03cf\023\u0312\035\u03cd\051\072\102\u03d2\001\002\000" +
    "\006\011\u03ef\030\u03ee\001\002\000\024\005\u0309\011\u02fb" +
    "\012\062\020\u03cf\023\u0312\032\ufe53\035\u03cd\051\072\102" +
    "\u03d2\001\002\000\004\070\u03de\001\002\000\006\100\036" +
    "\102\033\001\002\000\004\032\u03d9\001\002\000\004\100" +
    "\u03d7\001\002\000\024\005\u0309\011\u02fb\012\062\020\u03cf" +
    "\023\u0312\032\ufe4a\035\u03cd\051\072\102\u03d2\001\002\000" +
    "\024\005\u0309\011\u02fb\012\062\020\u03cf\023\u0312\032\ufe50" +
    "\035\u03cd\051\072\102\u03d2\001\002\000\004\032\ufe4d\001" +
    "\002\000\004\032\ufe49\001\002\000\024\005\u0309\011\u02fb" +
    "\012\062\020\u03cf\023\u0312\032\ufe52\035\u03cd\051\072\102" +
    "\u03d2\001\002\000\004\032\ufe51\001\002\000\004\051\u03da" +
    "\001\002\000\006\100\036\102\033\001\002\000\034\005" +
    "\ufe55\011\ufe55\012\ufe55\013\ufe55\020\ufe55\023\ufe55\027\ufe55" +
    "\032\ufe55\034\ufe55\035\ufe55\051\ufe55\102\ufe55\107\ufe55\001" +
    "\002\000\024\005\u0309\011\u02fb\012\062\020\u03cf\023\u0312" +
    "\032\ufe4c\035\u03cd\051\072\102\u03d2\001\002\000\004\032" +
    "\ufe4b\001\002\000\006\021\u03e0\111\u03df\001\002\000\004" +
    "\073\u03e9\001\002\000\004\073\u03e1\001\002\000\022\042" +
    "\102\043\103\051\223\060\077\064\222\065\105\073\100" +
    "\074\u03e2\001\002\000\006\100\036\102\033\001\002\000" +
    "\004\074\u03e4\001\002\000\006\100\036\102\033\001\002" +
    "\000\024\005\u0309\011\u02fb\012\062\020\u03cf\023\u0312\032" +
    "\ufe54\035\u03cd\051\072\102\u03d2\001\002\000\004\032\ufe4f" +
    "\001\002\000\024\005\u0309\011\u02fb\012\062\020\u03cf\023" +
    "\u0312\032\ufe44\035\u03cd\051\072\102\u03d2\001\002\000\004" +
    "\032\ufe43\001\002\000\004\074\u03ea\001\002\000\006\100" +
    "\036\102\033\001\002\000\024\005\u0309\011\u02fb\012\062" +
    "\020\u03cf\023\u0312\032\ufe42\035\u03cd\051\072\102\u03d2\001" +
    "\002\000\004\032\ufe41\001\002\000\004\032\ufe4e\001\002" +
    "\000\006\100\036\102\033\001\002\000\006\100\036\102" +
    "\033\001\002\000\024\005\u0309\011\u02fb\012\062\020\u03cf" +
    "\023\u0312\032\ufe45\035\u03cd\051\072\102\u03d2\001\002\000" +
    "\004\032\ufe46\001\002\000\024\005\u0309\011\u02fb\012\062" +
    "\020\u03cf\023\u0312\032\ufe47\035\u03cd\051\072\102\u03d2\001" +
    "\002\000\004\032\ufe48\001\002\000\006\021\u03f6\111\u03f5" +
    "\001\002\000\004\073\u03ff\001\002\000\004\073\u03f7\001" +
    "\002\000\022\042\102\043\103\051\223\060\077\064\222" +
    "\065\105\073\100\074\u03f8\001\002\000\006\100\036\102" +
    "\033\001\002\000\004\074\u03fa\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\005\u02f6\011\u02fb\012\062\013" +
    "\ufe84\020\u02fa\023\u0302\035\u02f5\051\072\102\u02fe\001\002" +
    "\000\004\013\ufe7e\001\002\000\024\005\u02f6\011\u02fb\012" +
    "\062\013\ufe76\020\u02fa\023\u0302\035\u02f5\051\072\102\u02fe" +
    "\001\002\000\004\013\ufe75\001\002\000\004\074\u0400\001" +
    "\002\000\006\100\036\102\033\001\002\000\024\005\u02f6" +
    "\011\u02fb\012\062\013\ufe74\020\u02fa\023\u0302\035\u02f5\051" +
    "\072\102\u02fe\001\002\000\004\013\ufe73\001\002\000\004" +
    "\013\ufe7d\001\002\000\004\030\u0405\001\002\000\010\006" +
    "\ufe89\100\ufe89\102\ufe89\001\002\000\004\026\u0407\001\002" +
    "\000\006\100\036\102\033\001\002\000\022\005\u02f6\011" +
    "\u02fb\012\062\020\u0385\023\u0302\035\u0383\051\072\102\u0388" +
    "\001\002\000\010\013\u040e\027\u040c\107\u0120\001\002\000" +
    "\016\042\102\043\103\051\111\060\077\065\105\073\100" +
    "\001\002\000\004\013\u041b\001\002\000\010\005\u012d\100" +
    "\036\102\033\001\002\000\006\100\036\102\033\001\002" +
    "\000\004\005\u040f\001\002\000\006\100\036\102\033\001" +
    "\002\000\030\005\ufe6f\011\ufe6f\012\ufe6f\013\ufe6f\020\ufe6f" +
    "\023\ufe6f\027\ufe6f\035\ufe6f\051\ufe6f\102\ufe6f\107\ufe6f\001" +
    "\002\000\022\005\u02f6\011\u02fb\012\062\020\u0385\023\u0302" +
    "\035\u0383\051\072\102\u0388\001\002\000\004\013\u0413\001" +
    "\002\000\004\005\u0414\001\002\000\006\100\036\102\033" +
    "\001\002\000\030\005\ufe6d\011\ufe6d\012\ufe6d\013\ufe6d\020" +
    "\ufe6d\023\ufe6d\027\ufe6d\035\ufe6d\051\ufe6d\102\ufe6d\107\ufe6d" +
    "\001\002\000\022\005\u02f6\011\u02fb\012\062\020\u0385\023" +
    "\u0302\035\u0383\051\072\102\u0388\001\002\000\004\013\u0418" +
    "\001\002\000\004\005\u0419\001\002\000\006\100\036\102" +
    "\033\001\002\000\030\005\ufe6e\011\ufe6e\012\ufe6e\013\ufe6e" +
    "\020\ufe6e\023\ufe6e\027\ufe6e\035\ufe6e\051\ufe6e\102\ufe6e\107" +
    "\ufe6e\001\002\000\004\005\u041c\001\002\000\006\100\036" +
    "\102\033\001\002\000\030\005\ufe6c\011\ufe6c\012\ufe6c\013" +
    "\ufe6c\020\ufe6c\023\ufe6c\027\ufe6c\035\ufe6c\051\ufe6c\102\ufe6c" +
    "\107\ufe6c\001\002\000\004\026\u041f\001\002\000\006\100" +
    "\036\102\033\001\002\000\022\005\u02f6\011\u02fb\012\062" +
    "\020\u0385\023\u0302\035\u0383\051\072\102\u0388\001\002\000" +
    "\010\013\ufe57\027\u0422\107\u0120\001\002\000\010\005\u012d" +
    "\100\ufe59\102\ufe59\001\002\000\004\013\ufe56\001\002\000" +
    "\006\100\ufe58\102\ufe58\001\002\000\006\100\036\102\033" +
    "\001\002\000\024\005\u02f6\011\u02fb\012\062\013\ufe77\020" +
    "\u02fa\023\u0302\035\u02f5\051\072\102\u02fe\001\002\000\004" +
    "\013\ufe78\001\002\000\012\003\025\006\024\033\026\102" +
    "\023\001\002\000\004\013\uffeb\001\002\000\004\051\u042b" +
    "\001\002\000\006\100\036\102\033\001\002\000\004\012" +
    "\u042e\001\002\000\004\013\u0434\001\002\000\004\051\u042f" +
    "\001\002\000\004\022\u0430\001\002\000\014\014\u0269\015" +
    "\u0268\016\u026b\046\u026a\051\u0267\001\002\000\006\100\036" +
    "\102\033\001\002\000\006\012\u042e\013\ufe8c\001\002\000" +
    "\004\013\ufe8b\001\002\000\004\025\u0435\001\002\000\010" +
    "\006\ufe8a\100\ufe8a\102\ufe8a\001\002\000\012\003\025\006" +
    "\024\033\026\102\023\001\002\000\004\013\uffec\001\002" +
    "\000\012\003\025\006\024\033\026\102\023\001\002\000" +
    "\004\013\u043a\001\002\000\004\007\u043b\001\002\000\006" +
    "\002\ufff3\102\ufff3\001\002\000\006\003\007\004\004\001" +
    "\002\000\004\006\ufffa\001\002\000\004\002\001\001\002" +
    "\000\012\002\ufffd\003\007\004\004\102\005\001\002\000" +
    "\004\002\ufffe\001\002\000\004\100\u044b\001\002\000\010" +
    "\070\u0449\100\ufff9\102\ufff9\001\002\000\006\100\036\102" +
    "\033\001\002\000\010\070\u0445\100\ufff7\102\ufff7\001\002" +
    "\000\010\003\u0441\017\u0444\051\u0442\001\002\000\006\100" +
    "\ufff6\102\ufff6\001\002\000\010\003\007\004\004\006\ufffc" +
    "\001\002\000\004\006\ufffb\001\002\000\010\003\u0441\017" +
    "\u0444\051\u0442\001\002\000\006\100\ufff8\102\ufff8\001\002" +
    "\000\010\003\u0441\017\u0444\051\u0442\001\002\000\006\100" +
    "\ufff5\102\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u044a\000\006\002\005\003\007\001\001\000\004\005" +
    "\u0442\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\011\001\001\000\002\001\001\000" +
    "\004\125\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\026\021\030\053\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u02e7\121\u02e8\001\001\000\002\001" +
    "\001\000\006\010\034\121\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\027\010\026\021\037\053\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\056\022\070\025\067\026\052\032\057" +
    "\041\055\050\064\114\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\106\024\100\030\u0286\050\105" +
    "\113\103\123\107\001\001\000\002\001\001\000\022\015" +
    "\056\022\u0285\025\067\026\052\032\057\041\055\050\064" +
    "\114\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0225\001\001\000\002\001\001\000\022\015\056\022" +
    "\u0222\025\067\026\052\032\057\041\055\050\064\114\066" +
    "\001\001\000\022\015\056\022\u0221\025\067\026\052\032" +
    "\057\041\055\050\064\114\066\001\001\000\002\001\001" +
    "\000\012\024\231\113\232\115\u01ed\122\u01ec\001\001\000" +
    "\004\116\073\001\001\000\016\017\106\024\100\030\111" +
    "\050\105\113\103\123\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\307\001\001\000\012\017\u01db" +
    "\050\217\113\255\123\u01da\001\001\000\004\031\u01d3\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u01cd" +
    "\001\001\000\002\001\001\000\004\031\u01c8\001\001\000" +
    "\004\031\u01c2\001\001\000\004\020\275\001\001\000\004" +
    "\031\u01ba\001\001\000\004\121\112\001\001\000\022\015" +
    "\116\041\117\042\121\043\122\044\113\046\127\050\124" +
    "\114\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\106\024\100\030\u0172\050\105\113\103\123\107" +
    "\001\001\000\022\015\116\041\117\042\u0171\043\122\044" +
    "\113\046\127\050\124\114\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\116\041" +
    "\117\042\u015f\043\122\044\113\046\127\050\124\114\126" +
    "\001\001\000\002\001\001\000\004\121\133\001\001\000" +
    "\002\001\001\000\022\015\116\041\117\042\130\043\122" +
    "\044\113\046\127\050\124\114\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\116\041\117\042\132" +
    "\043\122\044\113\046\127\050\124\114\126\001\001\000" +
    "\002\001\001\000\022\015\116\041\117\042\134\043\122" +
    "\044\113\046\127\050\124\114\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\143\001\001\000\002\001\001\000\004\113\145\001\001" +
    "\000\004\121\146\001\001\000\022\015\152\032\153\034" +
    "\147\035\157\037\162\047\161\050\155\114\160\001\001" +
    "\000\022\015\152\032\153\034\147\035\157\037\162\047" +
    "\u015e\050\155\114\160\001\001\000\002\001\001\000\016" +
    "\017\106\024\100\030\u0114\050\105\113\103\123\107\001" +
    "\001\000\022\015\152\032\153\034\147\035\157\037\162" +
    "\047\u0113\050\155\114\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0102\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\152\032\153\034\147\035" +
    "\157\037\162\047\377\050\155\114\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\116\164\001\001\000" +
    "\016\017\106\024\100\030\165\050\105\113\103\123\107" +
    "\001\001\000\004\121\166\001\001\000\022\015\170\040" +
    "\176\041\117\043\172\044\113\046\127\050\173\114\174" +
    "\001\001\000\002\001\001\000\022\015\170\040\365\041" +
    "\117\043\172\044\113\046\127\050\173\114\174\001\001" +
    "\000\002\001\001\000\022\015\170\040\206\041\117\043" +
    "\172\044\113\046\127\050\173\114\174\001\001\000\004" +
    "\121\204\001\001\000\022\015\170\040\203\041\117\043" +
    "\172\044\113\046\127\050\173\114\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\200\001\001\000" +
    "\002\001\001\000\022\015\170\040\202\041\117\043\172" +
    "\044\113\046\127\050\173\114\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\170\040\205\041\117" +
    "\043\172\044\113\046\127\050\173\114\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\220\023\216\024" +
    "\214\050\217\113\215\123\107\001\001\000\004\121\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\220\023" +
    "\245\024\214\050\217\113\215\123\107\001\001\000\012" +
    "\024\231\051\230\113\232\115\233\001\001\000\002\001" +
    "\001\000\010\024\231\113\232\115\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\231\051\237\113\232" +
    "\115\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\231\051\244" +
    "\113\232\115\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\220" +
    "\023\250\024\214\050\217\113\215\123\107\001\001\000" +
    "\002\001\001\000\016\017\220\023\252\024\214\050\217" +
    "\113\215\123\107\001\001\000\002\001\001\000\016\017" +
    "\220\023\347\024\214\050\217\113\215\123\107\001\001" +
    "\000\012\017\260\050\217\113\255\123\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\275\001\001" +
    "\000\002\001\001\000\014\017\271\020\265\050\217\113" +
    "\255\123\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\307\001\001\000\012\017\273\050\217\113" +
    "\255\123\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\303" +
    "\050\217\113\255\120\305\123\304\001\001\000\012\017" +
    "\300\050\217\113\255\123\277\001\001\000\004\020\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\333\020\332\050" +
    "\217\113\255\123\334\001\001\000\012\017\313\050\217" +
    "\113\255\123\312\001\001\000\004\050\330\001\001\000" +
    "\004\020\275\001\001\000\002\001\001\000\014\017\316" +
    "\020\315\050\217\113\255\123\317\001\001\000\012\017" +
    "\321\050\217\113\255\123\320\001\001\000\002\001\001" +
    "\000\004\020\275\001\001\000\004\020\275\001\001\000" +
    "\002\001\001\000\014\017\324\020\323\050\217\113\255" +
    "\123\325\001\001\000\012\017\327\050\217\113\255\123" +
    "\326\001\001\000\002\001\001\000\004\020\275\001\001" +
    "\000\004\020\275\001\001\000\002\001\001\000\014\017" +
    "\333\020\332\050\217\113\255\123\334\001\001\000\014" +
    "\017\337\020\336\050\217\113\255\123\340\001\001\000" +
    "\014\017\303\050\217\113\255\120\335\123\304\001\001" +
    "\000\002\001\001\000\004\020\275\001\001\000\002\001" +
    "\001\000\012\017\341\050\217\113\255\123\107\001\001" +
    "\000\002\001\001\000\004\020\275\001\001\000\002\001" +
    "\001\000\014\017\344\020\343\050\217\113\255\123\107" +
    "\001\001\000\012\017\346\050\217\113\255\123\345\001" +
    "\001\000\002\001\001\000\004\020\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\351\001\001\000" +
    "\022\015\170\040\352\041\117\043\172\044\113\046\127" +
    "\050\173\114\174\001\001\000\002\001\001\000\016\017" +
    "\220\023\354\024\214\050\217\113\215\123\107\001\001" +
    "\000\002\001\001\000\016\017\220\023\356\024\214\050" +
    "\217\113\215\123\107\001\001\000\002\001\001\000\022" +
    "\015\170\040\360\041\117\043\172\044\113\046\127\050" +
    "\173\114\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\363\001\001\000\022\015\170\040\364\041" +
    "\117\043\172\044\113\046\127\050\173\114\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\372\001" +
    "\001\000\004\121\370\001\001\000\022\015\170\040\371" +
    "\041\117\043\172\044\113\046\127\050\173\114\174\001" +
    "\001\000\002\001\001\000\022\015\170\040\373\041\117" +
    "\043\172\044\113\046\127\050\173\114\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\152\032" +
    "\153\034\147\035\157\037\162\047\u0101\050\155\114\160" +
    "\001\001\000\002\001\001\000\022\015\152\032\153\034" +
    "\147\035\157\037\162\047\u0103\050\155\114\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\220\023\u0109\024\214\050\217" +
    "\113\215\123\107\001\001\000\004\121\u010d\001\001\000" +
    "\002\001\001\000\004\121\u010b\001\001\000\022\015\152" +
    "\032\153\034\147\035\157\037\162\047\u010c\050\155\114" +
    "\160\001\001\000\002\001\001\000\022\015\152\032\153" +
    "\034\147\035\157\037\162\047\u010e\050\155\114\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0111" +
    "\001\001\000\022\015\152\032\153\034\147\035\157\037" +
    "\162\047\u0112\050\155\114\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0116\001" +
    "\001\000\022\015\u0119\032\153\034\u0117\035\157\037\162" +
    "\050\u011b\100\u011e\114\u011c\001\001\000\022\015\u0119\032" +
    "\153\034\u0117\035\157\037\162\050\u011b\100\u0157\114\u011c" +
    "\001\001\000\002\001\001\000\022\015\u0119\032\153\034" +
    "\u0117\035\157\037\162\050\u011b\100\u0150\114\u011c\001\001" +
    "\000\002\001\001\000\004\121\u013f\001\001\000\022\015" +
    "\u0119\032\153\034\u0117\035\157\037\162\050\u011b\100\u013e" +
    "\114\u011c\001\001\000\002\001\001\000\010\036\u0123\110" +
    "\u0121\117\u0120\001\001\000\002\001\001\000\016\017\106" +
    "\024\100\030\u0135\050\105\113\103\123\107\001\001\000" +
    "\002\001\001\000\004\121\u012d\001\001\000\004\121\u0127" +
    "\001\001\000\002\001\001\000\004\121\u0126\001\001\000" +
    "\002\001\001\000\022\015\u0119\032\153\034\u0117\035\157" +
    "\037\162\050\u011b\100\u0128\114\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u012b\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\u0119\032\153\034" +
    "\u0117\035\157\037\162\050\u011b\100\u012e\114\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0137\001\001\000\022\015\u0119\032\153\034\u0117\035\157" +
    "\037\162\050\u011b\100\u0138\114\u011c\001\001\000\010\036" +
    "\u013b\110\u0139\117\u0120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\u0119\032\153\034" +
    "\u0117\035\157\037\162\050\u011b\100\u013d\114\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u0119\032" +
    "\153\034\u0117\035\157\037\162\050\u011b\100\u0140\114\u011c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\220\023\u0146\024\214" +
    "\050\217\113\215\123\107\001\001\000\004\121\u014a\001" +
    "\001\000\002\001\001\000\004\121\u0148\001\001\000\022" +
    "\015\u0119\032\153\034\u0117\035\157\037\162\050\u011b\100" +
    "\u0149\114\u011c\001\001\000\002\001\001\000\022\015\u0119" +
    "\032\153\034\u0117\035\157\037\162\050\u011b\100\u014b\114" +
    "\u011c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u014e\001\001\000\022\015\u0119\032\153\034\u0117\035" +
    "\157\037\162\050\u011b\100\u014f\114\u011c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0155\001\001\000" +
    "\004\121\u0153\001\001\000\022\015\u0119\032\153\034\u0117" +
    "\035\157\037\162\050\u011b\100\u0154\114\u011c\001\001\000" +
    "\002\001\001\000\022\015\u0119\032\153\034\u0117\035\157" +
    "\037\162\050\u011b\100\u0156\114\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u015c\001\001\000\004" +
    "\121\u015a\001\001\000\022\015\152\032\153\034\147\035" +
    "\157\037\162\047\u015b\050\155\114\160\001\001\000\002" +
    "\001\001\000\022\015\152\032\153\034\147\035\157\037" +
    "\162\047\u015d\050\155\114\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\220\023\u0167\024\214\050" +
    "\217\113\215\123\107\001\001\000\004\121\u016b\001\001" +
    "\000\002\001\001\000\004\121\u0169\001\001\000\022\015" +
    "\116\041\117\042\u016a\043\122\044\113\046\127\050\124" +
    "\114\126\001\001\000\002\001\001\000\022\015\116\041" +
    "\117\042\u016c\043\122\044\113\046\127\050\124\114\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u016f\001\001\000\022\015\116\041\117\042\u0170\043\122" +
    "\044\113\046\127\050\124\114\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0174" +
    "\001\001\000\022\015\u0176\041\117\043\u0178\044\113\046" +
    "\127\050\u0179\101\u017c\114\u017b\001\001\000\002\001\001" +
    "\000\022\015\u0176\041\117\043\u0178\044\113\046\127\050" +
    "\u0179\101\u01ad\114\u017b\001\001\000\002\001\001\000\022" +
    "\015\u0176\041\117\043\u0178\044\113\046\127\050\u0179\101" +
    "\u019d\114\u017b\001\001\000\004\121\u019b\001\001\000\002" +
    "\001\001\000\022\015\u0176\041\117\043\u0178\044\113\046" +
    "\127\050\u0179\101\u0198\114\u017b\001\001\000\010\045\u017f" +
    "\106\u0180\117\u017d\001\001\000\016\017\106\024\100\030" +
    "\u0191\050\105\113\103\123\107\001\001\000\004\121\u018c" +
    "\001\001\000\004\121\u0187\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0183\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0186\001\001\000\002\001" +
    "\001\000\022\015\u0176\041\117\043\u0178\044\113\046\127" +
    "\050\u0179\101\u0188\114\u017b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u018b\001\001\000\002\001\001" +
    "\000\022\015\u0176\041\117\043\u0178\044\113\046\127\050" +
    "\u0179\101\u018d\114\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0190\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0193\001\001\000\022\015\u0176" +
    "\041\117\043\u0178\044\113\046\127\050\u0179\101\u0194\114" +
    "\u017b\001\001\000\010\045\u0196\106\u0197\117\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\u0176\041\117\043\u0178\044\113" +
    "\046\127\050\u0179\101\u019a\114\u017b\001\001\000\002\001" +
    "\001\000\022\015\u0176\041\117\043\u0178\044\113\046\127" +
    "\050\u0179\101\u019c\114\u017b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\220\023\u01a3\024\214\050\217\113" +
    "\215\123\107\001\001\000\004\121\u01a7\001\001\000\002" +
    "\001\001\000\004\121\u01a5\001\001\000\022\015\u0176\041" +
    "\117\043\u0178\044\113\046\127\050\u0179\101\u01a6\114\u017b" +
    "\001\001\000\002\001\001\000\022\015\u0176\041\117\043" +
    "\u0178\044\113\046\127\050\u0179\101\u01a8\114\u017b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u01ab\001" +
    "\001\000\022\015\u0176\041\117\043\u0178\044\113\046\127" +
    "\050\u0179\101\u01ac\114\u017b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u01b2\001\001\000\004\121\u01b0" +
    "\001\001\000\022\015\u0176\041\117\043\u0178\044\113\046" +
    "\127\050\u0179\101\u01b1\114\u017b\001\001\000\002\001\001" +
    "\000\022\015\u0176\041\117\043\u0178\044\113\046\127\050" +
    "\u0179\101\u01b3\114\u017b\001\001\000\002\001\001\000\004" +
    "\121\u01b5\001\001\000\022\015\116\041\117\042\u01b6\043" +
    "\122\044\113\046\127\050\124\114\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\u01be\024\u01bb\050\u01bd\113\u01bc\123\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\u01c6\024\u01c3\050\u01c5\113" +
    "\u01c4\123\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u01cb\024\u01c9\050\217\113\u01ca\123\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\u01d1\024\u01ce\050\u01d0\113\u01cf" +
    "\123\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\u01d7\024\u01d4\050\u01d6\113\u01d5\123\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u01e8\001\001\000" +
    "\004\020\275\001\001\000\002\001\001\000\014\017\u01de" +
    "\020\u01dd\050\217\113\255\123\u01df\001\001\000\012\017" +
    "\u01e1\050\217\113\255\123\u01e0\001\001\000\002\001\001" +
    "\000\004\020\275\001\001\000\004\020\275\001\001\000" +
    "\002\001\001\000\014\017\u01e4\020\u01e3\050\217\113\255" +
    "\123\u01e5\001\001\000\012\017\u01e7\050\217\113\255\123" +
    "\u01e6\001\001\000\002\001\001\000\004\020\275\001\001" +
    "\000\004\020\275\001\001\000\002\001\001\000\014\017" +
    "\333\020\332\050\217\113\255\123\334\001\001\000\002" +
    "\001\001\000\012\024\231\051\230\113\232\115\u021c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0203" +
    "\001\001\000\020\017\u01f5\024\u01ef\050\u01f2\113\u01f1\114" +
    "\u01f3\123\107\124\u01f4\001\001\000\004\121\u0201\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u01fc\001" +
    "\001\000\002\001\001\000\004\121\u01fb\001\001\000\004" +
    "\121\u01fa\001\001\000\014\024\231\113\232\115\u01ed\121" +
    "\u01f9\122\u01ec\001\001\000\004\121\u01f8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\231\113\232\115\u01ed\122\u0205\001\001\000\002" +
    "\001\001\000\010\024\231\113\232\115\u0206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0209\001\001" +
    "\000\012\024\231\113\232\115\u01ed\122\u020a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\u0212\024\u020d\050\u020f\113\u020e\114\u0210\123\107\124" +
    "\u0211\001\001\000\004\121\u021b\001\001\000\004\121\u021a" +
    "\001\001\000\004\121\u0219\001\001\000\002\001\001\000" +
    "\004\121\u0218\001\001\000\004\121\u0217\001\001\000\014" +
    "\024\231\113\232\115\u01ed\121\u0216\122\u01ec\001\001\000" +
    "\004\121\u0215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0209\001\001\000\002\001\001\000\004\121\u0220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\056\022\u0224\025\067\026\052\032\057\041" +
    "\055\050\064\114\066\001\001\000\002\001\001\000\022" +
    "\015\056\022\u0226\025\067\026\052\032\057\041\055\050" +
    "\064\114\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u0229\001\001\000\002\001\001\000\004\113" +
    "\u022b\001\001\000\002\001\001\000\004\113\u022d\001\001" +
    "\000\004\121\u022e\001\001\000\022\015\u0232\032\153\033" +
    "\u0231\034\u022f\035\157\037\162\050\u0234\114\u0235\001\001" +
    "\000\022\015\u0232\032\153\033\u0252\034\u022f\035\157\037" +
    "\162\050\u0234\114\u0235\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\u0232\032\153\033\u024b\034\u022f\035" +
    "\157\037\162\050\u0234\114\u0235\001\001\000\002\001\001" +
    "\000\004\121\u023a\001\001\000\022\015\u0232\032\153\033" +
    "\u0239\034\u022f\035\157\037\162\050\u0234\114\u0235\001\001" +
    "\000\002\001\001\000\022\015\u0232\032\153\033\u0238\034" +
    "\u022f\035\157\037\162\050\u0234\114\u0235\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\u0232\032\153\033" +
    "\u023b\034\u022f\035\157\037\162\050\u0234\114\u0235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\220\023\u0241\024\214\050\217" +
    "\113\215\123\107\001\001\000\004\121\u0245\001\001\000" +
    "\002\001\001\000\004\121\u0243\001\001\000\022\015\u0232" +
    "\032\153\033\u0244\034\u022f\035\157\037\162\050\u0234\114" +
    "\u0235\001\001\000\002\001\001\000\022\015\u0232\032\153" +
    "\033\u0246\034\u022f\035\157\037\162\050\u0234\114\u0235\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0249" +
    "\001\001\000\022\015\u0232\032\153\033\u024a\034\u022f\035" +
    "\157\037\162\050\u0234\114\u0235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u024e\001" +
    "\001\000\002\001\001\000\004\121\u0250\001\001\000\022" +
    "\015\u0232\032\153\033\u0251\034\u022f\035\157\037\162\050" +
    "\u0234\114\u0235\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\056\022\u0254\025\067\026\052\032\057\041" +
    "\055\050\064\114\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0265\001\001\000\022\016\u025c\017" +
    "\u025e\024\u0258\050\u025a\113\u0259\114\u025b\123\107\124\u025d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0264\001\001\000\002\001\001\000\004\121\u0263\001\001" +
    "\000\002\001\001\000\004\121\u0262\001\001\000\014\024" +
    "\231\113\232\115\u01ed\121\u0261\122\u01ec\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u026c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\u026f\017\u0270\024\u0258" +
    "\050\u026d\113\u0259\114\u026e\123\107\124\u025d\001\001\000" +
    "\002\001\001\000\004\121\u0275\001\001\000\002\001\001" +
    "\000\004\121\u0274\001\001\000\004\121\u0273\001\001\000" +
    "\014\024\231\113\232\115\u01ed\121\u0272\122\u01ec\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\220\023\u027b\024\214\050\217\113" +
    "\215\123\107\001\001\000\004\121\u027f\001\001\000\002" +
    "\001\001\000\004\121\u027d\001\001\000\022\015\056\022" +
    "\u027e\025\067\026\052\032\057\041\055\050\064\114\066" +
    "\001\001\000\002\001\001\000\022\015\056\022\u0280\025" +
    "\067\026\052\032\057\041\055\050\064\114\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0283\001" +
    "\001\000\022\015\056\022\u0284\025\067\026\052\032\057" +
    "\041\055\050\064\114\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0288\001\001" +
    "\000\022\015\u028a\025\u0290\026\052\032\057\041\055\050" +
    "\u028d\077\u028c\114\u028f\001\001\000\002\001\001\000\022" +
    "\015\u028a\025\u0290\026\052\032\057\041\055\050\u028d\077" +
    "\u02c2\114\u028f\001\001\000\002\001\001\000\010\027\u029a" +
    "\107\u0298\117\u0299\001\001\000\004\121\u0296\001\001\000" +
    "\002\001\001\000\022\015\u028a\025\u0290\026\052\032\057" +
    "\041\055\050\u028d\077\u0293\114\u028f\001\001\000\002\001" +
    "\001\000\022\015\u028a\025\u0290\026\052\032\057\041\055" +
    "\050\u028d\077\u0292\114\u028f\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\u028a\025\u0290\026\052\032\057" +
    "\041\055\050\u028d\077\u0295\114\u028f\001\001\000\002\001" +
    "\001\000\022\015\u028a\025\u0290\026\052\032\057\041\055" +
    "\050\u028d\077\u0297\114\u028f\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\106\024\100\030\u02a9\050\105" +
    "\113\103\123\107\001\001\000\004\121\u02a4\001\001\000" +
    "\004\121\u029f\001\001\000\002\001\001\000\004\121\u029e" +
    "\001\001\000\002\001\001\000\022\015\u028a\025\u0290\026" +
    "\052\032\057\041\055\050\u028d\077\u02a0\114\u028f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u02a3\001" +
    "\001\000\002\001\001\000\022\015\u028a\025\u0290\026\052" +
    "\032\057\041\055\050\u028d\077\u02a5\114\u028f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u02a8\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u02ab\001" +
    "\001\000\022\015\u028a\025\u0290\026\052\032\057\041\055" +
    "\050\u028d\077\u02ac\114\u028f\001\001\000\010\027\u02ae\107" +
    "\u02ad\117\u0299\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u02b2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\220\023\u02b8\024\214\050" +
    "\217\113\215\123\107\001\001\000\004\121\u02bc\001\001" +
    "\000\002\001\001\000\004\121\u02ba\001\001\000\022\015" +
    "\u028a\025\u0290\026\052\032\057\041\055\050\u028d\077\u02bb" +
    "\114\u028f\001\001\000\002\001\001\000\022\015\u028a\025" +
    "\u0290\026\052\032\057\041\055\050\u028d\077\u02bd\114\u028f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u02c0\001\001\000\022\015\u028a\025\u0290\026\052\032\057" +
    "\041\055\050\u028d\077\u02c1\114\u028f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u02c4\001\001\000\022" +
    "\015\u028a\025\u0290\026\052\032\057\041\055\050\u028d\077" +
    "\u02c5\114\u028f\001\001\000\002\001\001\000\004\121\u02c7" +
    "\001\001\000\022\015\056\022\u02c8\025\067\026\052\032" +
    "\057\041\055\050\064\114\066\001\001\000\002\001\001" +
    "\000\022\015\056\022\u02ca\025\067\026\052\032\057\041" +
    "\055\050\064\114\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u02cd\001\001\000\002\001\001\000" +
    "\004\012\u02cf\001\001\000\002\001\001\000\004\011\u02d1" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u02d4\001\001\000\002\001\001\000\004\011\u02d6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\056\022\u02db\025\067\026\052" +
    "\032\057\041\055\050\064\114\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u02de\001\001\000\002" +
    "\001\001\000\022\015\056\022\u02e0\025\067\026\052\032" +
    "\057\041\055\050\064\114\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u02e3\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\027\010\026\021\u02e9\053" +
    "\031\001\001\000\002\001\001\000\012\007\027\010\026" +
    "\021\u02eb\053\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u02ef\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u02f2\001\001\000" +
    "\004\121\u02f3\001\001\000\022\013\u02f6\015\u02f7\050\u02fb" +
    "\054\u02ff\055\u0300\057\u02f8\066\u02fe\114\u02fc\001\001\000" +
    "\002\001\001\000\016\017\106\024\100\030\u0405\050\105" +
    "\113\103\123\107\001\001\000\002\001\001\000\022\013" +
    "\u0402\015\u02f7\050\u02fb\054\u02ff\055\u0300\057\u02f8\066\u02fe" +
    "\114\u02fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u03c2\001\001\000\022\013\u03c1" +
    "\015\u02f7\050\u02fb\054\u02ff\055\u0300\057\u02f8\066\u02fe\114" +
    "\u02fc\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\u03be\015\u02f7\050\u02fb\054\u02ff\055\u0300\057\u02f8\066" +
    "\u02fe\114\u02fc\001\001\000\002\001\001\000\004\116\u0302" +
    "\001\001\000\016\017\106\024\100\030\u0303\050\105\113" +
    "\103\123\107\001\001\000\004\121\u0304\001\001\000\022" +
    "\015\u0309\050\u030d\057\u030b\061\u0310\062\u0305\064\u0307\067" +
    "\u030a\114\u030e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\106\024\100\030\u0356\050" +
    "\105\113\103\123\107\001\001\000\022\015\u0309\050\u030d" +
    "\057\u030b\061\u0310\062\u0305\064\u0307\067\u0355\114\u030e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0342\001\001\000\022\015\u0309\050\u030d\057" +
    "\u030b\061\u0310\062\u0305\064\u0307\067\u0341\114\u030e\001\001" +
    "\000\002\001\001\000\022\015\u0309\050\u030d\057\u030b\061" +
    "\u0310\062\u0305\064\u0307\067\u033e\114\u030e\001\001\000\004" +
    "\116\u0312\001\001\000\016\017\106\024\100\030\u0313\050" +
    "\105\113\103\123\107\001\001\000\004\121\u0314\001\001" +
    "\000\022\015\u0316\041\117\043\u0319\044\113\046\127\050" +
    "\u031a\065\u0317\114\u031b\001\001\000\002\001\001\000\022" +
    "\015\u0316\041\117\043\u0319\044\113\046\127\050\u031a\065" +
    "\u0334\114\u031b\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\u0316\041\117\043\u0319\044\113\046\127\050" +
    "\u031a\065\u0322\114\u031b\001\001\000\004\121\u0320\001\001" +
    "\000\022\015\u0316\041\117\043\u0319\044\113\046\127\050" +
    "\u031a\065\u031f\114\u031b\001\001\000\002\001\001\000\022" +
    "\015\u0316\041\117\043\u0319\044\113\046\127\050\u031a\065" +
    "\u031e\114\u031b\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\u0316\041\117\043\u0319\044\113\046\127\050" +
    "\u031a\065\u0321\114\u031b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\220\023\u0328\024\214\050\217\113\215" +
    "\123\107\001\001\000\004\121\u032c\001\001\000\002\001" +
    "\001\000\004\121\u032a\001\001\000\022\015\u0316\041\117" +
    "\043\u0319\044\113\046\127\050\u031a\065\u032b\114\u031b\001" +
    "\001\000\002\001\001\000\022\015\u0316\041\117\043\u0319" +
    "\044\113\046\127\050\u031a\065\u032d\114\u031b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0330\001\001" +
    "\000\022\015\u0316\041\117\043\u0319\044\113\046\127\050" +
    "\u031a\065\u0331\114\u031b\001\001\000\002\001\001\000\004" +
    "\121\u0333\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u033c\001\001\000\004\121\u033a\001\001\000\004" +
    "\121\u0338\001\001\000\022\015\u0316\041\117\043\u0319\044" +
    "\113\046\127\050\u031a\065\u0339\114\u031b\001\001\000\002" +
    "\001\001\000\022\015\u0316\041\117\043\u0319\044\113\046" +
    "\127\050\u031a\065\u033b\114\u031b\001\001\000\002\001\001" +
    "\000\022\015\u0316\041\117\043\u0319\044\113\046\127\050" +
    "\u031a\065\u033d\114\u031b\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\u0309\050\u030d\057\u030b\061\u0310\062" +
    "\u0305\064\u0307\067\u0340\114\u030e\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\u0309\050\u030d\057\u030b\061" +
    "\u0310\062\u0305\064\u0307\067\u0343\114\u030e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\220\023\u0349\024\214\050\217\113\215" +
    "\123\107\001\001\000\004\121\u034d\001\001\000\002\001" +
    "\001\000\004\121\u034b\001\001\000\022\015\u0309\050\u030d" +
    "\057\u030b\061\u0310\062\u0305\064\u0307\067\u034c\114\u030e\001" +
    "\001\000\002\001\001\000\022\015\u0309\050\u030d\057\u030b" +
    "\061\u0310\062\u0305\064\u0307\067\u034e\114\u030e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0351\001\001" +
    "\000\022\015\u0309\050\u030d\057\u030b\061\u0310\062\u0305\064" +
    "\u0307\067\u0352\114\u030e\001\001\000\002\001\001\000\004" +
    "\121\u0354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0358\001\001\000\022\015\u035a" +
    "\050\u035c\057\u030b\061\u0360\062\u0305\064\u0307\103\u035f\114" +
    "\u035e\001\001\000\002\001\001\000\022\015\u035a\050\u035c" +
    "\057\u030b\061\u0360\062\u0305\064\u0307\103\u03b1\114\u035e\001" +
    "\001\000\002\001\001\000\004\121\u0380\001\001\000\002" +
    "\001\001\000\022\015\u035a\050\u035c\057\u030b\061\u0360\062" +
    "\u0305\064\u0307\103\u037d\114\u035e\001\001\000\010\063\u0364" +
    "\112\u0365\117\u0362\001\001\000\022\015\u035a\050\u035c\057" +
    "\u030b\061\u0360\062\u0305\064\u0307\103\u0361\114\u035e\001\001" +
    "\000\002\001\001\000\016\017\106\024\100\030\u0376\050" +
    "\105\113\103\123\107\001\001\000\004\121\u0371\001\001" +
    "\000\004\121\u036c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0368\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u036b\001\001\000\002\001\001\000" +
    "\022\015\u035a\050\u035c\057\u030b\061\u0360\062\u0305\064\u0307" +
    "\103\u036d\114\u035e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0370\001\001\000\002\001\001\000\022" +
    "\015\u035a\050\u035c\057\u030b\061\u0360\062\u0305\064\u0307\103" +
    "\u0372\114\u035e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0375\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0378\001\001\000\022\015\u035a\050\u035c" +
    "\057\u030b\061\u0360\062\u0305\064\u0307\103\u0379\114\u035e\001" +
    "\001\000\010\063\u037b\112\u037c\117\u0362\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u035a\050\u035c\057\u030b\061\u0360\062\u0305" +
    "\064\u0307\103\u037f\114\u035e\001\001\000\002\001\001\000" +
    "\022\015\u0383\050\u0385\054\u0388\055\u0300\057\u02f8\066\u02fe" +
    "\102\u0381\114\u0386\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u0383\050\u0385\054\u0388\055\u0300\057\u02f8" +
    "\066\u02fe\102\u039e\114\u0386\001\001\000\002\001\001\000" +
    "\004\121\u038d\001\001\000\022\015\u0383\050\u0385\054\u0388" +
    "\055\u0300\057\u02f8\066\u02fe\102\u038c\114\u0386\001\001\000" +
    "\002\001\001\000\022\015\u0383\050\u0385\054\u0388\055\u0300" +
    "\057\u02f8\066\u02fe\102\u0389\114\u0386\001\001\000\002\001" +
    "\001\000\022\015\u0383\050\u0385\054\u0388\055\u0300\057\u02f8" +
    "\066\u02fe\102\u038b\114\u0386\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\u0383\050\u0385\054\u0388\055\u0300" +
    "\057\u02f8\066\u02fe\102\u038e\114\u0386\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\220\023\u0394\024\214\050\217\113\215\123" +
    "\107\001\001\000\004\121\u0398\001\001\000\002\001\001" +
    "\000\004\121\u0396\001\001\000\022\015\u0383\050\u0385\054" +
    "\u0388\055\u0300\057\u02f8\066\u02fe\102\u0397\114\u0386\001\001" +
    "\000\002\001\001\000\022\015\u0383\050\u0385\054\u0388\055" +
    "\u0300\057\u02f8\066\u02fe\102\u0399\114\u0386\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u039c\001\001\000" +
    "\022\015\u0383\050\u0385\054\u0388\055\u0300\057\u02f8\066\u02fe" +
    "\102\u039d\114\u0386\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u03a0\001\001\000\022\015\u0383\050\u0385" +
    "\054\u0388\055\u0300\057\u02f8\066\u02fe\102\u03a1\114\u0386\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\220\023\u03a7\024\214\050" +
    "\217\113\215\123\107\001\001\000\004\121\u03ab\001\001" +
    "\000\002\001\001\000\004\121\u03a9\001\001\000\022\015" +
    "\u035a\050\u035c\057\u030b\061\u0360\062\u0305\064\u0307\103\u03aa" +
    "\114\u035e\001\001\000\002\001\001\000\022\015\u035a\050" +
    "\u035c\057\u030b\061\u0360\062\u0305\064\u0307\103\u03ac\114\u035e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u03af\001\001\000\022\015\u035a\050\u035c\057\u030b\061\u0360" +
    "\062\u0305\064\u0307\103\u03b0\114\u035e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u03b6\001\001\000\004" +
    "\121\u03b4\001\001\000\022\015\u035a\050\u035c\057\u030b\061" +
    "\u0360\062\u0305\064\u0307\103\u03b5\114\u035e\001\001\000\002" +
    "\001\001\000\022\015\u035a\050\u035c\057\u030b\061\u0360\062" +
    "\u0305\064\u0307\103\u03b7\114\u035e\001\001\000\002\001\001" +
    "\000\004\121\u03bc\001\001\000\004\121\u03ba\001\001\000" +
    "\022\015\u0309\050\u030d\057\u030b\061\u0310\062\u0305\064\u0307" +
    "\067\u03bb\114\u030e\001\001\000\002\001\001\000\022\015" +
    "\u0309\050\u030d\057\u030b\061\u0310\062\u0305\064\u0307\067\u03bd" +
    "\114\u030e\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\u03c0\015\u02f7\050\u02fb\054\u02ff\055\u0300\057\u02f8" +
    "\066\u02fe\114\u02fc\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\013\u03c3\015\u02f7\050\u02fb\054\u02ff\055\u0300" +
    "\057\u02f8\066\u02fe\114\u02fc\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\u03c6\001\001\000\002\001\001" +
    "\000\004\113\u03c8\001\001\000\002\001\001\000\004\113" +
    "\u03ca\001\001\000\004\121\u03cb\001\001\000\022\015\u03cd" +
    "\050\u03cf\057\u030b\060\u03d0\061\u03d3\062\u0305\064\u0307\114" +
    "\u03d2\001\001\000\002\001\001\000\022\015\u03cd\050\u03cf" +
    "\057\u030b\060\u03ec\061\u03d3\062\u0305\064\u0307\114\u03d2\001" +
    "\001\000\002\001\001\000\004\121\u03db\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\u03cd\050\u03cf\057" +
    "\u030b\060\u03d5\061\u03d3\062\u0305\064\u0307\114\u03d2\001\001" +
    "\000\022\015\u03cd\050\u03cf\057\u030b\060\u03d4\061\u03d3\062" +
    "\u0305\064\u0307\114\u03d2\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\u03cd\050\u03cf\057\u030b\060\u03d7\061" +
    "\u03d3\062\u0305\064\u0307\114\u03d2\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u03da\001\001\000\002\001" +
    "\001\000\022\015\u03cd\050\u03cf\057\u030b\060\u03dc\061\u03d3" +
    "\062\u0305\064\u0307\114\u03d2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\220\023\u03e2\024\214\050\217\113\215\123\107\001" +
    "\001\000\004\121\u03e6\001\001\000\002\001\001\000\004" +
    "\121\u03e4\001\001\000\022\015\u03cd\050\u03cf\057\u030b\060" +
    "\u03e5\061\u03d3\062\u0305\064\u0307\114\u03d2\001\001\000\002" +
    "\001\001\000\022\015\u03cd\050\u03cf\057\u030b\060\u03e7\061" +
    "\u03d3\062\u0305\064\u0307\114\u03d2\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u03ea\001\001\000\022\015" +
    "\u03cd\050\u03cf\057\u030b\060\u03eb\061\u03d3\062\u0305\064\u0307" +
    "\114\u03d2\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u03f1\001\001\000\004\121\u03ef\001\001\000\022" +
    "\015\u03cd\050\u03cf\057\u030b\060\u03f0\061\u03d3\062\u0305\064" +
    "\u0307\114\u03d2\001\001\000\002\001\001\000\022\015\u03cd" +
    "\050\u03cf\057\u030b\060\u03f2\061\u03d3\062\u0305\064\u0307\114" +
    "\u03d2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\220\023\u03f8\024" +
    "\214\050\217\113\215\123\107\001\001\000\004\121\u03fc" +
    "\001\001\000\002\001\001\000\004\121\u03fa\001\001\000" +
    "\022\013\u03fb\015\u02f7\050\u02fb\054\u02ff\055\u0300\057\u02f8" +
    "\066\u02fe\114\u02fc\001\001\000\002\001\001\000\022\013" +
    "\u03fd\015\u02f7\050\u02fb\054\u02ff\055\u0300\057\u02f8\066\u02fe" +
    "\114\u02fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0400\001\001\000\022\013\u0401\015\u02f7\050\u02fb" +
    "\054\u02ff\055\u0300\057\u02f8\066\u02fe\114\u02fc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0407\001\001\000" +
    "\022\015\u0383\050\u0385\054\u0388\055\u0300\057\u02f8\066\u02fe" +
    "\102\u0408\114\u0386\001\001\000\010\056\u040c\111\u040a\117" +
    "\u0409\001\001\000\016\017\106\024\100\030\u041d\050\105" +
    "\113\103\123\107\001\001\000\002\001\001\000\004\121" +
    "\u0415\001\001\000\004\121\u0410\001\001\000\002\001\001" +
    "\000\004\121\u040f\001\001\000\002\001\001\000\022\015" +
    "\u0383\050\u0385\054\u0388\055\u0300\057\u02f8\066\u02fe\102\u0411" +
    "\114\u0386\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0414\001\001\000\002\001\001\000\022\015\u0383" +
    "\050\u0385\054\u0388\055\u0300\057\u02f8\066\u02fe\102\u0416\114" +
    "\u0386\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0419\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u041c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u041f\001\001\000\022\015\u0383\050\u0385\054" +
    "\u0388\055\u0300\057\u02f8\066\u02fe\102\u0420\114\u0386\001\001" +
    "\000\010\056\u0423\111\u0422\117\u0409\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0425" +
    "\001\001\000\022\013\u0426\015\u02f7\050\u02fb\054\u02ff\055" +
    "\u0300\057\u02f8\066\u02fe\114\u02fc\001\001\000\002\001\001" +
    "\000\012\007\027\010\026\021\u0428\053\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u042b\001\001" +
    "\000\004\052\u042c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0430\001\001\000\004" +
    "\121\u0431\001\001\000\004\052\u0432\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\026\021\u0436\053\031\001\001\000\002\001\001\000" +
    "\012\007\027\010\026\021\u0438\053\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u043c\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\u043f\003\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0446\001\001\000\002" +
    "\001\001\000\004\005\u0445\001\001\000\002\001\001\000" +
    "\004\003\u0447\001\001\000\002\001\001\000\004\005\u0449" +
    "\001\001\000\002\001\001\000\004\005\u044b\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;
    private Symbol cur_token;
    String errorInrrecuperable = "";
    ArrayList<String> lista = new ArrayList<String>();

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
        lista.add("La Cadena: " + this.symbol.value+" en la Linea:" + (this.symbol.right+1) +" ,Columna: "+(this.symbol.left+1)+ " esta fuera de contexto.");
        
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        errorInrrecuperable = "La Cadena: " + cur_token.value+" en la Linea:" + (cur_token.right+1) +" ,Columna: "+(cur_token.left+1)+ " esta fuera de contexto.";
    }

    public String getUnrecoverSyntax(){
        return errorInrrecuperable;
    }

    public ArrayList<String> getError(){
        return  lista;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // INFOR_WHILE_FUNCION ::= DECLARACION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // INFOR_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // INIF_WHILE_FUNCION ::= LLAMAR_SUB INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // INIF_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // INIF_WHILE_FUNCION ::= DECLARACION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // INIF_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // INWHILE_FUNCION ::= LLAMAR_SUB INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // INWHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // INWHILE_FUNCION ::= DECLARACION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // INWHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // INWHILE_FOR_FUNCION ::= DECLARACION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // INWHILE_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // INIF_FOR_FUNCION ::= LLAMAR_SUB INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // INIF_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // INIF_FOR_FUNCION ::= DECLARACION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // INIF_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // INFOR_FUNCION ::= LLAMAR_SUB INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // INFOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // INFOR_FUNCION ::= DECLARACION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // INFOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INIF_FUNCION ::= LLAMAR_SUB INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INIF_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // INIF_FUNCION ::= DECLARACION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // INIF_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION else_ FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // INFUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // INFUNCION ::= exit function_ FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // INFUNCION ::= LLAMAR_SUB INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // INFUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // INFUNCION ::= DECLARACION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // INFUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // STRUCT_ ::= Public_ struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INFOR_WHILE ::= LLAMAR_SUB INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INFOR_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // INFOR_WHILE ::= DECLARACION INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // INFOR_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE else_ FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // INIF_WHILE ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // INIF_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // INIF_WHILE ::= exit sub FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INIF_WHILE ::= exit do_ FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INIF_WHILE ::= LLAMAR_SUB INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INIF_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // INIF_WHILE ::= DECLARACION INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INIF_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INWHILE_MAIN ::= LLAMAR_SUB INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INWHILE_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INWHILE_MAIN ::= DECLARACION INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INWHILE_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_MAIN loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INWHILE_FOR ::= LLAMAR_SUB INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INWHILE_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INWHILE_FOR ::= DECLARACION INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // INWHILE_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR else_ FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INIF_FOR ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INIF_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INIF_FOR ::= exit sub FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INIF_FOR ::= exit for_ FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INIF_FOR ::= LLAMAR_SUB INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INIF_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INIF_FOR ::= DECLARACION INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // INIF_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INFOR_MAIN ::= LLAMAR_SUB INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INFOR_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INFOR_MAIN ::= DECLARACION INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INFOR_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_MAIN next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // INIF ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INIF ::= exit sub FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INIF ::= LLAMAR_SUB INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INIF ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INIF ::= DECLARACION INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INIF ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF else_ FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TYPEDECLARE ::= READLINE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // READLINE_FUNCION ::= console_ punto readline parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READLINE_FUNCION",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARACION ::= identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION ::= identificador punto identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARACION ::= dim identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARACION ::= dim identificador as TYPE_ igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION ::= dim identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION ::= identificador punto identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARACION ::= identificador punto identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION ::= identificador punto identificador igual NUMERO FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION ::= identificador punto identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION ::= identificador punto identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION ::= identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION ::= identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION ::= identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION ::= identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION ::= dim identificador igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACION_AR ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACION_AR ::= OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERADOR_ARITMETICO ::= mod_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERADOR_ARITMETICO ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERADOR_ARITMETICO ::= div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERADOR_ARITMETICO ::= mult 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERADOR_ARITMETICO ::= resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPERADOR_ARITMETICO ::= suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACION_ARITMETICA ::= resta parentesisA resta LLAMAR_FUNCION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERACION_ARITMETICA ::= parentesisA resta LLAMAR_FUNCION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION_ARITMETICA ::= resta LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERACION_ARITMETICA ::= resta parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACION_ARITMETICA ::= resta parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERANDOS_TYPE ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERANDOS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERANDOS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROS_SUB ::= PARAMETROS_TYPE coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAMETROS_SUB ::= PARAMETROS_TYPE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LLAMAR_SUB ::= identificador PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INMAIN ::= error findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INMAIN ::= exit sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INMAIN ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INMAIN ::= LLAMAR_SUB INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INMAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INMAIN ::= DECLARACION INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INMAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INMAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMENTARIO_ILIMITADO ::= comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMENTARIO_ILIMITADO ::= comentario findelinea COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMENTARIO_ILIMITADO ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FIN_CON_COMENT ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FIN_CON_COMENT ::= findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN ::= Public_ sub main_ parentesisA parentesisC comentario findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NEXT_MODULE ::= error findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NEXT_MODULE ::= comentario findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NEXT_MODULE ::= FUNCION_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEXT_MODULE ::= STRUCT_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MODULE ::= Public_ Module identificador comentario findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDENTIFICADOR_IMPORT ::= error findelinea IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTS ::= error findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTS ::= imports IDENTIFICADOR_IMPORT FIN_CON_COMENT IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= imports IDENTIFICADOR_IMPORT FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // UC ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // UC ::= comentario findelinea UC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

