
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 18 22:22:46 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 18 22:22:46 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0230\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\003\005" +
    "\000\002\003\006\000\002\003\005\000\002\005\003\000" +
    "\002\005\005\000\002\005\003\000\002\005\005\000\002" +
    "\005\005\000\002\004\011\000\002\004\012\000\002\021" +
    "\003\000\002\021\004\000\002\021\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\010\014\000\002\010\015\000\002" +
    "\010\015\000\002\010\016\000\002\121\003\000\002\121" +
    "\004\000\002\125\004\000\002\125\005\000\002\125\003" +
    "\000\002\022\011\000\002\022\003\000\002\022\003\000" +
    "\002\022\004\000\002\022\005\000\002\022\004\000\002" +
    "\022\012\000\002\022\004\000\002\022\004\000\002\022" +
    "\005\000\002\022\003\000\002\022\004\000\002\022\005" +
    "\000\002\022\006\000\002\022\010\000\002\022\011\000" +
    "\002\022\010\000\002\022\011\000\002\022\005\000\002" +
    "\114\004\000\002\122\004\000\002\122\005\000\002\122" +
    "\007\000\002\122\006\000\002\113\003\000\002\113\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\007\000\002\123\003" +
    "\000\002\123\003\000\002\123\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\006\000\002\017\006\000\002" +
    "\017\007\000\002\017\007\000\002\017\010\000\002\017" +
    "\006\000\002\017\006\000\002\017\007\000\002\017\010" +
    "\000\002\017\005\000\002\017\006\000\002\017\006\000" +
    "\002\017\007\000\002\017\007\000\002\017\010\000\002" +
    "\017\007\000\002\017\010\000\002\017\006\000\002\017" +
    "\006\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\120\003\000\002\120\003\000\002\015\007\000\002" +
    "\015\011\000\002\015\007\000\002\015\007\000\002\015" +
    "\011\000\002\015\011\000\002\015\007\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\005\000" +
    "\002\015\006\000\002\015\006\000\002\015\006\000\002" +
    "\015\010\000\002\015\010\000\002\015\010\000\002\015" +
    "\010\000\002\015\010\000\002\015\010\000\002\015\010" +
    "\000\002\015\007\000\002\015\011\000\002\015\006\000" +
    "\002\015\010\000\002\015\007\000\002\015\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\124\007\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\116\003\000\002\116" +
    "\003\000\002\117\004\000\002\117\003\000\002\026\012" +
    "\000\002\026\015\000\002\026\015\000\002\026\013\000" +
    "\002\077\011\000\002\077\003\000\002\077\003\000\002" +
    "\077\004\000\002\077\005\000\002\077\004\000\002\077" +
    "\012\000\002\077\004\000\002\077\005\000\002\077\005" +
    "\000\002\077\003\000\002\077\004\000\002\077\006\000" +
    "\002\077\005\000\002\077\010\000\002\077\011\000\002" +
    "\077\010\000\002\077\011\000\002\027\010\000\002\027" +
    "\010\000\002\107\010\000\002\107\007\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\031\004\000\002\031\004\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\017\000" +
    "\002\033\011\000\002\033\003\000\002\033\003\000\002" +
    "\033\012\000\002\033\004\000\002\033\004\000\002\033" +
    "\005\000\002\033\004\000\002\033\004\000\002\033\005" +
    "\000\002\033\003\000\002\033\004\000\002\033\006\000" +
    "\002\033\005\000\002\033\010\000\002\033\011\000\002" +
    "\033\010\000\002\033\011\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\100\011\000\002\100\003" +
    "\000\002\100\003\000\002\100\012\000\002\100\004\000" +
    "\002\100\004\000\002\100\005\000\002\100\004\000\002" +
    "\100\004\000\002\100\005\000\002\100\003\000\002\100" +
    "\004\000\002\100\006\000\002\100\006\000\002\100\005" +
    "\000\002\100\005\000\002\100\010\000\002\100\011\000" +
    "\002\100\010\000\002\100\011\000\002\035\012\000\002" +
    "\035\015\000\002\035\015\000\002\035\013\000\002\036" +
    "\010\000\002\036\010\000\002\110\007\000\002\110\010" +
    "\000\002\037\011\000\002\040\011\000\002\040\003\000" +
    "\002\040\003\000\002\040\004\000\002\040\005\000\002" +
    "\040\012\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\005\000\002\040\003\000\002\040\004" +
    "\000\002\040\006\000\002\040\006\000\002\040\005\000" +
    "\002\040\005\000\002\040\010\000\002\040\011\000\002" +
    "\040\010\000\002\040\011\000\002\041\011\000\002\042" +
    "\011\000\002\042\003\000\002\042\003\000\002\042\004" +
    "\000\002\042\005\000\002\042\012\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\042\005\000\002" +
    "\042\003\000\002\042\004\000\002\042\006\000\002\042" +
    "\005\000\002\042\010\000\002\042\011\000\002\042\010" +
    "\000\002\042\011\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\101\011\000\002\101\003\000\002" +
    "\101\003\000\002\101\004\000\002\101\005\000\002\101" +
    "\012\000\002\101\004\000\002\101\004\000\002\101\004" +
    "\000\002\101\005\000\002\101\003\000\002\101\004\000" +
    "\002\101\006\000\002\101\006\000\002\101\005\000\002" +
    "\101\005\000\002\101\010\000\002\101\011\000\002\101" +
    "\010\000\002\101\011\000\002\044\012\000\002\044\015" +
    "\000\002\044\015\000\002\044\013\000\002\045\010\000" +
    "\002\045\010\000\002\106\007\000\002\106\010\000\002" +
    "\046\017\000\002\047\011\000\002\047\003\000\002\047" +
    "\004\000\002\047\005\000\002\047\003\000\002\047\012" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\005\000\002\047\003\000\002\047\004\000\002" +
    "\047\006\000\002\047\006\000\002\047\005\000\002\047" +
    "\005\000\002\047\010\000\002\047\011\000\002\047\010" +
    "\000\002\047\011\000\002\050\005\000\002\050\005\000" +
    "\002\051\004\000\002\051\005\000\002\051\007\000\002" +
    "\051\006\000\002\115\003\000\002\115\003\000\002\115" +
    "\003\000\002\052\007\000\002\052\010\000\002\007\011" +
    "\000\002\053\016\000\002\011\005\000\002\011\007\000" +
    "\002\011\010\000\002\011\006\000\002\013\011\000\002" +
    "\013\003\000\002\013\003\000\002\013\004\000\002\013" +
    "\005\000\002\013\004\000\002\013\012\000\002\013\004" +
    "\000\002\013\004\000\002\013\005\000\002\013\003\000" +
    "\002\013\004\000\002\013\006\000\002\013\005\000\002" +
    "\013\010\000\002\013\011\000\002\013\010\000\002\013" +
    "\011\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\012\000\002\055\015\000\002\055\015\000" +
    "\002\055\013\000\002\102\011\000\002\102\003\000\002" +
    "\102\004\000\002\102\005\000\002\102\003\000\002\102" +
    "\012\000\002\102\004\000\002\102\004\000\002\102\004" +
    "\000\002\102\005\000\002\102\003\000\002\102\004\000" +
    "\002\102\006\000\002\102\005\000\002\102\010\000\002" +
    "\102\011\000\002\102\010\000\002\102\011\000\002\056" +
    "\010\000\002\056\010\000\002\111\007\000\002\111\010" +
    "\000\002\057\017\000\002\060\011\000\002\060\003\000" +
    "\002\060\004\000\002\060\005\000\002\060\003\000\002" +
    "\060\012\000\002\060\004\000\002\060\004\000\002\060" +
    "\004\000\002\060\005\000\002\060\003\000\002\060\004" +
    "\000\002\060\006\000\002\060\005\000\002\060\006\000" +
    "\002\060\005\000\002\060\010\000\002\060\011\000\002" +
    "\060\010\000\002\060\011\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\062\012\000\002\062\015" +
    "\000\002\062\015\000\002\062\013\000\002\103\011\000" +
    "\002\103\003\000\002\103\004\000\002\103\005\000\002" +
    "\103\003\000\002\103\012\000\002\103\004\000\002\103" +
    "\004\000\002\103\004\000\002\103\005\000\002\103\003" +
    "\000\002\103\004\000\002\103\006\000\002\103\005\000" +
    "\002\103\006\000\002\103\005\000\002\103\010\000\002" +
    "\103\011\000\002\103\010\000\002\103\011\000\002\063" +
    "\010\000\002\063\010\000\002\112\007\000\002\112\010" +
    "\000\002\064\011\000\002\065\011\000\002\065\003\000" +
    "\002\065\003\000\002\065\004\000\002\065\005\000\002" +
    "\065\012\000\002\065\004\000\002\065\004\000\002\065" +
    "\004\000\002\065\005\000\002\065\003\000\002\065\004" +
    "\000\002\065\006\000\002\065\006\000\002\065\006\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\010\000\002\065\011\000\002\065\010\000\002\065" +
    "\011\000\002\066\011\000\002\067\011\000\002\067\003" +
    "\000\002\067\004\000\002\067\005\000\002\067\003\000" +
    "\002\067\012\000\002\067\004\000\002\067\004\000\002" +
    "\067\004\000\002\067\005\000\002\067\003\000\002\067" +
    "\004\000\002\067\006\000\002\067\006\000\002\067\005" +
    "\000\002\067\005\000\002\067\010\000\002\067\011\000" +
    "\002\067\010\000\002\067\011\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\071\012\000\002\071" +
    "\014\000\002\071\016\000\002\071\011\000\002\071\013" +
    "\000\002\104\011\000\002\104\003\000\002\104\004\000" +
    "\002\104\005\000\002\104\003\000\002\104\012\000\002" +
    "\104\004\000\002\104\004\000\002\104\004\000\002\104" +
    "\005\000\002\104\003\000\002\104\004\000\002\104\006" +
    "\000\002\104\006\000\002\104\005\000\002\104\005\000" +
    "\002\104\010\000\002\104\011\000\002\104\010\000\002" +
    "\104\011\000\002\074\010\000\002\074\010\000\002\105" +
    "\007\000\002\105\010\000\002\072\017\000\002\073\011" +
    "\000\002\073\003\000\002\073\003\000\002\073\004\000" +
    "\002\073\005\000\002\073\012\000\002\073\004\000\002" +
    "\073\004\000\002\073\004\000\002\073\005\000\002\073" +
    "\003\000\002\073\004\000\002\073\006\000\002\073\006" +
    "\000\002\073\006\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\010\000\002\073\011\000\002" +
    "\073\010\000\002\073\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u042a\000\010\003\007\004\004\102\005\001\002\000" +
    "\010\003\u0421\017\u0424\051\u0422\001\002\000\004\100\u041f" +
    "\001\002\000\004\002\u041e\001\002\000\004\100\u041c\001" +
    "\002\000\004\006\011\001\002\000\004\007\017\001\002" +
    "\000\006\002\000\102\014\001\002\000\004\002\uffff\001" +
    "\002\000\006\002\uffe2\100\015\001\002\000\006\002\uffe4" +
    "\102\014\001\002\000\004\002\uffe3\001\002\000\004\051" +
    "\020\001\002\000\006\100\022\102\021\001\002\000\004" +
    "\100\u0418\001\002\000\012\003\025\006\024\033\026\102" +
    "\023\001\002\000\004\100\u0416\001\002\000\006\010\041" +
    "\025\u040a\001\002\000\004\100\u0408\001\002\000\004\030" +
    "\u02cd\001\002\000\006\013\ufff2\100\u02cb\001\002\000\010" +
    "\006\034\100\036\102\033\001\002\000\004\013\u02c6\001" +
    "\002\000\010\006\034\100\036\102\033\001\002\000\004" +
    "\100\u02c5\001\002\000\004\010\041\001\002\000\004\013" +
    "\ufff0\001\002\000\046\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\020\uffe6\023\uffe6\027\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\051\uffe6\100\uffe6\102\uffe6" +
    "\107\uffe6\001\002\000\012\003\025\006\024\033\026\102" +
    "\023\001\002\000\004\013\uffee\001\002\000\006\051\043" +
    "\103\042\001\002\000\004\073\u02b8\001\002\000\004\073" +
    "\044\001\002\000\006\051\046\106\045\001\002\000\004" +
    "\051\u02b3\001\002\000\004\022\u02af\001\002\000\004\074" +
    "\050\001\002\000\006\100\052\102\051\001\002\000\004" +
    "\100\u02aa\001\002\000\024\003\063\005\055\011\064\012" +
    "\062\020\061\023\073\035\054\051\072\102\066\001\002" +
    "\000\034\003\uff74\005\uff74\011\uff74\012\uff74\013\uff74\020" +
    "\uff74\023\uff74\027\uff74\035\uff74\051\uff74\100\uff74\102\uff74" +
    "\107\uff74\001\002\000\004\010\u02a7\001\002\000\016\042" +
    "\101\043\103\051\111\060\077\065\105\073\100\001\002" +
    "\000\034\003\uff72\005\uff72\011\uff72\012\uff72\013\uff72\020" +
    "\uff72\023\uff72\027\uff72\035\uff72\051\uff72\100\uff72\102\uff72" +
    "\107\uff72\001\002\000\026\003\063\005\055\011\064\012" +
    "\062\013\uffe0\020\061\023\073\035\054\051\072\102\066" +
    "\001\002\000\034\003\uff73\005\uff73\011\uff73\012\uff73\013" +
    "\uff73\020\uff73\023\uff73\027\uff73\035\uff73\051\uff73\100\uff73" +
    "\102\uff73\107\uff73\001\002\000\004\070\u0257\001\002\000" +
    "\004\051\u0236\001\002\000\004\100\u0234\001\002\000\004" +
    "\051\u0208\001\002\000\006\100\036\102\033\001\002\000" +
    "\004\100\u0204\001\002\000\026\003\063\005\055\011\064" +
    "\012\062\013\uffd7\020\061\023\073\035\054\051\072\102" +
    "\066\001\002\000\026\003\063\005\055\011\064\012\062" +
    "\013\uffdf\020\061\023\073\035\054\051\072\102\066\001" +
    "\002\000\004\013\u01ff\001\002\000\022\042\101\043\103" +
    "\051\235\054\u01cf\060\077\065\105\070\u01cc\073\u01cb\001" +
    "\002\000\006\024\076\036\075\001\002\000\016\042\101" +
    "\043\103\051\111\060\077\065\105\073\100\001\002\000" +
    "\016\042\uff71\043\uff71\051\uff71\060\uff71\065\uff71\073\uff71" +
    "\001\002\000\016\042\uff70\043\uff70\051\uff70\060\uff70\065" +
    "\uff70\073\uff70\001\002\000\004\065\305\001\002\000\012" +
    "\051\255\060\077\065\105\073\100\001\002\000\024\026" +
    "\uff76\054\uff76\055\uff76\056\uff76\074\uff76\100\uff76\101\uff76" +
    "\102\uff76\104\uff76\001\002\000\010\054\u019b\055\u019d\056" +
    "\u019c\001\002\000\024\026\uff75\054\uff75\055\uff75\056\uff75" +
    "\074\uff75\100\uff75\101\uff75\102\uff75\104\uff75\001\002\000" +
    "\026\054\u019b\055\u019d\056\u019c\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\073\uffbb\110\uffbb\001\002\000\100\003" +
    "\uffc9\005\uffc9\011\uffc9\012\uffc9\013\uffc9\020\uffc9\023\uffc9" +
    "\026\uffc9\027\uffc9\032\uffc9\034\uffc9\035\uffc9\037\uffc9\047" +
    "\uffc9\051\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\073\uffc9\074\uffc9\100\uffc9\101" +
    "\uffc9\102\uffc9\104\uffc9\107\uffc9\110\uffc9\001\002\000\026" +
    "\054\u019b\055\u019d\056\u019c\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\073\uffb9\110\uffb9\001\002\000\012\054\u019b" +
    "\055\u019d\056\u019c\073\253\001\002\000\020\057\265\060" +
    "\273\061\266\062\262\063\261\073\275\110\267\001\002" +
    "\000\026\054\u019b\055\u019d\056\u019c\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\073\226\110\uffba\001\002\000\006" +
    "\100\036\102\033\001\002\000\022\005\116\011\124\012" +
    "\062\020\121\023\073\035\115\051\072\102\126\001\002" +
    "\000\032\005\ufedc\011\ufedc\012\ufedc\013\ufedc\020\ufedc\023" +
    "\ufedc\027\ufedc\034\ufedc\035\ufedc\051\ufedc\102\ufedc\107\ufedc" +
    "\001\002\000\004\023\u0198\001\002\000\016\042\101\043" +
    "\103\051\111\060\077\065\105\073\100\001\002\000\024" +
    "\005\116\011\124\012\062\020\121\023\073\034\ufeed\035" +
    "\115\051\072\102\126\001\002\000\032\005\ufeda\011\ufeda" +
    "\012\ufeda\013\ufeda\020\ufeda\023\ufeda\027\ufeda\034\ufeda\035" +
    "\ufeda\051\ufeda\102\ufeda\107\ufeda\001\002\000\004\070\u0146" +
    "\001\002\000\004\034\u0144\001\002\000\024\005\116\011" +
    "\124\012\062\020\121\023\073\034\ufeec\035\115\051\072" +
    "\102\126\001\002\000\004\051\136\001\002\000\006\100" +
    "\036\102\033\001\002\000\004\100\132\001\002\000\024" +
    "\005\116\011\124\012\062\020\121\023\073\034\ufee4\035" +
    "\115\051\072\102\126\001\002\000\032\005\ufedb\011\ufedb" +
    "\012\ufedb\013\ufedb\020\ufedb\023\ufedb\027\ufedb\034\ufedb\035" +
    "\ufedb\051\ufedb\102\ufedb\107\ufedb\001\002\000\004\034\ufee3" +
    "\001\002\000\024\005\116\011\124\012\062\020\121\023" +
    "\073\034\ufeeb\035\115\051\072\102\126\001\002\000\004" +
    "\034\ufeea\001\002\000\024\005\116\011\124\012\062\020" +
    "\121\023\073\034\ufee6\035\115\051\072\102\126\001\002" +
    "\000\004\034\ufee5\001\002\000\004\054\137\001\002\000" +
    "\006\060\077\065\105\001\002\000\004\037\141\001\002" +
    "\000\006\060\077\065\105\001\002\000\004\047\143\001" +
    "\002\000\006\060\077\065\105\001\002\000\006\100\036" +
    "\102\033\001\002\000\022\005\150\011\064\012\062\020" +
    "\153\023\161\035\147\051\072\102\155\001\002\000\024" +
    "\005\150\011\064\012\062\020\153\023\161\032\ufeb8\035" +
    "\147\051\072\102\155\001\002\000\006\011\u013d\023\u013c" +
    "\001\002\000\016\042\101\043\103\051\111\060\077\065" +
    "\105\073\100\001\002\000\024\005\150\011\064\012\062" +
    "\020\153\023\161\032\ufebb\035\147\051\072\102\155\001" +
    "\002\000\032\005\uff22\011\uff22\012\uff22\013\uff22\020\uff22" +
    "\023\uff22\027\uff22\032\uff22\035\uff22\051\uff22\102\uff22\107" +
    "\uff22\001\002\000\004\070\350\001\002\000\006\100\036" +
    "\102\033\001\002\000\004\100\344\001\002\000\024\005" +
    "\150\011\064\012\062\020\153\023\161\032\ufeb2\035\147" +
    "\051\072\102\155\001\002\000\032\005\uff23\011\uff23\012" +
    "\uff23\013\uff23\020\uff23\023\uff23\027\uff23\032\uff23\035\uff23" +
    "\051\uff23\102\uff23\107\uff23\001\002\000\004\032\340\001" +
    "\002\000\006\024\076\036\075\001\002\000\032\005\uff21" +
    "\011\uff21\012\uff21\013\uff21\020\uff21\023\uff21\027\uff21\032" +
    "\uff21\035\uff21\051\uff21\102\uff21\107\uff21\001\002\000\016" +
    "\042\101\043\103\051\111\060\077\065\105\073\100\001" +
    "\002\000\006\100\036\102\033\001\002\000\022\005\116" +
    "\011\124\012\062\020\170\023\073\035\166\051\072\102" +
    "\174\001\002\000\006\011\333\023\332\001\002\000\024" +
    "\005\116\011\124\012\062\020\170\023\073\034\uff02\035" +
    "\166\051\072\102\174\001\002\000\004\070\206\001\002" +
    "\000\024\005\116\011\124\012\062\020\170\023\073\034" +
    "\uff01\035\166\051\072\102\174\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\005\116\011\124\012\062\020" +
    "\170\023\073\034\ufef9\035\166\051\072\102\174\001\002" +
    "\000\004\100\200\001\002\000\004\034\176\001\002\000" +
    "\006\100\036\102\033\001\002\000\032\005\uff04\011\uff04" +
    "\012\uff04\013\uff04\020\uff04\023\uff04\027\uff04\032\uff04\035" +
    "\uff04\051\uff04\102\uff04\107\uff04\001\002\000\024\005\116" +
    "\011\124\012\062\020\170\023\073\034\uff00\035\166\051" +
    "\072\102\174\001\002\000\004\034\ufeff\001\002\000\004" +
    "\034\ufef8\001\002\000\024\005\116\011\124\012\062\020" +
    "\170\023\073\034\ufefb\035\166\051\072\102\174\001\002" +
    "\000\004\034\ufefa\001\002\000\004\034\ufefc\001\002\000" +
    "\006\021\210\111\207\001\002\000\004\073\325\001\002" +
    "\000\004\073\211\001\002\000\022\042\101\043\103\051" +
    "\220\060\077\064\221\065\105\073\100\074\212\001\002" +
    "\000\006\100\036\102\033\001\002\000\006\074\uffc5\101" +
    "\321\001\002\000\024\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\073\uffbb\074\uffc6\101\317\110\uffbb\001\002\000" +
    "\004\074\314\001\002\000\040\026\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073" +
    "\uffb9\074\uffb9\100\uffb9\101\uffb9\102\uffb9\110\uffb9\001\002" +
    "\000\010\073\253\074\uffc2\101\252\001\002\000\026\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\070\224\073\226" +
    "\074\uffc4\101\225\110\uffba\001\002\000\006\074\uffc7\101" +
    "\222\001\002\000\020\042\101\043\103\051\220\060\077" +
    "\064\221\065\105\073\100\001\002\000\004\074\uffc1\001" +
    "\002\000\004\051\247\001\002\000\020\042\101\043\103" +
    "\051\220\060\077\064\221\065\105\073\100\001\002\000" +
    "\020\042\101\043\103\051\235\060\077\065\105\073\230" +
    "\074\227\001\002\000\040\026\ufea8\054\ufea8\055\ufea8\056" +
    "\ufea8\057\ufea8\060\ufea8\061\ufea8\062\ufea8\063\ufea8\073\ufea8" +
    "\074\ufea8\100\ufea8\101\ufea8\102\ufea8\110\ufea8\001\002\000" +
    "\014\042\101\043\103\051\235\060\077\065\105\001\002" +
    "\000\040\026\ufea7\054\ufea7\055\ufea7\056\ufea7\057\ufea7\060" +
    "\ufea7\061\ufea7\062\ufea7\063\ufea7\073\ufea7\074\ufea7\100\ufea7" +
    "\101\ufea7\102\ufea7\110\ufea7\001\002\000\012\074\ufea1\100" +
    "\ufea1\102\ufea1\104\ufea1\001\002\000\012\074\ufea0\100\ufea0" +
    "\102\ufea0\104\ufea0\001\002\000\006\074\237\104\236\001" +
    "\002\000\012\074\ufea2\100\ufea2\102\ufea2\104\ufea2\001\002" +
    "\000\016\042\101\043\103\051\235\060\077\065\105\073" +
    "\230\001\002\000\040\026\ufea6\054\ufea6\055\ufea6\056\ufea6" +
    "\057\ufea6\060\ufea6\061\ufea6\062\ufea6\063\ufea6\073\ufea6\074" +
    "\ufea6\100\ufea6\101\ufea6\102\ufea6\110\ufea6\001\002\000\040" +
    "\026\ufea5\054\ufea5\055\ufea5\056\ufea5\057\ufea5\060\ufea5\061" +
    "\ufea5\062\ufea5\063\ufea5\073\ufea5\074\ufea5\100\ufea5\101\ufea5" +
    "\102\ufea5\110\ufea5\001\002\000\004\074\242\001\002\000" +
    "\006\074\244\104\243\001\002\000\016\042\101\043\103" +
    "\051\235\060\077\065\105\073\230\001\002\000\040\026" +
    "\ufea3\054\ufea3\055\ufea3\056\ufea3\057\ufea3\060\ufea3\061\ufea3" +
    "\062\ufea3\063\ufea3\073\ufea3\074\ufea3\100\ufea3\101\ufea3\102" +
    "\ufea3\110\ufea3\001\002\000\040\026\ufea4\054\ufea4\055\ufea4" +
    "\056\ufea4\057\ufea4\060\ufea4\061\ufea4\062\ufea4\063\ufea4\073" +
    "\ufea4\074\ufea4\100\ufea4\101\ufea4\102\ufea4\110\ufea4\001\002" +
    "\000\004\074\uffbd\001\002\000\006\074\uffc3\101\250\001" +
    "\002\000\020\042\101\043\103\051\220\060\077\064\221" +
    "\065\105\073\100\001\002\000\004\074\uffbc\001\002\000" +
    "\020\042\101\043\103\051\220\060\077\064\221\065\105" +
    "\073\100\001\002\000\012\051\255\060\077\065\105\073" +
    "\100\001\002\000\040\026\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\073\uffbb\074" +
    "\uffbb\100\uffbb\101\uffbb\102\uffbb\110\uffbb\001\002\000\040" +
    "\026\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\073\226\074\uffba\100\uffba\101\uffba" +
    "\102\uffba\110\uffba\001\002\000\022\057\265\060\273\061" +
    "\266\062\262\063\261\073\275\074\306\110\267\001\002" +
    "\000\006\073\253\074\260\001\002\000\044\026\uffb6\051" +
    "\255\054\uffb6\055\uffb6\056\uffb6\057\265\060\263\061\266" +
    "\062\262\063\261\065\105\073\uffb6\074\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\110\267\001\002\000\012\051\uff9f\060\uff9f" +
    "\065\uff9f\073\uff9f\001\002\000\012\051\uffa0\060\uffa0\065" +
    "\uffa0\073\uffa0\001\002\000\012\051\uffa2\060\uffa2\065\uffa2" +
    "\073\uffa2\001\002\000\012\051\255\060\077\065\105\073" +
    "\100\001\002\000\012\051\uffa3\060\uffa3\065\uffa3\073\uffa3" +
    "\001\002\000\012\051\uffa1\060\uffa1\065\uffa1\073\uffa1\001" +
    "\002\000\012\051\uff9e\060\uff9e\065\uff9e\073\uff9e\001\002" +
    "\000\024\026\uffb4\054\uffb4\055\uffb4\056\uffb4\073\uffb4\074" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\001\002\000\040\026\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\265\060\273\061\266\062" +
    "\262\063\261\073\uffae\074\uffae\100\uffae\101\uffae\102\uffae" +
    "\110\267\001\002\000\024\026\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\073\uffb2\074\uffb2\100\uffb2\101\uffb2\102\uffb2\001\002" +
    "\000\012\051\uffa2\060\uffa2\065\uffa2\073\uffa2\001\002\000" +
    "\012\051\255\060\077\065\105\073\100\001\002\000\012" +
    "\051\255\060\077\065\105\073\100\001\002\000\022\057" +
    "\265\060\273\061\266\062\262\063\261\073\275\074\301" +
    "\110\267\001\002\000\006\073\253\074\300\001\002\000" +
    "\024\026\uffb1\054\uffb1\055\uffb1\056\uffb1\073\uffb1\074\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\001\002\000\024\026\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\073\uffa5\074\uffa5\100\uffa5\101\uffa5" +
    "\102\uffa5\001\002\000\024\026\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\073\253\074\uff9c\100\uff9c\101\uff9c\102\uff9c\001\002" +
    "\000\040\026\uff9d\054\uff9d\055\uff9d\056\uff9d\057\265\060" +
    "\273\061\266\062\262\063\261\073\275\074\uff9d\100\uff9d" +
    "\101\uff9d\102\uff9d\110\267\001\002\000\024\026\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\073\uffb8\074\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\001\002\000\100\003\uffc8\005\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\020\uffc8\023\uffc8\026\uffc8\027\uffc8\032\uffc8" +
    "\034\uffc8\035\uffc8\037\uffc8\047\uffc8\051\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\073\uffc8\074\uffc8\100\uffc8\101\uffc8\102\uffc8\104\uffc8\107" +
    "\uffc8\110\uffc8\001\002\000\044\026\uffac\051\255\054\uffac" +
    "\055\uffac\056\uffac\057\265\060\263\061\266\062\262\063" +
    "\261\065\105\073\uffac\074\uffac\100\uffac\101\uffac\102\uffac" +
    "\110\267\001\002\000\012\051\255\060\077\065\105\073" +
    "\100\001\002\000\024\026\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\073\uffaa\074\uffaa\100\uffaa\101\uffaa\102\uffaa\001\002\000" +
    "\040\026\uffa6\054\uffa6\055\uffa6\056\uffa6\057\265\060\273" +
    "\061\266\062\262\063\261\073\uffa6\074\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\110\267\001\002\000\024\026\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\073\uffa8\074\uffa8\100\uffa8\101\uffa8\102" +
    "\uffa8\001\002\000\004\074\uffbf\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\005\116\011\124\012\062\020" +
    "\170\023\073\034\uff03\035\166\051\072\102\174\001\002" +
    "\000\004\034\ufefe\001\002\000\020\042\101\043\103\051" +
    "\220\060\077\064\221\065\105\073\100\001\002\000\004" +
    "\074\uffc0\001\002\000\020\042\101\043\103\051\220\060" +
    "\077\064\221\065\105\073\100\001\002\000\004\074\uffbe" +
    "\001\002\000\024\005\116\011\124\012\062\020\170\023" +
    "\073\034\ufef3\035\166\051\072\102\174\001\002\000\004" +
    "\034\ufef2\001\002\000\004\074\326\001\002\000\006\100" +
    "\036\102\033\001\002\000\024\005\116\011\124\012\062" +
    "\020\170\023\073\034\ufef1\035\166\051\072\102\174\001" +
    "\002\000\004\034\ufef0\001\002\000\004\034\ufefd\001\002" +
    "\000\006\100\036\102\033\001\002\000\006\100\036\102" +
    "\033\001\002\000\024\005\116\011\124\012\062\020\170" +
    "\023\073\034\ufef4\035\166\051\072\102\174\001\002\000" +
    "\004\034\ufef6\001\002\000\024\005\116\011\124\012\062" +
    "\020\170\023\073\034\ufef5\035\166\051\072\102\174\001" +
    "\002\000\004\034\ufef7\001\002\000\004\051\341\001\002" +
    "\000\006\100\036\102\033\001\002\000\032\005\ufebd\011" +
    "\ufebd\012\ufebd\013\ufebd\020\ufebd\023\ufebd\027\ufebd\034\ufebd" +
    "\035\ufebd\051\ufebd\102\ufebd\107\ufebd\001\002\000\004\032" +
    "\ufeb1\001\002\000\024\005\150\011\064\012\062\020\153" +
    "\023\161\032\ufeba\035\147\051\072\102\155\001\002\000" +
    "\004\032\ufeb9\001\002\000\024\005\150\011\064\012\062" +
    "\020\153\023\161\032\ufeb4\035\147\051\072\102\155\001" +
    "\002\000\004\032\ufeb3\001\002\000\006\021\352\111\351" +
    "\001\002\000\004\073\363\001\002\000\004\073\353\001" +
    "\002\000\022\042\101\043\103\051\220\060\077\064\221" +
    "\065\105\073\100\074\354\001\002\000\006\100\036\102" +
    "\033\001\002\000\004\074\356\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\005\150\011\064\012\062\020" +
    "\153\023\161\032\ufebc\035\147\051\072\102\155\001\002" +
    "\000\004\032\ufeb7\001\002\000\024\005\150\011\064\012" +
    "\062\020\153\023\161\032\ufeac\035\147\051\072\102\155" +
    "\001\002\000\004\032\ufeab\001\002\000\004\074\364\001" +
    "\002\000\006\100\036\102\033\001\002\000\024\005\150" +
    "\011\064\012\062\020\153\023\161\032\ufeaa\035\147\051" +
    "\072\102\155\001\002\000\004\032\ufea9\001\002\000\004" +
    "\032\ufeb6\001\002\000\004\026\371\001\002\000\006\100" +
    "\036\102\033\001\002\000\022\005\150\011\064\012\062" +
    "\020\376\023\161\035\374\051\072\102\u0101\001\002\000" +
    "\030\005\150\011\064\012\062\013\uff1e\020\376\023\161" +
    "\027\uff1e\035\374\051\072\102\u0101\107\uff1e\001\002\000" +
    "\006\010\u0135\011\u0136\001\002\000\030\005\150\011\064" +
    "\012\062\013\uff1f\020\376\023\161\027\uff1f\035\374\051" +
    "\072\102\u0101\107\uff1f\001\002\000\004\070\u0125\001\002" +
    "\000\006\100\036\102\033\001\002\000\030\005\150\011" +
    "\064\012\062\013\uff16\020\376\023\161\027\uff16\035\374" +
    "\051\072\102\u0101\107\uff16\001\002\000\004\100\u0120\001" +
    "\002\000\010\013\u0108\027\u0107\107\u0103\001\002\000\016" +
    "\042\uff6e\043\uff6e\051\uff6e\060\uff6e\065\uff6e\073\uff6e\001" +
    "\002\000\016\042\101\043\103\051\111\060\077\065\105" +
    "\073\100\001\002\000\004\013\u0116\001\002\000\006\100" +
    "\036\102\033\001\002\000\010\005\u010b\100\036\102\033" +
    "\001\002\000\004\005\u0109\001\002\000\006\100\036\102" +
    "\033\001\002\000\032\005\uff0c\011\uff0c\012\uff0c\013\uff0c" +
    "\020\uff0c\023\uff0c\027\uff0c\032\uff0c\035\uff0c\051\uff0c\102" +
    "\uff0c\107\uff0c\001\002\000\016\042\uff6f\043\uff6f\051\uff6f" +
    "\060\uff6f\065\uff6f\073\uff6f\001\002\000\022\005\150\011" +
    "\064\012\062\020\376\023\161\035\374\051\072\102\u0101" +
    "\001\002\000\004\013\u010e\001\002\000\004\005\u010f\001" +
    "\002\000\006\100\036\102\033\001\002\000\032\005\uff0b" +
    "\011\uff0b\012\uff0b\013\uff0b\020\uff0b\023\uff0b\027\uff0b\032" +
    "\uff0b\035\uff0b\051\uff0b\102\uff0b\107\uff0b\001\002\000\022" +
    "\005\150\011\064\012\062\020\376\023\161\035\374\051" +
    "\072\102\u0101\001\002\000\004\013\u0113\001\002\000\004" +
    "\005\u0114\001\002\000\006\100\036\102\033\001\002\000" +
    "\032\005\uff0a\011\uff0a\012\uff0a\013\uff0a\020\uff0a\023\uff0a" +
    "\027\uff0a\032\uff0a\035\uff0a\051\uff0a\102\uff0a\107\uff0a\001" +
    "\002\000\004\005\u0117\001\002\000\006\100\036\102\033" +
    "\001\002\000\032\005\uff09\011\uff09\012\uff09\013\uff09\020" +
    "\uff09\023\uff09\027\uff09\032\uff09\035\uff09\051\uff09\102\uff09" +
    "\107\uff09\001\002\000\004\026\u011a\001\002\000\006\100" +
    "\036\102\033\001\002\000\022\005\150\011\064\012\062" +
    "\020\376\023\161\035\374\051\072\102\u0101\001\002\000" +
    "\010\013\uff06\027\u011f\107\u0103\001\002\000\004\013\uff05" +
    "\001\002\000\006\100\uff07\102\uff07\001\002\000\010\005" +
    "\u010b\100\uff08\102\uff08\001\002\000\030\005\150\011\064" +
    "\012\062\013\uff1b\020\376\023\161\027\uff1b\035\374\051" +
    "\072\102\u0101\107\uff1b\001\002\000\010\013\uff1a\027\uff1a" +
    "\107\uff1a\001\002\000\010\013\uff15\027\uff15\107\uff15\001" +
    "\002\000\030\005\150\011\064\012\062\013\uff18\020\376" +
    "\023\161\027\uff18\035\374\051\072\102\u0101\107\uff18\001" +
    "\002\000\010\013\uff17\027\uff17\107\uff17\001\002\000\006" +
    "\021\u0127\111\u0126\001\002\000\004\073\u0130\001\002\000" +
    "\004\073\u0128\001\002\000\022\042\101\043\103\051\220" +
    "\060\077\064\221\065\105\073\100\074\u0129\001\002\000" +
    "\006\100\036\102\033\001\002\000\004\074\u012b\001\002" +
    "\000\006\100\036\102\033\001\002\000\030\005\150\011" +
    "\064\012\062\013\uff20\020\376\023\161\027\uff20\035\374" +
    "\051\072\102\u0101\107\uff20\001\002\000\010\013\uff1d\027" +
    "\uff1d\107\uff1d\001\002\000\030\005\150\011\064\012\062" +
    "\013\uff10\020\376\023\161\027\uff10\035\374\051\072\102" +
    "\u0101\107\uff10\001\002\000\010\013\uff0f\027\uff0f\107\uff0f" +
    "\001\002\000\004\074\u0131\001\002\000\006\100\036\102" +
    "\033\001\002\000\030\005\150\011\064\012\062\013\uff0e" +
    "\020\376\023\161\027\uff0e\035\374\051\072\102\u0101\107" +
    "\uff0e\001\002\000\010\013\uff0d\027\uff0d\107\uff0d\001\002" +
    "\000\010\013\uff1c\027\uff1c\107\uff1c\001\002\000\006\100" +
    "\036\102\033\001\002\000\006\100\036\102\033\001\002" +
    "\000\030\005\150\011\064\012\062\013\uff12\020\376\023" +
    "\161\027\uff12\035\374\051\072\102\u0101\107\uff12\001\002" +
    "\000\010\013\uff14\027\uff14\107\uff14\001\002\000\030\005" +
    "\150\011\064\012\062\013\uff11\020\376\023\161\027\uff11" +
    "\035\374\051\072\102\u0101\107\uff11\001\002\000\010\013" +
    "\uff13\027\uff13\107\uff13\001\002\000\010\013\uff19\027\uff19" +
    "\107\uff19\001\002\000\006\100\036\102\033\001\002\000" +
    "\006\100\036\102\033\001\002\000\024\005\150\011\064" +
    "\012\062\020\153\023\161\032\ufeae\035\147\051\072\102" +
    "\155\001\002\000\004\032\ufeb0\001\002\000\024\005\150" +
    "\011\064\012\062\020\153\023\161\032\ufead\035\147\051" +
    "\072\102\155\001\002\000\004\032\ufeaf\001\002\000\004" +
    "\032\ufeb5\001\002\000\004\034\ufee7\001\002\000\006\100" +
    "\036\102\033\001\002\000\036\003\ufeef\005\ufeef\011\ufeef" +
    "\012\ufeef\013\ufeef\020\ufeef\023\ufeef\027\ufeef\034\ufeef\035" +
    "\ufeef\051\ufeef\100\ufeef\102\ufeef\107\ufeef\001\002\000\006" +
    "\021\u0148\111\u0147\001\002\000\004\073\u0151\001\002\000" +
    "\004\073\u0149\001\002\000\022\042\101\043\103\051\220" +
    "\060\077\064\221\065\105\073\100\074\u014a\001\002\000" +
    "\006\100\036\102\033\001\002\000\004\074\u014c\001\002" +
    "\000\006\100\036\102\033\001\002\000\024\005\116\011" +
    "\124\012\062\020\121\023\073\034\ufeee\035\115\051\072" +
    "\102\126\001\002\000\004\034\ufee9\001\002\000\024\005" +
    "\116\011\124\012\062\020\121\023\073\034\ufee0\035\115" +
    "\051\072\102\126\001\002\000\004\034\ufedf\001\002\000" +
    "\004\074\u0152\001\002\000\006\100\036\102\033\001\002" +
    "\000\024\005\116\011\124\012\062\020\121\023\073\034" +
    "\ufede\035\115\051\072\102\126\001\002\000\004\034\ufedd" +
    "\001\002\000\004\034\ufee8\001\002\000\004\026\u0157\001" +
    "\002\000\006\100\036\102\033\001\002\000\022\005\116" +
    "\011\124\012\062\020\u015b\023\073\035\u0159\051\072\102" +
    "\u015f\001\002\000\006\010\u0193\023\u0192\001\002\000\030" +
    "\005\116\011\124\012\062\013\ufed8\020\u015b\023\073\027" +
    "\ufed8\035\u0159\051\072\102\u015f\107\ufed8\001\002\000\004" +
    "\070\u0182\001\002\000\030\005\116\011\124\012\062\013" +
    "\ufed7\020\u015b\023\073\027\ufed7\035\u0159\051\072\102\u015f" +
    "\107\ufed7\001\002\000\006\100\036\102\033\001\002\000" +
    "\030\005\116\011\124\012\062\013\ufecf\020\u015b\023\073" +
    "\027\ufecf\035\u0159\051\072\102\u015f\107\ufecf\001\002\000" +
    "\004\100\u017c\001\002\000\010\013\u0165\027\u0162\107\u0103" +
    "\001\002\000\016\042\101\043\103\051\111\060\077\065" +
    "\105\073\100\001\002\000\010\005\u010b\100\036\102\033" +
    "\001\002\000\006\100\036\102\033\001\002\000\004\013" +
    "\u0168\001\002\000\004\005\u0166\001\002\000\006\100\036" +
    "\102\033\001\002\000\032\005\ufec5\011\ufec5\012\ufec5\013" +
    "\ufec5\020\ufec5\023\ufec5\027\ufec5\034\ufec5\035\ufec5\051\ufec5" +
    "\102\ufec5\107\ufec5\001\002\000\004\005\u0169\001\002\000" +
    "\006\100\036\102\033\001\002\000\032\005\ufec2\011\ufec2" +
    "\012\ufec2\013\ufec2\020\ufec2\023\ufec2\027\ufec2\034\ufec2\035" +
    "\ufec2\051\ufec2\102\ufec2\107\ufec2\001\002\000\022\005\116" +
    "\011\124\012\062\020\u015b\023\073\035\u0159\051\072\102" +
    "\u015f\001\002\000\004\013\u016d\001\002\000\004\005\u016e" +
    "\001\002\000\006\100\036\102\033\001\002\000\032\005" +
    "\ufec3\011\ufec3\012\ufec3\013\ufec3\020\ufec3\023\ufec3\027\ufec3" +
    "\034\ufec3\035\ufec3\051\ufec3\102\ufec3\107\ufec3\001\002\000" +
    "\022\005\116\011\124\012\062\020\u015b\023\073\035\u0159" +
    "\051\072\102\u015f\001\002\000\004\013\u0172\001\002\000" +
    "\004\005\u0173\001\002\000\006\100\036\102\033\001\002" +
    "\000\032\005\ufec4\011\ufec4\012\ufec4\013\ufec4\020\ufec4\023" +
    "\ufec4\027\ufec4\034\ufec4\035\ufec4\051\ufec4\102\ufec4\107\ufec4" +
    "\001\002\000\004\026\u0176\001\002\000\006\100\036\102" +
    "\033\001\002\000\022\005\116\011\124\012\062\020\u015b" +
    "\023\073\035\u0159\051\072\102\u015f\001\002\000\010\013" +
    "\ufebf\027\u0179\107\u0103\001\002\000\010\005\u010b\100\ufec1" +
    "\102\ufec1\001\002\000\006\100\ufec0\102\ufec0\001\002\000" +
    "\004\013\ufebe\001\002\000\030\005\116\011\124\012\062" +
    "\013\ufed6\020\u015b\023\073\027\ufed6\035\u0159\051\072\102" +
    "\u015f\107\ufed6\001\002\000\010\013\ufed5\027\ufed5\107\ufed5" +
    "\001\002\000\010\013\ufece\027\ufece\107\ufece\001\002\000" +
    "\030\005\116\011\124\012\062\013\ufed1\020\u015b\023\073" +
    "\027\ufed1\035\u0159\051\072\102\u015f\107\ufed1\001\002\000" +
    "\010\013\ufed0\027\ufed0\107\ufed0\001\002\000\010\013\ufed2" +
    "\027\ufed2\107\ufed2\001\002\000\006\021\u0184\111\u0183\001" +
    "\002\000\004\073\u018d\001\002\000\004\073\u0185\001\002" +
    "\000\022\042\101\043\103\051\220\060\077\064\221\065" +
    "\105\073\100\074\u0186\001\002\000\006\100\036\102\033" +
    "\001\002\000\004\074\u0188\001\002\000\006\100\036\102" +
    "\033\001\002\000\030\005\116\011\124\012\062\013\ufed9" +
    "\020\u015b\023\073\027\ufed9\035\u0159\051\072\102\u015f\107" +
    "\ufed9\001\002\000\010\013\ufed4\027\ufed4\107\ufed4\001\002" +
    "\000\030\005\116\011\124\012\062\013\ufec9\020\u015b\023" +
    "\073\027\ufec9\035\u0159\051\072\102\u015f\107\ufec9\001\002" +
    "\000\010\013\ufec8\027\ufec8\107\ufec8\001\002\000\004\074" +
    "\u018e\001\002\000\006\100\036\102\033\001\002\000\030" +
    "\005\116\011\124\012\062\013\ufec7\020\u015b\023\073\027" +
    "\ufec7\035\u0159\051\072\102\u015f\107\ufec7\001\002\000\010" +
    "\013\ufec6\027\ufec6\107\ufec6\001\002\000\010\013\ufed3\027" +
    "\ufed3\107\ufed3\001\002\000\006\100\036\102\033\001\002" +
    "\000\006\100\036\102\033\001\002\000\030\005\116\011" +
    "\124\012\062\013\ufeca\020\u015b\023\073\027\ufeca\035\u0159" +
    "\051\072\102\u015f\107\ufeca\001\002\000\010\013\ufecc\027" +
    "\ufecc\107\ufecc\001\002\000\030\005\116\011\124\012\062" +
    "\013\ufecb\020\u015b\023\073\027\ufecb\035\u0159\051\072\102" +
    "\u015f\107\ufecb\001\002\000\010\013\ufecd\027\ufecd\107\ufecd" +
    "\001\002\000\006\100\036\102\033\001\002\000\024\005" +
    "\116\011\124\012\062\020\121\023\073\034\ufee1\035\115" +
    "\051\072\102\126\001\002\000\004\034\ufee2\001\002\000" +
    "\016\042\uff39\043\uff39\051\uff39\060\uff39\065\uff39\073\uff39" +
    "\001\002\000\020\042\uff37\043\uff37\051\uff37\054\u01a5\060" +
    "\uff37\065\uff37\073\uff37\001\002\000\020\042\uff38\043\uff38" +
    "\051\uff38\054\u01a4\060\uff38\065\uff38\073\uff38\001\002\000" +
    "\016\042\101\043\103\051\u01a3\060\077\065\105\073\100" +
    "\001\002\000\010\026\uff51\100\uff51\102\uff51\001\002\000" +
    "\026\026\uff52\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\073\uffbb\100\uff52\102\uff52\110\uffbb\001\002\000\026\026" +
    "\uff42\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9" +
    "\100\uff42\102\uff42\110\uffb9\001\002\000\012\026\uff50\073" +
    "\253\100\uff50\102\uff50\001\002\000\026\026\uff53\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\073\226\100\uff53\102" +
    "\uff53\110\uffba\001\002\000\016\042\uff3b\043\uff3b\051\uff3b" +
    "\060\uff3b\065\uff3b\073\uff3b\001\002\000\016\042\uff3a\043" +
    "\uff3a\051\uff3a\060\uff3a\065\uff3a\073\uff3a\001\002\000\016" +
    "\042\101\043\103\051\u01ab\060\077\065\105\073\100\001" +
    "\002\000\010\026\uff4c\100\uff4c\102\uff4c\001\002\000\026" +
    "\026\uff4f\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\073" +
    "\uffbb\100\uff4f\102\uff4f\110\uffbb\001\002\000\026\026\uff40" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9\100" +
    "\uff40\102\uff40\110\uffb9\001\002\000\012\026\uff4e\073\253" +
    "\100\uff4e\102\uff4e\001\002\000\026\026\uff4d\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\uffba\073\226\100\uff4d\102\uff4d" +
    "\110\uffba\001\002\000\016\042\101\043\103\051\u01b0\060" +
    "\077\065\105\073\100\001\002\000\010\026\uff3f\100\uff3f" +
    "\102\uff3f\001\002\000\026\026\uff3d\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\073\uffbb\100\uff3d\102\uff3d\110\uffbb" +
    "\001\002\000\012\026\uff3c\073\253\100\uff3c\102\uff3c\001" +
    "\002\000\026\026\uff3e\057\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\073\226\100\uff3e\102\uff3e\110\uffba\001\002\000" +
    "\016\042\101\043\103\051\u01b6\060\077\065\105\073\100" +
    "\001\002\000\010\026\uff44\100\uff44\102\uff44\001\002\000" +
    "\026\026\uff47\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\073\uffbb\100\uff47\102\uff47\110\uffbb\001\002\000\026\026" +
    "\uff41\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9" +
    "\100\uff41\102\uff41\110\uffb9\001\002\000\012\026\uff45\073" +
    "\253\100\uff45\102\uff45\001\002\000\026\026\uff46\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\073\226\100\uff46\102" +
    "\uff46\110\uffba\001\002\000\016\042\101\043\103\051\u01bc" +
    "\060\077\065\105\073\100\001\002\000\010\026\uff4b\100" +
    "\uff4b\102\uff4b\001\002\000\026\026\uff4a\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\073\uffbb\100\uff4a\102\uff4a\110" +
    "\uffbb\001\002\000\026\026\uff43\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\073\uffb9\100\uff43\102\uff43\110\uffb9\001" +
    "\002\000\012\026\uff48\073\253\100\uff48\102\uff48\001\002" +
    "\000\026\026\uff49\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\073\226\100\uff49\102\uff49\110\uffba\001\002\000\022" +
    "\057\265\060\273\061\266\062\262\063\261\073\275\074" +
    "\u01c5\110\267\001\002\000\006\073\253\074\u01bf\001\002" +
    "\000\044\026\uffb7\051\255\054\uffb7\055\uffb7\056\uffb7\057" +
    "\265\060\263\061\266\062\262\063\261\065\105\073\uffb7" +
    "\074\uffb7\100\uffb7\101\uffb7\102\uffb7\110\267\001\002\000" +
    "\012\051\255\060\077\065\105\073\100\001\002\000\024" +
    "\026\uffb5\054\uffb5\055\uffb5\056\uffb5\073\uffb5\074\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\001\002\000\040\026\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\265\060\273\061\266\062\262\063" +
    "\261\073\uffb0\074\uffb0\100\uffb0\101\uffb0\102\uffb0\110\267" +
    "\001\002\000\040\026\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\265\060\273\061\266\062\262\063\261\073\uffaf\074\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\110\267\001\002\000\024\026" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\073\uffb3\074\uffb3\100\uffb3" +
    "\101\uffb3\102\uffb3\001\002\000\044\026\uffad\051\255\054" +
    "\uffad\055\uffad\056\uffad\057\265\060\263\061\266\062\262" +
    "\063\261\065\105\073\uffad\074\uffad\100\uffad\101\uffad\102" +
    "\uffad\110\267\001\002\000\012\051\255\060\077\065\105" +
    "\073\100\001\002\000\024\026\uffab\054\uffab\055\uffab\056" +
    "\uffab\073\uffab\074\uffab\100\uffab\101\uffab\102\uffab\001\002" +
    "\000\040\026\uffa4\054\uffa4\055\uffa4\056\uffa4\057\265\060" +
    "\273\061\266\062\262\063\261\073\uffa4\074\uffa4\100\uffa4" +
    "\101\uffa4\102\uffa4\110\267\001\002\000\040\026\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\057\265\060\273\061\266\062\262" +
    "\063\261\073\uffa7\074\uffa7\100\uffa7\101\uffa7\102\uffa7\110" +
    "\267\001\002\000\024\026\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\073\uffa9\074\uffa9\100\uffa9\101\uffa9\102\uffa9\001\002\000" +
    "\020\042\101\043\103\051\235\060\077\065\105\073\230" +
    "\074\227\001\002\000\004\051\u01ec\001\002\000\036\003" +
    "\uffce\005\uffce\011\uffce\012\uffce\013\uffce\020\uffce\023\uffce" +
    "\027\uffce\032\uffce\034\uffce\035\uffce\051\uffce\102\uffce\107" +
    "\uffce\001\002\000\010\100\036\102\033\104\u01e3\001\002" +
    "\000\022\020\u01d1\042\101\043\103\051\u01d7\060\077\064" +
    "\u01d8\065\105\073\100\001\002\000\006\100\036\102\033" +
    "\001\002\000\004\070\u01de\001\002\000\054\003\uff91\005" +
    "\uff91\011\uff91\012\uff91\013\uff91\020\uff91\023\uff91\027\uff91" +
    "\032\uff91\034\uff91\035\uff91\051\uff91\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\073\uffbb\102\uff91\107\uff91\110\uffbb" +
    "\001\002\000\024\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\073\uffb9\100\036\102\033\110\uffb9\001\002\000\036" +
    "\003\uff81\005\uff81\011\uff81\012\uff81\013\uff81\020\uff81\023" +
    "\uff81\027\uff81\032\uff81\034\uff81\035\uff81\051\uff81\102\uff81" +
    "\107\uff81\001\002\000\006\100\036\102\033\001\002\000" +
    "\010\073\253\100\036\102\033\001\002\000\034\042\101" +
    "\043\103\051\235\057\uffba\060\077\061\uffba\062\uffba\063" +
    "\uffba\065\105\073\u01cb\100\036\102\033\110\uffba\001\002" +
    "\000\006\100\036\102\033\001\002\000\036\003\uff8f\005" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\020\uff8f\023\uff8f\027\uff8f" +
    "\032\uff8f\034\uff8f\035\uff8f\051\uff8f\102\uff8f\107\uff8f\001" +
    "\002\000\036\003\uff94\005\uff94\011\uff94\012\uff94\013\uff94" +
    "\020\uff94\023\uff94\027\uff94\032\uff94\034\uff94\035\uff94\051" +
    "\uff94\102\uff94\107\uff94\001\002\000\036\003\uff92\005\uff92" +
    "\011\uff92\012\uff92\013\uff92\020\uff92\023\uff92\027\uff92\032" +
    "\uff92\034\uff92\035\uff92\051\uff92\102\uff92\107\uff92\001\002" +
    "\000\036\003\uff8e\005\uff8e\011\uff8e\012\uff8e\013\uff8e\020" +
    "\uff8e\023\uff8e\027\uff8e\032\uff8e\034\uff8e\035\uff8e\051\uff8e" +
    "\102\uff8e\107\uff8e\001\002\000\036\003\uff93\005\uff93\011" +
    "\uff93\012\uff93\013\uff93\020\uff93\023\uff93\027\uff93\032\uff93" +
    "\034\uff93\035\uff93\051\uff93\102\uff93\107\uff93\001\002\000" +
    "\004\111\u01df\001\002\000\004\073\u01e0\001\002\000\004" +
    "\074\u01e1\001\002\000\006\100\uff7b\102\uff7b\001\002\000" +
    "\036\003\uff90\005\uff90\011\uff90\012\uff90\013\uff90\020\uff90" +
    "\023\uff90\027\uff90\032\uff90\034\uff90\035\uff90\051\uff90\102" +
    "\uff90\107\uff90\001\002\000\016\042\101\043\103\051\235" +
    "\060\077\065\105\073\u01e5\001\002\000\036\003\uffcd\005" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\020\uffcd\023\uffcd\027\uffcd" +
    "\032\uffcd\034\uffcd\035\uffcd\051\uffcd\102\uffcd\107\uffcd\001" +
    "\002\000\014\042\101\043\103\051\235\060\077\065\105" +
    "\001\002\000\036\003\uffcc\005\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\020\uffcc\023\uffcc\027\uffcc\032\uffcc\034\uffcc\035\uffcc" +
    "\051\uffcc\102\uffcc\107\uffcc\001\002\000\004\074\u01e8\001" +
    "\002\000\010\100\036\102\033\104\u01e9\001\002\000\016" +
    "\042\101\043\103\051\235\060\077\065\105\073\u01e5\001" +
    "\002\000\036\003\uffca\005\uffca\011\uffca\012\uffca\013\uffca" +
    "\020\uffca\023\uffca\027\uffca\032\uffca\034\uffca\035\uffca\051" +
    "\uffca\102\uffca\107\uffca\001\002\000\036\003\uffcb\005\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\020\uffcb\023\uffcb\027\uffcb\032" +
    "\uffcb\034\uffcb\035\uffcb\051\uffcb\102\uffcb\107\uffcb\001\002" +
    "\000\004\054\u01ed\001\002\000\022\020\u01d1\042\101\043" +
    "\103\051\u01f5\060\077\064\u01f4\065\105\073\100\001\002" +
    "\000\006\100\036\102\033\001\002\000\024\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\073\uffbb\100\036\102\033" +
    "\110\uffbb\001\002\000\024\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\073\uffb9\100\036\102\033\110\uffb9\001\002" +
    "\000\036\003\uff82\005\uff82\011\uff82\012\uff82\013\uff82\020" +
    "\uff82\023\uff82\027\uff82\032\uff82\034\uff82\035\uff82\051\uff82" +
    "\102\uff82\107\uff82\001\002\000\010\073\253\100\036\102" +
    "\033\001\002\000\006\100\036\102\033\001\002\000\006" +
    "\100\036\102\033\001\002\000\034\042\101\043\103\051" +
    "\235\057\uffba\060\077\061\uffba\062\uffba\063\uffba\065\105" +
    "\073\u01cb\100\036\102\033\110\uffba\001\002\000\036\003" +
    "\uff8d\005\uff8d\011\uff8d\012\uff8d\013\uff8d\020\uff8d\023\uff8d" +
    "\027\uff8d\032\uff8d\034\uff8d\035\uff8d\051\uff8d\102\uff8d\107" +
    "\uff8d\001\002\000\036\003\uff87\005\uff87\011\uff87\012\uff87" +
    "\013\uff87\020\uff87\023\uff87\027\uff87\032\uff87\034\uff87\035" +
    "\uff87\051\uff87\102\uff87\107\uff87\001\002\000\036\003\uff8a" +
    "\005\uff8a\011\uff8a\012\uff8a\013\uff8a\020\uff8a\023\uff8a\027" +
    "\uff8a\032\uff8a\034\uff8a\035\uff8a\051\uff8a\102\uff8a\107\uff8a" +
    "\001\002\000\036\003\uff8b\005\uff8b\011\uff8b\012\uff8b\013" +
    "\uff8b\020\uff8b\023\uff8b\027\uff8b\032\uff8b\034\uff8b\035\uff8b" +
    "\051\uff8b\102\uff8b\107\uff8b\001\002\000\036\003\uff8c\005" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\020\uff8c\023\uff8c\027\uff8c" +
    "\032\uff8c\034\uff8c\035\uff8c\051\uff8c\102\uff8c\107\uff8c\001" +
    "\002\000\036\003\uff89\005\uff89\011\uff89\012\uff89\013\uff89" +
    "\020\uff89\023\uff89\027\uff89\032\uff89\034\uff89\035\uff89\051" +
    "\uff89\102\uff89\107\uff89\001\002\000\036\003\uff88\005\uff88" +
    "\011\uff88\012\uff88\013\uff88\020\uff88\023\uff88\027\uff88\032" +
    "\uff88\034\uff88\035\uff88\051\uff88\102\uff88\107\uff88\001\002" +
    "\000\006\074\u01fe\104\236\001\002\000\026\057\ufea6\060" +
    "\ufea6\061\ufea6\062\ufea6\063\ufea6\073\ufea6\100\ufea6\102\ufea6" +
    "\104\u01e9\110\ufea6\001\002\000\004\010\u0200\001\002\000" +
    "\006\100\036\102\033\001\002\000\006\013\uffe9\100\uffe9" +
    "\001\002\000\004\013\uffd9\001\002\000\004\013\uffd6\001" +
    "\002\000\026\003\063\005\055\011\064\012\062\013\uffde" +
    "\020\061\023\073\035\054\051\072\102\066\001\002\000" +
    "\004\013\uffdd\001\002\000\026\003\063\005\055\011\064" +
    "\012\062\013\uffdc\020\061\023\073\035\054\051\072\102" +
    "\066\001\002\000\004\013\uffd8\001\002\000\004\054\u0209" +
    "\001\002\000\006\060\077\065\105\001\002\000\004\037" +
    "\u020b\001\002\000\006\060\077\065\105\001\002\000\004" +
    "\047\u020d\001\002\000\006\060\077\065\105\001\002\000" +
    "\006\100\036\102\033\001\002\000\022\005\150\011\064" +
    "\012\062\020\u0214\023\161\035\u0211\051\072\102\u0217\001" +
    "\002\000\024\005\150\011\064\012\062\020\u0214\023\161" +
    "\032\uff33\035\u0211\051\072\102\u0217\001\002\000\004\011" +
    "\u0230\001\002\000\004\032\u022d\001\002\000\024\005\150" +
    "\011\064\012\062\020\u0214\023\161\032\uff34\035\u0211\051" +
    "\072\102\u0217\001\002\000\004\070\u021d\001\002\000\006" +
    "\100\036\102\033\001\002\000\024\005\150\011\064\012" +
    "\062\020\u0214\023\161\032\uff2b\035\u0211\051\072\102\u0217" +
    "\001\002\000\004\100\u0218\001\002\000\024\005\150\011" +
    "\064\012\062\020\u0214\023\161\032\uff30\035\u0211\051\072" +
    "\102\u0217\001\002\000\004\032\uff2f\001\002\000\004\032" +
    "\uff2a\001\002\000\024\005\150\011\064\012\062\020\u0214" +
    "\023\161\032\uff2d\035\u0211\051\072\102\u0217\001\002\000" +
    "\004\032\uff2c\001\002\000\006\021\u021f\111\u021e\001\002" +
    "\000\004\073\u0228\001\002\000\004\073\u0220\001\002\000" +
    "\022\042\101\043\103\051\220\060\077\064\221\065\105" +
    "\073\100\074\u0221\001\002\000\006\100\036\102\033\001" +
    "\002\000\004\074\u0223\001\002\000\006\100\036\102\033" +
    "\001\002\000\024\005\150\011\064\012\062\020\u0214\023" +
    "\161\032\uff35\035\u0211\051\072\102\u0217\001\002\000\004" +
    "\032\uff32\001\002\000\024\005\150\011\064\012\062\020" +
    "\u0214\023\161\032\uff27\035\u0211\051\072\102\u0217\001\002" +
    "\000\004\032\uff26\001\002\000\004\074\u0229\001\002\000" +
    "\006\100\036\102\033\001\002\000\024\005\150\011\064" +
    "\012\062\020\u0214\023\161\032\uff25\035\u0211\051\072\102" +
    "\u0217\001\002\000\004\032\uff24\001\002\000\004\032\uff31" +
    "\001\002\000\004\051\u022e\001\002\000\006\100\036\102" +
    "\033\001\002\000\036\003\uff36\005\uff36\011\uff36\012\uff36" +
    "\013\uff36\020\uff36\023\uff36\027\uff36\032\uff36\035\uff36\051" +
    "\uff36\100\uff36\102\uff36\107\uff36\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\005\150\011\064\012\062\020" +
    "\u0214\023\161\032\uff28\035\u0211\051\072\102\u0217\001\002" +
    "\000\004\032\uff29\001\002\000\004\032\uff2e\001\002\000" +
    "\024\003\063\005\055\011\064\012\062\020\061\023\073" +
    "\035\054\051\072\102\066\001\002\000\004\013\uffcf\001" +
    "\002\000\006\022\u0237\054\u0238\001\002\000\014\014\u0249" +
    "\015\u0248\016\u024b\046\u024a\051\u0247\001\002\000\022\020" +
    "\u01d1\042\101\043\103\051\u0241\060\077\064\u0240\065\105" +
    "\073\100\001\002\000\006\100\uff78\102\uff78\001\002\000" +
    "\024\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\073\uffbb" +
    "\100\uff79\102\uff79\110\uffbb\001\002\000\024\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9\100\036\102\033" +
    "\110\uffb9\001\002\000\036\003\uff84\005\uff84\011\uff84\012" +
    "\uff84\013\uff84\020\uff84\023\uff84\027\uff84\032\uff84\034\uff84" +
    "\035\uff84\051\uff84\102\uff84\107\uff84\001\002\000\006\100" +
    "\036\102\033\001\002\000\006\100\uff77\102\uff77\001\002" +
    "\000\010\073\253\100\036\102\033\001\002\000\006\100" +
    "\uff7a\102\uff7a\001\002\000\034\042\101\043\103\051\235" +
    "\057\uffba\060\077\061\uffba\062\uffba\063\uffba\065\105\073" +
    "\u01cb\100\036\102\033\110\uffba\001\002\000\036\003\uff86" +
    "\005\uff86\011\uff86\012\uff86\013\uff86\020\uff86\023\uff86\027" +
    "\uff86\032\uff86\034\uff86\035\uff86\051\uff86\102\uff86\107\uff86" +
    "\001\002\000\036\003\uff95\005\uff95\011\uff95\012\uff95\013" +
    "\uff95\020\uff95\023\uff95\027\uff95\032\uff95\034\uff95\035\uff95" +
    "\051\uff95\102\uff95\107\uff95\001\002\000\036\003\uff99\005" +
    "\uff99\011\uff99\012\uff99\013\uff99\020\uff99\023\uff99\027\uff99" +
    "\032\uff99\034\uff99\035\uff99\051\uff99\102\uff99\107\uff99\001" +
    "\002\000\036\003\uff98\005\uff98\011\uff98\012\uff98\013\uff98" +
    "\020\uff98\023\uff98\027\uff98\032\uff98\034\uff98\035\uff98\051" +
    "\uff98\102\uff98\107\uff98\001\002\000\010\054\u024c\100\036" +
    "\102\033\001\002\000\014\054\uff7c\074\uff7c\100\uff7c\102" +
    "\uff7c\104\uff7c\001\002\000\014\054\uff7f\074\uff7f\100\uff7f" +
    "\102\uff7f\104\uff7f\001\002\000\014\054\uff7e\074\uff7e\100" +
    "\uff7e\102\uff7e\104\uff7e\001\002\000\014\054\uff7d\074\uff7d" +
    "\100\uff7d\102\uff7d\104\uff7d\001\002\000\014\054\uff80\074" +
    "\uff80\100\uff80\102\uff80\104\uff80\001\002\000\022\020\u01d1" +
    "\042\101\043\103\051\u0252\060\077\064\u0240\065\105\073" +
    "\100\001\002\000\036\003\uff9b\005\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\020\uff9b\023\uff9b\027\uff9b\032\uff9b\034\uff9b\035" +
    "\uff9b\051\uff9b\102\uff9b\107\uff9b\001\002\000\024\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\063\uffb9\073\uffb9\100\036\102" +
    "\033\110\uffb9\001\002\000\036\003\uff83\005\uff83\011\uff83" +
    "\012\uff83\013\uff83\020\uff83\023\uff83\027\uff83\032\uff83\034" +
    "\uff83\035\uff83\051\uff83\102\uff83\107\uff83\001\002\000\006" +
    "\100\036\102\033\001\002\000\010\073\253\100\036\102" +
    "\033\001\002\000\034\042\101\043\103\051\235\057\uffba" +
    "\060\077\061\uffba\062\uffba\063\uffba\065\105\073\u01cb\100" +
    "\036\102\033\110\uffba\001\002\000\036\003\uff85\005\uff85" +
    "\011\uff85\012\uff85\013\uff85\020\uff85\023\uff85\027\uff85\032" +
    "\uff85\034\uff85\035\uff85\051\uff85\102\uff85\107\uff85\001\002" +
    "\000\036\003\uff96\005\uff96\011\uff96\012\uff96\013\uff96\020" +
    "\uff96\023\uff96\027\uff96\032\uff96\034\uff96\035\uff96\051\uff96" +
    "\102\uff96\107\uff96\001\002\000\036\003\uff9a\005\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\020\uff9a\023\uff9a\027\uff9a\032\uff9a" +
    "\034\uff9a\035\uff9a\051\uff9a\102\uff9a\107\uff9a\001\002\000" +
    "\036\003\uff97\005\uff97\011\uff97\012\uff97\013\uff97\020\uff97" +
    "\023\uff97\027\uff97\032\uff97\034\uff97\035\uff97\051\uff97\102" +
    "\uff97\107\uff97\001\002\000\006\021\u0259\111\u0258\001\002" +
    "\000\004\073\u0262\001\002\000\004\073\u025a\001\002\000" +
    "\022\042\101\043\103\051\220\060\077\064\221\065\105" +
    "\073\100\074\u025b\001\002\000\006\100\036\102\033\001" +
    "\002\000\004\074\u025d\001\002\000\006\100\036\102\033" +
    "\001\002\000\026\003\063\005\055\011\064\012\062\013" +
    "\uffe1\020\061\023\073\035\054\051\072\102\066\001\002" +
    "\000\004\013\uffdb\001\002\000\026\003\063\005\055\011" +
    "\064\012\062\013\uffd3\020\061\023\073\035\054\051\072" +
    "\102\066\001\002\000\004\013\uffd2\001\002\000\004\074" +
    "\u0263\001\002\000\006\100\036\102\033\001\002\000\026" +
    "\003\063\005\055\011\064\012\062\013\uffd1\020\061\023" +
    "\073\035\054\051\072\102\066\001\002\000\004\013\uffd0" +
    "\001\002\000\004\013\uffda\001\002\000\004\026\u0268\001" +
    "\002\000\006\100\036\102\033\001\002\000\022\005\055" +
    "\011\064\012\062\020\u026c\023\073\035\u026a\051\072\102" +
    "\u026f\001\002\000\004\010\u02a4\001\002\000\030\005\055" +
    "\011\064\012\062\013\uff68\020\u026c\023\073\027\uff68\035" +
    "\u026a\051\072\102\u026f\107\uff68\001\002\000\004\070\u0294" +
    "\001\002\000\010\013\u027d\027\u027c\107\u0103\001\002\000" +
    "\006\100\036\102\033\001\002\000\004\100\u0275\001\002" +
    "\000\030\005\055\011\064\012\062\013\uff5f\020\u026c\023" +
    "\073\027\uff5f\035\u026a\051\072\102\u026f\107\uff5f\001\002" +
    "\000\012\013\uff67\027\uff67\100\u0272\107\uff67\001\002\000" +
    "\022\005\055\011\064\012\062\020\u026c\023\073\035\u026a" +
    "\051\072\102\u026f\001\002\000\010\013\uff61\027\uff61\107" +
    "\uff61\001\002\000\010\013\uff5e\027\uff5e\107\uff5e\001\002" +
    "\000\030\005\055\011\064\012\062\013\uff66\020\u026c\023" +
    "\073\027\uff66\035\u026a\051\072\102\u026f\107\uff66\001\002" +
    "\000\010\013\uff65\027\uff65\107\uff65\001\002\000\030\005" +
    "\055\011\064\012\062\013\uff64\020\u026c\023\073\027\uff64" +
    "\035\u026a\051\072\102\u026f\107\uff64\001\002\000\010\013" +
    "\uff60\027\uff60\107\uff60\001\002\000\004\013\u0291\001\002" +
    "\000\016\042\101\043\103\051\111\060\077\065\105\073" +
    "\100\001\002\000\006\100\036\102\033\001\002\000\010" +
    "\005\u010b\100\036\102\033\001\002\000\004\005\u027e\001" +
    "\002\000\006\100\036\102\033\001\002\000\034\003\uff6d" +
    "\005\uff6d\011\uff6d\012\uff6d\013\uff6d\020\uff6d\023\uff6d\027" +
    "\uff6d\035\uff6d\051\uff6d\100\uff6d\102\uff6d\107\uff6d\001\002" +
    "\000\022\005\055\011\064\012\062\020\u026c\023\073\035" +
    "\u026a\051\072\102\u026f\001\002\000\004\013\u0282\001\002" +
    "\000\004\005\u0283\001\002\000\006\100\036\102\033\001" +
    "\002\000\034\003\uff6c\005\uff6c\011\uff6c\012\uff6c\013\uff6c" +
    "\020\uff6c\023\uff6c\027\uff6c\035\uff6c\051\uff6c\100\uff6c\102" +
    "\uff6c\107\uff6c\001\002\000\022\005\055\011\064\012\062" +
    "\020\u026c\023\073\035\u026a\051\072\102\u026f\001\002\000" +
    "\004\013\u0287\001\002\000\004\005\u0288\001\002\000\006" +
    "\100\036\102\033\001\002\000\034\003\uff6b\005\uff6b\011" +
    "\uff6b\012\uff6b\013\uff6b\020\uff6b\023\uff6b\027\uff6b\035\uff6b" +
    "\051\uff6b\100\uff6b\102\uff6b\107\uff6b\001\002\000\004\026" +
    "\u028b\001\002\000\006\100\036\102\033\001\002\000\022" +
    "\005\055\011\064\012\062\020\u026c\023\073\035\u026a\051" +
    "\072\102\u026f\001\002\000\010\013\uff54\027\u0290\107\u0103" +
    "\001\002\000\004\013\uff55\001\002\000\006\100\uff57\102" +
    "\uff57\001\002\000\010\005\u010b\100\uff56\102\uff56\001\002" +
    "\000\004\005\u0292\001\002\000\006\100\036\102\033\001" +
    "\002\000\034\003\uff6a\005\uff6a\011\uff6a\012\uff6a\013\uff6a" +
    "\020\uff6a\023\uff6a\027\uff6a\035\uff6a\051\uff6a\100\uff6a\102" +
    "\uff6a\107\uff6a\001\002\000\006\021\u0296\111\u0295\001\002" +
    "\000\004\073\u029f\001\002\000\004\073\u0297\001\002\000" +
    "\022\042\101\043\103\051\220\060\077\064\221\065\105" +
    "\073\100\074\u0298\001\002\000\006\100\036\102\033\001" +
    "\002\000\004\074\u029a\001\002\000\006\100\036\102\033" +
    "\001\002\000\030\005\055\011\064\012\062\013\uff69\020" +
    "\u026c\023\073\027\uff69\035\u026a\051\072\102\u026f\107\uff69" +
    "\001\002\000\010\013\uff63\027\uff63\107\uff63\001\002\000" +
    "\030\005\055\011\064\012\062\013\uff5b\020\u026c\023\073" +
    "\027\uff5b\035\u026a\051\072\102\u026f\107\uff5b\001\002\000" +
    "\010\013\uff5a\027\uff5a\107\uff5a\001\002\000\004\074\u02a0" +
    "\001\002\000\006\100\036\102\033\001\002\000\030\005" +
    "\055\011\064\012\062\013\uff59\020\u026c\023\073\027\uff59" +
    "\035\u026a\051\072\102\u026f\107\uff59\001\002\000\010\013" +
    "\uff58\027\uff58\107\uff58\001\002\000\010\013\uff62\027\uff62" +
    "\107\uff62\001\002\000\006\100\036\102\033\001\002\000" +
    "\030\005\055\011\064\012\062\013\uff5c\020\u026c\023\073" +
    "\027\uff5c\035\u026a\051\072\102\u026f\107\uff5c\001\002\000" +
    "\010\013\uff5d\027\uff5d\107\uff5d\001\002\000\006\100\036" +
    "\102\033\001\002\000\026\003\063\005\055\011\064\012" +
    "\062\013\uffd5\020\061\023\073\035\054\051\072\102\066" +
    "\001\002\000\004\013\uffd4\001\002\000\024\003\063\005" +
    "\055\011\064\012\062\020\061\023\073\035\054\051\072" +
    "\102\066\001\002\000\004\013\u02ac\001\002\000\004\010" +
    "\u02ad\001\002\000\006\100\036\102\033\001\002\000\006" +
    "\013\uffe7\100\uffe7\001\002\000\014\014\u0249\015\u0248\016" +
    "\u024b\046\u024a\051\u0247\001\002\000\006\074\ufe9b\104\u02b1" +
    "\001\002\000\006\051\046\106\045\001\002\000\004\074" +
    "\ufe9a\001\002\000\004\022\u02b4\001\002\000\014\014\u0249" +
    "\015\u0248\016\u024b\046\u024a\051\u0247\001\002\000\006\074" +
    "\ufe98\104\u02b6\001\002\000\006\051\046\106\045\001\002" +
    "\000\004\074\ufe99\001\002\000\004\074\u02b9\001\002\000" +
    "\006\100\u02bb\102\u02ba\001\002\000\004\100\u02c0\001\002" +
    "\000\024\003\063\005\055\011\064\012\062\020\061\023" +
    "\073\035\054\051\072\102\066\001\002\000\004\013\u02bd" +
    "\001\002\000\004\010\u02be\001\002\000\006\100\036\102" +
    "\033\001\002\000\006\013\uffea\100\uffea\001\002\000\024" +
    "\003\063\005\055\011\064\012\062\020\061\023\073\035" +
    "\054\051\072\102\066\001\002\000\004\013\u02c2\001\002" +
    "\000\004\010\u02c3\001\002\000\006\100\036\102\033\001" +
    "\002\000\006\013\uffe8\100\uffe8\001\002\000\046\003\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\011\uffe5\012\uffe5\013\uffe5\020" +
    "\uffe5\023\uffe5\027\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\051\uffe5\100\uffe5\102\uffe5\107\uffe5\001\002\000\004\007" +
    "\u02c7\001\002\000\006\002\ufff4\102\ufff4\001\002\000\004" +
    "\013\ufff1\001\002\000\012\003\025\006\024\033\026\102" +
    "\023\001\002\000\004\013\uffef\001\002\000\012\003\025" +
    "\006\024\033\026\102\023\001\002\000\004\013\uffed\001" +
    "\002\000\004\051\u02ce\001\002\000\004\073\u02cf\001\002" +
    "\000\006\051\046\106\045\001\002\000\004\074\u02d1\001" +
    "\002\000\004\022\u02d2\001\002\000\014\014\u0249\015\u0248" +
    "\016\u024b\046\u024a\051\u0247\001\002\000\006\100\036\102" +
    "\033\001\002\000\022\005\u02d7\011\u02db\012\062\020\u02da" +
    "\023\u02e2\035\u02d5\051\072\102\u02dd\001\002\000\004\030" +
    "\u0405\001\002\000\004\013\u0403\001\002\000\016\042\101" +
    "\043\103\051\111\060\077\065\105\073\100\001\002\000" +
    "\024\005\u02d7\011\u02db\012\062\013\ufe96\020\u02da\023\u02e2" +
    "\035\u02d5\051\072\102\u02dd\001\002\000\030\005\ufe84\011" +
    "\ufe84\012\ufe84\013\ufe84\020\ufe84\023\ufe84\027\ufe84\035\ufe84" +
    "\051\ufe84\102\ufe84\107\ufe84\001\002\000\004\070\u03d4\001" +
    "\002\000\004\051\u03a5\001\002\000\006\100\036\102\033" +
    "\001\002\000\004\100\u03a1\001\002\000\024\005\u02d7\011" +
    "\u02db\012\062\013\ufe8d\020\u02da\023\u02e2\035\u02d5\051\072" +
    "\102\u02dd\001\002\000\030\005\ufe83\011\ufe83\012\ufe83\013" +
    "\ufe83\020\ufe83\023\ufe83\027\ufe83\035\ufe83\051\ufe83\102\ufe83" +
    "\107\ufe83\001\002\000\030\005\ufe85\011\ufe85\012\ufe85\013" +
    "\ufe85\020\ufe85\023\ufe85\027\ufe85\035\ufe85\051\ufe85\102\ufe85" +
    "\107\ufe85\001\002\000\024\005\u02d7\011\u02db\012\062\013" +
    "\ufe95\020\u02da\023\u02e2\035\u02d5\051\072\102\u02dd\001\002" +
    "\000\006\024\076\036\075\001\002\000\016\042\101\043" +
    "\103\051\111\060\077\065\105\073\100\001\002\000\006" +
    "\100\036\102\033\001\002\000\022\005\u02e9\011\u02db\012" +
    "\062\020\u02ed\023\u02f2\035\u02e7\051\072\102\u02ef\001\002" +
    "\000\034\005\ufe53\011\ufe53\012\ufe53\013\ufe53\020\ufe53\023" +
    "\ufe53\027\ufe53\032\ufe53\034\ufe53\035\ufe53\051\ufe53\102\ufe53" +
    "\107\ufe53\001\002\000\006\023\u0399\030\u039a\001\002\000" +
    "\034\005\ufe51\011\ufe51\012\ufe51\013\ufe51\020\ufe51\023\ufe51" +
    "\027\ufe51\032\ufe51\034\ufe51\035\ufe51\051\ufe51\102\ufe51\107" +
    "\ufe51\001\002\000\016\042\101\043\103\051\111\060\077" +
    "\065\105\073\100\001\002\000\004\034\u0335\001\002\000" +
    "\024\005\u02e9\011\u02db\012\062\020\u02ed\023\u02f2\034\ufe1b" +
    "\035\u02e7\051\072\102\u02ef\001\002\000\034\005\ufe52\011" +
    "\ufe52\012\ufe52\013\ufe52\020\ufe52\023\ufe52\027\ufe52\032\ufe52" +
    "\034\ufe52\035\ufe52\051\ufe52\102\ufe52\107\ufe52\001\002\000" +
    "\004\070\u0325\001\002\000\006\100\036\102\033\001\002" +
    "\000\004\100\u0321\001\002\000\024\005\u02e9\011\u02db\012" +
    "\062\020\u02ed\023\u02f2\034\ufe12\035\u02e7\051\072\102\u02ef" +
    "\001\002\000\024\005\u02e9\011\u02db\012\062\020\u02ed\023" +
    "\u02f2\034\ufe18\035\u02e7\051\072\102\u02ef\001\002\000\006" +
    "\024\076\036\075\001\002\000\016\042\101\043\103\051" +
    "\111\060\077\065\105\073\100\001\002\000\006\100\036" +
    "\102\033\001\002\000\022\005\116\011\124\012\062\020" +
    "\u02f9\023\073\035\u02f6\051\072\102\u02fd\001\002\000\010" +
    "\011\u0318\023\u0316\030\u0317\001\002\000\024\005\116\011" +
    "\124\012\062\020\u02f9\023\073\034\ufe32\035\u02f6\051\072" +
    "\102\u02fd\001\002\000\004\034\u0313\001\002\000\004\070" +
    "\u0304\001\002\000\024\005\116\011\124\012\062\020\u02f9" +
    "\023\073\034\ufe31\035\u02f6\051\072\102\u02fd\001\002\000" +
    "\006\100\036\102\033\001\002\000\024\005\116\011\124" +
    "\012\062\020\u02f9\023\073\034\ufe29\035\u02f6\051\072\102" +
    "\u02fd\001\002\000\004\100\u02fe\001\002\000\024\005\116" +
    "\011\124\012\062\020\u02f9\023\073\034\ufe30\035\u02f6\051" +
    "\072\102\u02fd\001\002\000\004\034\ufe2f\001\002\000\004" +
    "\034\ufe28\001\002\000\024\005\116\011\124\012\062\020" +
    "\u02f9\023\073\034\ufe2b\035\u02f6\051\072\102\u02fd\001\002" +
    "\000\004\034\ufe2a\001\002\000\004\034\ufe2c\001\002\000" +
    "\006\021\u0306\111\u0305\001\002\000\004\073\u030f\001\002" +
    "\000\004\073\u0307\001\002\000\022\042\101\043\103\051" +
    "\220\060\077\064\221\065\105\073\100\074\u0308\001\002" +
    "\000\006\100\036\102\033\001\002\000\004\074\u030a\001" +
    "\002\000\006\100\036\102\033\001\002\000\024\005\116" +
    "\011\124\012\062\020\u02f9\023\073\034\ufe33\035\u02f6\051" +
    "\072\102\u02fd\001\002\000\004\034\ufe2e\001\002\000\024" +
    "\005\116\011\124\012\062\020\u02f9\023\073\034\ufe21\035" +
    "\u02f6\051\072\102\u02fd\001\002\000\004\034\ufe20\001\002" +
    "\000\004\074\u0310\001\002\000\006\100\036\102\033\001" +
    "\002\000\024\005\116\011\124\012\062\020\u02f9\023\073" +
    "\034\ufe1f\035\u02f6\051\072\102\u02fd\001\002\000\004\034" +
    "\ufe1e\001\002\000\006\100\036\102\033\001\002\000\034" +
    "\005\ufe34\011\ufe34\012\ufe34\013\ufe34\020\ufe34\023\ufe34\027" +
    "\ufe34\032\ufe34\034\ufe34\035\ufe34\051\ufe34\102\ufe34\107\ufe34" +
    "\001\002\000\004\034\ufe2d\001\002\000\006\100\036\102" +
    "\033\001\002\000\006\100\036\102\033\001\002\000\006" +
    "\100\036\102\033\001\002\000\024\005\116\011\124\012" +
    "\062\020\u02f9\023\073\034\ufe23\035\u02f6\051\072\102\u02fd" +
    "\001\002\000\004\034\ufe26\001\002\000\024\005\116\011" +
    "\124\012\062\020\u02f9\023\073\034\ufe22\035\u02f6\051\072" +
    "\102\u02fd\001\002\000\004\034\ufe25\001\002\000\024\005" +
    "\116\011\124\012\062\020\u02f9\023\073\034\ufe24\035\u02f6" +
    "\051\072\102\u02fd\001\002\000\004\034\ufe27\001\002\000" +
    "\004\034\ufe15\001\002\000\004\034\ufe11\001\002\000\024" +
    "\005\u02e9\011\u02db\012\062\020\u02ed\023\u02f2\034\ufe1a\035" +
    "\u02e7\051\072\102\u02ef\001\002\000\004\034\ufe19\001\002" +
    "\000\024\005\u02e9\011\u02db\012\062\020\u02ed\023\u02f2\034" +
    "\ufe14\035\u02e7\051\072\102\u02ef\001\002\000\004\034\ufe13" +
    "\001\002\000\006\021\u0327\111\u0326\001\002\000\004\073" +
    "\u0330\001\002\000\004\073\u0328\001\002\000\022\042\101" +
    "\043\103\051\220\060\077\064\221\065\105\073\100\074" +
    "\u0329\001\002\000\006\100\036\102\033\001\002\000\004" +
    "\074\u032b\001\002\000\006\100\036\102\033\001\002\000" +
    "\024\005\u02e9\011\u02db\012\062\020\u02ed\023\u02f2\034\ufe1c" +
    "\035\u02e7\051\072\102\u02ef\001\002\000\004\034\ufe17\001" +
    "\002\000\024\005\u02e9\011\u02db\012\062\020\u02ed\023\u02f2" +
    "\034\ufe0c\035\u02e7\051\072\102\u02ef\001\002\000\004\034" +
    "\ufe0b\001\002\000\004\074\u0331\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\005\u02e9\011\u02db\012\062\020" +
    "\u02ed\023\u02f2\034\ufe0a\035\u02e7\051\072\102\u02ef\001\002" +
    "\000\004\034\ufe09\001\002\000\004\034\ufe16\001\002\000" +
    "\006\100\036\102\033\001\002\000\030\005\ufe1d\011\ufe1d" +
    "\012\ufe1d\013\ufe1d\020\ufe1d\023\ufe1d\027\ufe1d\035\ufe1d\051" +
    "\ufe1d\102\ufe1d\107\ufe1d\001\002\000\004\026\u0338\001\002" +
    "\000\006\100\036\102\033\001\002\000\022\005\u02e9\011" +
    "\u02db\012\062\020\u033c\023\u02f2\035\u033a\051\072\102\u033f" +
    "\001\002\000\006\011\u0394\030\u0393\001\002\000\030\005" +
    "\u02e9\011\u02db\012\062\013\ufe4b\020\u033c\023\u02f2\027\ufe4b" +
    "\035\u033a\051\072\102\u033f\107\ufe4b\001\002\000\004\070" +
    "\u0383\001\002\000\006\100\036\102\033\001\002\000\030" +
    "\005\u02e9\011\u02db\012\062\013\ufe42\020\u033c\023\u02f2\027" +
    "\ufe42\035\u033a\051\072\102\u033f\107\ufe42\001\002\000\004" +
    "\100\u035e\001\002\000\010\013\u0347\027\u0344\107\u0103\001" +
    "\002\000\030\005\u02e9\011\u02db\012\062\013\ufe48\020\u033c" +
    "\023\u02f2\027\ufe48\035\u033a\051\072\102\u033f\107\ufe48\001" +
    "\002\000\010\013\ufe45\027\ufe45\107\ufe45\001\002\000\016" +
    "\042\101\043\103\051\111\060\077\065\105\073\100\001" +
    "\002\000\010\005\u010b\100\036\102\033\001\002\000\006" +
    "\100\036\102\033\001\002\000\004\013\u034a\001\002\000" +
    "\004\005\u0348\001\002\000\006\100\036\102\033\001\002" +
    "\000\034\005\ufe50\011\ufe50\012\ufe50\013\ufe50\020\ufe50\023" +
    "\ufe50\027\ufe50\032\ufe50\034\ufe50\035\ufe50\051\ufe50\102\ufe50" +
    "\107\ufe50\001\002\000\004\005\u034b\001\002\000\006\100" +
    "\036\102\033\001\002\000\034\005\ufe4d\011\ufe4d\012\ufe4d" +
    "\013\ufe4d\020\ufe4d\023\ufe4d\027\ufe4d\032\ufe4d\034\ufe4d\035" +
    "\ufe4d\051\ufe4d\102\ufe4d\107\ufe4d\001\002\000\022\005\u02e9" +
    "\011\u02db\012\062\020\u033c\023\u02f2\035\u033a\051\072\102" +
    "\u033f\001\002\000\004\013\u034f\001\002\000\004\005\u0350" +
    "\001\002\000\006\100\036\102\033\001\002\000\034\005" +
    "\ufe4e\011\ufe4e\012\ufe4e\013\ufe4e\020\ufe4e\023\ufe4e\027\ufe4e" +
    "\032\ufe4e\034\ufe4e\035\ufe4e\051\ufe4e\102\ufe4e\107\ufe4e\001" +
    "\002\000\022\005\u02e9\011\u02db\012\062\020\u033c\023\u02f2" +
    "\035\u033a\051\072\102\u033f\001\002\000\004\013\u0354\001" +
    "\002\000\004\005\u0355\001\002\000\006\100\036\102\033" +
    "\001\002\000\034\005\ufe4f\011\ufe4f\012\ufe4f\013\ufe4f\020" +
    "\ufe4f\023\ufe4f\027\ufe4f\032\ufe4f\034\ufe4f\035\ufe4f\051\ufe4f" +
    "\102\ufe4f\107\ufe4f\001\002\000\004\026\u0358\001\002\000" +
    "\006\100\036\102\033\001\002\000\022\005\u02e9\011\u02db" +
    "\012\062\020\u033c\023\u02f2\035\u033a\051\072\102\u033f\001" +
    "\002\000\010\013\ufe36\027\u035b\107\u0103\001\002\000\010" +
    "\005\u010b\100\ufe38\102\ufe38\001\002\000\006\100\ufe37\102" +
    "\ufe37\001\002\000\004\013\ufe35\001\002\000\030\005\u02e9" +
    "\011\u02db\012\062\013\ufe4a\020\u033c\023\u02f2\027\ufe4a\035" +
    "\u033a\051\072\102\u033f\107\ufe4a\001\002\000\010\013\ufe49" +
    "\027\ufe49\107\ufe49\001\002\000\010\013\ufe41\027\ufe41\107" +
    "\ufe41\001\002\000\030\005\u02d7\011\u02db\012\062\013\ufe44" +
    "\020\u0365\023\u02e2\027\ufe44\035\u0363\051\072\102\u0368\107" +
    "\ufe44\001\002\000\010\013\ufe43\027\ufe43\107\ufe43\001\002" +
    "\000\004\030\u0380\001\002\000\030\005\u02d7\011\u02db\012" +
    "\062\013\ufe7d\020\u0365\023\u02e2\027\ufe7d\035\u0363\051\072" +
    "\102\u0368\107\ufe7d\001\002\000\004\070\u0370\001\002\000" +
    "\006\100\036\102\033\001\002\000\030\005\u02d7\011\u02db" +
    "\012\062\013\ufe74\020\u0365\023\u02e2\027\ufe74\035\u0363\051" +
    "\072\102\u0368\107\ufe74\001\002\000\004\100\u036b\001\002" +
    "\000\030\005\u02d7\011\u02db\012\062\013\ufe7a\020\u0365\023" +
    "\u02e2\027\ufe7a\035\u0363\051\072\102\u0368\107\ufe7a\001\002" +
    "\000\010\013\ufe77\027\ufe77\107\ufe77\001\002\000\030\005" +
    "\u02d7\011\u02db\012\062\013\ufe7c\020\u0365\023\u02e2\027\ufe7c" +
    "\035\u0363\051\072\102\u0368\107\ufe7c\001\002\000\010\013" +
    "\ufe7b\027\ufe7b\107\ufe7b\001\002\000\010\013\ufe73\027\ufe73" +
    "\107\ufe73\001\002\000\030\005\u02d7\011\u02db\012\062\013" +
    "\ufe76\020\u0365\023\u02e2\027\ufe76\035\u0363\051\072\102\u0368" +
    "\107\ufe76\001\002\000\010\013\ufe75\027\ufe75\107\ufe75\001" +
    "\002\000\006\021\u0372\111\u0371\001\002\000\004\073\u037b" +
    "\001\002\000\004\073\u0373\001\002\000\022\042\101\043" +
    "\103\051\220\060\077\064\221\065\105\073\100\074\u0374" +
    "\001\002\000\006\100\036\102\033\001\002\000\004\074" +
    "\u0376\001\002\000\006\100\036\102\033\001\002\000\030" +
    "\005\u02d7\011\u02db\012\062\013\ufe7e\020\u0365\023\u02e2\027" +
    "\ufe7e\035\u0363\051\072\102\u0368\107\ufe7e\001\002\000\010" +
    "\013\ufe79\027\ufe79\107\ufe79\001\002\000\030\005\u02d7\011" +
    "\u02db\012\062\013\ufe70\020\u0365\023\u02e2\027\ufe70\035\u0363" +
    "\051\072\102\u0368\107\ufe70\001\002\000\010\013\ufe6f\027" +
    "\ufe6f\107\ufe6f\001\002\000\004\074\u037c\001\002\000\006" +
    "\100\036\102\033\001\002\000\030\005\u02d7\011\u02db\012" +
    "\062\013\ufe6e\020\u0365\023\u02e2\027\ufe6e\035\u0363\051\072" +
    "\102\u0368\107\ufe6e\001\002\000\010\013\ufe6d\027\ufe6d\107" +
    "\ufe6d\001\002\000\010\013\ufe78\027\ufe78\107\ufe78\001\002" +
    "\000\006\100\036\102\033\001\002\000\030\005\u02d7\011" +
    "\u02db\012\062\013\ufe71\020\u0365\023\u02e2\027\ufe71\035\u0363" +
    "\051\072\102\u0368\107\ufe71\001\002\000\010\013\ufe72\027" +
    "\ufe72\107\ufe72\001\002\000\006\021\u0385\111\u0384\001\002" +
    "\000\004\073\u038e\001\002\000\004\073\u0386\001\002\000" +
    "\022\042\101\043\103\051\220\060\077\064\221\065\105" +
    "\073\100\074\u0387\001\002\000\006\100\036\102\033\001" +
    "\002\000\004\074\u0389\001\002\000\006\100\036\102\033" +
    "\001\002\000\030\005\u02e9\011\u02db\012\062\013\ufe4c\020" +
    "\u033c\023\u02f2\027\ufe4c\035\u033a\051\072\102\u033f\107\ufe4c" +
    "\001\002\000\010\013\ufe47\027\ufe47\107\ufe47\001\002\000" +
    "\030\005\u02e9\011\u02db\012\062\013\ufe3c\020\u033c\023\u02f2" +
    "\027\ufe3c\035\u033a\051\072\102\u033f\107\ufe3c\001\002\000" +
    "\010\013\ufe3b\027\ufe3b\107\ufe3b\001\002\000\004\074\u038f" +
    "\001\002\000\006\100\036\102\033\001\002\000\030\005" +
    "\u02e9\011\u02db\012\062\013\ufe3a\020\u033c\023\u02f2\027\ufe3a" +
    "\035\u033a\051\072\102\u033f\107\ufe3a\001\002\000\010\013" +
    "\ufe39\027\ufe39\107\ufe39\001\002\000\010\013\ufe46\027\ufe46" +
    "\107\ufe46\001\002\000\006\100\036\102\033\001\002\000" +
    "\006\100\036\102\033\001\002\000\030\005\u02e9\011\u02db" +
    "\012\062\013\ufe3d\020\u033c\023\u02f2\027\ufe3d\035\u033a\051" +
    "\072\102\u033f\107\ufe3d\001\002\000\010\013\ufe3e\027\ufe3e" +
    "\107\ufe3e\001\002\000\030\005\u02e9\011\u02db\012\062\013" +
    "\ufe3f\020\u033c\023\u02f2\027\ufe3f\035\u033a\051\072\102\u033f" +
    "\107\ufe3f\001\002\000\010\013\ufe40\027\ufe40\107\ufe40\001" +
    "\002\000\006\100\036\102\033\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\005\u02e9\011\u02db\012\062\020" +
    "\u02ed\023\u02f2\034\ufe0d\035\u02e7\051\072\102\u02ef\001\002" +
    "\000\004\034\ufe0f\001\002\000\024\005\u02e9\011\u02db\012" +
    "\062\020\u02ed\023\u02f2\034\ufe0e\035\u02e7\051\072\102\u02ef" +
    "\001\002\000\004\034\ufe10\001\002\000\004\013\ufe8f\001" +
    "\002\000\004\013\ufe8c\001\002\000\024\005\u02d7\011\u02db" +
    "\012\062\013\ufe94\020\u02da\023\u02e2\035\u02d5\051\072\102" +
    "\u02dd\001\002\000\004\013\ufe93\001\002\000\024\005\u02d7" +
    "\011\u02db\012\062\013\ufe92\020\u02da\023\u02e2\035\u02d5\051" +
    "\072\102\u02dd\001\002\000\004\013\ufe8e\001\002\000\004" +
    "\054\u03a6\001\002\000\006\060\077\065\105\001\002\000" +
    "\004\037\u03a8\001\002\000\006\060\077\065\105\001\002" +
    "\000\004\047\u03aa\001\002\000\006\060\077\065\105\001" +
    "\002\000\006\100\036\102\033\001\002\000\022\005\u02e9" +
    "\011\u02db\012\062\020\u03af\023\u02f2\035\u03ad\051\072\102" +
    "\u03b3\001\002\000\006\011\u03cf\030\u03ce\001\002\000\024" +
    "\005\u02e9\011\u02db\012\062\020\u03af\023\u02f2\032\ufe66\035" +
    "\u03ad\051\072\102\u03b3\001\002\000\004\070\u03be\001\002" +
    "\000\006\100\036\102\033\001\002\000\004\032\u03b9\001" +
    "\002\000\024\005\u02e9\011\u02db\012\062\020\u03af\023\u02f2" +
    "\032\ufe5d\035\u03ad\051\072\102\u03b3\001\002\000\004\100" +
    "\u03b6\001\002\000\024\005\u02e9\011\u02db\012\062\020\u03af" +
    "\023\u02f2\032\ufe63\035\u03ad\051\072\102\u03b3\001\002\000" +
    "\004\032\ufe60\001\002\000\024\005\u02e9\011\u02db\012\062" +
    "\020\u03af\023\u02f2\032\ufe65\035\u03ad\051\072\102\u03b3\001" +
    "\002\000\004\032\ufe64\001\002\000\004\032\ufe5c\001\002" +
    "\000\004\051\u03ba\001\002\000\006\100\036\102\033\001" +
    "\002\000\034\005\ufe68\011\ufe68\012\ufe68\013\ufe68\020\ufe68" +
    "\023\ufe68\027\ufe68\032\ufe68\034\ufe68\035\ufe68\051\ufe68\102" +
    "\ufe68\107\ufe68\001\002\000\024\005\u02e9\011\u02db\012\062" +
    "\020\u03af\023\u02f2\032\ufe5f\035\u03ad\051\072\102\u03b3\001" +
    "\002\000\004\032\ufe5e\001\002\000\006\021\u03c0\111\u03bf" +
    "\001\002\000\004\073\u03c9\001\002\000\004\073\u03c1\001" +
    "\002\000\022\042\101\043\103\051\220\060\077\064\221" +
    "\065\105\073\100\074\u03c2\001\002\000\006\100\036\102" +
    "\033\001\002\000\004\074\u03c4\001\002\000\006\100\036" +
    "\102\033\001\002\000\024\005\u02e9\011\u02db\012\062\020" +
    "\u03af\023\u02f2\032\ufe67\035\u03ad\051\072\102\u03b3\001\002" +
    "\000\004\032\ufe62\001\002\000\024\005\u02e9\011\u02db\012" +
    "\062\020\u03af\023\u02f2\032\ufe57\035\u03ad\051\072\102\u03b3" +
    "\001\002\000\004\032\ufe56\001\002\000\004\074\u03ca\001" +
    "\002\000\006\100\036\102\033\001\002\000\024\005\u02e9" +
    "\011\u02db\012\062\020\u03af\023\u02f2\032\ufe55\035\u03ad\051" +
    "\072\102\u03b3\001\002\000\004\032\ufe54\001\002\000\004" +
    "\032\ufe61\001\002\000\006\100\036\102\033\001\002\000" +
    "\006\100\036\102\033\001\002\000\024\005\u02e9\011\u02db" +
    "\012\062\020\u03af\023\u02f2\032\ufe58\035\u03ad\051\072\102" +
    "\u03b3\001\002\000\004\032\ufe59\001\002\000\024\005\u02e9" +
    "\011\u02db\012\062\020\u03af\023\u02f2\032\ufe5a\035\u03ad\051" +
    "\072\102\u03b3\001\002\000\004\032\ufe5b\001\002\000\006" +
    "\021\u03d6\111\u03d5\001\002\000\004\073\u03df\001\002\000" +
    "\004\073\u03d7\001\002\000\022\042\101\043\103\051\220" +
    "\060\077\064\221\065\105\073\100\074\u03d8\001\002\000" +
    "\006\100\036\102\033\001\002\000\004\074\u03da\001\002" +
    "\000\006\100\036\102\033\001\002\000\024\005\u02d7\011" +
    "\u02db\012\062\013\ufe97\020\u02da\023\u02e2\035\u02d5\051\072" +
    "\102\u02dd\001\002\000\004\013\ufe91\001\002\000\024\005" +
    "\u02d7\011\u02db\012\062\013\ufe89\020\u02da\023\u02e2\035\u02d5" +
    "\051\072\102\u02dd\001\002\000\004\013\ufe88\001\002\000" +
    "\004\074\u03e0\001\002\000\006\100\036\102\033\001\002" +
    "\000\024\005\u02d7\011\u02db\012\062\013\ufe87\020\u02da\023" +
    "\u02e2\035\u02d5\051\072\102\u02dd\001\002\000\004\013\ufe86" +
    "\001\002\000\004\013\ufe90\001\002\000\004\026\u03e5\001" +
    "\002\000\006\100\036\102\033\001\002\000\022\005\u02d7" +
    "\011\u02db\012\062\020\u0365\023\u02e2\035\u0363\051\072\102" +
    "\u0368\001\002\000\010\013\u03ec\027\u03ea\107\u0103\001\002" +
    "\000\016\042\101\043\103\051\111\060\077\065\105\073" +
    "\100\001\002\000\004\013\u03f9\001\002\000\010\005\u010b" +
    "\100\036\102\033\001\002\000\006\100\036\102\033\001" +
    "\002\000\004\005\u03ed\001\002\000\006\100\036\102\033" +
    "\001\002\000\030\005\ufe82\011\ufe82\012\ufe82\013\ufe82\020" +
    "\ufe82\023\ufe82\027\ufe82\035\ufe82\051\ufe82\102\ufe82\107\ufe82" +
    "\001\002\000\022\005\u02d7\011\u02db\012\062\020\u0365\023" +
    "\u02e2\035\u0363\051\072\102\u0368\001\002\000\004\013\u03f1" +
    "\001\002\000\004\005\u03f2\001\002\000\006\100\036\102" +
    "\033\001\002\000\030\005\ufe80\011\ufe80\012\ufe80\013\ufe80" +
    "\020\ufe80\023\ufe80\027\ufe80\035\ufe80\051\ufe80\102\ufe80\107" +
    "\ufe80\001\002\000\022\005\u02d7\011\u02db\012\062\020\u0365" +
    "\023\u02e2\035\u0363\051\072\102\u0368\001\002\000\004\013" +
    "\u03f6\001\002\000\004\005\u03f7\001\002\000\006\100\036" +
    "\102\033\001\002\000\030\005\ufe81\011\ufe81\012\ufe81\013" +
    "\ufe81\020\ufe81\023\ufe81\027\ufe81\035\ufe81\051\ufe81\102\ufe81" +
    "\107\ufe81\001\002\000\004\005\u03fa\001\002\000\006\100" +
    "\036\102\033\001\002\000\030\005\ufe7f\011\ufe7f\012\ufe7f" +
    "\013\ufe7f\020\ufe7f\023\ufe7f\027\ufe7f\035\ufe7f\051\ufe7f\102" +
    "\ufe7f\107\ufe7f\001\002\000\004\026\u03fd\001\002\000\006" +
    "\100\036\102\033\001\002\000\022\005\u02d7\011\u02db\012" +
    "\062\020\u0365\023\u02e2\035\u0363\051\072\102\u0368\001\002" +
    "\000\010\013\ufe6a\027\u0401\107\u0103\001\002\000\004\013" +
    "\ufe69\001\002\000\010\005\u010b\100\ufe6c\102\ufe6c\001\002" +
    "\000\006\100\ufe6b\102\ufe6b\001\002\000\004\030\u0404\001" +
    "\002\000\010\006\ufe9c\100\ufe9c\102\ufe9c\001\002\000\006" +
    "\100\036\102\033\001\002\000\024\005\u02d7\011\u02db\012" +
    "\062\013\ufe8a\020\u02da\023\u02e2\035\u02d5\051\072\102\u02dd" +
    "\001\002\000\004\013\ufe8b\001\002\000\012\003\025\006" +
    "\024\033\026\102\023\001\002\000\004\013\uffeb\001\002" +
    "\000\004\051\u040b\001\002\000\006\100\036\102\033\001" +
    "\002\000\004\012\u040e\001\002\000\004\013\u0414\001\002" +
    "\000\004\051\u040f\001\002\000\004\022\u0410\001\002\000" +
    "\014\014\u0249\015\u0248\016\u024b\046\u024a\051\u0247\001\002" +
    "\000\006\100\036\102\033\001\002\000\006\012\u040e\013" +
    "\ufe9f\001\002\000\004\013\ufe9e\001\002\000\004\025\u0415" +
    "\001\002\000\010\006\ufe9d\100\ufe9d\102\ufe9d\001\002\000" +
    "\012\003\025\006\024\033\026\102\023\001\002\000\004" +
    "\013\uffec\001\002\000\012\003\025\006\024\033\026\102" +
    "\023\001\002\000\004\013\u041a\001\002\000\004\007\u041b" +
    "\001\002\000\006\002\ufff3\102\ufff3\001\002\000\006\003" +
    "\007\004\004\001\002\000\004\006\ufffa\001\002\000\004" +
    "\002\001\001\002\000\012\002\ufffd\003\007\004\004\102" +
    "\005\001\002\000\004\002\ufffe\001\002\000\004\100\u042b" +
    "\001\002\000\010\070\u0429\100\ufff9\102\ufff9\001\002\000" +
    "\006\100\036\102\033\001\002\000\010\070\u0425\100\ufff7" +
    "\102\ufff7\001\002\000\010\003\u0421\017\u0424\051\u0422\001" +
    "\002\000\006\100\ufff6\102\ufff6\001\002\000\010\003\007" +
    "\004\004\006\ufffc\001\002\000\004\006\ufffb\001\002\000" +
    "\010\003\u0421\017\u0424\051\u0422\001\002\000\006\100\ufff8" +
    "\102\ufff8\001\002\000\010\003\u0421\017\u0424\051\u0422\001" +
    "\002\000\006\100\ufff5\102\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u042a\000\006\002\005\003\007\001\001\000\004\005" +
    "\u0422\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\011\001\001\000\002\001\001\000" +
    "\004\125\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\027" +
    "\010\026\021\030\053\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u02c7\121\u02c8\001\001\000\002\001" +
    "\001\000\006\010\034\121\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\027\010\026\021\037\053\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\056\022\070\025\067\026\052\032\057" +
    "\041\055\050\064\114\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\106\024\101\030\u0266\050\105" +
    "\113\103\123\107\001\001\000\002\001\001\000\022\015" +
    "\056\022\u0265\025\067\026\052\032\057\041\055\050\064" +
    "\114\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0205\001\001\000\002\001\001\000\022\015\056\022" +
    "\u0202\025\067\026\052\032\057\041\055\050\064\114\066" +
    "\001\001\000\022\015\056\022\u0201\025\067\026\052\032" +
    "\057\041\055\050\064\114\066\001\001\000\002\001\001" +
    "\000\012\024\231\113\232\115\u01cd\122\u01cc\001\001\000" +
    "\004\116\073\001\001\000\016\017\106\024\101\030\111" +
    "\050\105\113\103\123\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\u01bd\050\215" +
    "\113\253\123\u01bc\001\001\000\002\001\001\000\004\031" +
    "\u01b6\001\001\000\002\001\001\000\004\031\u01b0\001\001" +
    "\000\002\001\001\000\004\031\u01ab\001\001\000\004\031" +
    "\u01a5\001\001\000\004\020\273\001\001\000\004\031\u019d" +
    "\001\001\000\004\121\112\001\001\000\022\015\116\041" +
    "\117\042\121\043\122\044\113\046\127\050\124\114\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\106\024\101\030\u0155\050\105\113\103\123\107\001\001" +
    "\000\022\015\116\041\117\042\u0154\043\122\044\113\046" +
    "\127\050\124\114\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\116\041\117\042" +
    "\u0142\043\122\044\113\046\127\050\124\114\126\001\001" +
    "\000\002\001\001\000\004\121\133\001\001\000\002\001" +
    "\001\000\022\015\116\041\117\042\130\043\122\044\113" +
    "\046\127\050\124\114\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\116\041\117\042\132\043\122" +
    "\044\113\046\127\050\124\114\126\001\001\000\002\001" +
    "\001\000\022\015\116\041\117\042\134\043\122\044\113" +
    "\046\127\050\124\114\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\137\001\001\000\002\001\001" +
    "\000\004\113\141\001\001\000\002\001\001\000\004\113" +
    "\143\001\001\000\004\121\144\001\001\000\022\015\150" +
    "\032\151\034\145\035\156\037\161\047\157\050\153\114" +
    "\155\001\001\000\022\015\150\032\151\034\145\035\156" +
    "\037\161\047\u0141\050\153\114\155\001\001\000\002\001" +
    "\001\000\016\017\106\024\101\030\367\050\105\113\103" +
    "\123\107\001\001\000\022\015\150\032\151\034\145\035" +
    "\156\037\161\047\366\050\153\114\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\345\001\001\000" +
    "\002\001\001\000\022\015\150\032\151\034\145\035\156" +
    "\037\161\047\342\050\153\114\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\162\001\001\000\002" +
    "\001\001\000\016\017\106\024\101\030\163\050\105\113" +
    "\103\123\107\001\001\000\004\121\164\001\001\000\022" +
    "\015\166\040\174\041\117\043\170\044\113\046\127\050" +
    "\171\114\172\001\001\000\002\001\001\000\022\015\166" +
    "\040\330\041\117\043\170\044\113\046\127\050\171\114" +
    "\172\001\001\000\002\001\001\000\022\015\166\040\204" +
    "\041\117\043\170\044\113\046\127\050\171\114\172\001" +
    "\001\000\004\121\202\001\001\000\022\015\166\040\201" +
    "\041\117\043\170\044\113\046\127\050\171\114\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\176" +
    "\001\001\000\002\001\001\000\022\015\166\040\200\041" +
    "\117\043\170\044\113\046\127\050\171\114\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\166\040" +
    "\203\041\117\043\170\044\113\046\127\050\171\114\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\216" +
    "\023\214\024\212\050\215\113\213\123\107\001\001\000" +
    "\004\121\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\216\023\222" +
    "\024\212\050\215\113\213\123\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\216\023\245\024\212" +
    "\050\215\113\213\123\107\001\001\000\012\024\231\051" +
    "\230\113\232\115\233\001\001\000\002\001\001\000\010" +
    "\024\231\113\232\115\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\231\051\237\113\232\115\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\231\051\244\113\232\115" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\216\023\250\024" +
    "\212\050\215\113\213\123\107\001\001\000\002\001\001" +
    "\000\016\017\216\023\312\024\212\050\215\113\213\123" +
    "\107\001\001\000\012\017\256\050\215\113\253\123\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\273\001\001\000\002\001\001\000\014\017\267\020\263" +
    "\050\215\113\253\123\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\271\050\215" +
    "\113\253\123\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\301\050\215\113\253\120\303\123\302\001\001\000\012" +
    "\017\276\050\215\113\253\123\275\001\001\000\004\020" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\307\020\306" +
    "\050\215\113\253\123\107\001\001\000\012\017\311\050" +
    "\215\113\253\123\310\001\001\000\002\001\001\000\004" +
    "\020\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\314\001\001\000\022\015\166\040\315\041\117" +
    "\043\170\044\113\046\127\050\171\114\172\001\001\000" +
    "\002\001\001\000\016\017\216\023\317\024\212\050\215" +
    "\113\213\123\107\001\001\000\002\001\001\000\016\017" +
    "\216\023\321\024\212\050\215\113\213\123\107\001\001" +
    "\000\002\001\001\000\022\015\166\040\323\041\117\043" +
    "\170\044\113\046\127\050\171\114\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\326\001\001\000" +
    "\022\015\166\040\327\041\117\043\170\044\113\046\127" +
    "\050\171\114\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\335\001\001\000\004\121\333\001\001" +
    "\000\022\015\166\040\334\041\117\043\170\044\113\046" +
    "\127\050\171\114\172\001\001\000\002\001\001\000\022" +
    "\015\166\040\336\041\117\043\170\044\113\046\127\050" +
    "\171\114\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\150\032\151\034\145\035\156\037\161" +
    "\047\344\050\153\114\155\001\001\000\002\001\001\000" +
    "\022\015\150\032\151\034\145\035\156\037\161\047\346" +
    "\050\153\114\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\216" +
    "\023\354\024\212\050\215\113\213\123\107\001\001\000" +
    "\004\121\360\001\001\000\002\001\001\000\004\121\356" +
    "\001\001\000\022\015\150\032\151\034\145\035\156\037" +
    "\161\047\357\050\153\114\155\001\001\000\002\001\001" +
    "\000\022\015\150\032\151\034\145\035\156\037\161\047" +
    "\361\050\153\114\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\364\001\001\000\022\015\150\032" +
    "\151\034\145\035\156\037\161\047\365\050\153\114\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\371\001\001\000\022\015\374\032\151" +
    "\034\372\035\156\037\161\050\376\100\u0101\114\377\001" +
    "\001\000\022\015\374\032\151\034\372\035\156\037\161" +
    "\050\376\100\u013a\114\377\001\001\000\002\001\001\000" +
    "\022\015\374\032\151\034\372\035\156\037\161\050\376" +
    "\100\u0133\114\377\001\001\000\002\001\001\000\004\121" +
    "\u0122\001\001\000\022\015\374\032\151\034\372\035\156" +
    "\037\161\050\376\100\u0121\114\377\001\001\000\002\001" +
    "\001\000\010\036\u0105\110\u0104\117\u0103\001\001\000\002" +
    "\001\001\000\016\017\106\024\101\030\u0118\050\105\113" +
    "\103\123\107\001\001\000\002\001\001\000\004\121\u0110" +
    "\001\001\000\004\121\u010b\001\001\000\002\001\001\000" +
    "\004\121\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\374\032\151\034\372\035\156\037\161\050" +
    "\376\100\u010c\114\377\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u010f\001\001\000\002\001\001\000" +
    "\022\015\374\032\151\034\372\035\156\037\161\050\376" +
    "\100\u0111\114\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u011a\001\001\000\022\015\374" +
    "\032\151\034\372\035\156\037\161\050\376\100\u011b\114" +
    "\377\001\001\000\010\036\u011d\110\u011c\117\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\374\032\151\034\372\035\156\037\161\050\376" +
    "\100\u0120\114\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\374\032\151\034\372\035\156\037\161" +
    "\050\376\100\u0123\114\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\216\023\u0129\024\212\050\215\113\213\123\107\001" +
    "\001\000\004\121\u012d\001\001\000\002\001\001\000\004" +
    "\121\u012b\001\001\000\022\015\374\032\151\034\372\035" +
    "\156\037\161\050\376\100\u012c\114\377\001\001\000\002" +
    "\001\001\000\022\015\374\032\151\034\372\035\156\037" +
    "\161\050\376\100\u012e\114\377\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0131\001\001\000\022\015" +
    "\374\032\151\034\372\035\156\037\161\050\376\100\u0132" +
    "\114\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0138\001\001\000\004\121\u0136\001\001\000\022" +
    "\015\374\032\151\034\372\035\156\037\161\050\376\100" +
    "\u0137\114\377\001\001\000\002\001\001\000\022\015\374" +
    "\032\151\034\372\035\156\037\161\050\376\100\u0139\114" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u013f\001\001\000\004\121\u013d\001\001\000\022\015" +
    "\150\032\151\034\145\035\156\037\161\047\u013e\050\153" +
    "\114\155\001\001\000\002\001\001\000\022\015\150\032" +
    "\151\034\145\035\156\037\161\047\u0140\050\153\114\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\216\023\u014a\024\212\050\215\113\213\123\107\001\001" +
    "\000\004\121\u014e\001\001\000\002\001\001\000\004\121" +
    "\u014c\001\001\000\022\015\116\041\117\042\u014d\043\122" +
    "\044\113\046\127\050\124\114\126\001\001\000\002\001" +
    "\001\000\022\015\116\041\117\042\u014f\043\122\044\113" +
    "\046\127\050\124\114\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0152\001\001\000\022\015\116" +
    "\041\117\042\u0153\043\122\044\113\046\127\050\124\114" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0157\001\001\000\022\015\u0159\041" +
    "\117\043\u015b\044\113\046\127\050\u015c\101\u015f\114\u015d" +
    "\001\001\000\002\001\001\000\022\015\u0159\041\117\043" +
    "\u015b\044\113\046\127\050\u015c\101\u0190\114\u015d\001\001" +
    "\000\002\001\001\000\022\015\u0159\041\117\043\u015b\044" +
    "\113\046\127\050\u015c\101\u0180\114\u015d\001\001\000\004" +
    "\121\u017e\001\001\000\022\015\u0159\041\117\043\u015b\044" +
    "\113\046\127\050\u015c\101\u017d\114\u015d\001\001\000\002" +
    "\001\001\000\010\045\u0162\106\u0163\117\u0160\001\001\000" +
    "\016\017\106\024\101\030\u0174\050\105\113\103\123\107" +
    "\001\001\000\004\121\u016f\001\001\000\004\121\u016a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0169\001\001\000\002\001\001\000\022\015\u0159\041\117" +
    "\043\u015b\044\113\046\127\050\u015c\101\u016b\114\u015d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u016e" +
    "\001\001\000\002\001\001\000\022\015\u0159\041\117\043" +
    "\u015b\044\113\046\127\050\u015c\101\u0170\114\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0173\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0176" +
    "\001\001\000\022\015\u0159\041\117\043\u015b\044\113\046" +
    "\127\050\u015c\101\u0177\114\u015d\001\001\000\010\045\u0179" +
    "\106\u017a\117\u0160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u0159\041\117\043\u015b" +
    "\044\113\046\127\050\u015c\101\u017c\114\u015d\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\u0159\041\117" +
    "\043\u015b\044\113\046\127\050\u015c\101\u017f\114\u015d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\216\023" +
    "\u0186\024\212\050\215\113\213\123\107\001\001\000\004" +
    "\121\u018a\001\001\000\002\001\001\000\004\121\u0188\001" +
    "\001\000\022\015\u0159\041\117\043\u015b\044\113\046\127" +
    "\050\u015c\101\u0189\114\u015d\001\001\000\002\001\001\000" +
    "\022\015\u0159\041\117\043\u015b\044\113\046\127\050\u015c" +
    "\101\u018b\114\u015d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u018e\001\001\000\022\015\u0159\041\117" +
    "\043\u015b\044\113\046\127\050\u015c\101\u018f\114\u015d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0195" +
    "\001\001\000\004\121\u0193\001\001\000\022\015\u0159\041" +
    "\117\043\u015b\044\113\046\127\050\u015c\101\u0194\114\u015d" +
    "\001\001\000\002\001\001\000\022\015\u0159\041\117\043" +
    "\u015b\044\113\046\127\050\u015c\101\u0196\114\u015d\001\001" +
    "\000\002\001\001\000\004\121\u0198\001\001\000\022\015" +
    "\116\041\117\042\u0199\043\122\044\113\046\127\050\124" +
    "\114\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\u01a1\024\u019e" +
    "\050\u01a0\113\u019f\123\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\u01a9\024\u01a6\050\u01a8\113\u01a7\123\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u01ae\024\u01ac\050\215" +
    "\113\u01ad\123\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\u01b4" +
    "\024\u01b1\050\u01b3\113\u01b2\123\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\u01ba\024\u01b7\050\u01b9\113" +
    "\u01b8\123\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\273\001\001\000\002\001\001\000\014\017\u01c0" +
    "\020\u01bf\050\215\113\253\123\u01c1\001\001\000\012\017" +
    "\u01c3\050\215\113\253\123\u01c2\001\001\000\002\001\001" +
    "\000\004\020\273\001\001\000\004\020\273\001\001\000" +
    "\002\001\001\000\014\017\u01c6\020\u01c5\050\215\113\253" +
    "\123\u01c7\001\001\000\012\017\u01c9\050\215\113\253\123" +
    "\u01c8\001\001\000\002\001\001\000\004\020\273\001\001" +
    "\000\004\020\273\001\001\000\002\001\001\000\012\024" +
    "\231\051\230\113\232\115\u01fc\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u01e3\001\001\000\020\017" +
    "\u01d5\024\u01cf\050\u01d2\113\u01d1\114\u01d3\123\107\124\u01d4" +
    "\001\001\000\004\121\u01e1\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u01dc\001\001\000\002\001\001" +
    "\000\004\121\u01db\001\001\000\004\121\u01da\001\001\000" +
    "\014\024\231\113\232\115\u01cd\121\u01d9\122\u01cc\001\001" +
    "\000\004\121\u01d8\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\231\113\232" +
    "\115\u01cd\122\u01e5\001\001\000\002\001\001\000\010\024" +
    "\231\113\232\115\u01e6\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u01e9\001\001\000\012\024\231\113" +
    "\232\115\u01cd\122\u01ea\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\u01f1\024\u01ed\050" +
    "\u01ef\113\u01ee\114\u01f0\123\107\124\u01f2\001\001\000\004" +
    "\121\u01fb\001\001\000\004\121\u01fa\001\001\000\004\121" +
    "\u01f9\001\001\000\002\001\001\000\004\121\u01f8\001\001" +
    "\000\004\121\u01f7\001\001\000\004\121\u01f6\001\001\000" +
    "\014\024\231\113\232\115\u01cd\121\u01f5\122\u01cc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u01e9\001\001\000" +
    "\002\001\001\000\004\121\u0200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\056\022" +
    "\u0204\025\067\026\052\032\057\041\055\050\064\114\066" +
    "\001\001\000\002\001\001\000\022\015\056\022\u0206\025" +
    "\067\026\052\032\057\041\055\050\064\114\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\u0209\001" +
    "\001\000\002\001\001\000\004\113\u020b\001\001\000\002" +
    "\001\001\000\004\113\u020d\001\001\000\004\121\u020e\001" +
    "\001\000\022\015\u0212\032\151\033\u0211\034\u020f\035\156" +
    "\037\161\050\u0214\114\u0215\001\001\000\022\015\u0212\032" +
    "\151\033\u0232\034\u020f\035\156\037\161\050\u0214\114\u0215" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\u0212\032\151\033\u022b\034\u020f\035\156\037\161\050\u0214" +
    "\114\u0215\001\001\000\002\001\001\000\004\121\u021a\001" +
    "\001\000\022\015\u0212\032\151\033\u0219\034\u020f\035\156" +
    "\037\161\050\u0214\114\u0215\001\001\000\002\001\001\000" +
    "\022\015\u0212\032\151\033\u0218\034\u020f\035\156\037\161" +
    "\050\u0214\114\u0215\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u0212\032\151\033\u021b\034\u020f\035\156" +
    "\037\161\050\u0214\114\u0215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\216\023\u0221\024\212\050\215\113\213\123\107\001" +
    "\001\000\004\121\u0225\001\001\000\002\001\001\000\004" +
    "\121\u0223\001\001\000\022\015\u0212\032\151\033\u0224\034" +
    "\u020f\035\156\037\161\050\u0214\114\u0215\001\001\000\002" +
    "\001\001\000\022\015\u0212\032\151\033\u0226\034\u020f\035" +
    "\156\037\161\050\u0214\114\u0215\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0229\001\001\000\022\015" +
    "\u0212\032\151\033\u022a\034\u020f\035\156\037\161\050\u0214" +
    "\114\u0215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u022e\001\001\000\002\001\001" +
    "\000\004\121\u0230\001\001\000\022\015\u0212\032\151\033" +
    "\u0231\034\u020f\035\156\037\161\050\u0214\114\u0215\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\056\022" +
    "\u0234\025\067\026\052\032\057\041\055\050\064\114\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0245\001\001\000\022\016\u023c\017\u023e\024\u0238\050\u023a" +
    "\113\u0239\114\u023b\123\107\124\u023d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u0244\001\001\000\002" +
    "\001\001\000\004\121\u0243\001\001\000\002\001\001\000" +
    "\004\121\u0242\001\001\000\002\001\001\000\014\024\231" +
    "\113\232\115\u01cd\121\u0241\122\u01cc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u024c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\u024f\017\u0250\024\u0238\050\u024d\113\u0239\114" +
    "\u024e\123\107\124\u023d\001\001\000\002\001\001\000\004" +
    "\121\u0255\001\001\000\002\001\001\000\004\121\u0254\001" +
    "\001\000\004\121\u0253\001\001\000\014\024\231\113\232" +
    "\115\u01cd\121\u0252\122\u01cc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\216\023\u025b\024\212\050\215\113\213\123\107\001\001" +
    "\000\004\121\u025f\001\001\000\002\001\001\000\004\121" +
    "\u025d\001\001\000\022\015\056\022\u025e\025\067\026\052" +
    "\032\057\041\055\050\064\114\066\001\001\000\002\001" +
    "\001\000\022\015\056\022\u0260\025\067\026\052\032\057" +
    "\041\055\050\064\114\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0263\001\001\000\022\015\056" +
    "\022\u0264\025\067\026\052\032\057\041\055\050\064\114" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0268\001\001\000\022\015\u026a\025" +
    "\u0270\026\052\032\057\041\055\050\u026d\077\u026c\114\u026f" +
    "\001\001\000\002\001\001\000\022\015\u026a\025\u0270\026" +
    "\052\032\057\041\055\050\u026d\077\u02a2\114\u026f\001\001" +
    "\000\002\001\001\000\010\027\u027a\107\u0278\117\u0279\001" +
    "\001\000\004\121\u0276\001\001\000\002\001\001\000\022" +
    "\015\u026a\025\u0270\026\052\032\057\041\055\050\u026d\077" +
    "\u0273\114\u026f\001\001\000\002\001\001\000\022\015\u026a" +
    "\025\u0270\026\052\032\057\041\055\050\u026d\077\u0272\114" +
    "\u026f\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u026a\025\u0270\026\052\032\057\041\055\050\u026d\077" +
    "\u0275\114\u026f\001\001\000\002\001\001\000\022\015\u026a" +
    "\025\u0270\026\052\032\057\041\055\050\u026d\077\u0277\114" +
    "\u026f\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\106\024\101\030\u0289\050\105\113\103\123\107\001" +
    "\001\000\004\121\u0284\001\001\000\004\121\u027f\001\001" +
    "\000\002\001\001\000\004\121\u027e\001\001\000\002\001" +
    "\001\000\022\015\u026a\025\u0270\026\052\032\057\041\055" +
    "\050\u026d\077\u0280\114\u026f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0283\001\001\000\002\001\001" +
    "\000\022\015\u026a\025\u0270\026\052\032\057\041\055\050" +
    "\u026d\077\u0285\114\u026f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0288\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u028b\001\001\000\022\015\u026a" +
    "\025\u0270\026\052\032\057\041\055\050\u026d\077\u028c\114" +
    "\u026f\001\001\000\010\027\u028e\107\u028d\117\u0279\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0292\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\216\023\u0298\024\212\050\215\113\213\123\107" +
    "\001\001\000\004\121\u029c\001\001\000\002\001\001\000" +
    "\004\121\u029a\001\001\000\022\015\u026a\025\u0270\026\052" +
    "\032\057\041\055\050\u026d\077\u029b\114\u026f\001\001\000" +
    "\002\001\001\000\022\015\u026a\025\u0270\026\052\032\057" +
    "\041\055\050\u026d\077\u029d\114\u026f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u02a0\001\001\000\022" +
    "\015\u026a\025\u0270\026\052\032\057\041\055\050\u026d\077" +
    "\u02a1\114\u026f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u02a4\001\001\000\022\015\u026a\025\u0270\026" +
    "\052\032\057\041\055\050\u026d\077\u02a5\114\u026f\001\001" +
    "\000\002\001\001\000\004\121\u02a7\001\001\000\022\015" +
    "\056\022\u02a8\025\067\026\052\032\057\041\055\050\064" +
    "\114\066\001\001\000\002\001\001\000\022\015\056\022" +
    "\u02aa\025\067\026\052\032\057\041\055\050\064\114\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u02ad\001\001\000\002\001\001\000\004\012\u02af\001\001" +
    "\000\002\001\001\000\004\011\u02b1\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u02b4\001\001\000\002" +
    "\001\001\000\004\011\u02b6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\056\022\u02bb\025\067\026\052\032\057\041\055\050" +
    "\064\114\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u02be\001\001\000\002\001\001\000\022\015" +
    "\056\022\u02c0\025\067\026\052\032\057\041\055\050\064" +
    "\114\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u02c3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\027\010\026\021\u02c9\053\031\001\001\000\002" +
    "\001\001\000\012\007\027\010\026\021\u02cb\053\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u02cf\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u02d2\001\001\000\004\121\u02d3\001\001" +
    "\000\022\013\u02d5\015\u02d7\050\u02db\054\u02e0\055\u02df\057" +
    "\u02d8\066\u02de\114\u02dd\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\106\024\101\030\u03e3\050\105\113" +
    "\103\123\107\001\001\000\022\013\u03e2\015\u02d7\050\u02db" +
    "\054\u02e0\055\u02df\057\u02d8\066\u02de\114\u02dd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u03a2\001\001\000\002\001\001\000\022\013\u039f\015" +
    "\u02d7\050\u02db\054\u02e0\055\u02df\057\u02d8\066\u02de\114\u02dd" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\u039e\015\u02d7\050\u02db\054\u02e0\055\u02df\057\u02d8\066\u02de" +
    "\114\u02dd\001\001\000\004\116\u02e2\001\001\000\016\017" +
    "\106\024\101\030\u02e3\050\105\113\103\123\107\001\001" +
    "\000\004\121\u02e4\001\001\000\022\015\u02ea\050\u02ed\057" +
    "\u02eb\061\u02f0\062\u02e5\064\u02e7\067\u02e9\114\u02ef\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\106\024\101\030\u0336\050\105\113\103\123\107" +
    "\001\001\000\002\001\001\000\022\015\u02ea\050\u02ed\057" +
    "\u02eb\061\u02f0\062\u02e5\064\u02e7\067\u0333\114\u02ef\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0322\001" +
    "\001\000\002\001\001\000\022\015\u02ea\050\u02ed\057\u02eb" +
    "\061\u02f0\062\u02e5\064\u02e7\067\u031f\114\u02ef\001\001\000" +
    "\022\015\u02ea\050\u02ed\057\u02eb\061\u02f0\062\u02e5\064\u02e7" +
    "\067\u031e\114\u02ef\001\001\000\004\116\u02f2\001\001\000" +
    "\016\017\106\024\101\030\u02f3\050\105\113\103\123\107" +
    "\001\001\000\004\121\u02f4\001\001\000\022\015\u02f6\041" +
    "\117\043\u02f9\044\113\046\127\050\u02fa\065\u02f7\114\u02fb" +
    "\001\001\000\002\001\001\000\022\015\u02f6\041\117\043" +
    "\u02f9\044\113\046\127\050\u02fa\065\u0314\114\u02fb\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u02f6\041" +
    "\117\043\u02f9\044\113\046\127\050\u02fa\065\u0302\114\u02fb" +
    "\001\001\000\004\121\u0300\001\001\000\022\015\u02f6\041" +
    "\117\043\u02f9\044\113\046\127\050\u02fa\065\u02ff\114\u02fb" +
    "\001\001\000\002\001\001\000\022\015\u02f6\041\117\043" +
    "\u02f9\044\113\046\127\050\u02fa\065\u02fe\114\u02fb\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\u02f6\041" +
    "\117\043\u02f9\044\113\046\127\050\u02fa\065\u0301\114\u02fb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\216" +
    "\023\u0308\024\212\050\215\113\213\123\107\001\001\000" +
    "\004\121\u030c\001\001\000\002\001\001\000\004\121\u030a" +
    "\001\001\000\022\015\u02f6\041\117\043\u02f9\044\113\046" +
    "\127\050\u02fa\065\u030b\114\u02fb\001\001\000\002\001\001" +
    "\000\022\015\u02f6\041\117\043\u02f9\044\113\046\127\050" +
    "\u02fa\065\u030d\114\u02fb\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0310\001\001\000\022\015\u02f6\041" +
    "\117\043\u02f9\044\113\046\127\050\u02fa\065\u0311\114\u02fb" +
    "\001\001\000\002\001\001\000\004\121\u0313\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u031c\001\001" +
    "\000\004\121\u031a\001\001\000\004\121\u0318\001\001\000" +
    "\022\015\u02f6\041\117\043\u02f9\044\113\046\127\050\u02fa" +
    "\065\u0319\114\u02fb\001\001\000\002\001\001\000\022\015" +
    "\u02f6\041\117\043\u02f9\044\113\046\127\050\u02fa\065\u031b" +
    "\114\u02fb\001\001\000\002\001\001\000\022\015\u02f6\041" +
    "\117\043\u02f9\044\113\046\127\050\u02fa\065\u031d\114\u02fb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\u02ea\050\u02ed\057\u02eb\061\u02f0\062\u02e5" +
    "\064\u02e7\067\u0321\114\u02ef\001\001\000\002\001\001\000" +
    "\022\015\u02ea\050\u02ed\057\u02eb\061\u02f0\062\u02e5\064\u02e7" +
    "\067\u0323\114\u02ef\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\216" +
    "\023\u0329\024\212\050\215\113\213\123\107\001\001\000" +
    "\004\121\u032d\001\001\000\002\001\001\000\004\121\u032b" +
    "\001\001\000\022\015\u02ea\050\u02ed\057\u02eb\061\u02f0\062" +
    "\u02e5\064\u02e7\067\u032c\114\u02ef\001\001\000\002\001\001" +
    "\000\022\015\u02ea\050\u02ed\057\u02eb\061\u02f0\062\u02e5\064" +
    "\u02e7\067\u032e\114\u02ef\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0331\001\001\000\022\015\u02ea\050" +
    "\u02ed\057\u02eb\061\u02f0\062\u02e5\064\u02e7\067\u0332\114\u02ef" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u0335\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0338\001\001\000\022\015\u033a\050\u033c\057\u02eb\061" +
    "\u0340\062\u02e5\064\u02e7\103\u033f\114\u033d\001\001\000\002" +
    "\001\001\000\022\015\u033a\050\u033c\057\u02eb\061\u0340\062" +
    "\u02e5\064\u02e7\103\u0391\114\u033d\001\001\000\002\001\001" +
    "\000\004\121\u0360\001\001\000\022\015\u033a\050\u033c\057" +
    "\u02eb\061\u0340\062\u02e5\064\u02e7\103\u035f\114\u033d\001\001" +
    "\000\002\001\001\000\010\063\u0344\112\u0345\117\u0342\001" +
    "\001\000\022\015\u033a\050\u033c\057\u02eb\061\u0340\062\u02e5" +
    "\064\u02e7\103\u0341\114\u033d\001\001\000\002\001\001\000" +
    "\016\017\106\024\101\030\u0356\050\105\113\103\123\107" +
    "\001\001\000\004\121\u0351\001\001\000\004\121\u034c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0348" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u034b\001\001\000\002\001\001\000\022\015\u033a\050\u033c" +
    "\057\u02eb\061\u0340\062\u02e5\064\u02e7\103\u034d\114\u033d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0350" +
    "\001\001\000\002\001\001\000\022\015\u033a\050\u033c\057" +
    "\u02eb\061\u0340\062\u02e5\064\u02e7\103\u0352\114\u033d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0355\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0358" +
    "\001\001\000\022\015\u033a\050\u033c\057\u02eb\061\u0340\062" +
    "\u02e5\064\u02e7\103\u0359\114\u033d\001\001\000\010\063\u035b" +
    "\112\u035c\117\u0342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\u033a\050\u033c\057\u02eb" +
    "\061\u0340\062\u02e5\064\u02e7\103\u035e\114\u033d\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\u0363\050\u0365" +
    "\054\u0368\055\u02df\057\u02d8\066\u02de\102\u0361\114\u0366\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\u0363" +
    "\050\u0365\054\u0368\055\u02df\057\u02d8\066\u02de\102\u037e\114" +
    "\u0366\001\001\000\002\001\001\000\004\121\u036d\001\001" +
    "\000\022\015\u0363\050\u0365\054\u0368\055\u02df\057\u02d8\066" +
    "\u02de\102\u036c\114\u0366\001\001\000\002\001\001\000\022" +
    "\015\u0363\050\u0365\054\u0368\055\u02df\057\u02d8\066\u02de\102" +
    "\u0369\114\u0366\001\001\000\002\001\001\000\022\015\u0363" +
    "\050\u0365\054\u0368\055\u02df\057\u02d8\066\u02de\102\u036b\114" +
    "\u0366\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u0363\050\u0365\054\u0368\055\u02df\057\u02d8\066\u02de\102" +
    "\u036e\114\u0366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\216\023" +
    "\u0374\024\212\050\215\113\213\123\107\001\001\000\004" +
    "\121\u0378\001\001\000\002\001\001\000\004\121\u0376\001" +
    "\001\000\022\015\u0363\050\u0365\054\u0368\055\u02df\057\u02d8" +
    "\066\u02de\102\u0377\114\u0366\001\001\000\002\001\001\000" +
    "\022\015\u0363\050\u0365\054\u0368\055\u02df\057\u02d8\066\u02de" +
    "\102\u0379\114\u0366\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u037c\001\001\000\022\015\u0363\050\u0365" +
    "\054\u0368\055\u02df\057\u02d8\066\u02de\102\u037d\114\u0366\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0380" +
    "\001\001\000\022\015\u0363\050\u0365\054\u0368\055\u02df\057" +
    "\u02d8\066\u02de\102\u0381\114\u0366\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\216\023\u0387\024\212\050\215\113\213\123\107" +
    "\001\001\000\004\121\u038b\001\001\000\002\001\001\000" +
    "\004\121\u0389\001\001\000\022\015\u033a\050\u033c\057\u02eb" +
    "\061\u0340\062\u02e5\064\u02e7\103\u038a\114\u033d\001\001\000" +
    "\002\001\001\000\022\015\u033a\050\u033c\057\u02eb\061\u0340" +
    "\062\u02e5\064\u02e7\103\u038c\114\u033d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\u038f\001\001\000\022" +
    "\015\u033a\050\u033c\057\u02eb\061\u0340\062\u02e5\064\u02e7\103" +
    "\u0390\114\u033d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0396\001\001\000\004\121\u0394\001\001\000" +
    "\022\015\u033a\050\u033c\057\u02eb\061\u0340\062\u02e5\064\u02e7" +
    "\103\u0395\114\u033d\001\001\000\002\001\001\000\022\015" +
    "\u033a\050\u033c\057\u02eb\061\u0340\062\u02e5\064\u02e7\103\u0397" +
    "\114\u033d\001\001\000\002\001\001\000\004\121\u039c\001" +
    "\001\000\004\121\u039a\001\001\000\022\015\u02ea\050\u02ed" +
    "\057\u02eb\061\u02f0\062\u02e5\064\u02e7\067\u039b\114\u02ef\001" +
    "\001\000\002\001\001\000\022\015\u02ea\050\u02ed\057\u02eb" +
    "\061\u02f0\062\u02e5\064\u02e7\067\u039d\114\u02ef\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\u03a1\015\u02d7\050\u02db\054\u02e0\055\u02df\057\u02d8\066" +
    "\u02de\114\u02dd\001\001\000\002\001\001\000\022\013\u03a3" +
    "\015\u02d7\050\u02db\054\u02e0\055\u02df\057\u02d8\066\u02de\114" +
    "\u02dd\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\u03a6\001\001\000\002\001\001\000\004\113\u03a8\001" +
    "\001\000\002\001\001\000\004\113\u03aa\001\001\000\004" +
    "\121\u03ab\001\001\000\022\015\u03ad\050\u03af\057\u02eb\060" +
    "\u03b0\061\u03b3\062\u02e5\064\u02e7\114\u03b1\001\001\000\002" +
    "\001\001\000\022\015\u03ad\050\u03af\057\u02eb\060\u03cc\061" +
    "\u03b3\062\u02e5\064\u02e7\114\u03b1\001\001\000\002\001\001" +
    "\000\004\121\u03bb\001\001\000\002\001\001\000\022\015" +
    "\u03ad\050\u03af\057\u02eb\060\u03b7\061\u03b3\062\u02e5\064\u02e7" +
    "\114\u03b1\001\001\000\002\001\001\000\022\015\u03ad\050" +
    "\u03af\057\u02eb\060\u03b4\061\u03b3\062\u02e5\064\u02e7\114\u03b1" +
    "\001\001\000\002\001\001\000\022\015\u03ad\050\u03af\057" +
    "\u02eb\060\u03b6\061\u03b3\062\u02e5\064\u02e7\114\u03b1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u03ba\001\001\000\002\001\001\000\022\015\u03ad" +
    "\050\u03af\057\u02eb\060\u03bc\061\u03b3\062\u02e5\064\u02e7\114" +
    "\u03b1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\216\023\u03c2\024" +
    "\212\050\215\113\213\123\107\001\001\000\004\121\u03c6" +
    "\001\001\000\002\001\001\000\004\121\u03c4\001\001\000" +
    "\022\015\u03ad\050\u03af\057\u02eb\060\u03c5\061\u03b3\062\u02e5" +
    "\064\u02e7\114\u03b1\001\001\000\002\001\001\000\022\015" +
    "\u03ad\050\u03af\057\u02eb\060\u03c7\061\u03b3\062\u02e5\064\u02e7" +
    "\114\u03b1\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u03ca\001\001\000\022\015\u03ad\050\u03af\057\u02eb" +
    "\060\u03cb\061\u03b3\062\u02e5\064\u02e7\114\u03b1\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u03d1\001\001" +
    "\000\004\121\u03cf\001\001\000\022\015\u03ad\050\u03af\057" +
    "\u02eb\060\u03d0\061\u03b3\062\u02e5\064\u02e7\114\u03b1\001\001" +
    "\000\002\001\001\000\022\015\u03ad\050\u03af\057\u02eb\060" +
    "\u03d2\061\u03b3\062\u02e5\064\u02e7\114\u03b1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\216\023\u03d8\024\212\050\215\113\213" +
    "\123\107\001\001\000\004\121\u03dc\001\001\000\002\001" +
    "\001\000\004\121\u03da\001\001\000\022\013\u03db\015\u02d7" +
    "\050\u02db\054\u02e0\055\u02df\057\u02d8\066\u02de\114\u02dd\001" +
    "\001\000\002\001\001\000\022\013\u03dd\015\u02d7\050\u02db" +
    "\054\u02e0\055\u02df\057\u02d8\066\u02de\114\u02dd\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u03e0\001\001" +
    "\000\022\013\u03e1\015\u02d7\050\u02db\054\u02e0\055\u02df\057" +
    "\u02d8\066\u02de\114\u02dd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u03e5\001\001\000" +
    "\022\015\u0363\050\u0365\054\u0368\055\u02df\057\u02d8\066\u02de" +
    "\102\u03e6\114\u0366\001\001\000\010\056\u03ea\111\u03e8\117" +
    "\u03e7\001\001\000\016\017\106\024\101\030\u03fb\050\105" +
    "\113\103\123\107\001\001\000\002\001\001\000\004\121" +
    "\u03f3\001\001\000\004\121\u03ee\001\001\000\002\001\001" +
    "\000\004\121\u03ed\001\001\000\002\001\001\000\022\015" +
    "\u0363\050\u0365\054\u0368\055\u02df\057\u02d8\066\u02de\102\u03ef" +
    "\114\u0366\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u03f2\001\001\000\002\001\001\000\022\015\u0363" +
    "\050\u0365\054\u0368\055\u02df\057\u02d8\066\u02de\102\u03f4\114" +
    "\u0366\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u03f7\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u03fa\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u03fd\001\001\000\022\015\u0363\050\u0365\054" +
    "\u0368\055\u02df\057\u02d8\066\u02de\102\u03fe\114\u0366\001\001" +
    "\000\010\056\u0401\111\u03ff\117\u03e7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0405\001\001\000\022\013" +
    "\u0406\015\u02d7\050\u02db\054\u02e0\055\u02df\057\u02d8\066\u02de" +
    "\114\u02dd\001\001\000\002\001\001\000\012\007\027\010" +
    "\026\021\u0408\053\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u040b\001\001\000\004\052\u040c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0410\001\001\000\004\121\u0411\001\001\000" +
    "\004\052\u0412\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\027\010\026\021\u0416\053" +
    "\031\001\001\000\002\001\001\000\012\007\027\010\026" +
    "\021\u0418\053\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u041c\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\u041f\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0426\001\001\000\002\001\001\000\004\005" +
    "\u0425\001\001\000\002\001\001\000\004\003\u0427\001\001" +
    "\000\002\001\001\000\004\005\u0429\001\001\000\002\001" +
    "\001\000\004\005\u042b\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;
    private Symbol cur_token;
    String errorInrrecuperable = "";
    ArrayList<String> lista = new ArrayList<String>();

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
        lista.add("La Cadena: " + this.symbol.value+" en la Linea:" + (this.symbol.right+1) +" ,Columna: "+(this.symbol.left+1)+ " esta fuera de contexto.");
        
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        errorInrrecuperable = "La Cadena: " + cur_token.value+" en la Linea:" + (cur_token.right+1) +" ,Columna: "+(cur_token.left+1)+ " esta fuera de contexto.";
    }

    public String getUnrecoverSyntax(){
        return errorInrrecuperable;
    }

    public ArrayList<String> getError(){
        return  lista;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // INFOR_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // INFOR_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // INFOR_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // INFOR_WHILE_FUNCION ::= exit do_ FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // INFOR_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // INFOR_WHILE_FUNCION ::= DECLARACION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // INFOR_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // INIF_WHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // INIF_WHILE_FUNCION ::= exit for_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // INIF_WHILE_FUNCION ::= exit function_ FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // INIF_WHILE_FUNCION ::= LLAMAR_SUB INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // INIF_WHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // INIF_WHILE_FUNCION ::= DECLARACION INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // INIF_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // IF_WHILE_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // INWHILE_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // INWHILE_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // INWHILE_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // INWHILE_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // INWHILE_FUNCION ::= LLAMAR_SUB INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // INWHILE_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // INWHILE_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // INWHILE_FUNCION ::= DECLARACION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // INWHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // INWHILE_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // INWHILE_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // INWHILE_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // INWHILE_FOR_FUNCION ::= exit do_ FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // INWHILE_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // INWHILE_FOR_FUNCION ::= DECLARACION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // INWHILE_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR_FUNCION loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // INIF_FOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // INIF_FOR_FUNCION ::= exit for_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // INIF_FOR_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // INIF_FOR_FUNCION ::= LLAMAR_SUB INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // INIF_FOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // INIF_FOR_FUNCION ::= DECLARACION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // INIF_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION else_ FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // IF_FOR_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // INFOR_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // INFOR_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // INFOR_FUNCION ::= exit for_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // INFOR_FUNCION ::= exit function_ FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INFOR_FUNCION ::= LLAMAR_SUB INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INFOR_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INFOR_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INFOR_FUNCION ::= DECLARACION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // INFOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_FUNCION next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // INIF_FUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // INIF_FUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // INIF_FUNCION ::= exit function_ FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // INIF_FUNCION ::= LLAMAR_SUB INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // INIF_FUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INIF_FUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // INIF_FUNCION ::= DECLARACION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // INIF_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION ELSE_IF_FUNCION FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION else_ FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // IF_FUNCION ::= if_ CONDICION then FIN_CON_COMENT INIF_FUNCION end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // INFUNCION ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // INFUNCION ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // INFUNCION ::= exit function_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // INFUNCION ::= exit function_ FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // INFUNCION ::= LLAMAR_SUB INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // INFUNCION ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // INFUNCION ::= DECLARACION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // INFUNCION ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INFUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ FIN_CON_COMENT INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // STRUCT_ ::= Public_ struct_ identificador FIN_CON_COMENT DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INFOR_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // INFOR_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INFOR_WHILE ::= exit do_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INFOR_WHILE ::= exit for_ FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // INFOR_WHILE ::= LLAMAR_SUB INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // INFOR_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // INFOR_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // INFOR_WHILE ::= DECLARACION INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INFOR_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_WHILE next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE ELSE_IF_WHILE FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE else_ FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // IF_WHILE ::= if_ CONDICION then FIN_CON_COMENT INIF_WHILE end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // INIF_WHILE ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // INIF_WHILE ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // INIF_WHILE ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INIF_WHILE ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INIF_WHILE ::= exit sub FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INIF_WHILE ::= exit do_ FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INIF_WHILE ::= LLAMAR_SUB INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INIF_WHILE ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INIF_WHILE ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INIF_WHILE ::= DECLARACION INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INIF_WHILE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INWHILE_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // INWHILE_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // INWHILE_MAIN ::= exit do_ FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // INWHILE_MAIN ::= LLAMAR_SUB INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // INWHILE_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INWHILE_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INWHILE_MAIN ::= DECLARACION INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // INWHILE_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_MAIN loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // INWHILE_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // INWHILE_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // INWHILE_FOR ::= exit for_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // INWHILE_FOR ::= exit do_ FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // INWHILE_FOR ::= LLAMAR_SUB INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // INWHILE_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INWHILE_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INWHILE_FOR ::= DECLARACION INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INWHILE_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION FIN_CON_COMENT INWHILE_FOR loop FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR ELSE_IF_FOR FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR else_ FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // IF_FOR ::= if_ CONDICION then FIN_CON_COMENT INIF_FOR end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // INIF_FOR ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // INIF_FOR ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // INIF_FOR ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // INIF_FOR ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // INIF_FOR ::= exit sub FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // INIF_FOR ::= exit for_ FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INIF_FOR ::= LLAMAR_SUB INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INIF_FOR ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INIF_FOR ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INIF_FOR ::= DECLARACION INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INIF_FOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INFOR_MAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INFOR_MAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INFOR_MAIN ::= exit for_ FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INFOR_MAIN ::= LLAMAR_SUB INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INFOR_MAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INFOR_MAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INFOR_MAIN ::= DECLARACION INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INFOR_MAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO FIN_CON_COMENT INFOR_MAIN next identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INIF ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INIF ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // INIF ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INIF ::= exit sub FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // INIF ::= LLAMAR_SUB INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INIF ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INIF ::= DECLARACION INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INIF ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INIF ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN2 end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF ELSE_IF_MAIN FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF else_ FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // IF_MAIN ::= if_ CONDICION then FIN_CON_COMENT INIF end_ if_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TYPEDECLARE ::= READLINE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // READLINE_FUNCION ::= console_ punto readline parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READLINE_FUNCION",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= identificador punto identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= dim identificador igual LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= dim identificador as TYPE_ igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION ::= dim identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION ::= identificador punto identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION ::= identificador punto identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION ::= identificador punto identificador igual NUMERO FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION ::= identificador punto identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION ::= identificador punto identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION ::= identificador igual READLINE_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= identificador igual texto_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= identificador igual BOOLEAN FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= identificador igual identificador FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= dim identificador igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= dim identificador as TYPE_ FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION_AR ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERACION_AR ::= OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERADOR_ARITMETICO ::= mod_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERADOR_ARITMETICO ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERADOR_ARITMETICO ::= div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADOR_ARITMETICO ::= mult 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADOR_ARITMETICO ::= resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADOR_ARITMETICO ::= suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACION_ARITMETICA ::= parentesisA OPERANDOS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERANDOS_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERADOR_ARITMETICO OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION_ARITMETICA ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION_ARITMETICA ::= OPERANDOS_TYPE OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERANDOS_TYPE ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERANDOS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERANDOS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOS_TYPE",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETROS_SUB ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROS_SUB ::= PARAMETROS_TYPE coma_ PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAMETROS_SUB ::= PARAMETROS_TYPE FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SUB",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LLAMAR_SUB ::= identificador PARAMETROS_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INMAIN ::= error findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INMAIN ::= console_ punto readline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INMAIN ::= console_ punto writeline parentesisA parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INMAIN ::= exit sub FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INMAIN ::= exit sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INMAIN ::= LLAMAR_SUB INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INMAIN ::= LLAMAR_SUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INMAIN ::= DECLARACION INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INMAIN ::= LLAMAR_FUNCION FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INMAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INMAIN ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMENTARIO_ILIMITADO ::= comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMENTARIO_ILIMITADO ::= comentario findelinea COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMENTARIO_ILIMITADO ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO_ILIMITADO",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FIN_CON_COMENT ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FIN_CON_COMENT ::= findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CON_COMENT",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN ::= Public_ sub main_ parentesisA parentesisC comentario findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NEXT_MODULE ::= error findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NEXT_MODULE ::= comentario findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NEXT_MODULE ::= FUNCION_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEXT_MODULE ::= STRUCT_ FIN_CON_COMENT NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MODULE ::= Public_ Module identificador comentario findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDENTIFICADOR_IMPORT ::= error findelinea IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTS ::= error findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTS ::= imports IDENTIFICADOR_IMPORT FIN_CON_COMENT IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= imports IDENTIFICADOR_IMPORT FIN_CON_COMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // UC ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // UC ::= comentario findelinea UC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE COMENTARIO_ILIMITADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

