
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 14 02:03:57 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 14 02:03:57 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\006\000\002\005\003\000\002\005\005" +
    "\000\002\005\003\000\002\005\005\000\002\004\011\000" +
    "\002\020\003\000\002\020\004\000\002\020\004\000\002" +
    "\020\005\000\002\020\005\000\002\010\014\000\002\021" +
    "\011\000\002\021\004\000\002\021\003\000\002\021\004" +
    "\000\002\021\012\000\002\021\005\000\002\021\004\000" +
    "\002\021\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\007\000" +
    "\002\017\004\000\002\017\003\000\002\023\004\000\002" +
    "\023\004\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\004\000\002\024\005\000\002\024\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\026\004\000\002\026\003\000\002\027\005\000\002\027" +
    "\004\000\002\015\006\000\002\015\010\000\002\015\006" +
    "\000\002\015\006\000\002\015\010\000\002\015\010\000" +
    "\002\015\006\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\012\000\002\032\015\000\002\032\015\000\002" +
    "\104\011\000\002\104\004\000\002\104\003\000\002\104" +
    "\004\000\002\104\012\000\002\104\005\000\002\104\005" +
    "\000\002\104\005\000\002\033\011\000\002\033\011\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\017\000\002\037\011\000\002\037\004\000\002\037" +
    "\003\000\002\037\012\000\002\037\005\000\002\037\004" +
    "\000\002\037\004\000\002\037\005\000\002\037\005\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\105\011\000\002\105\004\000\002\105\003\000\002\105" +
    "\012\000\002\105\005\000\002\105\004\000\002\105\004" +
    "\000\002\105\005\000\002\105\005\000\002\041\012\000" +
    "\002\041\015\000\002\041\015\000\002\042\011\000\002" +
    "\042\011\000\002\043\011\000\002\044\011\000\002\044" +
    "\004\000\002\044\003\000\002\044\012\000\002\044\005" +
    "\000\002\044\004\000\002\044\004\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\045\011\000\002" +
    "\046\011\000\002\046\004\000\002\046\003\000\002\046" +
    "\012\000\002\046\005\000\002\046\004\000\002\046\004" +
    "\000\002\046\005\000\002\046\005\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\106\011\000\002" +
    "\106\004\000\002\106\003\000\002\106\012\000\002\106" +
    "\005\000\002\106\004\000\002\106\004\000\002\106\005" +
    "\000\002\106\005\000\002\050\012\000\002\050\015\000" +
    "\002\050\015\000\002\051\011\000\002\051\011\000\002" +
    "\052\017\000\002\053\011\000\002\053\004\000\002\053" +
    "\003\000\002\053\012\000\002\053\005\000\002\053\004" +
    "\000\002\053\004\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\054\005\000\002\054\006\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\056\007" +
    "\000\002\056\010\000\002\007\012\000\002\057\015\000" +
    "\002\011\005\000\002\011\007\000\002\013\010\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\011\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\061\010\000\002\061\012\000\002" +
    "\061\013\000\002\061\010\000\002\076\012\000\002\076" +
    "\012\000\002\063\015\000\002\064\010\000\002\064\003" +
    "\000\002\064\003\000\002\064\011\000\002\064\004\000" +
    "\002\064\004\000\002\064\003\000\002\064\004\000\002" +
    "\064\004\000\002\064\004\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\066\010\000\002\066\012" +
    "\000\002\066\013\000\002\066\010\000\002\067\012\000" +
    "\002\067\012\000\002\070\007\000\002\071\010\000\002" +
    "\071\003\000\002\071\003\000\002\071\011\000\002\071" +
    "\004\000\002\071\004\000\002\071\003\000\002\071\004" +
    "\000\002\071\004\000\002\071\004\000\002\071\004\000" +
    "\002\072\007\000\002\073\010\000\002\073\003\000\002" +
    "\073\003\000\002\073\011\000\002\073\004\000\002\073" +
    "\004\000\002\073\003\000\002\073\004\000\002\073\004" +
    "\000\002\073\004\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\075\010\000\002\075\012\000\002" +
    "\075\013\000\002\075\010\000\002\101\012\000\002\101" +
    "\012\000\002\077\015\000\002\100\010\000\002\100\003" +
    "\000\002\100\003\000\002\100\011\000\002\100\004\000" +
    "\002\100\004\000\002\100\003\000\002\100\004\000\002" +
    "\100\005\000\002\100\005\000\002\100\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02aa\000\004\004\004\001\002\000\006\017\u02a6\051" +
    "\u02a4\001\002\000\004\002\u02a3\001\002\000\004\006\007" +
    "\001\002\000\004\007\011\001\002\000\004\002\000\001" +
    "\002\000\004\051\012\001\002\000\004\100\013\001\002" +
    "\000\006\006\014\033\015\001\002\000\006\010\030\025" +
    "\u0296\001\002\000\004\030\u01ca\001\002\000\004\013\ufff8" +
    "\001\002\000\006\006\024\100\u01c8\001\002\000\006\006" +
    "\024\100\026\001\002\000\004\013\022\001\002\000\004" +
    "\007\023\001\002\000\004\002\ufff9\001\002\000\004\010" +
    "\030\001\002\000\004\013\ufff6\001\002\000\006\006\014" +
    "\033\015\001\002\000\004\013\ufff4\001\002\000\004\103" +
    "\031\001\002\000\004\073\032\001\002\000\004\074\033" +
    "\001\002\000\004\100\034\001\002\000\016\005\036\011" +
    "\045\012\043\020\042\023\051\051\050\001\002\000\024" +
    "\005\uffad\011\uffad\012\uffad\013\uffad\020\uffad\023\uffad\027" +
    "\uffad\051\uffad\100\uffad\001\002\000\016\042\056\043\060" +
    "\051\064\065\061\066\054\073\053\001\002\000\024\005" +
    "\uffab\011\uffab\012\uffab\013\uffab\020\uffab\023\uffab\027\uffab" +
    "\051\uffab\100\uffab\001\002\000\004\100\u019a\001\002\000" +
    "\024\005\uffac\011\uffac\012\uffac\013\uffac\020\uffac\023\uffac" +
    "\027\uffac\051\uffac\100\uffac\001\002\000\004\070\u0193\001" +
    "\002\000\004\051\u017f\001\002\000\004\100\u017d\001\002" +
    "\000\004\051\u015e\001\002\000\020\005\036\011\045\012" +
    "\043\013\ufff0\020\042\023\051\051\050\001\002\000\004" +
    "\013\u015a\001\002\000\010\054\u014b\070\u014a\073\u011b\001" +
    "\002\000\004\036\052\001\002\000\016\042\056\043\060" +
    "\051\064\065\061\066\054\073\053\001\002\000\010\065" +
    "\u0147\066\054\073\053\001\002\000\022\045\201\057\173" +
    "\060\172\061\174\062\171\063\170\066\054\073\053\001" +
    "\002\000\010\054\u0117\055\u0119\056\u0118\001\002\000\050" +
    "\005\uffaf\011\uffaf\012\uffaf\013\uffaf\020\uffaf\023\uffaf\026" +
    "\uffaf\027\uffaf\032\uffaf\034\uffaf\035\uffaf\051\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\074\uffaf\100\uffaf\101\uffaf\104\uffaf\001" +
    "\002\000\046\005\uffdd\011\uffdd\012\uffdd\013\uffdd\020\uffdd" +
    "\023\uffdd\026\uffdd\027\uffdd\032\uffdd\034\uffdd\035\uffdd\051" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\074\uffdd\100\uffdd\101\uffdd" +
    "\001\002\000\050\005\uffae\011\uffae\012\uffae\013\uffae\020" +
    "\uffae\023\uffae\026\uffae\027\uffae\032\uffae\034\uffae\035\uffae" +
    "\051\uffae\054\uffae\055\uffae\056\uffae\074\uffae\100\uffae\101" +
    "\uffae\104\uffae\001\002\000\030\045\201\054\u0117\055\u0119" +
    "\056\u0118\057\173\060\172\061\174\062\171\063\170\066" +
    "\054\073\053\001\002\000\010\054\u0117\055\u0119\056\u0118" +
    "\001\002\000\010\054\u0117\055\u0119\056\u0118\001\002\000" +
    "\012\054\u0117\055\u0119\056\u0118\073\u011b\001\002\000\004" +
    "\100\066\001\002\000\020\005\071\011\077\012\043\020" +
    "\074\023\051\035\070\051\050\001\002\000\026\005\uff50" +
    "\011\uff50\012\uff50\013\uff50\020\uff50\023\uff50\027\uff50\034" +
    "\uff50\035\uff50\051\uff50\001\002\000\004\023\u0115\001\002" +
    "\000\016\042\056\043\060\051\064\065\061\066\054\073" +
    "\053\001\002\000\026\005\uff4e\011\uff4e\012\uff4e\013\uff4e" +
    "\020\uff4e\023\uff4e\027\uff4e\034\uff4e\035\uff4e\051\uff4e\001" +
    "\002\000\004\100\346\001\002\000\004\070\337\001\002" +
    "\000\004\034\335\001\002\000\026\005\071\011\077\012" +
    "\043\013\uff57\020\074\023\051\027\uff57\034\uff57\035\070" +
    "\051\050\001\002\000\004\051\104\001\002\000\004\100" +
    "\102\001\002\000\026\005\uff4f\011\uff4f\012\uff4f\013\uff4f" +
    "\020\uff4f\023\uff4f\027\uff4f\034\uff4f\035\uff4f\051\uff4f\001" +
    "\002\000\026\005\071\011\077\012\043\013\uff53\020\074" +
    "\023\051\027\uff53\034\uff53\035\070\051\050\001\002\000" +
    "\010\013\uff52\027\uff52\034\uff52\001\002\000\004\054\105" +
    "\001\002\000\004\065\106\001\002\000\004\037\107\001" +
    "\002\000\004\065\110\001\002\000\004\047\111\001\002" +
    "\000\004\065\112\001\002\000\004\100\113\001\002\000" +
    "\020\005\116\011\045\012\043\020\121\023\125\035\115" +
    "\051\050\001\002\000\022\005\116\011\045\012\043\020" +
    "\121\023\125\032\uff3c\035\115\051\050\001\002\000\006" +
    "\011\330\023\327\001\002\000\016\042\056\043\060\051" +
    "\064\065\061\066\054\073\053\001\002\000\004\100\250" +
    "\001\002\000\026\005\uff75\011\uff75\012\uff75\013\uff75\020" +
    "\uff75\023\uff75\027\uff75\032\uff75\035\uff75\051\uff75\001\002" +
    "\000\004\070\241\001\002\000\004\100\237\001\002\000" +
    "\026\005\uff76\011\uff76\012\uff76\013\uff76\020\uff76\023\uff76" +
    "\027\uff76\032\uff76\035\uff76\051\uff76\001\002\000\004\032" +
    "\234\001\002\000\004\036\127\001\002\000\026\005\uff74" +
    "\011\uff74\012\uff74\013\uff74\020\uff74\023\uff74\027\uff74\032" +
    "\uff74\035\uff74\051\uff74\001\002\000\016\042\056\043\060" +
    "\051\064\065\061\066\054\073\053\001\002\000\004\100" +
    "\131\001\002\000\020\005\071\011\077\012\043\020\134" +
    "\023\051\035\132\051\050\001\002\000\006\011\231\023" +
    "\230\001\002\000\004\100\226\001\002\000\004\070\145" +
    "\001\002\000\022\005\071\011\077\012\043\020\134\023" +
    "\051\034\uff62\035\132\051\050\001\002\000\004\100\142" +
    "\001\002\000\004\034\140\001\002\000\004\100\141\001" +
    "\002\000\026\005\uff65\011\uff65\012\uff65\013\uff65\020\uff65" +
    "\023\uff65\027\uff65\032\uff65\035\uff65\051\uff65\001\002\000" +
    "\022\005\071\011\077\012\043\020\134\023\051\034\uff5e" +
    "\035\132\051\050\001\002\000\004\034\uff5d\001\002\000" +
    "\004\034\uff5f\001\002\000\004\021\146\001\002\000\004" +
    "\073\147\001\002\000\020\042\056\043\060\051\154\064" +
    "\155\065\152\066\054\073\053\001\002\000\006\074\uffe8" +
    "\101\224\001\002\000\004\074\221\001\002\000\026\045" +
    "\201\057\173\060\172\061\174\062\171\063\170\066\054" +
    "\073\053\074\uffe9\101\175\001\002\000\006\074\uffe5\101" +
    "\166\001\002\000\010\070\160\074\uffe7\101\161\001\002" +
    "\000\006\074\uffea\101\156\001\002\000\020\042\056\043" +
    "\060\051\154\064\155\065\152\066\054\073\053\001\002" +
    "\000\004\074\uffe4\001\002\000\004\051\163\001\002\000" +
    "\020\042\056\043\060\051\154\064\155\065\152\066\054" +
    "\073\053\001\002\000\004\074\uffe0\001\002\000\006\074" +
    "\uffe6\101\164\001\002\000\020\042\056\043\060\051\154" +
    "\064\155\065\152\066\054\073\053\001\002\000\004\074" +
    "\uffdf\001\002\000\020\042\056\043\060\051\154\064\155" +
    "\065\152\066\054\073\053\001\002\000\004\074\uffe2\001" +
    "\002\000\004\065\217\001\002\000\004\065\215\001\002" +
    "\000\004\065\213\001\002\000\004\065\211\001\002\000" +
    "\004\065\207\001\002\000\020\042\056\043\060\051\154" +
    "\064\155\065\152\066\054\073\053\001\002\000\046\005" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\020\uffcd\023\uffcd\026\uffcd" +
    "\027\uffcd\032\uffcd\034\uffcd\035\uffcd\051\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\074\uffcd\100\uffcd\101\uffcd\001\002\000\046" +
    "\005\uffd5\011\uffd5\012\uffd5\013\uffd5\020\uffd5\023\uffd5\026" +
    "\uffd5\027\uffd5\032\uffd5\034\uffd5\035\uffd5\051\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\074\uffd5\100\uffd5\101\uffd5\001\002\000" +
    "\046\005\uffd0\011\uffd0\012\uffd0\013\uffd0\020\uffd0\023\uffd0" +
    "\026\uffd0\027\uffd0\032\uffd0\034\uffd0\035\uffd0\051\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\074\uffd0\100\uffd0\101\uffd0\001\002" +
    "\000\004\065\204\001\002\000\046\005\uffde\011\uffde\012" +
    "\uffde\013\uffde\020\uffde\023\uffde\026\uffde\027\uffde\032\uffde" +
    "\034\uffde\035\uffde\051\uffde\054\uffde\055\uffde\056\uffde\074" +
    "\uffde\100\uffde\101\uffde\001\002\000\046\005\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\020\uffd8\023\uffd8\026\uffd8\027\uffd8\032" +
    "\uffd8\034\uffd8\035\uffd8\051\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\074\uffd8\100\uffd8\101\uffd8\001\002\000\062\005\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\020\uffd7\023\uffd7\026\uffd7\027\uffd7" +
    "\032\uffd7\034\uffd7\035\uffd7\045\201\051\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\061\174\062\171\063\170\066\054\073\053" +
    "\074\uffd7\100\uffd7\101\uffd7\001\002\000\046\005\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\020\uffd6\023\uffd6\026\uffd6\027\uffd6" +
    "\032\uffd6\034\uffd6\035\uffd6\051\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\074\uffd6\100\uffd6\101\uffd6\001\002\000\004\074\uffe3" +
    "\001\002\000\060\005\uffd4\011\uffd4\012\uffd4\013\uffd4\020" +
    "\uffd4\023\uffd4\026\uffd4\027\uffd4\032\uffd4\034\uffd4\035\uffd4" +
    "\051\uffd4\054\uffd4\055\uffd4\056\uffd4\061\174\062\171\063" +
    "\170\066\054\073\053\074\uffd4\100\uffd4\101\uffd4\001\002" +
    "\000\046\005\uffd2\011\uffd2\012\uffd2\013\uffd2\020\uffd2\023" +
    "\uffd2\026\uffd2\027\uffd2\032\uffd2\034\uffd2\035\uffd2\051\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\074\uffd2\100\uffd2\101\uffd2\001" +
    "\002\000\066\005\uffdc\011\uffdc\012\uffdc\013\uffdc\020\uffdc" +
    "\023\uffdc\026\uffdc\027\uffdc\032\uffdc\034\uffdc\035\uffdc\045" +
    "\201\051\uffdc\054\uffdc\055\uffdc\056\uffdc\057\173\060\172" +
    "\061\174\062\171\063\170\066\054\073\053\074\uffdc\100" +
    "\uffdc\101\uffdc\001\002\000\046\005\uffda\011\uffda\012\uffda" +
    "\013\uffda\020\uffda\023\uffda\026\uffda\027\uffda\032\uffda\034" +
    "\uffda\035\uffda\051\uffda\054\uffda\055\uffda\056\uffda\074\uffda" +
    "\100\uffda\101\uffda\001\002\000\066\005\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\020\uffdb\023\uffdb\026\uffdb\027\uffdb\032\uffdb" +
    "\034\uffdb\035\uffdb\045\201\051\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\173\060\172\061\174\062\171\063\170\066\054" +
    "\073\053\074\uffdb\100\uffdb\101\uffdb\001\002\000\046\005" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\020\uffd9\023\uffd9\026\uffd9" +
    "\027\uffd9\032\uffd9\034\uffd9\035\uffd9\051\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\074\uffd9\100\uffd9\101\uffd9\001\002\000\060" +
    "\005\uffd3\011\uffd3\012\uffd3\013\uffd3\020\uffd3\023\uffd3\026" +
    "\uffd3\027\uffd3\032\uffd3\034\uffd3\035\uffd3\051\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\061\174\062\171\063\170\066\054\073" +
    "\053\074\uffd3\100\uffd3\101\uffd3\001\002\000\046\005\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\020\uffd1\023\uffd1\026\uffd1\027" +
    "\uffd1\032\uffd1\034\uffd1\035\uffd1\051\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\074\uffd1\100\uffd1\101\uffd1\001\002\000\054\005" +
    "\uffce\011\uffce\012\uffce\013\uffce\020\uffce\023\uffce\026\uffce" +
    "\027\uffce\032\uffce\034\uffce\035\uffce\051\uffce\054\uffce\055" +
    "\uffce\056\uffce\063\170\066\054\073\053\074\uffce\100\uffce" +
    "\101\uffce\001\002\000\046\005\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\020\uffcf\023\uffcf\026\uffcf\027\uffcf\032\uffcf\034\uffcf" +
    "\035\uffcf\051\uffcf\054\uffcf\055\uffcf\056\uffcf\074\uffcf\100" +
    "\uffcf\101\uffcf\001\002\000\004\100\222\001\002\000\022" +
    "\005\071\011\077\012\043\020\134\023\051\034\uff64\035" +
    "\132\051\050\001\002\000\004\034\uff61\001\002\000\020" +
    "\042\056\043\060\051\154\064\155\065\152\066\054\073" +
    "\053\001\002\000\004\074\uffe1\001\002\000\022\005\071" +
    "\011\077\012\043\020\134\023\051\034\uff63\035\132\051" +
    "\050\001\002\000\004\034\uff60\001\002\000\004\100\233" +
    "\001\002\000\004\100\232\001\002\000\004\034\uff5b\001" +
    "\002\000\004\034\uff5c\001\002\000\004\051\235\001\002" +
    "\000\004\100\236\001\002\000\026\005\uff3f\011\uff3f\012" +
    "\uff3f\013\uff3f\020\uff3f\023\uff3f\027\uff3f\034\uff3f\035\uff3f" +
    "\051\uff3f\001\002\000\022\005\116\011\045\012\043\020" +
    "\121\023\125\032\uff38\035\115\051\050\001\002\000\004" +
    "\032\uff37\001\002\000\004\021\242\001\002\000\004\073" +
    "\243\001\002\000\020\042\056\043\060\051\154\064\155" +
    "\065\152\066\054\073\053\001\002\000\004\074\245\001" +
    "\002\000\004\100\246\001\002\000\022\005\116\011\045" +
    "\012\043\020\121\023\125\032\uff3e\035\115\051\050\001" +
    "\002\000\004\032\uff3b\001\002\000\022\005\116\011\045" +
    "\012\043\020\121\023\125\032\uff3d\035\115\051\050\001" +
    "\002\000\004\032\uff3a\001\002\000\004\026\253\001\002" +
    "\000\004\100\254\001\002\000\020\005\116\011\045\012" +
    "\043\020\260\023\125\035\256\051\050\001\002\000\024" +
    "\005\116\011\045\012\043\013\uff71\020\260\023\125\027" +
    "\uff71\035\256\051\050\001\002\000\004\011\324\001\002" +
    "\000\004\100\322\001\002\000\004\070\313\001\002\000" +
    "\004\100\311\001\002\000\006\013\265\027\264\001\002" +
    "\000\004\100\304\001\002\000\006\005\270\100\271\001" +
    "\002\000\004\005\266\001\002\000\004\100\267\001\002" +
    "\000\026\005\uff6a\011\uff6a\012\uff6a\013\uff6a\020\uff6a\023" +
    "\uff6a\027\uff6a\032\uff6a\035\uff6a\051\uff6a\001\002\000\016" +
    "\042\056\043\060\051\064\065\061\066\054\073\053\001" +
    "\002\000\020\005\116\011\045\012\043\020\260\023\125" +
    "\035\256\051\050\001\002\000\004\013\273\001\002\000" +
    "\004\005\274\001\002\000\004\100\275\001\002\000\026" +
    "\005\uff69\011\uff69\012\uff69\013\uff69\020\uff69\023\uff69\027" +
    "\uff69\032\uff69\035\uff69\051\uff69\001\002\000\004\026\277" +
    "\001\002\000\004\100\300\001\002\000\020\005\116\011" +
    "\045\012\043\020\260\023\125\035\256\051\050\001\002" +
    "\000\004\027\302\001\002\000\006\005\270\100\uff67\001" +
    "\002\000\004\100\uff66\001\002\000\020\005\116\011\045" +
    "\012\043\020\260\023\125\035\256\051\050\001\002\000" +
    "\004\013\306\001\002\000\004\005\307\001\002\000\004" +
    "\100\310\001\002\000\026\005\uff68\011\uff68\012\uff68\013" +
    "\uff68\020\uff68\023\uff68\027\uff68\032\uff68\035\uff68\051\uff68" +
    "\001\002\000\024\005\116\011\045\012\043\013\uff6d\020" +
    "\260\023\125\027\uff6d\035\256\051\050\001\002\000\006" +
    "\013\uff6c\027\uff6c\001\002\000\004\021\314\001\002\000" +
    "\004\073\315\001\002\000\020\042\056\043\060\051\154" +
    "\064\155\065\152\066\054\073\053\001\002\000\004\074" +
    "\317\001\002\000\004\100\320\001\002\000\024\005\116" +
    "\011\045\012\043\013\uff73\020\260\023\125\027\uff73\035" +
    "\256\051\050\001\002\000\006\013\uff70\027\uff70\001\002" +
    "\000\024\005\116\011\045\012\043\013\uff72\020\260\023" +
    "\125\027\uff72\035\256\051\050\001\002\000\006\013\uff6f" +
    "\027\uff6f\001\002\000\004\100\325\001\002\000\006\013" +
    "\uff6b\027\uff6b\001\002\000\006\013\uff6e\027\uff6e\001\002" +
    "\000\004\100\332\001\002\000\004\100\331\001\002\000" +
    "\004\032\uff36\001\002\000\004\032\uff35\001\002\000\004" +
    "\032\uff39\001\002\000\010\013\uff54\027\uff54\034\uff54\001" +
    "\002\000\004\100\336\001\002\000\030\005\uff5a\011\uff5a" +
    "\012\uff5a\013\uff5a\020\uff5a\023\uff5a\027\uff5a\034\uff5a\035" +
    "\uff5a\051\uff5a\100\uff5a\001\002\000\004\021\340\001\002" +
    "\000\004\073\341\001\002\000\020\042\056\043\060\051" +
    "\154\064\155\065\152\066\054\073\053\001\002\000\004" +
    "\074\343\001\002\000\004\100\344\001\002\000\026\005" +
    "\071\011\077\012\043\013\uff59\020\074\023\051\027\uff59" +
    "\034\uff59\035\070\051\050\001\002\000\010\013\uff56\027" +
    "\uff56\034\uff56\001\002\000\026\005\071\011\077\012\043" +
    "\013\uff58\020\074\023\051\027\uff58\034\uff58\035\070\051" +
    "\050\001\002\000\010\013\uff55\027\uff55\034\uff55\001\002" +
    "\000\004\026\351\001\002\000\004\100\352\001\002\000" +
    "\020\005\071\011\077\012\043\020\355\023\051\035\353" +
    "\051\050\001\002\000\004\023\u0113\001\002\000\004\100" +
    "\u0111\001\002\000\004\070\u010a\001\002\000\024\005\071" +
    "\011\077\012\043\013\uff4b\020\355\023\051\027\uff4b\035" +
    "\353\051\050\001\002\000\004\100\u0107\001\002\000\006" +
    "\013\363\027\361\001\002\000\006\005\373\100\374\001" +
    "\002\000\004\100\366\001\002\000\004\005\364\001\002" +
    "\000\004\100\365\001\002\000\026\005\uff44\011\uff44\012" +
    "\uff44\013\uff44\020\uff44\023\uff44\027\uff44\034\uff44\035\uff44" +
    "\051\uff44\001\002\000\020\005\071\011\077\012\043\020" +
    "\355\023\051\035\353\051\050\001\002\000\004\013\370" +
    "\001\002\000\004\005\371\001\002\000\004\100\372\001" +
    "\002\000\026\005\uff42\011\uff42\012\uff42\013\uff42\020\uff42" +
    "\023\uff42\027\uff42\034\uff42\035\uff42\051\uff42\001\002\000" +
    "\016\042\056\043\060\051\064\065\061\066\054\073\053" +
    "\001\002\000\020\005\071\011\077\012\043\020\355\023" +
    "\051\035\353\051\050\001\002\000\004\013\376\001\002" +
    "\000\004\005\377\001\002\000\004\100\u0100\001\002\000" +
    "\026\005\uff43\011\uff43\012\uff43\013\uff43\020\uff43\023\uff43" +
    "\027\uff43\034\uff43\035\uff43\051\uff43\001\002\000\004\026" +
    "\u0102\001\002\000\004\100\u0103\001\002\000\020\005\071" +
    "\011\077\012\043\020\355\023\051\035\353\051\050\001" +
    "\002\000\004\027\u0105\001\002\000\006\005\373\100\uff41" +
    "\001\002\000\004\100\uff40\001\002\000\024\005\071\011" +
    "\077\012\043\013\uff47\020\355\023\051\027\uff47\035\353" +
    "\051\050\001\002\000\006\013\uff46\027\uff46\001\002\000" +
    "\006\013\uff48\027\uff48\001\002\000\004\021\u010b\001\002" +
    "\000\004\073\u010c\001\002\000\020\042\056\043\060\051" +
    "\154\064\155\065\152\066\054\073\053\001\002\000\004" +
    "\074\u010e\001\002\000\004\100\u010f\001\002\000\024\005" +
    "\071\011\077\012\043\013\uff4d\020\355\023\051\027\uff4d" +
    "\035\353\051\050\001\002\000\006\013\uff4a\027\uff4a\001" +
    "\002\000\024\005\071\011\077\012\043\013\uff4c\020\355" +
    "\023\051\027\uff4c\035\353\051\050\001\002\000\006\013" +
    "\uff49\027\uff49\001\002\000\004\100\u0114\001\002\000\006" +
    "\013\uff45\027\uff45\001\002\000\004\100\u0116\001\002\000" +
    "\010\013\uff51\027\uff51\034\uff51\001\002\000\016\042\uff83" +
    "\043\uff83\051\uff83\065\uff83\066\uff83\073\uff83\001\002\000" +
    "\020\042\uff81\043\uff81\051\uff81\054\u012e\065\uff81\066\uff81" +
    "\073\uff81\001\002\000\020\042\uff82\043\uff82\051\uff82\054" +
    "\u012d\065\uff82\066\uff82\073\uff82\001\002\000\016\042\056" +
    "\043\060\051\u012c\065\u0129\066\054\073\053\001\002\000" +
    "\014\042\056\043\060\051\u011d\065\u011c\074\u011e\001\002" +
    "\000\006\074\uff2e\104\u0126\001\002\000\006\074\uff2f\104" +
    "\u0124\001\002\000\042\005\uff34\011\uff34\012\uff34\013\uff34" +
    "\020\uff34\023\uff34\026\uff34\027\uff34\032\uff34\034\uff34\035" +
    "\uff34\051\uff34\054\uff34\055\uff34\056\uff34\100\uff34\001\002" +
    "\000\006\074\uff2d\104\u0122\001\002\000\004\074\u0121\001" +
    "\002\000\042\005\uff33\011\uff33\012\uff33\013\uff33\020\uff33" +
    "\023\uff33\026\uff33\027\uff33\032\uff33\034\uff33\035\uff33\051" +
    "\uff33\054\uff33\055\uff33\056\uff33\100\uff33\001\002\000\012" +
    "\042\056\043\060\051\u011d\065\u011c\001\002\000\004\074" +
    "\uff30\001\002\000\012\042\056\043\060\051\u011d\065\u011c" +
    "\001\002\000\004\074\uff31\001\002\000\012\042\056\043" +
    "\060\051\u011d\065\u011c\001\002\000\004\074\uff32\001\002" +
    "\000\024\005\uff9b\011\uff9b\012\uff9b\020\uff9b\023\uff9b\026" +
    "\uff9b\035\uff9b\051\uff9b\100\uff9b\001\002\000\044\005\uff9c" +
    "\011\uff9c\012\uff9c\020\uff9c\023\uff9c\026\uff9c\035\uff9c\045" +
    "\201\051\uff9c\057\173\060\172\061\174\062\171\063\170" +
    "\066\054\073\053\100\uff9c\001\002\000\024\005\uff8c\011" +
    "\uff8c\012\uff8c\020\uff8c\023\uff8c\026\uff8c\035\uff8c\051\uff8c" +
    "\100\uff8c\001\002\000\024\005\uff9a\011\uff9a\012\uff9a\020" +
    "\uff9a\023\uff9a\026\uff9a\035\uff9a\051\uff9a\100\uff9a\001\002" +
    "\000\026\005\uff9d\011\uff9d\012\uff9d\020\uff9d\023\uff9d\026" +
    "\uff9d\035\uff9d\051\uff9d\073\u011b\100\uff9d\001\002\000\016" +
    "\042\uff85\043\uff85\051\uff85\065\uff85\066\uff85\073\uff85\001" +
    "\002\000\016\042\uff84\043\uff84\051\uff84\065\uff84\066\uff84" +
    "\073\uff84\001\002\000\016\042\056\043\060\051\u0134\065" +
    "\u0131\066\054\073\053\001\002\000\024\005\uff96\011\uff96" +
    "\012\uff96\020\uff96\023\uff96\026\uff96\035\uff96\051\uff96\100" +
    "\uff96\001\002\000\044\005\uff99\011\uff99\012\uff99\020\uff99" +
    "\023\uff99\026\uff99\035\uff99\045\201\051\uff99\057\173\060" +
    "\172\061\174\062\171\063\170\066\054\073\053\100\uff99" +
    "\001\002\000\024\005\uff8a\011\uff8a\012\uff8a\020\uff8a\023" +
    "\uff8a\026\uff8a\035\uff8a\051\uff8a\100\uff8a\001\002\000\024" +
    "\005\uff98\011\uff98\012\uff98\020\uff98\023\uff98\026\uff98\035" +
    "\uff98\051\uff98\100\uff98\001\002\000\026\005\uff97\011\uff97" +
    "\012\uff97\020\uff97\023\uff97\026\uff97\035\uff97\051\uff97\073" +
    "\u011b\100\uff97\001\002\000\016\042\056\043\060\051\u0139" +
    "\065\u0137\066\054\073\053\001\002\000\024\005\uff89\011" +
    "\uff89\012\uff89\020\uff89\023\uff89\026\uff89\035\uff89\051\uff89" +
    "\100\uff89\001\002\000\044\005\uff87\011\uff87\012\uff87\020" +
    "\uff87\023\uff87\026\uff87\035\uff87\045\201\051\uff87\057\173" +
    "\060\172\061\174\062\171\063\170\066\054\073\053\100" +
    "\uff87\001\002\000\024\005\uff86\011\uff86\012\uff86\020\uff86" +
    "\023\uff86\026\uff86\035\uff86\051\uff86\100\uff86\001\002\000" +
    "\024\005\uff88\011\uff88\012\uff88\020\uff88\023\uff88\026\uff88" +
    "\035\uff88\051\uff88\100\uff88\001\002\000\016\042\056\043" +
    "\060\051\u013f\065\u013c\066\054\073\053\001\002\000\024" +
    "\005\uff8e\011\uff8e\012\uff8e\020\uff8e\023\uff8e\026\uff8e\035" +
    "\uff8e\051\uff8e\100\uff8e\001\002\000\044\005\uff91\011\uff91" +
    "\012\uff91\020\uff91\023\uff91\026\uff91\035\uff91\045\201\051" +
    "\uff91\057\173\060\172\061\174\062\171\063\170\066\054" +
    "\073\053\100\uff91\001\002\000\024\005\uff8b\011\uff8b\012" +
    "\uff8b\020\uff8b\023\uff8b\026\uff8b\035\uff8b\051\uff8b\100\uff8b" +
    "\001\002\000\024\005\uff8f\011\uff8f\012\uff8f\020\uff8f\023" +
    "\uff8f\026\uff8f\035\uff8f\051\uff8f\100\uff8f\001\002\000\026" +
    "\005\uff90\011\uff90\012\uff90\020\uff90\023\uff90\026\uff90\035" +
    "\uff90\051\uff90\073\u011b\100\uff90\001\002\000\016\042\056" +
    "\043\060\051\u0145\065\u0142\066\054\073\053\001\002\000" +
    "\024\005\uff95\011\uff95\012\uff95\020\uff95\023\uff95\026\uff95" +
    "\035\uff95\051\uff95\100\uff95\001\002\000\044\005\uff94\011" +
    "\uff94\012\uff94\020\uff94\023\uff94\026\uff94\035\uff94\045\201" +
    "\051\uff94\057\173\060\172\061\174\062\171\063\170\066" +
    "\054\073\053\100\uff94\001\002\000\024\005\uff8d\011\uff8d" +
    "\012\uff8d\020\uff8d\023\uff8d\026\uff8d\035\uff8d\051\uff8d\100" +
    "\uff8d\001\002\000\024\005\uff92\011\uff92\012\uff92\020\uff92" +
    "\023\uff92\026\uff92\035\uff92\051\uff92\100\uff92\001\002\000" +
    "\026\005\uff93\011\uff93\012\uff93\020\uff93\023\uff93\026\uff93" +
    "\035\uff93\051\uff93\073\u011b\100\uff93\001\002\000\046\005" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\020\uffcb\023\uffcb\026\uffcb" +
    "\027\uffcb\032\uffcb\034\uffcb\035\uffcb\051\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\074\uffcb\100\uffcb\101\uffcb\001\002\000\022" +
    "\045\201\057\173\060\172\061\174\062\171\063\170\066" +
    "\054\073\053\001\002\000\004\074\u0149\001\002\000\046" +
    "\005\uffcc\011\uffcc\012\uffcc\013\uffcc\020\uffcc\023\uffcc\026" +
    "\uffcc\027\uffcc\032\uffcc\034\uffcc\035\uffcc\051\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\074\uffcc\100\uffcc\101\uffcc\001\002\000" +
    "\004\051\u0152\001\002\000\020\042\056\043\060\051\u0150" +
    "\064\u0151\065\u014d\066\054\073\053\001\002\000\032\005" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\020\uffbf\023\uffbf\027\uffbf" +
    "\032\uffbf\034\uffbf\035\uffbf\051\uffbf\100\uffbf\001\002\000" +
    "\052\005\uffc0\011\uffc0\012\uffc0\013\uffc0\020\uffc0\023\uffc0" +
    "\027\uffc0\032\uffc0\034\uffc0\035\uffc0\045\201\051\uffc0\057" +
    "\173\060\172\061\174\062\171\063\170\066\054\073\053" +
    "\100\uffc0\001\002\000\032\005\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\020\uffc2\023\uffc2\027\uffc2\032\uffc2\034\uffc2\035\uffc2" +
    "\051\uffc2\100\uffc2\001\002\000\032\005\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\020\uffc1\023\uffc1\027\uffc1\032\uffc1\034\uffc1" +
    "\035\uffc1\051\uffc1\100\uffc1\001\002\000\034\005\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\020\uffc3\023\uffc3\027\uffc3\032\uffc3" +
    "\034\uffc3\035\uffc3\051\uffc3\073\u011b\100\uffc3\001\002\000" +
    "\032\005\uffbe\011\uffbe\012\uffbe\013\uffbe\020\uffbe\023\uffbe" +
    "\027\uffbe\032\uffbe\034\uffbe\035\uffbe\051\uffbe\100\uffbe\001" +
    "\002\000\004\054\u0153\001\002\000\020\042\056\043\060" +
    "\051\u0158\064\u0159\065\u0155\066\054\073\053\001\002\000" +
    "\032\005\uffb9\011\uffb9\012\uffb9\013\uffb9\020\uffb9\023\uffb9" +
    "\027\uffb9\032\uffb9\034\uffb9\035\uffb9\051\uffb9\100\uffb9\001" +
    "\002\000\052\005\uffba\011\uffba\012\uffba\013\uffba\020\uffba" +
    "\023\uffba\027\uffba\032\uffba\034\uffba\035\uffba\045\201\051" +
    "\uffba\057\173\060\172\061\174\062\171\063\170\066\054" +
    "\073\053\100\uffba\001\002\000\032\005\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\020\uffbc\023\uffbc\027\uffbc\032\uffbc\034\uffbc" +
    "\035\uffbc\051\uffbc\100\uffbc\001\002\000\032\005\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\020\uffbb\023\uffbb\027\uffbb\032\uffbb" +
    "\034\uffbb\035\uffbb\051\uffbb\100\uffbb\001\002\000\034\005" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\020\uffbd\023\uffbd\027\uffbd" +
    "\032\uffbd\034\uffbd\035\uffbd\051\uffbd\073\u011b\100\uffbd\001" +
    "\002\000\032\005\uffb8\011\uffb8\012\uffb8\013\uffb8\020\uffb8" +
    "\023\uffb8\027\uffb8\032\uffb8\034\uffb8\035\uffb8\051\uffb8\100" +
    "\uffb8\001\002\000\004\010\u015b\001\002\000\004\100\u015c" +
    "\001\002\000\004\013\ufff3\001\002\000\004\013\uffec\001" +
    "\002\000\004\054\u015f\001\002\000\004\065\u0160\001\002" +
    "\000\004\037\u0161\001\002\000\004\065\u0162\001\002\000" +
    "\004\047\u0163\001\002\000\004\065\u0164\001\002\000\004" +
    "\100\u0165\001\002\000\020\005\116\011\045\012\043\020" +
    "\u016a\023\125\035\u0167\051\050\001\002\000\022\005\116" +
    "\011\045\012\043\020\u016a\023\125\032\uff7d\035\u0167\051" +
    "\050\001\002\000\004\011\u017a\001\002\000\004\032\u0177" +
    "\001\002\000\004\100\u0175\001\002\000\004\070\u016e\001" +
    "\002\000\004\100\u016c\001\002\000\022\005\116\011\045" +
    "\012\043\020\u016a\023\125\032\uff79\035\u0167\051\050\001" +
    "\002\000\004\032\uff78\001\002\000\004\021\u016f\001\002" +
    "\000\004\073\u0170\001\002\000\020\042\056\043\060\051" +
    "\154\064\155\065\152\066\054\073\053\001\002\000\004" +
    "\074\u0172\001\002\000\004\100\u0173\001\002\000\022\005" +
    "\116\011\045\012\043\020\u016a\023\125\032\uff7f\035\u0167" +
    "\051\050\001\002\000\004\032\uff7c\001\002\000\022\005" +
    "\116\011\045\012\043\020\u016a\023\125\032\uff7e\035\u0167" +
    "\051\050\001\002\000\004\032\uff7b\001\002\000\004\051" +
    "\u0178\001\002\000\004\100\u0179\001\002\000\030\005\uff80" +
    "\011\uff80\012\uff80\013\uff80\020\uff80\023\uff80\027\uff80\032" +
    "\uff80\035\uff80\051\uff80\100\uff80\001\002\000\004\100\u017b" +
    "\001\002\000\004\032\uff77\001\002\000\004\032\uff7a\001" +
    "\002\000\020\005\036\011\045\012\043\013\uffef\020\042" +
    "\023\051\051\050\001\002\000\004\013\uffeb\001\002\000" +
    "\006\022\u0180\054\u0181\001\002\000\014\014\u018c\015\u018b" +
    "\016\u018e\046\u018d\051\u018a\001\002\000\020\042\056\043" +
    "\060\051\u0187\064\u0188\065\u0183\066\054\073\053\001\002" +
    "\000\032\005\uffb0\011\uffb0\012\uffb0\013\uffb0\020\uffb0\023" +
    "\uffb0\027\uffb0\032\uffb0\034\uffb0\035\uffb0\051\uffb0\100\uffb0" +
    "\001\002\000\052\005\uffb1\011\uffb1\012\uffb1\013\uffb1\020" +
    "\uffb1\023\uffb1\027\uffb1\032\uffb1\034\uffb1\035\uffb1\045\201" +
    "\051\uffb1\057\173\060\172\061\174\062\171\063\170\066" +
    "\054\073\053\100\uffb1\001\002\000\032\005\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\020\uffc7\023\uffc7\027\uffc7\032\uffc7\034" +
    "\uffc7\035\uffc7\051\uffc7\100\uffc7\001\002\000\032\005\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\020\uffc8\023\uffc8\027\uffc8\032" +
    "\uffc8\034\uffc8\035\uffc8\051\uffc8\100\uffc8\001\002\000\032" +
    "\005\uffc4\011\uffc4\012\uffc4\013\uffc4\020\uffc4\023\uffc4\027" +
    "\uffc4\032\uffc4\034\uffc4\035\uffc4\051\uffc4\100\uffc4\001\002" +
    "\000\004\073\u011b\001\002\000\032\005\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\020\uffb2\023\uffb2\027\uffb2\032\uffb2\034\uffb2" +
    "\035\uffb2\051\uffb2\100\uffb2\001\002\000\034\005\uffca\011" +
    "\uffca\012\uffca\013\uffca\020\uffca\023\uffca\027\uffca\032\uffca" +
    "\034\uffca\035\uffca\051\uffca\054\u018f\100\uffca\001\002\000" +
    "\040\005\uffb3\011\uffb3\012\uffb3\013\uffb3\020\uffb3\023\uffb3" +
    "\027\uffb3\032\uffb3\034\uffb3\035\uffb3\051\uffb3\054\uffb3\074" +
    "\uffb3\100\uffb3\104\uffb3\001\002\000\040\005\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\020\uffb6\023\uffb6\027\uffb6\032\uffb6\034" +
    "\uffb6\035\uffb6\051\uffb6\054\uffb6\074\uffb6\100\uffb6\104\uffb6" +
    "\001\002\000\040\005\uffb5\011\uffb5\012\uffb5\013\uffb5\020" +
    "\uffb5\023\uffb5\027\uffb5\032\uffb5\034\uffb5\035\uffb5\051\uffb5" +
    "\054\uffb5\074\uffb5\100\uffb5\104\uffb5\001\002\000\040\005" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\020\uffb4\023\uffb4\027\uffb4" +
    "\032\uffb4\034\uffb4\035\uffb4\051\uffb4\054\uffb4\074\uffb4\100" +
    "\uffb4\104\uffb4\001\002\000\040\005\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\020\uffb7\023\uffb7\027\uffb7\032\uffb7\034\uffb7\035" +
    "\uffb7\051\uffb7\054\uffb7\074\uffb7\100\uffb7\104\uffb7\001\002" +
    "\000\020\042\056\043\060\051\u0187\064\u0188\065\u0183\066" +
    "\054\073\053\001\002\000\032\005\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\020\uffc6\023\uffc6\027\uffc6\032\uffc6\034\uffc6\035" +
    "\uffc6\051\uffc6\100\uffc6\001\002\000\032\005\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\020\uffc9\023\uffc9\027\uffc9\032\uffc9\034" +
    "\uffc9\035\uffc9\051\uffc9\100\uffc9\001\002\000\032\005\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\020\uffc5\023\uffc5\027\uffc5\032" +
    "\uffc5\034\uffc5\035\uffc5\051\uffc5\100\uffc5\001\002\000\004" +
    "\021\u0194\001\002\000\004\073\u0195\001\002\000\020\042" +
    "\056\043\060\051\154\064\155\065\152\066\054\073\053" +
    "\001\002\000\004\074\u0197\001\002\000\004\100\u0198\001" +
    "\002\000\020\005\036\011\045\012\043\013\ufff2\020\042" +
    "\023\051\051\050\001\002\000\004\013\uffee\001\002\000" +
    "\020\005\036\011\045\012\043\013\ufff1\020\042\023\051" +
    "\051\050\001\002\000\004\013\uffed\001\002\000\004\026" +
    "\u019d\001\002\000\004\100\u019e\001\002\000\016\005\036" +
    "\011\045\012\043\020\u01a0\023\051\051\050\001\002\000" +
    "\004\100\u01c5\001\002\000\004\070\u01be\001\002\000\006" +
    "\013\u01aa\027\u01a9\001\002\000\004\100\u01a6\001\002\000" +
    "\010\013\uffa5\027\uffa5\100\u01a4\001\002\000\016\005\036" +
    "\011\045\012\043\020\u01a0\023\051\051\050\001\002\000" +
    "\006\013\uffa1\027\uffa1\001\002\000\022\005\036\011\045" +
    "\012\043\013\uffa4\020\u01a0\023\051\027\uffa4\051\050\001" +
    "\002\000\006\013\uffa0\027\uffa0\001\002\000\004\100\u01b9" +
    "\001\002\000\006\005\u01ad\100\u01ae\001\002\000\004\005" +
    "\u01ab\001\002\000\004\100\u01ac\001\002\000\024\005\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\020\uffaa\023\uffaa\027\uffaa\051" +
    "\uffaa\100\uffaa\001\002\000\016\042\056\043\060\051\064" +
    "\065\061\066\054\073\053\001\002\000\016\005\036\011" +
    "\045\012\043\020\u01a0\023\051\051\050\001\002\000\004" +
    "\013\u01b0\001\002\000\004\005\u01b1\001\002\000\004\100" +
    "\u01b2\001\002\000\024\005\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\020\uffa9\023\uffa9\027\uffa9\051\uffa9\100\uffa9\001\002\000" +
    "\004\026\u01b4\001\002\000\004\100\u01b5\001\002\000\016" +
    "\005\036\011\045\012\043\020\u01a0\023\051\051\050\001" +
    "\002\000\004\027\u01b8\001\002\000\004\100\uff9f\001\002" +
    "\000\006\005\u01ad\100\uff9e\001\002\000\016\005\036\011" +
    "\045\012\043\020\u01a0\023\051\051\050\001\002\000\004" +
    "\013\u01bb\001\002\000\004\005\u01bc\001\002\000\004\100" +
    "\u01bd\001\002\000\024\005\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\020\uffa8\023\uffa8\027\uffa8\051\uffa8\100\uffa8\001\002\000" +
    "\004\021\u01bf\001\002\000\004\073\u01c0\001\002\000\020" +
    "\042\056\043\060\051\154\064\155\065\152\066\054\073" +
    "\053\001\002\000\004\074\u01c2\001\002\000\004\100\u01c3" +
    "\001\002\000\022\005\036\011\045\012\043\013\uffa7\020" +
    "\u01a0\023\051\027\uffa7\051\050\001\002\000\006\013\uffa3" +
    "\027\uffa3\001\002\000\022\005\036\011\045\012\043\013" +
    "\uffa6\020\u01a0\023\051\027\uffa6\051\050\001\002\000\006" +
    "\013\uffa2\027\uffa2\001\002\000\004\013\ufff7\001\002\000" +
    "\006\006\014\033\015\001\002\000\004\013\ufff5\001\002" +
    "\000\004\051\u01cb\001\002\000\004\073\u01cc\001\002\000" +
    "\004\051\u01ce\001\002\000\004\074\u01d3\001\002\000\004" +
    "\022\u01cf\001\002\000\014\014\u018c\015\u018b\016\u018e\046" +
    "\u018d\051\u018a\001\002\000\006\074\uff28\104\u01d1\001\002" +
    "\000\004\051\u01ce\001\002\000\004\074\uff27\001\002\000" +
    "\004\022\u01d4\001\002\000\014\014\u018c\015\u018b\016\u018e" +
    "\046\u018d\051\u018a\001\002\000\020\005\u01d8\011\u01dc\012" +
    "\043\020\u01db\023\u01e1\035\u01d6\051\050\001\002\000\004" +
    "\030\u0295\001\002\000\004\013\u0293\001\002\000\016\042" +
    "\056\043\060\051\064\065\061\066\054\073\053\001\002" +
    "\000\024\005\u01d8\011\u01dc\012\043\013\uff25\020\u01db\023" +
    "\u01e1\027\uff25\035\u01d6\051\050\001\002\000\024\005\uff1c" +
    "\011\uff1c\012\uff1c\013\uff1c\020\uff1c\023\uff1c\027\uff1c\035" +
    "\uff1c\051\uff1c\001\002\000\004\070\u0272\001\002\000\004" +
    "\051\u0235\001\002\000\024\005\u01d8\011\u01dc\012\043\013" +
    "\uff23\020\u01db\023\u01e1\027\uff23\035\u01d6\051\050\001\002" +
    "\000\024\005\uff1b\011\uff1b\012\uff1b\013\uff1b\020\uff1b\023" +
    "\uff1b\027\uff1b\035\uff1b\051\uff1b\001\002\000\024\005\u01d8" +
    "\011\u01dc\012\043\013\uff24\020\u01db\023\u01e1\027\uff24\035" +
    "\u01d6\051\050\001\002\000\024\005\uff1d\011\uff1d\012\uff1d" +
    "\013\uff1d\020\uff1d\023\uff1d\027\uff1d\035\uff1d\051\uff1d\001" +
    "\002\000\004\036\u01e2\001\002\000\016\042\056\043\060" +
    "\051\064\065\061\066\054\073\053\001\002\000\020\005" +
    "\u01e6\011\u01ec\012\043\020\u01ea\023\u01e1\035\u01e5\051\050" +
    "\001\002\000\026\005\u01e6\011\u01ec\012\043\013\ufef1\020" +
    "\u01ea\023\u01e1\027\ufef1\034\ufef1\035\u01e5\051\050\001\002" +
    "\000\006\023\u0230\030\u0231\001\002\000\016\042\056\043" +
    "\060\051\064\065\061\066\054\073\053\001\002\000\026" +
    "\005\071\011\077\012\043\013\ufef2\020\074\023\051\027" +
    "\ufef2\034\ufef2\035\070\051\050\001\002\000\004\034\u0214" +
    "\001\002\000\030\005\ufee9\011\ufee9\012\ufee9\013\ufee9\020" +
    "\ufee9\023\ufee9\027\ufee9\032\ufee9\034\ufee9\035\ufee9\051\ufee9" +
    "\001\002\000\004\070\u020e\001\002\000\030\005\ufee8\011" +
    "\ufee8\012\ufee8\013\ufee8\020\ufee8\023\ufee8\027\ufee8\032\ufee8" +
    "\034\ufee8\035\ufee8\051\ufee8\001\002\000\004\051\u01f0\001" +
    "\002\000\026\005\u01e6\011\u01ec\012\043\013\ufeed\020\u01ea" +
    "\023\u01e1\027\ufeed\034\ufeed\035\u01e5\051\050\001\002\000" +
    "\030\005\ufee7\011\ufee7\012\ufee7\013\ufee7\020\ufee7\023\ufee7" +
    "\027\ufee7\032\ufee7\034\ufee7\035\ufee7\051\ufee7\001\002\000" +
    "\010\013\ufeec\027\ufeec\034\ufeec\001\002\000\004\054\u01f1" +
    "\001\002\000\004\065\u01f2\001\002\000\004\037\u01f3\001" +
    "\002\000\004\065\u01f4\001\002\000\004\047\u01f5\001\002" +
    "\000\004\065\u01f6\001\002\000\020\005\u01e6\011\u01ec\012" +
    "\043\020\u01fa\023\u01e1\035\u01f8\051\050\001\002\000\022" +
    "\005\u01e6\011\u01ec\012\043\020\u01fa\023\u01e1\032\ufedd\035" +
    "\u01f8\051\050\001\002\000\010\011\u0209\023\u0207\030\u0208" +
    "\001\002\000\022\005\u01e6\011\u01ec\012\043\020\u01fa\023" +
    "\u01e1\032\ufede\035\u01f8\051\050\001\002\000\004\070\u0200" +
    "\001\002\000\022\005\u01e6\011\u01ec\012\043\020\u01fa\023" +
    "\u01e1\032\ufed9\035\u01f8\051\050\001\002\000\004\032\u01fd" +
    "\001\002\000\004\051\u01fe\001\002\000\030\005\ufee0\011" +
    "\ufee0\012\ufee0\013\ufee0\020\ufee0\023\ufee0\027\ufee0\032\ufee0" +
    "\034\ufee0\035\ufee0\051\ufee0\001\002\000\004\032\ufed8\001" +
    "\002\000\004\021\u0201\001\002\000\004\073\u0202\001\002" +
    "\000\020\042\056\043\060\051\154\064\155\065\152\066" +
    "\054\073\053\001\002\000\004\074\u0204\001\002\000\022" +
    "\005\u01e6\011\u01ec\012\043\020\u01fa\023\u01e1\032\ufedf\035" +
    "\u01f8\051\050\001\002\000\004\032\ufedc\001\002\000\004" +
    "\032\ufedb\001\002\000\004\100\u020c\001\002\000\004\100" +
    "\u020b\001\002\000\004\100\u020a\001\002\000\004\032\ufed7" +
    "\001\002\000\004\032\ufed5\001\002\000\004\032\ufed6\001" +
    "\002\000\004\032\ufeda\001\002\000\004\021\u020f\001\002" +
    "\000\004\073\u0210\001\002\000\020\042\056\043\060\051" +
    "\154\064\155\065\152\066\054\073\053\001\002\000\004" +
    "\074\u0212\001\002\000\026\005\u01e6\011\u01ec\012\043\013" +
    "\ufef3\020\u01ea\023\u01e1\027\ufef3\034\ufef3\035\u01e5\051\050" +
    "\001\002\000\010\013\ufef0\027\ufef0\034\ufef0\001\002\000" +
    "\030\005\ufef4\011\ufef4\012\ufef4\013\ufef4\020\ufef4\023\ufef4" +
    "\027\ufef4\032\ufef4\034\ufef4\035\ufef4\051\ufef4\001\002\000" +
    "\010\013\ufeef\027\ufeef\034\ufeef\001\002\000\004\026\u0217" +
    "\001\002\000\020\005\u01e6\011\u01ec\012\043\020\u01ea\023" +
    "\u01e1\035\u01e5\051\050\001\002\000\006\013\u021b\027\u021a" +
    "\001\002\000\006\027\u0229\100\u022a\001\002\000\020\005" +
    "\u021d\011\u01ec\012\043\020\u01ea\023\u01e1\035\u01e5\051\050" +
    "\001\002\000\004\005\u021c\001\002\000\030\005\ufee6\011" +
    "\ufee6\012\ufee6\013\ufee6\020\ufee6\023\ufee6\027\ufee6\032\ufee6" +
    "\034\ufee6\035\ufee6\051\ufee6\001\002\000\016\042\056\043" +
    "\060\051\064\065\061\066\054\073\053\001\002\000\004" +
    "\013\u021f\001\002\000\004\005\u0220\001\002\000\030\005" +
    "\ufee5\011\ufee5\012\ufee5\013\ufee5\020\ufee5\023\ufee5\027\ufee5" +
    "\032\ufee5\034\ufee5\035\ufee5\051\ufee5\001\002\000\004\026" +
    "\u0222\001\002\000\022\005\u01e6\011\u01ec\012\043\020\u01ea" +
    "\023\u01e1\035\u01e5\051\050\100\u0224\001\002\000\006\013" +
    "\u021b\027\u021a\001\002\000\020\005\u01e6\011\u01ec\012\043" +
    "\020\u01ea\023\u01e1\035\u01e5\051\050\001\002\000\004\013" +
    "\u0226\001\002\000\004\005\u0227\001\002\000\010\013\ufee2" +
    "\027\ufee2\100\ufee2\001\002\000\010\013\u022b\027\u0229\100" +
    "\u022a\001\002\000\020\005\u01e6\011\u01ec\012\043\020\u01ea" +
    "\023\u01e1\035\u01e5\051\050\001\002\000\030\005\ufee3\011" +
    "\ufee3\012\ufee3\013\ufee3\020\ufee3\023\ufee3\027\ufee3\032\ufee3" +
    "\034\ufee3\035\ufee3\051\ufee3\001\002\000\004\005\u022c\001" +
    "\002\000\010\013\ufee1\027\ufee1\100\ufee1\001\002\000\004" +
    "\013\u022e\001\002\000\004\005\u022f\001\002\000\030\005" +
    "\ufee4\011\ufee4\012\ufee4\013\ufee4\020\ufee4\023\ufee4\027\ufee4" +
    "\032\ufee4\034\ufee4\035\ufee4\051\ufee4\001\002\000\010\013" +
    "\ufeeb\027\ufeeb\034\ufeeb\001\002\000\010\013\ufeea\027\ufeea" +
    "\034\ufeea\001\002\000\010\013\ufeee\027\ufeee\034\ufeee\001" +
    "\002\000\006\013\uff20\027\uff20\001\002\000\006\013\uff1f" +
    "\027\uff1f\001\002\000\004\054\u0236\001\002\000\004\065" +
    "\u0237\001\002\000\004\037\u0238\001\002\000\004\065\u0239" +
    "\001\002\000\004\047\u023a\001\002\000\004\065\u023b\001" +
    "\002\000\020\005\u023e\011\u01dc\012\043\020\u0242\023\u0246" +
    "\035\u023d\051\050\001\002\000\026\005\uff09\011\uff09\012" +
    "\uff09\013\uff09\020\uff09\023\uff09\027\uff09\032\uff09\035\uff09" +
    "\051\uff09\001\002\000\006\011\u0271\030\u0270\001\002\000" +
    "\016\042\056\043\060\051\064\065\061\066\054\073\053" +
    "\001\002\000\026\005\uff07\011\uff07\012\uff07\013\uff07\020" +
    "\uff07\023\uff07\027\uff07\032\uff07\035\uff07\051\uff07\001\002" +
    "\000\026\005\u023e\011\u01dc\012\043\013\uff12\020\u0242\023" +
    "\u0246\027\uff12\032\uff12\035\u023d\051\050\001\002\000\026" +
    "\005\uff08\011\uff08\012\uff08\013\uff08\020\uff08\023\uff08\027" +
    "\uff08\032\uff08\035\uff08\051\uff08\001\002\000\004\070\u024f" +
    "\001\002\000\026\005\u023e\011\u01dc\012\043\013\uff0d\020" +
    "\u0242\023\u0246\027\uff0d\032\uff0d\035\u023d\051\050\001\002" +
    "\000\004\032\u024c\001\002\000\026\005\u023e\011\u01dc\012" +
    "\043\013\uff11\020\u0242\023\u0246\027\uff11\032\uff11\035\u023d" +
    "\051\050\001\002\000\004\036\u0247\001\002\000\016\042" +
    "\056\043\060\051\064\065\061\066\054\073\053\001\002" +
    "\000\020\005\071\011\077\012\043\020\134\023\051\035" +
    "\132\051\050\001\002\000\004\034\u024a\001\002\000\026" +
    "\005\uff00\011\uff00\012\uff00\013\uff00\020\uff00\023\uff00\027" +
    "\uff00\032\uff00\035\uff00\051\uff00\001\002\000\010\013\uff0e" +
    "\027\uff0e\032\uff0e\001\002\000\004\051\u024d\001\002\000" +
    "\026\005\uff14\011\uff14\012\uff14\013\uff14\020\uff14\023\uff14" +
    "\027\uff14\032\uff14\035\uff14\051\uff14\001\002\000\010\013" +
    "\uff0c\027\uff0c\032\uff0c\001\002\000\004\021\u0250\001\002" +
    "\000\004\073\u0251\001\002\000\020\042\056\043\060\051" +
    "\154\064\155\065\152\066\054\073\053\001\002\000\004" +
    "\074\u0253\001\002\000\026\005\u023e\011\u01dc\012\043\013" +
    "\uff13\020\u0242\023\u0246\027\uff13\032\uff13\035\u023d\051\050" +
    "\001\002\000\010\013\uff10\027\uff10\032\uff10\001\002\000" +
    "\010\013\uff0f\027\uff0f\032\uff0f\001\002\000\004\026\u0257" +
    "\001\002\000\020\005\u023e\011\u01dc\012\043\020\u0242\023" +
    "\u0246\035\u023d\051\050\001\002\000\006\013\u025b\027\u0259" +
    "\001\002\000\020\005\u0262\011\u01dc\012\043\020\u0242\023" +
    "\u0246\035\u023d\051\050\001\002\000\006\027\u025d\100\u025e" +
    "\001\002\000\004\005\u025c\001\002\000\026\005\uff06\011" +
    "\uff06\012\uff06\013\uff06\020\uff06\023\uff06\027\uff06\032\uff06" +
    "\035\uff06\051\uff06\001\002\000\020\005\u023e\011\u01dc\012" +
    "\043\020\u0242\023\u0246\035\u023d\051\050\001\002\000\026" +
    "\005\uff03\011\uff03\012\uff03\013\uff03\020\uff03\023\uff03\027" +
    "\uff03\032\uff03\035\uff03\051\uff03\001\002\000\004\013\u0260" +
    "\001\002\000\004\005\u0261\001\002\000\026\005\uff04\011" +
    "\uff04\012\uff04\013\uff04\020\uff04\023\uff04\027\uff04\032\uff04" +
    "\035\uff04\051\uff04\001\002\000\016\042\056\043\060\051" +
    "\064\065\061\066\054\073\053\001\002\000\004\013\u0264" +
    "\001\002\000\004\005\u0265\001\002\000\026\005\uff05\011" +
    "\uff05\012\uff05\013\uff05\020\uff05\023\uff05\027\uff05\032\uff05" +
    "\035\uff05\051\uff05\001\002\000\004\026\u0267\001\002\000" +
    "\022\005\u023e\011\u01dc\012\043\020\u0242\023\u0246\035\u023d" +
    "\051\050\100\u0268\001\002\000\020\005\u023e\011\u01dc\012" +
    "\043\020\u0242\023\u0246\035\u023d\051\050\001\002\000\006" +
    "\013\u025b\027\u0259\001\002\000\010\013\u026b\027\u025d\100" +
    "\u025e\001\002\000\004\005\u026c\001\002\000\010\013\uff01" +
    "\027\uff01\100\uff01\001\002\000\004\013\u026e\001\002\000" +
    "\004\005\u026f\001\002\000\010\013\uff02\027\uff02\100\uff02" +
    "\001\002\000\010\013\uff0b\027\uff0b\032\uff0b\001\002\000" +
    "\010\013\uff0a\027\uff0a\032\uff0a\001\002\000\004\021\u0273" +
    "\001\002\000\004\073\u0274\001\002\000\020\042\056\043" +
    "\060\051\154\064\155\065\152\066\054\073\053\001\002" +
    "\000\004\074\u0276\001\002\000\024\005\u01d8\011\u01dc\012" +
    "\043\013\uff26\020\u01db\023\u01e1\027\uff26\035\u01d6\051\050" +
    "\001\002\000\006\013\uff22\027\uff22\001\002\000\006\013" +
    "\uff21\027\uff21\001\002\000\004\026\u027a\001\002\000\020" +
    "\005\u01d8\011\u01dc\012\043\020\u01db\023\u01e1\035\u01d6\051" +
    "\050\001\002\000\006\013\u027e\027\u027c\001\002\000\020" +
    "\005\u0285\011\u01dc\012\043\020\u01db\023\u01e1\035\u01d6\051" +
    "\050\001\002\000\006\027\u0280\100\u0281\001\002\000\004" +
    "\005\u027f\001\002\000\024\005\uff1a\011\uff1a\012\uff1a\013" +
    "\uff1a\020\uff1a\023\uff1a\027\uff1a\035\uff1a\051\uff1a\001\002" +
    "\000\020\005\u01d8\011\u01dc\012\043\020\u01db\023\u01e1\035" +
    "\u01d6\051\050\001\002\000\024\005\uff17\011\uff17\012\uff17" +
    "\013\uff17\020\uff17\023\uff17\027\uff17\035\uff17\051\uff17\001" +
    "\002\000\004\013\u0283\001\002\000\004\005\u0284\001\002" +
    "\000\024\005\uff18\011\uff18\012\uff18\013\uff18\020\uff18\023" +
    "\uff18\027\uff18\035\uff18\051\uff18\001\002\000\016\042\056" +
    "\043\060\051\064\065\061\066\054\073\053\001\002\000" +
    "\004\013\u0287\001\002\000\004\005\u0288\001\002\000\024" +
    "\005\uff19\011\uff19\012\uff19\013\uff19\020\uff19\023\uff19\027" +
    "\uff19\035\uff19\051\uff19\001\002\000\004\026\u028a\001\002" +
    "\000\022\005\u01d8\011\u01dc\012\043\020\u01db\023\u01e1\035" +
    "\u01d6\051\050\100\u028c\001\002\000\006\013\u027e\027\u027c" +
    "\001\002\000\020\005\u01d8\011\u01dc\012\043\020\u01db\023" +
    "\u01e1\035\u01d6\051\050\001\002\000\004\013\u028e\001\002" +
    "\000\004\005\u028f\001\002\000\010\013\uff16\027\uff16\100" +
    "\uff16\001\002\000\010\013\u0291\027\u0280\100\u0281\001\002" +
    "\000\004\005\u0292\001\002\000\010\013\uff15\027\uff15\100" +
    "\uff15\001\002\000\004\030\u0294\001\002\000\006\006\uff29" +
    "\100\uff29\001\002\000\006\013\uff1e\027\uff1e\001\002\000" +
    "\004\051\u0297\001\002\000\004\100\u0298\001\002\000\004" +
    "\012\u029a\001\002\000\004\013\u02a0\001\002\000\004\051" +
    "\u029b\001\002\000\004\022\u029c\001\002\000\014\014\u018c" +
    "\015\u018b\016\u018e\046\u018d\051\u018a\001\002\000\004\100" +
    "\u029e\001\002\000\006\012\u029a\013\uff2c\001\002\000\004" +
    "\013\uff2b\001\002\000\004\025\u02a1\001\002\000\004\100" +
    "\u02a2\001\002\000\006\006\uff2a\100\uff2a\001\002\000\004" +
    "\002\001\001\002\000\006\070\u02ab\100\ufffd\001\002\000" +
    "\004\100\u02a9\001\002\000\006\070\u02a7\100\ufffb\001\002" +
    "\000\006\017\u02a6\051\u02a4\001\002\000\004\100\ufffa\001" +
    "\002\000\006\004\004\006\uffff\001\002\000\004\006\ufffe" +
    "\001\002\000\006\017\u02a6\051\u02a4\001\002\000\004\100" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02aa\000\006\002\004\003\005\001\001\000\004\005" +
    "\u02a4\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\016\010\015\020\020\057\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01c6\001\001\000\004\010\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\016\010\015" +
    "\020\026\057\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\037\021\046\031\045\032\034\036\040\045" +
    "\036\054\043\001\001\000\002\001\001\000\014\017\062" +
    "\027\056\030\054\034\u019b\054\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\037\021\u015c\031\045\032\034\036\040\045\036" +
    "\054\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\062\027\056\030\054\034\064" +
    "\054\061\001\001\000\006\017\u0147\027\056\001\001\000" +
    "\014\023\u0145\024\202\025\176\026\177\027\175\001\001" +
    "\000\004\035\u013f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\201\024\202\025\176" +
    "\026\177\027\175\035\u0139\001\001\000\004\035\u0134\001" +
    "\001\000\004\035\u012e\001\001\000\004\035\u0119\001\001" +
    "\000\002\001\001\000\020\015\072\045\071\046\074\047" +
    "\075\050\066\052\100\054\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\062\027\056\030\054\034" +
    "\347\054\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\072\045" +
    "\071\046\333\047\075\050\066\052\100\054\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\072\045\071\046\102\047\075\050\066\052\100" +
    "\054\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\116\036\117\040\113\041\122\043\125\053\123\054\121" +
    "\001\001\000\020\015\116\036\117\040\113\041\122\043" +
    "\125\053\332\054\121\001\001\000\002\001\001\000\014" +
    "\017\062\027\056\030\054\034\251\054\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\062\027\056\030\054" +
    "\034\127\054\061\001\001\000\002\001\001\000\020\015" +
    "\132\044\136\045\071\047\134\050\066\052\100\054\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\132\044\143\045\071\047\134\050\066" +
    "\052\100\054\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\132" +
    "\044\142\045\071\047\134\050\066\052\100\054\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\152\022\150\027\056\030" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\023\201\024\202\025\176\026\177\027\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\152\022\156\027\056\030\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\152\022\161\027\056" +
    "\030\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\152\022\164\027\056\030\147\001\001\000\002" +
    "\001\001\000\012\017\152\022\166\027\056\030\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\152\022\205\027\056\030\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\204" +
    "\025\176\026\177\027\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\207\026\177\027\175\001\001" +
    "\000\002\001\001\000\014\023\211\024\202\025\176\026" +
    "\177\027\175\001\001\000\002\001\001\000\014\023\213" +
    "\024\202\025\176\026\177\027\175\001\001\000\002\001" +
    "\001\000\010\025\215\026\177\027\175\001\001\000\002" +
    "\001\001\000\006\026\217\027\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\132\044\222\045\071" +
    "\047\134\050\066\052\100\054\135\001\001\000\002\001" +
    "\001\000\012\017\152\022\224\027\056\030\147\001\001" +
    "\000\002\001\001\000\020\015\132\044\226\045\071\047" +
    "\134\050\066\052\100\054\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\116\036\117\040\113\041\122\043" +
    "\125\053\237\054\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\152\022\243\027" +
    "\056\030\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\116\036\117\040\113\041\122\043\125\053" +
    "\246\054\121\001\001\000\002\001\001\000\020\015\116" +
    "\036\117\040\113\041\122\043\125\053\250\054\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\256\036\117\040\254\041\122\043\125\054" +
    "\260\105\261\001\001\000\020\015\256\036\117\040\254" +
    "\041\122\043\125\054\260\105\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\062\027\056\030\054\034\275\054\061\001" +
    "\001\000\020\015\256\036\117\040\254\041\122\043\125" +
    "\054\260\105\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\256\036\117\040\254\041" +
    "\122\043\125\054\260\105\300\001\001\000\004\042\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\256\036\117\040\254\041\122\043\125\054\260\105\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\256\036\117\040\254" +
    "\041\122\043\125\054\260\105\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\152" +
    "\022\315\027\056\030\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\256\036\117\040\254\041\122" +
    "\043\125\054\260\105\320\001\001\000\002\001\001\000" +
    "\020\015\256\036\117\040\254\041\122\043\125\054\260" +
    "\105\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\152\022" +
    "\341\027\056\030\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\072\045\071\046\344\047\075\050" +
    "\066\052\100\054\077\001\001\000\002\001\001\000\020" +
    "\015\072\045\071\046\346\047\075\050\066\052\100\054" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\353\045\071\047\355\050\066\052" +
    "\100\054\356\106\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\353\045\071\047" +
    "\355\050\066\052\100\054\356\106\u0108\001\001\000\002" +
    "\001\001\000\004\051\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\353\045\071\047\355\050\066\052" +
    "\100\054\356\106\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\062\027\056\030\054\034\u0100\054\061\001\001\000\020" +
    "\015\353\045\071\047\355\050\066\052\100\054\356\106" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\353\045\071\047\355\050\066\052\100" +
    "\054\356\106\u0103\001\001\000\004\051\u0105\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\353\045\071" +
    "\047\355\050\066\052\100\054\356\106\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\152\022\u010c\027\056\030\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\353" +
    "\045\071\047\355\050\066\052\100\054\356\106\u010f\001" +
    "\001\000\002\001\001\000\020\015\353\045\071\047\355" +
    "\050\066\052\100\054\356\106\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\u012a\027\056\030\u0127\054\u0129" +
    "\001\001\000\006\030\u011e\055\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\u011e\055" +
    "\u0122\001\001\000\002\001\001\000\006\030\u011e\055\u0124" +
    "\001\001\000\002\001\001\000\006\030\u011e\055\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\201" +
    "\024\202\025\176\026\177\027\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\u0132\027\056\030\u012f\054" +
    "\u0131\001\001\000\002\001\001\000\014\023\201\024\202" +
    "\025\176\026\177\027\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u0137\027\056" +
    "\030\u0135\001\001\000\002\001\001\000\014\023\201\024" +
    "\202\025\176\026\177\027\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\u013d\027\056\030\u013a\054" +
    "\u013c\001\001\000\002\001\001\000\014\023\201\024\202" +
    "\025\176\026\177\027\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\u0143\027\056" +
    "\030\u0140\054\u0142\001\001\000\002\001\001\000\014\023" +
    "\201\024\202\025\176\026\177\027\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\201\024\202\025\176\026\177\027\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\u014e\027\056\030\u014b\054\u014d\001\001" +
    "\000\002\001\001\000\014\023\201\024\202\025\176\026" +
    "\177\027\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\u0156\027\056\030\u0153\054\u0155\001\001\000\002" +
    "\001\001\000\014\023\201\024\202\025\176\026\177\027" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u0168\036\117\037\u0167\040\u0165\041\122\043\125\054" +
    "\u016a\001\001\000\020\015\u0168\036\117\037\u017b\040\u0165" +
    "\041\122\043\125\054\u016a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u0168\036\117\037\u016c\040\u0165\041" +
    "\122\043\125\054\u016a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\152\022\u0170\027" +
    "\056\030\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u0168\036\117\037\u0173\040\u0165\041\122\043" +
    "\125\054\u016a\001\001\000\002\001\001\000\020\015\u0168" +
    "\036\117\037\u0175\040\u0165\041\122\043\125\054\u016a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\037\021\u017d\031\045\032\034" +
    "\036\040\045\036\054\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u0188\001\001\000\014\016\u0184" +
    "\017\u0185\027\056\030\u0181\054\u0183\001\001\000\002\001" +
    "\001\000\014\023\201\024\202\025\176\026\177\027\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\u0190\017\u0191" +
    "\027\056\030\u0181\054\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\152\022\u0195\027\056\030\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\037" +
    "\021\u0198\031\045\032\034\036\040\045\036\054\043\001" +
    "\001\000\002\001\001\000\020\015\037\021\u019a\031\045" +
    "\032\034\036\040\045\036\054\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u019e" +
    "\031\u01a2\032\034\036\040\045\036\054\u01a1\104\u01a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u01a7" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\u019e\031\u01a2\032\034\036\040\045\036\054\u01a1\104\u01a4" +
    "\001\001\000\002\001\001\000\020\015\u019e\031\u01a2\032" +
    "\034\036\040\045\036\054\u01a1\104\u01a6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\062" +
    "\027\056\030\054\034\u01b2\054\061\001\001\000\020\015" +
    "\u019e\031\u01a2\032\034\036\040\045\036\054\u01a1\104\u01ae" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u019e\031\u01a2\032\034\036\040\045\036\054" +
    "\u01a1\104\u01b5\001\001\000\004\033\u01b6\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\u019e\031\u01a2\032" +
    "\034\036\040\045\036\054\u01a1\104\u01b9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\152" +
    "\022\u01c0\027\056\030\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\u019e\031\u01a2\032\034\036\040" +
    "\045\036\054\u01a1\104\u01c3\001\001\000\002\001\001\000" +
    "\020\015\u019e\031\u01a2\032\034\036\040\045\036\054\u01a1" +
    "\104\u01c5\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\016\010\015\020\u01c8\057\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u01cc\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u01cf\001\001\000\002\001\001\000\004\011\u01d1\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u01d4" +
    "\001\001\000\020\013\u01d6\015\u01d8\054\u01dc\060\u01de\061" +
    "\u01df\063\u01d9\072\u01dd\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\062\027\056\030\054\034\u0278\054" +
    "\061\001\001\000\020\013\u0277\015\u01d8\054\u01dc\060\u01de" +
    "\061\u01df\063\u01d9\072\u01dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\u0233\015\u01d8" +
    "\054\u01dc\060\u01de\061\u01df\063\u01d9\072\u01dd\001\001\000" +
    "\002\001\001\000\020\013\u0232\015\u01d8\054\u01dc\060\u01de" +
    "\061\u01df\063\u01d9\072\u01dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\062\027\056\030\054\034\u01e2" +
    "\054\061\001\001\000\020\015\u01e6\054\u01ec\072\u01ed\073" +
    "\u01e7\074\u01e3\075\u01e8\077\u01ea\001\001\000\020\015\u01e6" +
    "\054\u01ec\072\u01ed\073\u0231\074\u01e3\075\u01e8\077\u01ea\001" +
    "\001\000\002\001\001\000\014\017\062\027\056\030\054" +
    "\034\u0215\054\061\001\001\000\020\015\072\045\071\046" +
    "\u0214\047\075\050\066\052\100\054\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u01e6\054\u01ec\072\u01ed" +
    "\073\u01ee\074\u01e3\075\u01e8\077\u01ea\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\u01f8\054\u01fa\072\u01ed\074\u01f6" +
    "\075\u01e8\077\u01ea\100\u01fb\001\001\000\020\015\u01f8\054" +
    "\u01fa\072\u01ed\074\u01f6\075\u01e8\077\u01ea\100\u020c\001\001" +
    "\000\002\001\001\000\020\015\u01f8\054\u01fa\072\u01ed\074" +
    "\u01f6\075\u01e8\077\u01ea\100\u0205\001\001\000\002\001\001" +
    "\000\020\015\u01f8\054\u01fa\072\u01ed\074\u01f6\075\u01e8\077" +
    "\u01ea\100\u01fe\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\152\022\u0202\027\056\030\147" +
    "\001\001\000\002\001\001\000\020\015\u01f8\054\u01fa\072" +
    "\u01ed\074\u01f6\075\u01e8\077\u01ea\100\u0204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\152\022\u0210\027\056\030\147" +
    "\001\001\000\002\001\001\000\020\015\u01e6\054\u01ec\072" +
    "\u01ed\073\u0212\074\u01e3\075\u01e8\077\u01ea\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\u01e6\054\u01ec\072\u01ed\073\u0217\074\u01e3" +
    "\075\u01e8\077\u01ea\001\001\000\004\101\u0218\001\001\000" +
    "\002\001\001\000\020\015\u01e6\054\u01ec\072\u01ed\073\u021d" +
    "\074\u01e3\075\u01e8\077\u01ea\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\062\027\056\030\054\034\u0220" +
    "\054\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u01e6\054\u01ec" +
    "\072\u01ed\073\u0222\074\u01e3\075\u01e8\077\u01ea\001\001\000" +
    "\004\101\u0227\001\001\000\020\015\u01e6\054\u01ec\072\u01ed" +
    "\073\u0224\074\u01e3\075\u01e8\077\u01ea\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u01e6\054\u01ec\072\u01ed\073\u022c\074\u01e3\075" +
    "\u01e8\077\u01ea\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u023f\054" +
    "\u0242\063\u0240\064\u0243\065\u0244\066\u023b\070\u023e\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\062\027" +
    "\056\030\054\034\u0255\054\061\001\001\000\002\001\001" +
    "\000\020\015\u023f\054\u0242\063\u0240\064\u0254\065\u0244\066" +
    "\u023b\070\u023e\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u023f\054\u0242\063\u0240\064\u024d\065\u0244\066" +
    "\u023b\070\u023e\001\001\000\002\001\001\000\020\015\u023f" +
    "\054\u0242\063\u0240\064\u024a\065\u0244\066\u023b\070\u023e\001" +
    "\001\000\002\001\001\000\014\017\062\027\056\030\054" +
    "\034\u0247\054\061\001\001\000\020\015\132\044\u0248\045" +
    "\071\047\134\050\066\052\100\054\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\152\022\u0251\027\056\030" +
    "\147\001\001\000\002\001\001\000\020\015\u023f\054\u0242" +
    "\063\u0240\064\u0253\065\u0244\066\u023b\070\u023e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u023f\054\u0242\063\u0240\064\u0257\065\u0244\066\u023b\070" +
    "\u023e\001\001\000\004\067\u0259\001\001\000\020\015\u023f" +
    "\054\u0242\063\u0240\064\u0262\065\u0244\066\u023b\070\u023e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u023f\054\u0242\063\u0240\064\u025e\065\u0244\066" +
    "\u023b\070\u023e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\062\027" +
    "\056\030\054\034\u0265\054\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\u023f\054\u0242\063\u0240\064\u0268\065\u0244\066\u023b" +
    "\070\u023e\001\001\000\020\015\u023f\054\u0242\063\u0240\064" +
    "\u026c\065\u0244\066\u023b\070\u023e\001\001\000\004\067\u0269" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\152\022\u0274\027\056\030\147" +
    "\001\001\000\002\001\001\000\020\013\u0276\015\u01d8\054" +
    "\u01dc\060\u01de\061\u01df\063\u01d9\072\u01dd\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\u027a\015\u01d8\054\u01dc\060\u01de\061\u01df\063\u01d9\072\u01dd" +
    "\001\001\000\004\076\u027c\001\001\000\020\013\u0285\015" +
    "\u01d8\054\u01dc\060\u01de\061\u01df\063\u01d9\072\u01dd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\u0281\015\u01d8\054\u01dc\060\u01de\061\u01df\063\u01d9" +
    "\072\u01dd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\062\027\056" +
    "\030\054\034\u0288\054\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\u028a\015\u01d8\054\u01dc\060\u01de\061\u01df\063\u01d9\072" +
    "\u01dd\001\001\000\004\076\u028f\001\001\000\020\013\u028c" +
    "\015\u01d8\054\u01dc\060\u01de\061\u01df\063\u01d9\072\u01dd\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u0298\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u029c\001\001\000\002\001\001\000\004\056\u029e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u02a7\001\001" +
    "\000\002\001\001\000\004\003\u02a9\001\001\000\002\001" +
    "\001\000\004\005\u02ab\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INFOR_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INFOR_WHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INFOR_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE_FUNCION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INFOR_WHILE_FUNCION ::= DECLARACION INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INFOR_WHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // FOR_WHILE_FUNCION ::= for_ identificador igual numero to numero step_ numero INFOR_WHILE_FUNCION next identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then findelinea INWHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ INWHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION else_ INWHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INWHILE_FUNCION ::= exit function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INWHILE_FUNCION ::= exit do_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INWHILE_FUNCION ::= LLAMAR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // INWHILE_FUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // INWHILE_FUNCION ::= SENTENCIA_WHILE_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // INWHILE_FUNCION ::= DECLARACION INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // INWHILE_FUNCION ::= SENTENCIA_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // INWHILE_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // WHILE_FUNCION ::= do_ until CONDICION INWHILE_FUNCION loop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // INWHILE_FOR_FUNCION ::= exit function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // INWHILE_FOR_FUNCION ::= exit for_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // INWHILE_FOR_FUNCION ::= exit do_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // INWHILE_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INWHILE_FOR_FUNCION ::= DECLARACION INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INWHILE_FOR_FUNCION ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INWHILE_FOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // WHILE_FOR_FUNCION ::= do_ until CONDICION INWHILE_FOR loop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then findelinea INFOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION else_ INFOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION else_ INFOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INFOR_FUNCION ::= exit for_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INFOR_FUNCION ::= exit function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // INFOR_FUNCION ::= LLAMAR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // INFOR_FUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // INFOR_FUNCION ::= DECLARACION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // INFOR_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // FOR_FUNCION ::= for_ identificador igual numero to numero step_ numero INFOR_FUNCION next identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ELSEIF_FUNCION ::= else_ if_ CONDICION then INFUNCION ELSEIF_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_FUNCION",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // ELSEIF_FUNCION ::= else_ if_ CONDICION then findelinea INFUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_FUNCION",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // IF_FUNCION ::= if_ CONDICION then INFUNCION ELSEIF_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // IF_FUNCION ::= if_ CONDICION then INFUNCION ELSEIF_FUNCION else_ INFUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // IF_FUNCION ::= if_ CONDICION then INFUNCION else_ INFUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // IF_FUNCION ::= if_ CONDICION then INFUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INFUNCION ::= exit function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INFUNCION ::= LLAMAR_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INFUNCION ::= DECLARACION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INFUNCION ::= LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INFUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // STRUCT_ ::= Public_ struct_ identificador findelinea DECLARACIONSENCILLA end_ struct_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // PARAMETRO_SENCILLO ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // PARAMETRO_SENCILLO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // PARAMETRO_SENCILLO ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // PARAMETRO_SENCILLO ::= BOOLEAN coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // PARAMETRO_SENCILLO ::= identificador coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // PARAMETRO_SENCILLO ::= numero coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INFOR_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INFOR_WHILE ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INFOR_WHILE ::= DECLARACION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // INFOR_WHILE ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // FOR_WHILE ::= for_ identificador igual numero to numero step_ numero findelinea INFOR_WHILE next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ELSE_IF_WHILE ::= else_ if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ELSE_IF_WHILE ::= else_ if_ CONDICION then findelinea INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE else_ findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // INIF_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // INIF_WHILE ::= LLAMAR_FUNCION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // INIF_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // INIF_WHILE ::= DECLARACION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INIF_WHILE ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INWHILE_MAIN ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INWHILE_MAIN ::= DECLARACION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INWHILE_MAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // WHILE_MAIN ::= do_ until CONDICION findelinea INWHILE_MAIN loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INWHILE_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // INWHILE_FOR ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INWHILE_FOR ::= DECLARACION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INWHILE_FOR ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // WHILE_FOR ::= do_ until CONDICION findelinea INWHILE_FOR loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ELSE_IF_FOR ::= else_ if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ELSE_IF_FOR ::= else_ if_ CONDICION then findelinea INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR else_ findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INIF_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INIF_FOR ::= LLAMAR_FUNCION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INIF_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INIF_FOR ::= DECLARACION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INIF_FOR ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // INFOR_MAIN ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // INFOR_MAIN ::= DECLARACION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INFOR_MAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FOR_MAIN ::= for_ identificador igual numero to numero step_ numero findelinea INFOR_MAIN next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDICION ::= numero OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONDICION ::= numero OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONDICION ::= numero OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONDICION ::= numero OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONDICION ::= numero OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICION ::= BOOLEAN OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICION ::= identificador OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELSE_IF_MAIN ::= else_ if_ CONDICION then findelinea INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELSE_IF_MAIN ::= else_ if_ CONDICION then findelinea INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INIF ::= LLAMAR_FUNCION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INIF ::= DECLARACION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INIF ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INIF ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF_MAIN ::= if_ CONDICION then findelinea INIF else_ findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF_MAIN ::= if_ CONDICION then findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPEDECLARE ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= identificador punto identificador igual texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= identificador punto identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= identificador punto identificador igual numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= identificador punto identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= identificador igual texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= identificador igual numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= dim identificador igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= dim identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION_PARENTESIS ::= espacio OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION_PARENTESIS ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_POTENCIA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION_POTENCIA ::= potencia numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_POTENCIA ::= potencia numero OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_MULT_DIV ::= OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_MULT_DIV ::= div numero OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_MULT_DIV ::= mult numero OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_MULT_DIV ::= div numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_MULT_DIV ::= mult numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_MOD ::= OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_MOD ::= mod numero OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_MOD ::= mod numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_ARITMETICA_MAS_MENOS ::= OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_ARITMETICA_MAS_MENOS ::= resta numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_ARITMETICA_MAS_MENOS ::= suma numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_ARITMETICA_MAS_MENOS ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_ARITMETICA_MAS_MENOS ::= suma numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_ARITMETICA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_ARITMETICA ::= numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INPARENTESIS ::= numero continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INPARENTESIS ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INMAIN ::= LLAMAR_FUNCION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INMAIN ::= DECLARACION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INMAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INMAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NEXT_MODULE ::= FUNCION_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEXT_MODULE ::= STRUCT_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

