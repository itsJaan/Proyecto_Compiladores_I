
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 16 22:46:22 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 16 22:46:22 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01a7\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\003\005\000\002\003\006\000\002\005\003" +
    "\000\002\005\005\000\002\005\003\000\002\005\005\000" +
    "\002\004\011\000\002\004\012\000\002\021\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\010\014" +
    "\000\002\010\014\000\002\010\015\000\002\010\015\000" +
    "\002\022\011\000\002\022\003\000\002\022\003\000\002" +
    "\022\004\000\002\022\005\000\002\022\004\000\002\022" +
    "\012\000\002\022\004\000\002\022\004\000\002\022\005" +
    "\000\002\022\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\006\000\002\114\004\000\002\113\003\000\002" +
    "\113\004\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\007\000\002" +
    "\017\005\000\002\017\007\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\120\003\000\002\120\003\000" +
    "\002\015\006\000\002\015\010\000\002\015\006\000\002" +
    "\015\006\000\002\015\010\000\002\015\010\000\002\015" +
    "\006\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\006\000" +
    "\002\015\007\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\007\000\002\015\007\000\002\015" +
    "\006\000\002\015\010\000\002\121\004\000\002\121\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\116\003\000\002\116\003\000\002\117\004\000" +
    "\002\117\003\000\002\026\012\000\002\026\015\000\002" +
    "\026\015\000\002\026\013\000\002\077\011\000\002\077" +
    "\003\000\002\077\003\000\002\077\004\000\002\077\005" +
    "\000\002\077\004\000\002\077\012\000\002\077\004\000" +
    "\002\077\005\000\002\077\005\000\002\077\006\000\002" +
    "\077\005\000\002\027\010\000\002\027\010\000\002\107" +
    "\010\000\002\107\007\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\031" +
    "\004\000\002\031\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\017\000\002\033\011\000" +
    "\002\033\003\000\002\033\003\000\002\033\012\000\002" +
    "\033\004\000\002\033\004\000\002\033\005\000\002\033" +
    "\004\000\002\033\004\000\002\033\005\000\002\033\006" +
    "\000\002\033\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\100\011\000\002\100\003\000\002" +
    "\100\003\000\002\100\012\000\002\100\004\000\002\100" +
    "\004\000\002\100\005\000\002\100\004\000\002\100\004" +
    "\000\002\100\005\000\002\100\006\000\002\100\006\000" +
    "\002\100\005\000\002\100\005\000\002\035\012\000\002" +
    "\035\015\000\002\035\015\000\002\035\013\000\002\036" +
    "\010\000\002\036\010\000\002\110\007\000\002\110\010" +
    "\000\002\037\011\000\002\040\011\000\002\040\003\000" +
    "\002\040\003\000\002\040\004\000\002\040\005\000\002" +
    "\040\012\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\005\000\002\040\006\000\002\040\006" +
    "\000\002\040\005\000\002\040\005\000\002\041\011\000" +
    "\002\042\011\000\002\042\003\000\002\042\003\000\002" +
    "\042\004\000\002\042\005\000\002\042\012\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\005" +
    "\000\002\042\006\000\002\042\005\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\101\011\000\002" +
    "\101\003\000\002\101\003\000\002\101\004\000\002\101" +
    "\005\000\002\101\012\000\002\101\004\000\002\101\004" +
    "\000\002\101\004\000\002\101\005\000\002\101\006\000" +
    "\002\101\006\000\002\101\005\000\002\101\005\000\002" +
    "\044\012\000\002\044\015\000\002\044\015\000\002\044" +
    "\013\000\002\045\010\000\002\045\010\000\002\106\007" +
    "\000\002\106\010\000\002\046\017\000\002\047\011\000" +
    "\002\047\003\000\002\047\004\000\002\047\005\000\002" +
    "\047\003\000\002\047\012\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\005\000\002\047\006" +
    "\000\002\047\006\000\002\047\005\000\002\047\005\000" +
    "\002\050\005\000\002\050\005\000\002\051\004\000\002" +
    "\051\005\000\002\051\007\000\002\051\006\000\002\115" +
    "\003\000\002\115\003\000\002\115\003\000\002\052\007" +
    "\000\002\052\010\000\002\007\011\000\002\053\016\000" +
    "\002\011\005\000\002\011\007\000\002\011\010\000\002" +
    "\011\006\000\002\013\011\000\002\013\003\000\002\013" +
    "\003\000\002\013\004\000\002\013\005\000\002\013\004" +
    "\000\002\013\012\000\002\013\004\000\002\013\004\000" +
    "\002\013\005\000\002\013\006\000\002\013\005\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\055" +
    "\012\000\002\055\015\000\002\055\015\000\002\055\013" +
    "\000\002\102\011\000\002\102\003\000\002\102\004\000" +
    "\002\102\005\000\002\102\003\000\002\102\012\000\002" +
    "\102\004\000\002\102\004\000\002\102\004\000\002\102" +
    "\005\000\002\102\006\000\002\102\005\000\002\056\010" +
    "\000\002\056\010\000\002\111\007\000\002\111\010\000" +
    "\002\057\017\000\002\060\011\000\002\060\003\000\002" +
    "\060\004\000\002\060\005\000\002\060\003\000\002\060" +
    "\012\000\002\060\004\000\002\060\004\000\002\060\004" +
    "\000\002\060\005\000\002\060\006\000\002\060\005\000" +
    "\002\060\006\000\002\060\005\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\062\012\000\002\062" +
    "\015\000\002\062\015\000\002\062\013\000\002\103\011" +
    "\000\002\103\003\000\002\103\004\000\002\103\005\000" +
    "\002\103\003\000\002\103\012\000\002\103\004\000\002" +
    "\103\004\000\002\103\004\000\002\103\005\000\002\103" +
    "\006\000\002\103\005\000\002\103\006\000\002\103\005" +
    "\000\002\063\010\000\002\063\010\000\002\112\007\000" +
    "\002\112\010\000\002\064\011\000\002\065\011\000\002" +
    "\065\003\000\002\065\003\000\002\065\004\000\002\065" +
    "\005\000\002\065\012\000\002\065\004\000\002\065\004" +
    "\000\002\065\004\000\002\065\005\000\002\065\006\000" +
    "\002\065\006\000\002\065\006\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\066\011\000\002\067" +
    "\011\000\002\067\003\000\002\067\004\000\002\067\005" +
    "\000\002\067\003\000\002\067\012\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\005\000\002" +
    "\067\006\000\002\067\006\000\002\067\005\000\002\067" +
    "\005\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\071\010\000\002\071\012\000\002\071\013\000" +
    "\002\071\010\000\002\071\013\000\002\104\011\000\002" +
    "\104\003\000\002\104\004\000\002\104\005\000\002\104" +
    "\003\000\002\104\012\000\002\104\004\000\002\104\004" +
    "\000\002\104\004\000\002\104\005\000\002\104\006\000" +
    "\002\104\006\000\002\104\005\000\002\104\005\000\002" +
    "\074\010\000\002\074\010\000\002\105\007\000\002\105" +
    "\010\000\002\072\017\000\002\073\011\000\002\073\003" +
    "\000\002\073\003\000\002\073\004\000\002\073\005\000" +
    "\002\073\012\000\002\073\004\000\002\073\004\000\002" +
    "\073\004\000\002\073\005\000\002\073\006\000\002\073" +
    "\006\000\002\073\006\000\002\073\005\000\002\073\005" +
    "\000\002\073\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0344\000\004\004\004\001\002\000\006\017\u0340\051" +
    "\u033e\001\002\000\004\002\u033d\001\002\000\004\006\007" +
    "\001\002\000\004\007\012\001\002\000\006\002\000\100" +
    "\011\001\002\000\004\002\uffff\001\002\000\004\051\013" +
    "\001\002\000\006\100\015\102\014\001\002\000\004\100" +
    "\u0339\001\002\000\010\006\017\033\020\102\016\001\002" +
    "\000\004\100\u0337\001\002\000\006\010\031\025\u032b\001" +
    "\002\000\004\030\u022c\001\002\000\006\013\ufff6\100\u022a" +
    "\001\002\000\006\006\025\100\u0228\001\002\000\004\013" +
    "\u0225\001\002\000\006\006\025\100\027\001\002\000\004" +
    "\010\031\001\002\000\004\013\ufff4\001\002\000\010\006" +
    "\017\033\020\102\016\001\002\000\004\013\ufff2\001\002" +
    "\000\006\051\033\103\032\001\002\000\004\073\u0218\001" +
    "\002\000\004\073\034\001\002\000\006\051\037\106\035" +
    "\001\002\000\004\051\u0213\001\002\000\004\074\051\001" +
    "\002\000\004\022\040\001\002\000\014\014\044\015\043" +
    "\016\046\046\045\051\042\001\002\000\006\074\ufef4\104" +
    "\047\001\002\000\014\054\uffa9\074\uffa9\100\uffa9\102\uffa9" +
    "\104\uffa9\001\002\000\014\054\uffac\074\uffac\100\uffac\102" +
    "\uffac\104\uffac\001\002\000\014\054\uffab\074\uffab\100\uffab" +
    "\102\uffab\104\uffab\001\002\000\014\054\uffaa\074\uffaa\100" +
    "\uffaa\102\uffaa\104\uffaa\001\002\000\014\054\uffad\074\uffad" +
    "\100\uffad\102\uffad\104\uffad\001\002\000\006\051\037\106" +
    "\035\001\002\000\004\074\ufef3\001\002\000\006\100\053" +
    "\102\052\001\002\000\004\100\u020f\001\002\000\022\005" +
    "\056\011\065\012\063\020\062\023\074\035\055\051\072" +
    "\102\066\001\002\000\032\005\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\020\uffa3\023\uffa3\027\uffa3\035\uffa3\051\uffa3\100\uffa3" +
    "\102\uffa3\107\uffa3\001\002\000\004\010\u020c\001\002\000" +
    "\016\042\103\043\104\051\111\060\100\065\106\073\101" +
    "\001\002\000\032\005\uffa1\011\uffa1\012\uffa1\013\uffa1\020" +
    "\uffa1\023\uffa1\027\uffa1\035\uffa1\051\uffa1\100\uffa1\102\uffa1" +
    "\107\uffa1\001\002\000\006\100\u01d4\102\u01d3\001\002\000" +
    "\032\005\uffa2\011\uffa2\012\uffa2\013\uffa2\020\uffa2\023\uffa2" +
    "\027\uffa2\035\uffa2\051\uffa2\100\uffa2\102\uffa2\107\uffa2\001" +
    "\002\000\004\070\u01cc\001\002\000\004\051\u01bc\001\002" +
    "\000\004\100\u01ba\001\002\000\004\051\u0198\001\002\000" +
    "\004\100\u0196\001\002\000\004\100\u0194\001\002\000\024" +
    "\005\056\011\065\012\063\013\uffe9\020\062\023\074\035" +
    "\055\051\072\102\066\001\002\000\004\013\u0191\001\002" +
    "\000\022\042\103\043\104\051\143\054\132\060\100\065" +
    "\141\070\131\073\u018d\001\002\000\024\005\056\011\065" +
    "\012\063\013\uffea\020\062\023\074\035\055\051\072\102" +
    "\066\001\002\000\006\024\077\036\076\001\002\000\016" +
    "\042\103\043\104\051\111\060\100\065\106\073\101\001" +
    "\002\000\016\042\uffa0\043\uffa0\051\uffa0\060\uffa0\065\uffa0" +
    "\073\uffa0\001\002\000\016\042\uff9f\043\uff9f\051\uff9f\060" +
    "\uff9f\065\uff9f\073\uff9f\001\002\000\004\065\u018b\001\002" +
    "\000\004\065\u0187\001\002\000\010\054\u015b\055\u015d\056" +
    "\u015c\001\002\000\024\026\uffa5\054\uffa5\055\uffa5\056\uffa5" +
    "\074\uffa5\100\uffa5\101\uffa5\102\uffa5\104\uffa5\001\002\000" +
    "\024\026\uffa4\054\uffa4\055\uffa4\056\uffa4\074\uffa4\100\uffa4" +
    "\101\uffa4\102\uffa4\104\uffa4\001\002\000\010\054\u015b\055" +
    "\u015d\056\u015c\001\002\000\036\026\uffdc\045\u0174\054\uffdc" +
    "\055\uffdc\056\uffdc\057\u0171\060\u0172\061\u0176\062\u0177\063" +
    "\u0175\074\uffdc\100\uffdc\101\uffdc\102\uffdc\001\002\000\010" +
    "\054\u015b\055\u015d\056\u015c\001\002\000\010\054\u015b\055" +
    "\u015d\056\u015c\001\002\000\012\054\u015b\055\u015d\056\u015c" +
    "\073\133\001\002\000\004\100\113\001\002\000\022\005" +
    "\116\011\123\012\063\020\120\023\074\035\115\051\130" +
    "\102\125\001\002\000\032\005\uff29\011\uff29\012\uff29\013" +
    "\uff29\020\uff29\023\uff29\027\uff29\034\uff29\035\uff29\051\uff29" +
    "\102\uff29\107\uff29\001\002\000\004\023\u0158\001\002\000" +
    "\016\042\103\043\104\051\111\060\100\065\106\073\101" +
    "\001\002\000\032\005\uff27\011\uff27\012\uff27\013\uff27\020" +
    "\uff27\023\uff27\027\uff27\034\uff27\035\uff27\051\uff27\102\uff27" +
    "\107\uff27\001\002\000\004\070\u0119\001\002\000\004\034" +
    "\u0117\001\002\000\024\005\116\011\123\012\063\020\120" +
    "\023\074\034\uff33\035\115\051\130\102\125\001\002\000" +
    "\004\051\200\001\002\000\004\100\176\001\002\000\004" +
    "\100\174\001\002\000\032\005\uff28\011\uff28\012\uff28\013" +
    "\uff28\020\uff28\023\uff28\027\uff28\034\uff28\035\uff28\051\uff28" +
    "\102\uff28\107\uff28\001\002\000\024\005\116\011\123\012" +
    "\063\020\120\023\074\034\uff34\035\115\051\130\102\125" +
    "\001\002\000\010\054\132\070\131\073\133\001\002\000" +
    "\004\051\163\001\002\000\020\042\103\043\104\051\160" +
    "\060\100\064\161\065\106\073\101\001\002\000\020\042" +
    "\103\043\104\051\143\060\100\065\141\073\135\074\134" +
    "\001\002\000\016\026\uff01\054\uff01\055\uff01\056\uff01\100" +
    "\uff01\102\uff01\001\002\000\014\042\103\043\104\051\143" +
    "\060\100\065\141\001\002\000\016\026\uff00\054\uff00\055" +
    "\uff00\056\uff00\100\uff00\102\uff00\001\002\000\006\074\ufefa" +
    "\104\ufefa\001\002\000\006\074\ufef9\104\ufef9\001\002\000" +
    "\014\037\uffdc\047\uffdc\074\uffdc\100\uffdc\104\uffdc\001\002" +
    "\000\006\074\145\104\144\001\002\000\006\074\ufefb\104" +
    "\ufefb\001\002\000\016\042\103\043\104\051\143\060\100" +
    "\065\141\073\135\001\002\000\016\026\ufeff\054\ufeff\055" +
    "\ufeff\056\ufeff\100\ufeff\102\ufeff\001\002\000\016\026\ufefe" +
    "\054\ufefe\055\ufefe\056\ufefe\100\ufefe\102\ufefe\001\002\000" +
    "\004\074\150\001\002\000\006\074\152\104\151\001\002" +
    "\000\016\042\103\043\104\051\143\060\100\065\141\073" +
    "\135\001\002\000\016\026\ufefc\054\ufefc\055\ufefc\056\ufefc" +
    "\100\ufefc\102\ufefc\001\002\000\016\026\ufefd\054\ufefd\055" +
    "\ufefd\056\ufefd\100\ufefd\102\ufefd\001\002\000\006\100\uffb9" +
    "\102\uffb9\001\002\000\006\100\uffba\102\uffba\001\002\000" +
    "\006\100\uffbc\102\uffbc\001\002\000\006\100\uffbb\102\uffbb" +
    "\001\002\000\010\073\133\100\uffbd\102\uffbd\001\002\000" +
    "\004\100\162\001\002\000\006\100\uffb8\102\uffb8\001\002" +
    "\000\004\054\164\001\002\000\020\042\103\043\104\051" +
    "\171\060\100\064\172\065\106\073\101\001\002\000\006" +
    "\100\uffb3\102\uffb3\001\002\000\006\100\uffb4\102\uffb4\001" +
    "\002\000\006\100\uffb6\102\uffb6\001\002\000\006\100\uffb5" +
    "\102\uffb5\001\002\000\010\073\133\100\uffb7\102\uffb7\001" +
    "\002\000\006\100\uffb2\102\uffb2\001\002\000\004\034\uff2f" +
    "\001\002\000\024\005\116\011\123\012\063\020\120\023" +
    "\074\034\uff32\035\115\051\130\102\125\001\002\000\004" +
    "\034\uff31\001\002\000\024\005\116\011\123\012\063\020" +
    "\120\023\074\034\uff2d\035\115\051\130\102\125\001\002" +
    "\000\004\034\uff2c\001\002\000\004\054\201\001\002\000" +
    "\006\060\100\065\141\001\002\000\004\037\203\001\002" +
    "\000\006\060\100\065\141\001\002\000\004\047\205\001" +
    "\002\000\006\060\100\065\141\001\002\000\004\100\207" +
    "\001\002\000\022\005\212\011\065\012\063\020\213\023" +
    "\222\035\211\051\130\102\216\001\002\000\024\005\212" +
    "\011\065\012\063\020\213\023\222\032\uff0b\035\211\051" +
    "\130\102\216\001\002\000\006\011\u0110\023\u010f\001\002" +
    "\000\016\042\103\043\104\051\111\060\100\065\106\073" +
    "\101\001\002\000\004\070\316\001\002\000\032\005\uff5d" +
    "\011\uff5d\012\uff5d\013\uff5d\020\uff5d\023\uff5d\027\uff5d\032" +
    "\uff5d\035\uff5d\051\uff5d\102\uff5d\107\uff5d\001\002\000\004" +
    "\100\314\001\002\000\004\100\312\001\002\000\032\005" +
    "\uff5e\011\uff5e\012\uff5e\013\uff5e\020\uff5e\023\uff5e\027\uff5e" +
    "\032\uff5e\035\uff5e\051\uff5e\102\uff5e\107\uff5e\001\002\000" +
    "\004\032\307\001\002\000\024\005\212\011\065\012\063" +
    "\020\213\023\222\032\uff0e\035\211\051\130\102\216\001" +
    "\002\000\006\024\077\036\076\001\002\000\032\005\uff5c" +
    "\011\uff5c\012\uff5c\013\uff5c\020\uff5c\023\uff5c\027\uff5c\032" +
    "\uff5c\035\uff5c\051\uff5c\102\uff5c\107\uff5c\001\002\000\016" +
    "\042\103\043\104\051\111\060\100\065\106\073\101\001" +
    "\002\000\004\100\226\001\002\000\022\005\116\011\123" +
    "\012\063\020\230\023\074\035\227\051\130\102\233\001" +
    "\002\000\006\011\301\023\300\001\002\000\004\070\246" +
    "\001\002\000\024\005\116\011\123\012\063\020\230\023" +
    "\074\034\uff42\035\227\051\130\102\233\001\002\000\004" +
    "\100\243\001\002\000\004\100\241\001\002\000\024\005" +
    "\116\011\123\012\063\020\230\023\074\034\uff43\035\227" +
    "\051\130\102\233\001\002\000\004\034\236\001\002\000" +
    "\004\100\237\001\002\000\032\005\uff45\011\uff45\012\uff45" +
    "\013\uff45\020\uff45\023\uff45\027\uff45\032\uff45\035\uff45\051" +
    "\uff45\102\uff45\107\uff45\001\002\000\004\034\uff3e\001\002" +
    "\000\024\005\116\011\123\012\063\020\230\023\074\034" +
    "\uff41\035\227\051\130\102\233\001\002\000\004\034\uff40" +
    "\001\002\000\024\005\116\011\123\012\063\020\230\023" +
    "\074\034\uff3c\035\227\051\130\102\233\001\002\000\004" +
    "\034\uff3b\001\002\000\004\034\uff3d\001\002\000\004\021" +
    "\247\001\002\000\004\073\250\001\002\000\020\042\103" +
    "\043\104\051\255\060\100\064\256\065\106\073\101\001" +
    "\002\000\006\074\uffd8\101\276\001\002\000\006\074\uffd9" +
    "\101\274\001\002\000\004\074\271\001\002\000\006\074" +
    "\uffd5\101\267\001\002\000\010\070\261\074\uffd7\101\262" +
    "\001\002\000\006\074\uffda\101\257\001\002\000\020\042" +
    "\103\043\104\051\255\060\100\064\256\065\106\073\101" +
    "\001\002\000\004\074\uffd4\001\002\000\004\051\264\001" +
    "\002\000\020\042\103\043\104\051\255\060\100\064\256" +
    "\065\106\073\101\001\002\000\004\074\uffd0\001\002\000" +
    "\006\074\uffd6\101\265\001\002\000\020\042\103\043\104" +
    "\051\255\060\100\064\256\065\106\073\101\001\002\000" +
    "\004\074\uffcf\001\002\000\020\042\103\043\104\051\255" +
    "\060\100\064\256\065\106\073\101\001\002\000\004\074" +
    "\uffd2\001\002\000\004\100\272\001\002\000\024\005\116" +
    "\011\123\012\063\020\230\023\074\034\uff44\035\227\051" +
    "\130\102\233\001\002\000\004\034\uff3f\001\002\000\020" +
    "\042\103\043\104\051\255\060\100\064\256\065\106\073" +
    "\101\001\002\000\004\074\uffd3\001\002\000\020\042\103" +
    "\043\104\051\255\060\100\064\256\065\106\073\101\001" +
    "\002\000\004\074\uffd1\001\002\000\004\100\304\001\002" +
    "\000\004\100\302\001\002\000\024\005\116\011\123\012" +
    "\063\020\230\023\074\034\uff37\035\227\051\130\102\233" +
    "\001\002\000\004\034\uff39\001\002\000\024\005\116\011" +
    "\123\012\063\020\230\023\074\034\uff38\035\227\051\130" +
    "\102\233\001\002\000\004\034\uff3a\001\002\000\004\032" +
    "\uff09\001\002\000\004\051\310\001\002\000\004\100\311" +
    "\001\002\000\032\005\uff10\011\uff10\012\uff10\013\uff10\020" +
    "\uff10\023\uff10\027\uff10\034\uff10\035\uff10\051\uff10\102\uff10" +
    "\107\uff10\001\002\000\024\005\212\011\065\012\063\020" +
    "\213\023\222\032\uff0d\035\211\051\130\102\216\001\002" +
    "\000\004\032\uff0c\001\002\000\024\005\212\011\065\012" +
    "\063\020\213\023\222\032\uff07\035\211\051\130\102\216" +
    "\001\002\000\004\032\uff06\001\002\000\004\021\317\001" +
    "\002\000\004\073\320\001\002\000\020\042\103\043\104" +
    "\051\255\060\100\064\256\065\106\073\101\001\002\000" +
    "\004\074\322\001\002\000\004\100\323\001\002\000\024" +
    "\005\212\011\065\012\063\020\213\023\222\032\uff0f\035" +
    "\211\051\130\102\216\001\002\000\004\032\uff0a\001\002" +
    "\000\004\026\326\001\002\000\004\100\327\001\002\000" +
    "\022\005\212\011\065\012\063\020\332\023\222\035\331" +
    "\051\130\102\334\001\002\000\030\005\212\011\065\012" +
    "\063\013\uff59\020\332\023\222\027\uff59\035\331\051\130" +
    "\102\334\107\uff59\001\002\000\006\010\u0108\011\u0109\001" +
    "\002\000\004\070\u0101\001\002\000\004\100\377\001\002" +
    "\000\004\100\375\001\002\000\010\013\345\027\343\107" +
    "\341\001\002\000\030\005\212\011\065\012\063\013\uff5a" +
    "\020\332\023\222\027\uff5a\035\331\051\130\102\334\107" +
    "\uff5a\001\002\000\010\013\uff57\027\uff57\107\uff57\001\002" +
    "\000\016\042\103\043\104\051\111\060\100\065\106\073" +
    "\101\001\002\000\016\042\uff9d\043\uff9d\051\uff9d\060\uff9d" +
    "\065\uff9d\073\uff9d\001\002\000\004\013\363\001\002\000" +
    "\006\005\355\100\356\001\002\000\004\100\350\001\002" +
    "\000\004\005\346\001\002\000\004\100\347\001\002\000" +
    "\032\005\uff4d\011\uff4d\012\uff4d\013\uff4d\020\uff4d\023\uff4d" +
    "\027\uff4d\032\uff4d\035\uff4d\051\uff4d\102\uff4d\107\uff4d\001" +
    "\002\000\022\005\212\011\065\012\063\020\332\023\222" +
    "\035\331\051\130\102\334\001\002\000\004\013\352\001" +
    "\002\000\004\005\353\001\002\000\004\100\354\001\002" +
    "\000\032\005\uff4b\011\uff4b\012\uff4b\013\uff4b\020\uff4b\023" +
    "\uff4b\027\uff4b\032\uff4b\035\uff4b\051\uff4b\102\uff4b\107\uff4b" +
    "\001\002\000\016\042\uff9e\043\uff9e\051\uff9e\060\uff9e\065" +
    "\uff9e\073\uff9e\001\002\000\022\005\212\011\065\012\063" +
    "\020\332\023\222\035\331\051\130\102\334\001\002\000" +
    "\004\013\360\001\002\000\004\005\361\001\002\000\004" +
    "\100\362\001\002\000\032\005\uff4c\011\uff4c\012\uff4c\013" +
    "\uff4c\020\uff4c\023\uff4c\027\uff4c\032\uff4c\035\uff4c\051\uff4c" +
    "\102\uff4c\107\uff4c\001\002\000\004\005\364\001\002\000" +
    "\004\100\365\001\002\000\032\005\uff4a\011\uff4a\012\uff4a" +
    "\013\uff4a\020\uff4a\023\uff4a\027\uff4a\032\uff4a\035\uff4a\051" +
    "\uff4a\102\uff4a\107\uff4a\001\002\000\004\026\367\001\002" +
    "\000\004\100\370\001\002\000\022\005\212\011\065\012" +
    "\063\020\332\023\222\035\331\051\130\102\334\001\002" +
    "\000\010\013\uff47\027\373\107\341\001\002\000\004\013" +
    "\uff46\001\002\000\006\005\355\100\uff49\001\002\000\004" +
    "\100\uff48\001\002\000\030\005\212\011\065\012\063\013" +
    "\uff56\020\332\023\222\027\uff56\035\331\051\130\102\334" +
    "\107\uff56\001\002\000\010\013\uff55\027\uff55\107\uff55\001" +
    "\002\000\030\005\212\011\065\012\063\013\uff53\020\332" +
    "\023\222\027\uff53\035\331\051\130\102\334\107\uff53\001" +
    "\002\000\010\013\uff52\027\uff52\107\uff52\001\002\000\004" +
    "\021\u0102\001\002\000\004\073\u0103\001\002\000\020\042" +
    "\103\043\104\051\255\060\100\064\256\065\106\073\101" +
    "\001\002\000\004\074\u0105\001\002\000\004\100\u0106\001" +
    "\002\000\030\005\212\011\065\012\063\013\uff5b\020\332" +
    "\023\222\027\uff5b\035\331\051\130\102\334\107\uff5b\001" +
    "\002\000\010\013\uff58\027\uff58\107\uff58\001\002\000\004" +
    "\100\u010c\001\002\000\004\100\u010a\001\002\000\030\005" +
    "\212\011\065\012\063\013\uff4f\020\332\023\222\027\uff4f" +
    "\035\331\051\130\102\334\107\uff4f\001\002\000\010\013" +
    "\uff51\027\uff51\107\uff51\001\002\000\030\005\212\011\065" +
    "\012\063\013\uff4e\020\332\023\222\027\uff4e\035\331\051" +
    "\130\102\334\107\uff4e\001\002\000\010\013\uff50\027\uff50" +
    "\107\uff50\001\002\000\010\013\uff54\027\uff54\107\uff54\001" +
    "\002\000\004\100\u0113\001\002\000\004\100\u0111\001\002" +
    "\000\024\005\212\011\065\012\063\020\213\023\222\032" +
    "\uff03\035\211\051\130\102\216\001\002\000\004\032\uff05" +
    "\001\002\000\024\005\212\011\065\012\063\020\213\023" +
    "\222\032\uff02\035\211\051\130\102\216\001\002\000\004" +
    "\032\uff04\001\002\000\004\032\uff08\001\002\000\004\034" +
    "\uff2e\001\002\000\004\100\u0118\001\002\000\034\005\uff36" +
    "\011\uff36\012\uff36\013\uff36\020\uff36\023\uff36\027\uff36\034" +
    "\uff36\035\uff36\051\uff36\100\uff36\102\uff36\107\uff36\001\002" +
    "\000\004\021\u011a\001\002\000\004\073\u011b\001\002\000" +
    "\020\042\103\043\104\051\255\060\100\064\256\065\106" +
    "\073\101\001\002\000\004\074\u011d\001\002\000\004\100" +
    "\u011e\001\002\000\024\005\116\011\123\012\063\020\120" +
    "\023\074\034\uff35\035\115\051\130\102\125\001\002\000" +
    "\004\034\uff30\001\002\000\004\026\u0121\001\002\000\004" +
    "\100\u0122\001\002\000\022\005\116\011\123\012\063\020" +
    "\u0124\023\074\035\u0123\051\130\102\u0127\001\002\000\006" +
    "\010\u0153\023\u0152\001\002\000\004\070\u014b\001\002\000" +
    "\030\005\116\011\123\012\063\013\uff24\020\u0124\023\074" +
    "\027\uff24\035\u0123\051\130\102\u0127\107\uff24\001\002\000" +
    "\004\100\u0148\001\002\000\004\100\u0146\001\002\000\010" +
    "\013\u012f\027\u012c\107\341\001\002\000\030\005\116\011" +
    "\123\012\063\013\uff25\020\u0124\023\074\027\uff25\035\u0123" +
    "\051\130\102\u0127\107\uff25\001\002\000\010\013\uff20\027" +
    "\uff20\107\uff20\001\002\000\016\042\103\043\104\051\111" +
    "\060\100\065\106\073\101\001\002\000\006\005\355\100" +
    "\u013a\001\002\000\004\100\u0135\001\002\000\004\013\u0132" +
    "\001\002\000\004\005\u0130\001\002\000\004\100\u0131\001" +
    "\002\000\032\005\uff18\011\uff18\012\uff18\013\uff18\020\uff18" +
    "\023\uff18\027\uff18\034\uff18\035\uff18\051\uff18\102\uff18\107" +
    "\uff18\001\002\000\004\005\u0133\001\002\000\004\100\u0134" +
    "\001\002\000\032\005\uff15\011\uff15\012\uff15\013\uff15\020" +
    "\uff15\023\uff15\027\uff15\034\uff15\035\uff15\051\uff15\102\uff15" +
    "\107\uff15\001\002\000\022\005\116\011\123\012\063\020" +
    "\u0124\023\074\035\u0123\051\130\102\u0127\001\002\000\004" +
    "\013\u0137\001\002\000\004\005\u0138\001\002\000\004\100" +
    "\u0139\001\002\000\032\005\uff16\011\uff16\012\uff16\013\uff16" +
    "\020\uff16\023\uff16\027\uff16\034\uff16\035\uff16\051\uff16\102" +
    "\uff16\107\uff16\001\002\000\022\005\116\011\123\012\063" +
    "\020\u0124\023\074\035\u0123\051\130\102\u0127\001\002\000" +
    "\004\013\u013c\001\002\000\004\005\u013d\001\002\000\004" +
    "\100\u013e\001\002\000\032\005\uff17\011\uff17\012\uff17\013" +
    "\uff17\020\uff17\023\uff17\027\uff17\034\uff17\035\uff17\051\uff17" +
    "\102\uff17\107\uff17\001\002\000\004\026\u0140\001\002\000" +
    "\004\100\u0141\001\002\000\022\005\116\011\123\012\063" +
    "\020\u0124\023\074\035\u0123\051\130\102\u0127\001\002\000" +
    "\010\013\uff12\027\u0143\107\341\001\002\000\006\005\355" +
    "\100\uff14\001\002\000\004\100\uff13\001\002\000\004\013" +
    "\uff11\001\002\000\030\005\116\011\123\012\063\013\uff23" +
    "\020\u0124\023\074\027\uff23\035\u0123\051\130\102\u0127\107" +
    "\uff23\001\002\000\010\013\uff22\027\uff22\107\uff22\001\002" +
    "\000\030\005\116\011\123\012\063\013\uff1e\020\u0124\023" +
    "\074\027\uff1e\035\u0123\051\130\102\u0127\107\uff1e\001\002" +
    "\000\010\013\uff1d\027\uff1d\107\uff1d\001\002\000\010\013" +
    "\uff1f\027\uff1f\107\uff1f\001\002\000\004\021\u014c\001\002" +
    "\000\004\073\u014d\001\002\000\020\042\103\043\104\051" +
    "\255\060\100\064\256\065\106\073\101\001\002\000\004" +
    "\074\u014f\001\002\000\004\100\u0150\001\002\000\030\005" +
    "\116\011\123\012\063\013\uff26\020\u0124\023\074\027\uff26" +
    "\035\u0123\051\130\102\u0127\107\uff26\001\002\000\010\013" +
    "\uff21\027\uff21\107\uff21\001\002\000\004\100\u0156\001\002" +
    "\000\004\100\u0154\001\002\000\030\005\116\011\123\012" +
    "\063\013\uff19\020\u0124\023\074\027\uff19\035\u0123\051\130" +
    "\102\u0127\107\uff19\001\002\000\010\013\uff1b\027\uff1b\107" +
    "\uff1b\001\002\000\030\005\116\011\123\012\063\013\uff1a" +
    "\020\u0124\023\074\027\uff1a\035\u0123\051\130\102\u0127\107" +
    "\uff1a\001\002\000\010\013\uff1c\027\uff1c\107\uff1c\001\002" +
    "\000\004\100\u0159\001\002\000\024\005\116\011\123\012" +
    "\063\020\120\023\074\034\uff2a\035\115\051\130\102\125" +
    "\001\002\000\004\034\uff2b\001\002\000\016\042\uff6e\043" +
    "\uff6e\051\uff6e\060\uff6e\065\uff6e\073\uff6e\001\002\000\020" +
    "\042\uff6c\043\uff6c\051\uff6c\054\u0165\060\uff6c\065\uff6c\073" +
    "\uff6c\001\002\000\020\042\uff6d\043\uff6d\051\uff6d\054\u0164" +
    "\060\uff6d\065\uff6d\073\uff6d\001\002\000\016\042\103\043" +
    "\104\051\u0163\060\100\065\106\073\101\001\002\000\006" +
    "\026\uff86\100\uff86\001\002\000\006\026\uff87\100\uff87\001" +
    "\002\000\006\026\uff77\100\uff77\001\002\000\006\026\uff85" +
    "\100\uff85\001\002\000\010\026\uff88\073\133\100\uff88\001" +
    "\002\000\016\042\uff70\043\uff70\051\uff70\060\uff70\065\uff70" +
    "\073\uff70\001\002\000\016\042\uff6f\043\uff6f\051\uff6f\060" +
    "\uff6f\065\uff6f\073\uff6f\001\002\000\016\042\103\043\104" +
    "\051\u016b\060\100\065\106\073\101\001\002\000\006\026" +
    "\uff81\100\uff81\001\002\000\006\026\uff84\100\uff84\001\002" +
    "\000\006\026\uff75\100\uff75\001\002\000\006\026\uff83\100" +
    "\uff83\001\002\000\010\026\uff82\073\133\100\uff82\001\002" +
    "\000\016\042\103\043\104\051\u0170\060\100\065\106\073" +
    "\101\001\002\000\006\026\uff74\100\uff74\001\002\000\006" +
    "\026\uff72\100\uff72\001\002\000\006\026\uff71\100\uff71\001" +
    "\002\000\006\026\uff73\100\uff73\001\002\000\006\065\uffcc" +
    "\073\uffcc\001\002\000\006\065\uffcb\073\uffcb\001\002\000" +
    "\006\065\u0178\073\101\001\002\000\006\065\uffc7\073\uffc7" +
    "\001\002\000\006\065\uffc8\073\uffc8\001\002\000\006\065" +
    "\uffca\073\uffca\001\002\000\006\065\uffc9\073\uffc9\001\002" +
    "\000\036\026\uffc6\045\u0174\054\uffc6\055\uffc6\056\uffc6\057" +
    "\u0171\060\u0172\061\u0176\062\u0177\063\u0175\074\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\001\002\000\022\026\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\074\uffc5\100\uffc5\101\uffc5\102\uffc5\001\002" +
    "\000\022\026\uffce\054\uffce\055\uffce\056\uffce\074\uffce\100" +
    "\uffce\101\uffce\102\uffce\001\002\000\016\042\103\043\104" +
    "\051\u0180\060\100\065\106\073\101\001\002\000\006\026" +
    "\uff79\100\uff79\001\002\000\006\026\uff7c\100\uff7c\001\002" +
    "\000\006\026\uff76\100\uff76\001\002\000\006\026\uff7a\100" +
    "\uff7a\001\002\000\010\026\uff7b\073\133\100\uff7b\001\002" +
    "\000\016\042\103\043\104\051\u0186\060\100\065\106\073" +
    "\101\001\002\000\006\026\uff80\100\uff80\001\002\000\006" +
    "\026\uff7f\100\uff7f\001\002\000\006\026\uff78\100\uff78\001" +
    "\002\000\006\026\uff7d\100\uff7d\001\002\000\010\026\uff7e" +
    "\073\133\100\uff7e\001\002\000\016\045\u0174\057\u0171\060" +
    "\u0172\061\u0176\062\u0177\063\u0175\001\002\000\006\065\u0178" +
    "\073\101\001\002\000\004\074\u018a\001\002\000\022\026" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\074\uffcd\100\uffcd\101\uffcd" +
    "\102\uffcd\001\002\000\030\026\uffdb\037\uffdb\047\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\074\uffdb\100\uffdb\101\uffdb\102\uffdb" +
    "\104\uffdb\001\002\000\004\013\uffe4\001\002\000\020\042" +
    "\103\043\104\051\143\060\100\065\141\073\135\074\134" +
    "\001\002\000\004\100\uffdd\001\002\000\006\074\u0190\104" +
    "\144\001\002\000\010\074\152\100\ufeff\104\151\001\002" +
    "\000\004\010\u0192\001\002\000\006\013\uffee\100\uffee\001" +
    "\002\000\004\013\uffe3\001\002\000\024\005\056\011\065" +
    "\012\063\013\uffe1\020\062\023\074\035\055\051\072\102" +
    "\066\001\002\000\004\013\uffe0\001\002\000\024\005\056" +
    "\011\065\012\063\013\uffe8\020\062\023\074\035\055\051" +
    "\072\102\066\001\002\000\004\013\uffe7\001\002\000\004" +
    "\054\u0199\001\002\000\006\060\100\065\141\001\002\000" +
    "\004\037\u019b\001\002\000\006\060\100\065\141\001\002" +
    "\000\004\047\u019d\001\002\000\006\060\100\065\141\001" +
    "\002\000\004\100\u019f\001\002\000\022\005\212\011\065" +
    "\012\063\020\u01a3\023\222\035\u01a1\051\130\102\u01a5\001" +
    "\002\000\024\005\212\011\065\012\063\020\u01a3\023\222" +
    "\032\uff68\035\u01a1\051\130\102\u01a5\001\002\000\004\011" +
    "\u01b6\001\002\000\004\032\u01b3\001\002\000\004\070\u01ac" +
    "\001\002\000\004\100\u01aa\001\002\000\004\100\u01a8\001" +
    "\002\000\024\005\212\011\065\012\063\020\u01a3\023\222" +
    "\032\uff69\035\u01a1\051\130\102\u01a5\001\002\000\004\032" +
    "\uff66\001\002\000\024\005\212\011\065\012\063\020\u01a3" +
    "\023\222\032\uff65\035\u01a1\051\130\102\u01a5\001\002\000" +
    "\004\032\uff64\001\002\000\024\005\212\011\065\012\063" +
    "\020\u01a3\023\222\032\uff62\035\u01a1\051\130\102\u01a5\001" +
    "\002\000\004\032\uff61\001\002\000\004\021\u01ad\001\002" +
    "\000\004\073\u01ae\001\002\000\020\042\103\043\104\051" +
    "\255\060\100\064\256\065\106\073\101\001\002\000\004" +
    "\074\u01b0\001\002\000\004\100\u01b1\001\002\000\024\005" +
    "\212\011\065\012\063\020\u01a3\023\222\032\uff6a\035\u01a1" +
    "\051\130\102\u01a5\001\002\000\004\032\uff67\001\002\000" +
    "\004\051\u01b4\001\002\000\004\100\u01b5\001\002\000\034" +
    "\005\uff6b\011\uff6b\012\uff6b\013\uff6b\020\uff6b\023\uff6b\027" +
    "\uff6b\032\uff6b\035\uff6b\051\uff6b\100\uff6b\102\uff6b\107\uff6b" +
    "\001\002\000\004\100\u01b7\001\002\000\024\005\212\011" +
    "\065\012\063\020\u01a3\023\222\032\uff5f\035\u01a1\051\130" +
    "\102\u01a5\001\002\000\004\032\uff60\001\002\000\004\032" +
    "\uff63\001\002\000\024\005\056\011\065\012\063\013\uffe6" +
    "\020\062\023\074\035\055\051\072\102\066\001\002\000" +
    "\004\013\uffe2\001\002\000\006\022\u01bd\054\u01be\001\002" +
    "\000\014\014\044\015\043\016\046\046\045\051\042\001" +
    "\002\000\020\042\103\043\104\051\u01c4\060\100\064\u01c5" +
    "\065\106\073\101\001\002\000\006\100\uffa6\102\uffa6\001" +
    "\002\000\006\100\uffa7\102\uffa7\001\002\000\006\100\uffc1" +
    "\102\uffc1\001\002\000\006\100\uffc2\102\uffc2\001\002\000" +
    "\006\100\uffbe\102\uffbe\001\002\000\010\073\133\100\uffb1" +
    "\102\uffb1\001\002\000\006\100\uffa8\102\uffa8\001\002\000" +
    "\010\054\u01c7\100\uffc4\102\uffc4\001\002\000\020\042\103" +
    "\043\104\051\u01cb\060\100\064\u01c5\065\106\073\101\001" +
    "\002\000\006\100\uffc0\102\uffc0\001\002\000\006\100\uffc3" +
    "\102\uffc3\001\002\000\006\100\uffbf\102\uffbf\001\002\000" +
    "\010\073\133\100\uffb0\102\uffb0\001\002\000\004\021\u01cd" +
    "\001\002\000\004\073\u01ce\001\002\000\020\042\103\043" +
    "\104\051\255\060\100\064\256\065\106\073\101\001\002" +
    "\000\004\074\u01d0\001\002\000\004\100\u01d1\001\002\000" +
    "\024\005\056\011\065\012\063\013\uffeb\020\062\023\074" +
    "\035\055\051\072\102\066\001\002\000\004\013\uffe5\001" +
    "\002\000\004\100\u01d5\001\002\000\034\005\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\020\uffaf\023\uffaf\027\uffaf\032\uffaf\034" +
    "\uffaf\035\uffaf\051\uffaf\102\uffaf\107\uffaf\001\002\000\034" +
    "\005\uffae\011\uffae\012\uffae\013\uffae\020\uffae\023\uffae\027" +
    "\uffae\032\uffae\034\uffae\035\uffae\051\uffae\102\uffae\107\uffae" +
    "\001\002\000\004\026\u01d7\001\002\000\004\100\u01d8\001" +
    "\002\000\022\005\056\011\065\012\063\020\u01da\023\074" +
    "\035\u01d9\051\130\102\u01dd\001\002\000\004\010\u0209\001" +
    "\002\000\004\070\u0202\001\002\000\010\013\u01eb\027\u01ea" +
    "\107\341\001\002\000\004\100\u01e5\001\002\000\004\100" +
    "\u01e3\001\002\000\012\013\uff96\027\uff96\100\u01e1\107\uff96" +
    "\001\002\000\030\005\056\011\065\012\063\013\uff97\020" +
    "\u01da\023\074\027\uff97\035\u01d9\051\130\102\u01dd\107\uff97" +
    "\001\002\000\010\013\uff91\027\uff91\107\uff91\001\002\000" +
    "\022\005\056\011\065\012\063\020\u01da\023\074\035\u01d9" +
    "\051\130\102\u01dd\001\002\000\010\013\uff90\027\uff90\107" +
    "\uff90\001\002\000\030\005\056\011\065\012\063\013\uff95" +
    "\020\u01da\023\074\027\uff95\035\u01d9\051\130\102\u01dd\107" +
    "\uff95\001\002\000\010\013\uff94\027\uff94\107\uff94\001\002" +
    "\000\030\005\056\011\065\012\063\013\uff93\020\u01da\023" +
    "\074\027\uff93\035\u01d9\051\130\102\u01dd\107\uff93\001\002" +
    "\000\010\013\uff8f\027\uff8f\107\uff8f\001\002\000\004\013" +
    "\u01ff\001\002\000\016\042\103\043\104\051\111\060\100" +
    "\065\106\073\101\001\002\000\004\100\u01f3\001\002\000" +
    "\006\005\355\100\u01ee\001\002\000\004\005\u01ec\001\002" +
    "\000\004\100\u01ed\001\002\000\032\005\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\020\uff9c\023\uff9c\027\uff9c\035\uff9c\051\uff9c" +
    "\100\uff9c\102\uff9c\107\uff9c\001\002\000\022\005\056\011" +
    "\065\012\063\020\u01da\023\074\035\u01d9\051\130\102\u01dd" +
    "\001\002\000\004\013\u01f0\001\002\000\004\005\u01f1\001" +
    "\002\000\004\100\u01f2\001\002\000\032\005\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\020\uff9b\023\uff9b\027\uff9b\035\uff9b\051" +
    "\uff9b\100\uff9b\102\uff9b\107\uff9b\001\002\000\022\005\056" +
    "\011\065\012\063\020\u01da\023\074\035\u01d9\051\130\102" +
    "\u01dd\001\002\000\004\013\u01f5\001\002\000\004\005\u01f6" +
    "\001\002\000\004\100\u01f7\001\002\000\032\005\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\020\uff9a\023\uff9a\027\uff9a\035\uff9a" +
    "\051\uff9a\100\uff9a\102\uff9a\107\uff9a\001\002\000\004\026" +
    "\u01f9\001\002\000\004\100\u01fa\001\002\000\022\005\056" +
    "\011\065\012\063\020\u01da\023\074\035\u01d9\051\130\102" +
    "\u01dd\001\002\000\010\013\uff89\027\u01fe\107\341\001\002" +
    "\000\004\013\uff8a\001\002\000\004\100\uff8c\001\002\000" +
    "\006\005\355\100\uff8b\001\002\000\004\005\u0200\001\002" +
    "\000\004\100\u0201\001\002\000\032\005\uff99\011\uff99\012" +
    "\uff99\013\uff99\020\uff99\023\uff99\027\uff99\035\uff99\051\uff99" +
    "\100\uff99\102\uff99\107\uff99\001\002\000\004\021\u0203\001" +
    "\002\000\004\073\u0204\001\002\000\020\042\103\043\104" +
    "\051\255\060\100\064\256\065\106\073\101\001\002\000" +
    "\004\074\u0206\001\002\000\004\100\u0207\001\002\000\030" +
    "\005\056\011\065\012\063\013\uff98\020\u01da\023\074\027" +
    "\uff98\035\u01d9\051\130\102\u01dd\107\uff98\001\002\000\010" +
    "\013\uff92\027\uff92\107\uff92\001\002\000\004\100\u020a\001" +
    "\002\000\030\005\056\011\065\012\063\013\uff8d\020\u01da" +
    "\023\074\027\uff8d\035\u01d9\051\130\102\u01dd\107\uff8d\001" +
    "\002\000\010\013\uff8e\027\uff8e\107\uff8e\001\002\000\004" +
    "\100\u020d\001\002\000\024\005\056\011\065\012\063\013" +
    "\uffdf\020\062\023\074\035\055\051\072\102\066\001\002" +
    "\000\004\013\uffde\001\002\000\022\005\056\011\065\012" +
    "\063\020\062\023\074\035\055\051\072\102\066\001\002" +
    "\000\004\013\u0211\001\002\000\004\010\u0212\001\002\000" +
    "\006\013\uffec\100\uffec\001\002\000\004\022\u0214\001\002" +
    "\000\014\014\044\015\043\016\046\046\045\051\042\001" +
    "\002\000\006\074\ufef1\104\u0216\001\002\000\006\051\037" +
    "\106\035\001\002\000\004\074\ufef2\001\002\000\004\074" +
    "\u0219\001\002\000\006\100\u021b\102\u021a\001\002\000\004" +
    "\100\u0220\001\002\000\022\005\056\011\065\012\063\020" +
    "\062\023\074\035\055\051\072\102\066\001\002\000\004" +
    "\013\u021d\001\002\000\004\010\u021e\001\002\000\004\100" +
    "\u021f\001\002\000\006\013\uffef\100\uffef\001\002\000\022" +
    "\005\056\011\065\012\063\020\062\023\074\035\055\051" +
    "\072\102\066\001\002\000\004\013\u0222\001\002\000\004" +
    "\010\u0223\001\002\000\004\100\u0224\001\002\000\006\013" +
    "\uffed\100\uffed\001\002\000\004\007\u0226\001\002\000\006" +
    "\002\ufff8\100\ufff8\001\002\000\004\013\ufff5\001\002\000" +
    "\010\006\017\033\020\102\016\001\002\000\004\013\ufff3" +
    "\001\002\000\010\006\017\033\020\102\016\001\002\000" +
    "\004\013\ufff1\001\002\000\004\051\u022d\001\002\000\004" +
    "\073\u022e\001\002\000\006\051\037\106\035\001\002\000" +
    "\004\074\u0230\001\002\000\004\022\u0231\001\002\000\014" +
    "\014\044\015\043\016\046\046\045\051\042\001\002\000" +
    "\004\100\u0233\001\002\000\022\005\u0235\011\u023a\012\063" +
    "\020\u0238\023\u0240\035\u0234\051\130\102\u023b\001\002\000" +
    "\004\030\u0328\001\002\000\016\042\103\043\104\051\111" +
    "\060\100\065\106\073\101\001\002\000\004\013\u0307\001" +
    "\002\000\032\005\ufee3\011\ufee3\012\ufee3\013\ufee3\020\ufee3" +
    "\023\ufee3\027\ufee3\034\ufee3\035\ufee3\051\ufee3\102\ufee3\107" +
    "\ufee3\001\002\000\004\070\u0300\001\002\000\004\100\u02fe" +
    "\001\002\000\004\051\u02d9\001\002\000\004\100\u02d7\001" +
    "\002\000\032\005\ufee2\011\ufee2\012\ufee2\013\ufee2\020\ufee2" +
    "\023\ufee2\027\ufee2\034\ufee2\035\ufee2\051\ufee2\102\ufee2\107" +
    "\ufee2\001\002\000\032\005\ufee4\011\ufee4\012\ufee4\013\ufee4" +
    "\020\ufee4\023\ufee4\027\ufee4\034\ufee4\035\ufee4\051\ufee4\102" +
    "\ufee4\107\ufee4\001\002\000\024\005\u0235\011\u023a\012\063" +
    "\013\ufeef\020\u0238\023\u0240\035\u0234\051\130\102\u023b\001" +
    "\002\000\024\005\u0235\011\u023a\012\063\013\ufeee\020\u0238" +
    "\023\u0240\035\u0234\051\130\102\u023b\001\002\000\006\024" +
    "\077\036\076\001\002\000\016\042\103\043\104\051\111" +
    "\060\100\065\106\073\101\001\002\000\004\100\u0243\001" +
    "\002\000\022\005\u0247\011\u023a\012\063\020\u024a\023\u024f" +
    "\035\u0245\051\130\102\u024c\001\002\000\034\005\ufebe\011" +
    "\ufebe\012\ufebe\013\ufebe\020\ufebe\023\ufebe\027\ufebe\032\ufebe" +
    "\034\ufebe\035\ufebe\051\ufebe\102\ufebe\107\ufebe\001\002\000" +
    "\006\023\u02cf\030\u02d0\001\002\000\034\005\ufebc\011\ufebc" +
    "\012\ufebc\013\ufebc\020\ufebc\023\ufebc\027\ufebc\032\ufebc\034" +
    "\ufebc\035\ufebc\051\ufebc\102\ufebc\107\ufebc\001\002\000\016" +
    "\042\103\043\104\051\111\060\100\065\106\073\101\001" +
    "\002\000\004\034\u0295\001\002\000\034\005\ufebd\011\ufebd" +
    "\012\ufebd\013\ufebd\020\ufebd\023\ufebd\027\ufebd\032\ufebd\034" +
    "\ufebd\035\ufebd\051\ufebd\102\ufebd\107\ufebd\001\002\000\004" +
    "\070\u028e\001\002\000\004\100\u0276\001\002\000\004\100" +
    "\u0274\001\002\000\024\005\u0247\011\u023a\012\063\020\u024a" +
    "\023\u024f\034\ufe8f\035\u0245\051\130\102\u024c\001\002\000" +
    "\024\005\u0247\011\u023a\012\063\020\u024a\023\u024f\034\ufe92" +
    "\035\u0245\051\130\102\u024c\001\002\000\006\024\077\036" +
    "\076\001\002\000\016\042\103\043\104\051\111\060\100" +
    "\065\106\073\101\001\002\000\004\100\u0252\001\002\000" +
    "\022\005\116\011\123\012\063\020\u0255\023\074\035\u0253" +
    "\051\130\102\u0258\001\002\000\010\011\u026b\023\u0269\030" +
    "\u026a\001\002\000\004\034\u0267\001\002\000\004\070\u0260" +
    "\001\002\000\024\005\116\011\123\012\063\020\120\023" +
    "\074\034\ufea2\035\115\051\130\102\125\001\002\000\004" +
    "\100\u025d\001\002\000\004\100\u025b\001\002\000\024\005" +
    "\116\011\123\012\063\020\120\023\074\034\ufea3\035\115" +
    "\051\130\102\125\001\002\000\004\034\ufe9e\001\002\000" +
    "\024\005\116\011\123\012\063\020\u0255\023\074\034\ufea1" +
    "\035\u0253\051\130\102\u0258\001\002\000\004\034\ufea0\001" +
    "\002\000\024\005\116\011\123\012\063\020\120\023\074" +
    "\034\ufe9c\035\115\051\130\102\125\001\002\000\004\034" +
    "\ufe9b\001\002\000\004\034\ufe9d\001\002\000\004\021\u0261" +
    "\001\002\000\004\073\u0262\001\002\000\020\042\103\043" +
    "\104\051\255\060\100\064\256\065\106\073\101\001\002" +
    "\000\004\074\u0264\001\002\000\004\100\u0265\001\002\000" +
    "\024\005\116\011\123\012\063\020\120\023\074\034\ufea4" +
    "\035\115\051\130\102\125\001\002\000\004\034\ufe9f\001" +
    "\002\000\004\100\u0268\001\002\000\034\005\ufea5\011\ufea5" +
    "\012\ufea5\013\ufea5\020\ufea5\023\ufea5\027\ufea5\032\ufea5\034" +
    "\ufea5\035\ufea5\051\ufea5\102\ufea5\107\ufea5\001\002\000\004" +
    "\100\u0270\001\002\000\004\100\u026e\001\002\000\004\100" +
    "\u026c\001\002\000\024\005\116\011\123\012\063\020\120" +
    "\023\074\034\ufe96\035\115\051\130\102\125\001\002\000" +
    "\004\034\ufe99\001\002\000\024\005\116\011\123\012\063" +
    "\020\120\023\074\034\ufe95\035\115\051\130\102\125\001" +
    "\002\000\004\034\ufe98\001\002\000\024\005\116\011\123" +
    "\012\063\020\120\023\074\034\ufe97\035\115\051\130\102" +
    "\125\001\002\000\004\034\ufe9a\001\002\000\004\034\ufe8d" +
    "\001\002\000\004\034\ufe8c\001\002\000\024\005\u0247\011" +
    "\u023a\012\063\020\u024a\023\u024f\034\ufe91\035\u0245\051\130" +
    "\102\u024c\001\002\000\004\034\ufe90\001\002\000\024\005" +
    "\u0235\011\u023a\012\063\020\u0279\023\u0240\034\ufe8b\035\u0278" +
    "\051\130\102\u027b\001\002\000\004\034\ufe8a\001\002\000" +
    "\004\030\u028b\001\002\000\004\070\u0284\001\002\000\004" +
    "\100\u0282\001\002\000\004\100\u0280\001\002\000\032\005" +
    "\u0235\011\u023a\012\063\013\ufedc\020\u0279\023\u0240\027\ufedc" +
    "\034\ufedc\035\u0278\051\130\102\u027b\107\ufedc\001\002\000" +
    "\032\005\u0235\011\u023a\012\063\013\ufed9\020\u0279\023\u0240" +
    "\027\ufed9\034\ufed9\035\u0278\051\130\102\u027b\107\ufed9\001" +
    "\002\000\012\013\ufed6\027\ufed6\034\ufed6\107\ufed6\001\002" +
    "\000\012\013\ufed7\027\ufed7\034\ufed7\107\ufed7\001\002\000" +
    "\032\005\u0235\011\u023a\012\063\013\ufedb\020\u0279\023\u0240" +
    "\027\ufedb\034\ufedb\035\u0278\051\130\102\u027b\107\ufedb\001" +
    "\002\000\012\013\ufeda\027\ufeda\034\ufeda\107\ufeda\001\002" +
    "\000\032\005\u0235\011\u023a\012\063\013\ufed5\020\u0279\023" +
    "\u0240\027\ufed5\034\ufed5\035\u0278\051\130\102\u027b\107\ufed5" +
    "\001\002\000\012\013\ufed4\027\ufed4\034\ufed4\107\ufed4\001" +
    "\002\000\004\021\u0285\001\002\000\004\073\u0286\001\002" +
    "\000\020\042\103\043\104\051\255\060\100\064\256\065" +
    "\106\073\101\001\002\000\004\074\u0288\001\002\000\004" +
    "\100\u0289\001\002\000\032\005\u0235\011\u023a\012\063\013" +
    "\ufedd\020\u0279\023\u0240\027\ufedd\034\ufedd\035\u0278\051\130" +
    "\102\u027b\107\ufedd\001\002\000\012\013\ufed8\027\ufed8\034" +
    "\ufed8\107\ufed8\001\002\000\004\100\u028c\001\002\000\032" +
    "\005\u0235\011\u023a\012\063\013\ufed2\020\u0279\023\u0240\027" +
    "\ufed2\034\ufed2\035\u0278\051\130\102\u027b\107\ufed2\001\002" +
    "\000\012\013\ufed3\027\ufed3\034\ufed3\107\ufed3\001\002\000" +
    "\004\021\u028f\001\002\000\004\073\u0290\001\002\000\020" +
    "\042\103\043\104\051\255\060\100\064\256\065\106\073" +
    "\101\001\002\000\004\074\u0292\001\002\000\004\100\u0293" +
    "\001\002\000\024\005\u0247\011\u023a\012\063\020\u024a\023" +
    "\u024f\034\ufe93\035\u0245\051\130\102\u024c\001\002\000\004" +
    "\034\ufe8e\001\002\000\004\100\u0296\001\002\000\032\005" +
    "\ufe94\011\ufe94\012\ufe94\013\ufe94\020\ufe94\023\ufe94\027\ufe94" +
    "\034\ufe94\035\ufe94\051\ufe94\102\ufe94\107\ufe94\001\002\000" +
    "\004\026\u0298\001\002\000\004\100\u0299\001\002\000\022" +
    "\005\u0247\011\u023a\012\063\020\u029b\023\u024f\035\u029a\051" +
    "\130\102\u029d\001\002\000\006\011\u02ca\030\u02c9\001\002" +
    "\000\004\070\u02c2\001\002\000\004\100\u02c0\001\002\000" +
    "\004\100\u02be\001\002\000\010\013\u02a7\027\u02a4\107\341" +
    "\001\002\000\030\005\u0247\011\u023a\012\063\013\ufeb3\020" +
    "\u029b\023\u024f\027\ufeb3\035\u029a\051\130\102\u029d\107\ufeb3" +
    "\001\002\000\030\005\u0247\011\u023a\012\063\013\ufeb6\020" +
    "\u029b\023\u024f\027\ufeb6\035\u029a\051\130\102\u029d\107\ufeb6" +
    "\001\002\000\010\013\ufeb1\027\ufeb1\107\ufeb1\001\002\000" +
    "\010\013\ufeb0\027\ufeb0\107\ufeb0\001\002\000\016\042\103" +
    "\043\104\051\111\060\100\065\106\073\101\001\002\000" +
    "\006\005\355\100\u02b2\001\002\000\004\100\u02ad\001\002" +
    "\000\004\013\u02aa\001\002\000\004\005\u02a8\001\002\000" +
    "\004\100\u02a9\001\002\000\034\005\ufebb\011\ufebb\012\ufebb" +
    "\013\ufebb\020\ufebb\023\ufebb\027\ufebb\032\ufebb\034\ufebb\035" +
    "\ufebb\051\ufebb\102\ufebb\107\ufebb\001\002\000\004\005\u02ab" +
    "\001\002\000\004\100\u02ac\001\002\000\034\005\ufeb8\011" +
    "\ufeb8\012\ufeb8\013\ufeb8\020\ufeb8\023\ufeb8\027\ufeb8\032\ufeb8" +
    "\034\ufeb8\035\ufeb8\051\ufeb8\102\ufeb8\107\ufeb8\001\002\000" +
    "\022\005\u0247\011\u023a\012\063\020\u029b\023\u024f\035\u029a" +
    "\051\130\102\u029d\001\002\000\004\013\u02af\001\002\000" +
    "\004\005\u02b0\001\002\000\004\100\u02b1\001\002\000\034" +
    "\005\ufeb9\011\ufeb9\012\ufeb9\013\ufeb9\020\ufeb9\023\ufeb9\027" +
    "\ufeb9\032\ufeb9\034\ufeb9\035\ufeb9\051\ufeb9\102\ufeb9\107\ufeb9" +
    "\001\002\000\022\005\u0247\011\u023a\012\063\020\u029b\023" +
    "\u024f\035\u029a\051\130\102\u029d\001\002\000\004\013\u02b4" +
    "\001\002\000\004\005\u02b5\001\002\000\004\100\u02b6\001" +
    "\002\000\034\005\ufeba\011\ufeba\012\ufeba\013\ufeba\020\ufeba" +
    "\023\ufeba\027\ufeba\032\ufeba\034\ufeba\035\ufeba\051\ufeba\102" +
    "\ufeba\107\ufeba\001\002\000\004\026\u02b8\001\002\000\004" +
    "\100\u02b9\001\002\000\022\005\u0247\011\u023a\012\063\020" +
    "\u029b\023\u024f\035\u029a\051\130\102\u029d\001\002\000\010" +
    "\013\ufea7\027\u02bb\107\341\001\002\000\006\005\355\100" +
    "\ufea9\001\002\000\004\100\ufea8\001\002\000\004\013\ufea6" +
    "\001\002\000\030\005\u0247\011\u023a\012\063\013\ufeb5\020" +
    "\u029b\023\u024f\027\ufeb5\035\u029a\051\130\102\u029d\107\ufeb5" +
    "\001\002\000\010\013\ufeb4\027\ufeb4\107\ufeb4\001\002\000" +
    "\030\005\u0235\011\u023a\012\063\013\ufeaf\020\u0279\023\u0240" +
    "\027\ufeaf\035\u0278\051\130\102\u027b\107\ufeaf\001\002\000" +
    "\010\013\ufeae\027\ufeae\107\ufeae\001\002\000\004\021\u02c3" +
    "\001\002\000\004\073\u02c4\001\002\000\020\042\103\043" +
    "\104\051\255\060\100\064\256\065\106\073\101\001\002" +
    "\000\004\074\u02c6\001\002\000\004\100\u02c7\001\002\000" +
    "\030\005\u0247\011\u023a\012\063\013\ufeb7\020\u029b\023\u024f" +
    "\027\ufeb7\035\u029a\051\130\102\u029d\107\ufeb7\001\002\000" +
    "\010\013\ufeb2\027\ufeb2\107\ufeb2\001\002\000\004\100\u02cd" +
    "\001\002\000\004\100\u02cb\001\002\000\030\005\u0247\011" +
    "\u023a\012\063\013\ufeaa\020\u029b\023\u024f\027\ufeaa\035\u029a" +
    "\051\130\102\u029d\107\ufeaa\001\002\000\010\013\ufeab\027" +
    "\ufeab\107\ufeab\001\002\000\030\005\u0247\011\u023a\012\063" +
    "\013\ufeac\020\u029b\023\u024f\027\ufeac\035\u029a\051\130\102" +
    "\u029d\107\ufeac\001\002\000\010\013\ufead\027\ufead\107\ufead" +
    "\001\002\000\004\100\u02d3\001\002\000\004\100\u02d1\001" +
    "\002\000\024\005\u0235\011\u023a\012\063\020\u0279\023\u0240" +
    "\034\ufe86\035\u0278\051\130\102\u027b\001\002\000\004\034" +
    "\ufe88\001\002\000\024\005\u0235\011\u023a\012\063\020\u0279" +
    "\023\u0240\034\ufe87\035\u0278\051\130\102\u027b\001\002\000" +
    "\004\034\ufe89\001\002\000\004\013\ufee8\001\002\000\004" +
    "\013\ufee9\001\002\000\024\005\u0235\011\u023a\012\063\013" +
    "\ufeed\020\u0238\023\u0240\035\u0234\051\130\102\u023b\001\002" +
    "\000\004\013\ufeec\001\002\000\004\054\u02da\001\002\000" +
    "\006\060\100\065\141\001\002\000\004\037\u02dc\001\002" +
    "\000\006\060\100\065\141\001\002\000\004\047\u02de\001" +
    "\002\000\006\060\100\065\141\001\002\000\004\100\u02e0" +
    "\001\002\000\022\005\u0247\011\u023a\012\063\020\u02e2\023" +
    "\u024f\035\u02e1\051\130\102\u02e5\001\002\000\006\011\u02f9" +
    "\030\u02f8\001\002\000\004\070\u02f1\001\002\000\004\100" +
    "\u02ef\001\002\000\004\032\u02ec\001\002\000\004\100\u02ea" +
    "\001\002\000\024\005\u0247\011\u023a\012\063\020\u02e2\023" +
    "\u024f\032\ufecb\035\u02e1\051\130\102\u02e5\001\002\000\024" +
    "\005\u0247\011\u023a\012\063\020\u02e2\023\u024f\032\ufec8\035" +
    "\u02e1\051\130\102\u02e5\001\002\000\004\032\ufec5\001\002" +
    "\000\004\032\ufec6\001\002\000\024\005\u0247\011\u023a\012" +
    "\063\020\u02e2\023\u024f\032\ufeca\035\u02e1\051\130\102\u02e5" +
    "\001\002\000\004\032\ufec9\001\002\000\004\051\u02ed\001" +
    "\002\000\004\100\u02ee\001\002\000\034\005\ufecd\011\ufecd" +
    "\012\ufecd\013\ufecd\020\ufecd\023\ufecd\027\ufecd\032\ufecd\034" +
    "\ufecd\035\ufecd\051\ufecd\102\ufecd\107\ufecd\001\002\000\024" +
    "\005\u0247\011\u023a\012\063\020\u02e2\023\u024f\032\ufec4\035" +
    "\u02e1\051\130\102\u02e5\001\002\000\004\032\ufec3\001\002" +
    "\000\004\021\u02f2\001\002\000\004\073\u02f3\001\002\000" +
    "\020\042\103\043\104\051\255\060\100\064\256\065\106" +
    "\073\101\001\002\000\004\074\u02f5\001\002\000\004\100" +
    "\u02f6\001\002\000\024\005\u0247\011\u023a\012\063\020\u02e2" +
    "\023\u024f\032\ufecc\035\u02e1\051\130\102\u02e5\001\002\000" +
    "\004\032\ufec7\001\002\000\004\100\u02fc\001\002\000\004" +
    "\100\u02fa\001\002\000\024\005\u0247\011\u023a\012\063\020" +
    "\u02e2\023\u024f\032\ufebf\035\u02e1\051\130\102\u02e5\001\002" +
    "\000\004\032\ufec0\001\002\000\024\005\u0247\011\u023a\012" +
    "\063\020\u02e2\023\u024f\032\ufec1\035\u02e1\051\130\102\u02e5" +
    "\001\002\000\004\032\ufec2\001\002\000\024\005\u0235\011" +
    "\u023a\012\063\013\ufeeb\020\u0238\023\u0240\035\u0234\051\130" +
    "\102\u023b\001\002\000\004\013\ufee7\001\002\000\004\021" +
    "\u0301\001\002\000\004\073\u0302\001\002\000\020\042\103" +
    "\043\104\051\255\060\100\064\256\065\106\073\101\001" +
    "\002\000\004\074\u0304\001\002\000\004\100\u0305\001\002" +
    "\000\024\005\u0235\011\u023a\012\063\013\ufef0\020\u0238\023" +
    "\u0240\035\u0234\051\130\102\u023b\001\002\000\004\013\ufeea" +
    "\001\002\000\004\030\u0308\001\002\000\006\006\ufef5\100" +
    "\ufef5\001\002\000\004\026\u030a\001\002\000\004\100\u030b" +
    "\001\002\000\022\005\u0235\011\u023a\012\063\020\u0279\023" +
    "\u0240\035\u0278\051\130\102\u027b\001\002\000\010\013\u0311" +
    "\027\u030f\107\341\001\002\000\016\042\103\043\104\051" +
    "\111\060\100\065\106\073\101\001\002\000\004\013\u031e" +
    "\001\002\000\006\005\355\100\u0319\001\002\000\004\100" +
    "\u0314\001\002\000\004\005\u0312\001\002\000\004\100\u0313" +
    "\001\002\000\032\005\ufee1\011\ufee1\012\ufee1\013\ufee1\020" +
    "\ufee1\023\ufee1\027\ufee1\034\ufee1\035\ufee1\051\ufee1\102\ufee1" +
    "\107\ufee1\001\002\000\022\005\u0235\011\u023a\012\063\020" +
    "\u0279\023\u0240\035\u0278\051\130\102\u027b\001\002\000\004" +
    "\013\u0316\001\002\000\004\005\u0317\001\002\000\004\100" +
    "\u0318\001\002\000\032\005\ufedf\011\ufedf\012\ufedf\013\ufedf" +
    "\020\ufedf\023\ufedf\027\ufedf\034\ufedf\035\ufedf\051\ufedf\102" +
    "\ufedf\107\ufedf\001\002\000\022\005\u0235\011\u023a\012\063" +
    "\020\u0279\023\u0240\035\u0278\051\130\102\u027b\001\002\000" +
    "\004\013\u031b\001\002\000\004\005\u031c\001\002\000\004" +
    "\100\u031d\001\002\000\032\005\ufee0\011\ufee0\012\ufee0\013" +
    "\ufee0\020\ufee0\023\ufee0\027\ufee0\034\ufee0\035\ufee0\051\ufee0" +
    "\102\ufee0\107\ufee0\001\002\000\004\005\u031f\001\002\000" +
    "\004\100\u0320\001\002\000\032\005\ufede\011\ufede\012\ufede" +
    "\013\ufede\020\ufede\023\ufede\027\ufede\034\ufede\035\ufede\051" +
    "\ufede\102\ufede\107\ufede\001\002\000\004\026\u0322\001\002" +
    "\000\004\100\u0323\001\002\000\022\005\u0235\011\u023a\012" +
    "\063\020\u0279\023\u0240\035\u0278\051\130\102\u027b\001\002" +
    "\000\010\013\ufecf\027\u0326\107\341\001\002\000\004\013" +
    "\ufece\001\002\000\006\005\355\100\ufed1\001\002\000\004" +
    "\100\ufed0\001\002\000\004\100\u0329\001\002\000\024\005" +
    "\u0235\011\u023a\012\063\013\ufee5\020\u0238\023\u0240\035\u0234" +
    "\051\130\102\u023b\001\002\000\004\013\ufee6\001\002\000" +
    "\004\051\u032c\001\002\000\004\100\u032d\001\002\000\004" +
    "\012\u032f\001\002\000\004\013\u0335\001\002\000\004\051" +
    "\u0330\001\002\000\004\022\u0331\001\002\000\014\014\044" +
    "\015\043\016\046\046\045\051\042\001\002\000\004\100" +
    "\u0333\001\002\000\006\012\u032f\013\ufef8\001\002\000\004" +
    "\013\ufef7\001\002\000\004\025\u0336\001\002\000\006\006" +
    "\ufef6\100\ufef6\001\002\000\010\006\017\033\020\102\016" +
    "\001\002\000\004\013\ufff0\001\002\000\010\006\017\033" +
    "\020\102\016\001\002\000\004\013\u033b\001\002\000\004" +
    "\007\u033c\001\002\000\006\002\ufff7\100\ufff7\001\002\000" +
    "\004\002\001\001\002\000\006\070\u0345\100\ufffc\001\002" +
    "\000\004\100\u0343\001\002\000\006\070\u0341\100\ufffa\001" +
    "\002\000\006\017\u0340\051\u033e\001\002\000\004\100\ufff9" +
    "\001\002\000\006\004\004\006\ufffe\001\002\000\004\006" +
    "\ufffd\001\002\000\006\017\u0340\051\u033e\001\002\000\004" +
    "\100\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0344\000\006\002\004\003\005\001\001\000\004\005" +
    "\u033e\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\021\010\020\021\022\053\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0226\001\001\000\002\001\001\000\004\010" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\021\010\020\021\027\053\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\057\022\070\025\067\026\053\032\060" +
    "\041\056\050\063\114\066\121\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\107\024\101\030\u01d5" +
    "\050\106\113\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\057\022\u0192\025\067\026\053" +
    "\032\060\041\056\050\063\114\066\121\072\001\001\000" +
    "\002\001\001\000\012\024\136\051\u018d\113\137\115\141" +
    "\001\001\000\024\015\057\022\u018b\025\067\026\053\032" +
    "\060\041\056\050\063\114\066\121\072\001\001\000\004" +
    "\116\074\001\001\000\014\017\107\024\101\030\111\050" +
    "\106\113\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u0180\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u017a" +
    "\001\001\000\004\020\u0172\001\001\000\004\031\u016b\001" +
    "\001\000\004\031\u0165\001\001\000\004\031\u015d\001\001" +
    "\000\002\001\001\000\022\015\057\041\116\042\120\043" +
    "\121\044\113\046\125\050\123\121\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\107\024\101\030" +
    "\u011f\050\106\113\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\057\041\116\042" +
    "\u0115\043\121\044\113\046\125\050\123\121\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\041\116\042\172\043\121" +
    "\044\113\046\125\050\123\121\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\156\024\153\050\155" +
    "\113\154\001\001\000\012\024\136\051\135\113\137\115" +
    "\141\001\001\000\002\001\001\000\010\024\136\113\137" +
    "\115\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\136\051\145\113\137\115\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\136\051\152\113\137\115" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\167\024\164\050\166\113" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\041\116\042\174" +
    "\043\121\044\113\046\125\050\123\121\126\001\001\000" +
    "\002\001\001\000\022\015\057\041\116\042\176\043\121" +
    "\044\113\046\125\050\123\121\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\201\001\001\000\002" +
    "\001\001\000\004\113\203\001\001\000\002\001\001\000" +
    "\004\113\205\001\001\000\002\001\001\000\022\015\057" +
    "\032\213\034\207\035\216\037\222\047\217\050\214\121" +
    "\220\001\001\000\022\015\057\032\213\034\207\035\216" +
    "\037\222\047\u0114\050\214\121\220\001\001\000\002\001" +
    "\001\000\014\017\107\024\101\030\324\050\106\113\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\057\032\213\034\207\035\216\037\222\047" +
    "\305\050\214\121\220\001\001\000\004\116\223\001\001" +
    "\000\002\001\001\000\014\017\107\024\101\030\224\050" +
    "\106\113\104\001\001\000\002\001\001\000\022\015\057" +
    "\040\234\041\116\043\230\044\113\046\125\050\231\121" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\057\040\244\041\116\043\230\044\113\046\125\050" +
    "\231\121\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\057\040\237\041\116\043\230\044\113\046" +
    "\125\050\231\121\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\040\241\041\116\043\230\044\113\046\125\050\231" +
    "\121\233\001\001\000\002\001\001\000\022\015\057\040" +
    "\243\041\116\043\230\044\113\046\125\050\231\121\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\253\023\252\024\250" +
    "\113\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\253\023\257\024\250\113\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\253" +
    "\023\262\024\250\113\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\253\023\265\024\250\113\251" +
    "\001\001\000\002\001\001\000\012\017\253\023\267\024" +
    "\250\113\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\057\040\272\041\116\043\230\044\113\046" +
    "\125\050\231\121\233\001\001\000\002\001\001\000\012" +
    "\017\253\023\274\024\250\113\251\001\001\000\002\001" +
    "\001\000\012\017\253\023\276\024\250\113\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\040\302\041\116\043\230\044\113\046\125" +
    "\050\231\121\233\001\001\000\002\001\001\000\022\015" +
    "\057\040\304\041\116\043\230\044\113\046\125\050\231" +
    "\121\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\057\032\213\034\207\035\216\037\222\047\312\050" +
    "\214\121\220\001\001\000\002\001\001\000\022\015\057" +
    "\032\213\034\207\035\216\037\222\047\314\050\214\121" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\253\023\320\024\250\113\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\057" +
    "\032\213\034\207\035\216\037\222\047\323\050\214\121" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\057\032\213\034\327\035\216\037" +
    "\222\050\332\100\334\121\335\001\001\000\022\015\057" +
    "\032\213\034\327\035\216\037\222\050\332\100\u010d\121" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\036\343\110\341\117" +
    "\337\001\001\000\022\015\057\032\213\034\327\035\216" +
    "\037\222\050\332\100\336\121\335\001\001\000\002\001" +
    "\001\000\014\017\107\024\101\030\365\050\106\113\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\057\032\213\034\327\035" +
    "\216\037\222\050\332\100\350\121\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\032\213\034\327" +
    "\035\216\037\222\050\332\100\356\121\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\057" +
    "\032\213\034\327\035\216\037\222\050\332\100\370\121" +
    "\335\001\001\000\010\036\373\110\371\117\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\032\213\034\327\035\216\037\222\050\332" +
    "\100\375\121\335\001\001\000\002\001\001\000\022\015" +
    "\057\032\213\034\327\035\216\037\222\050\332\100\377" +
    "\121\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\253\023\u0103\024\250\113\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\032\213\034\327\035\216\037\222\050\332\100\u0106" +
    "\121\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\032\213\034\327\035\216" +
    "\037\222\050\332\100\u010a\121\335\001\001\000\002\001" +
    "\001\000\022\015\057\032\213\034\327\035\216\037\222" +
    "\050\332\100\u010c\121\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\057\032\213\034\207\035\216\037\222\047\u0111\050" +
    "\214\121\220\001\001\000\002\001\001\000\022\015\057" +
    "\032\213\034\207\035\216\037\222\047\u0113\050\214\121" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\253\023\u011b\024\250" +
    "\113\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\041\116\042\u011e\043\121\044\113\046\125" +
    "\050\123\121\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\041\116\043\u0124" +
    "\044\113\046\125\050\u0125\101\u0127\121\u0128\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\041\116" +
    "\043\u0124\044\113\046\125\050\u0125\101\u0149\121\u0128\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\u012c" +
    "\106\u012d\117\u012a\001\001\000\022\015\057\041\116\043" +
    "\u0124\044\113\046\125\050\u0125\101\u0129\121\u0128\001\001" +
    "\000\002\001\001\000\014\017\107\024\101\030\u013e\050" +
    "\106\113\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\057\041\116\043\u0124\044\113\046" +
    "\125\050\u0125\101\u0135\121\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\041\116\043\u0124\044\113\046\125\050\u0125" +
    "\101\u013a\121\u0128\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\057\041\116\043\u0124\044" +
    "\113\046\125\050\u0125\101\u0141\121\u0128\001\001\000\010" +
    "\045\u0143\106\u0144\117\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\041\116" +
    "\043\u0124\044\113\046\125\050\u0125\101\u0146\121\u0128\001" +
    "\001\000\002\001\001\000\022\015\057\041\116\043\u0124" +
    "\044\113\046\125\050\u0125\101\u0148\121\u0128\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\253\023\u014d\024\250\113\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\057" +
    "\041\116\043\u0124\044\113\046\125\050\u0125\101\u0150\121" +
    "\u0128\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\057\041\116\043\u0124\044\113\046" +
    "\125\050\u0125\101\u0154\121\u0128\001\001\000\002\001\001" +
    "\000\022\015\057\041\116\043\u0124\044\113\046\125\050" +
    "\u0125\101\u0156\121\u0128\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\057\041\116\042\u0159\043\121\044" +
    "\113\046\125\050\123\121\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\u0161\024\u015e\050\u0160\113\u015f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\u0169\024\u0166\050\u0168\113\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\u016e\024\u016c\113" +
    "\u016d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u0178\120\u0179\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u0172\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\u017e\024\u017b\050\u017d\113\u017c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\u0184\024\u0181\050" +
    "\u0183\113\u0182\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u0187\001\001\000\006\017\u0178\120\u0188\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\136\051\135\113\137\115\u018e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\057\022\u0194\025\067\026\053\032\060\041" +
    "\056\050\063\114\066\121\072\001\001\000\002\001\001" +
    "\000\024\015\057\022\u0196\025\067\026\053\032\060\041" +
    "\056\050\063\114\066\121\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\u0199\001\001\000\002\001" +
    "\001\000\004\113\u019b\001\001\000\002\001\001\000\004" +
    "\113\u019d\001\001\000\002\001\001\000\022\015\057\032" +
    "\213\033\u01a1\034\u019f\035\216\037\222\050\u01a3\121\u01a5" +
    "\001\001\000\022\015\057\032\213\033\u01b8\034\u019f\035" +
    "\216\037\222\050\u01a3\121\u01a5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\032\213\033\u01a6\034\u019f" +
    "\035\216\037\222\050\u01a3\121\u01a5\001\001\000\002\001" +
    "\001\000\022\015\057\032\213\033\u01a8\034\u019f\035\216" +
    "\037\222\050\u01a3\121\u01a5\001\001\000\002\001\001\000" +
    "\022\015\057\032\213\033\u01aa\034\u019f\035\216\037\222" +
    "\050\u01a3\121\u01a5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\253\023\u01ae\024\250" +
    "\113\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\032\213\033\u01b1\034\u019f\035\216\037\222" +
    "\050\u01a3\121\u01a5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\057\032\213\033\u01b7\034\u019f\035\216\037" +
    "\222\050\u01a3\121\u01a5\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\057\022\u01ba\025\067\026\053\032" +
    "\060\041\056\050\063\114\066\121\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01c5\001\001\000" +
    "\014\016\u01c1\017\u01c2\024\u01be\050\u01c0\113\u01bf\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\u01c8\017\u01c9\024" +
    "\u01be\050\u01c7\113\u01bf\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\253\023\u01ce\024\250" +
    "\113\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\057\022\u01d1\025\067\026\053\032\060\041\056" +
    "\050\063\114\066\121\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\057\025\u01dd\026" +
    "\053\032\060\041\056\050\u01db\077\u01da\121\u01de\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\u01e8\107" +
    "\u01e6\117\u01e7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\057\025\u01dd\026\053\032" +
    "\060\041\056\050\u01db\077\u01df\121\u01de\001\001\000\002" +
    "\001\001\000\022\015\057\025\u01dd\026\053\032\060\041" +
    "\056\050\u01db\077\u01e1\121\u01de\001\001\000\002\001\001" +
    "\000\022\015\057\025\u01dd\026\053\032\060\041\056\050" +
    "\u01db\077\u01e3\121\u01de\001\001\000\002\001\001\000\022" +
    "\015\057\025\u01dd\026\053\032\060\041\056\050\u01db\077" +
    "\u01e5\121\u01de\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\107\024\101\030\u01f7\050\106\113\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\057\025" +
    "\u01dd\026\053\032\060\041\056\050\u01db\077\u01ee\121\u01de" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\025\u01dd\026\053" +
    "\032\060\041\056\050\u01db\077\u01f3\121\u01de\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\025\u01dd\026\053\032\060\041\056\050\u01db\077\u01fa" +
    "\121\u01de\001\001\000\010\027\u01fc\107\u01fb\117\u01e7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\253\023\u0204" +
    "\024\250\113\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\057\025\u01dd\026\053\032\060\041\056" +
    "\050\u01db\077\u0207\121\u01de\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\025\u01dd\026\053\032\060" +
    "\041\056\050\u01db\077\u020a\121\u01de\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\057\022\u020d\025\067" +
    "\026\053\032\060\041\056\050\063\114\066\121\072\001" +
    "\001\000\002\001\001\000\024\015\057\022\u020f\025\067" +
    "\026\053\032\060\041\056\050\063\114\066\121\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0214\001\001\000\002\001" +
    "\001\000\004\011\u0216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\057\022\u021b\025\067\026\053\032\060\041\056\050\063" +
    "\114\066\121\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\057" +
    "\022\u0220\025\067\026\053\032\060\041\056\050\063\114" +
    "\066\121\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\021\010\020" +
    "\021\u0228\053\023\001\001\000\002\001\001\000\012\007" +
    "\021\010\020\021\u022a\053\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u022e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0231" +
    "\001\001\000\002\001\001\000\022\013\u0235\015\057\050" +
    "\u0238\054\u023e\055\u023c\057\u0236\066\u023b\121\u023d\001\001" +
    "\000\002\001\001\000\014\017\107\024\101\030\u0308\050" +
    "\106\113\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\u02d5\015\057\050\u0238\054\u023e\055\u023c\057\u0236\066" +
    "\u023b\121\u023d\001\001\000\022\013\u02d4\015\057\050\u0238" +
    "\054\u023e\055\u023c\057\u0236\066\u023b\121\u023d\001\001\000" +
    "\004\116\u0240\001\001\000\014\017\107\024\101\030\u0241" +
    "\050\106\113\104\001\001\000\002\001\001\000\022\015" +
    "\057\050\u024a\057\u0248\061\u024c\062\u0243\064\u0245\067\u0247" +
    "\121\u024d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\107\024\101\030\u0296\050\106" +
    "\113\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\057\050\u024a\057\u0248\061\u024c\062\u0243\064\u0245\067" +
    "\u0272\121\u024d\001\001\000\022\015\057\050\u024a\057\u0248" +
    "\061\u024c\062\u0243\064\u0245\067\u0271\121\u024d\001\001\000" +
    "\004\116\u024f\001\001\000\014\017\107\024\101\030\u0250" +
    "\050\106\113\104\001\001\000\002\001\001\000\022\015" +
    "\057\041\116\043\u0255\044\113\046\125\050\u0256\065\u0253" +
    "\121\u0258\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\041\116\042\u025e\043\121" +
    "\044\113\046\125\050\123\121\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\041\116\042\u0259" +
    "\043\121\044\113\046\125\050\123\121\126\001\001\000" +
    "\002\001\001\000\022\015\057\041\116\043\u0255\044\113" +
    "\046\125\050\u0256\065\u025b\121\u0258\001\001\000\002\001" +
    "\001\000\022\015\057\041\116\042\u025d\043\121\044\113" +
    "\046\125\050\123\121\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\253\023\u0262\024\250\113\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\041\116\042\u0265" +
    "\043\121\044\113\046\125\050\123\121\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\057\041\116\042\u026c\043\121\044\113\046\125\050\123" +
    "\121\126\001\001\000\002\001\001\000\022\015\057\041" +
    "\116\042\u026e\043\121\044\113\046\125\050\123\121\126" +
    "\001\001\000\002\001\001\000\022\015\057\041\116\042" +
    "\u0270\043\121\044\113\046\125\050\123\121\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\050\u024a\057\u0248\061\u024c\062\u0243\064\u0245" +
    "\067\u0274\121\u024d\001\001\000\002\001\001\000\022\015" +
    "\057\050\u0279\054\u027c\055\u023c\057\u0236\066\u023b\102\u0276" +
    "\121\u027b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\057\050\u0279\054\u027c\055\u023c\057\u0236\066\u023b\102" +
    "\u027e\121\u027b\001\001\000\022\015\057\050\u0279\054\u027c" +
    "\055\u023c\057\u0236\066\u023b\102\u027d\121\u027b\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\050\u0279" +
    "\054\u027c\055\u023c\057\u0236\066\u023b\102\u0280\121\u027b\001" +
    "\001\000\002\001\001\000\022\015\057\050\u0279\054\u027c" +
    "\055\u023c\057\u0236\066\u023b\102\u0282\121\u027b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\253\023\u0286\024\250\113\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\050\u0279\054\u027c" +
    "\055\u023c\057\u0236\066\u023b\102\u0289\121\u027b\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\050\u0279" +
    "\054\u027c\055\u023c\057\u0236\066\u023b\102\u028c\121\u027b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\253\023\u0290\024\250\113\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\050\u024a" +
    "\057\u0248\061\u024c\062\u0243\064\u0245\067\u0293\121\u024d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\057\050" +
    "\u029b\057\u0248\061\u029e\062\u0243\064\u0245\103\u029d\121\u029f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\063\u02a4\112\u02a5\117\u02a2" +
    "\001\001\000\022\015\057\050\u029b\057\u0248\061\u029e\062" +
    "\u0243\064\u0245\103\u02a1\121\u029f\001\001\000\022\015\057" +
    "\050\u029b\057\u0248\061\u029e\062\u0243\064\u0245\103\u02a0\121" +
    "\u029f\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\107\024\101\030\u02b6\050\106\113\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\057" +
    "\050\u029b\057\u0248\061\u029e\062\u0243\064\u0245\103\u02ad\121" +
    "\u029f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\057\050\u029b\057" +
    "\u0248\061\u029e\062\u0243\064\u0245\103\u02b2\121\u029f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\057\050\u029b\057\u0248\061\u029e\062\u0243\064\u0245\103" +
    "\u02b9\121\u029f\001\001\000\010\063\u02bb\112\u02bc\117\u02a2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\057\050\u029b\057\u0248\061\u029e\062\u0243" +
    "\064\u0245\103\u02be\121\u029f\001\001\000\002\001\001\000" +
    "\022\015\057\050\u0279\054\u027c\055\u023c\057\u0236\066\u023b" +
    "\102\u02c0\121\u027b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\253\023\u02c4\024\250" +
    "\113\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\050\u029b\057\u0248\061\u029e\062\u0243\064\u0245" +
    "\103\u02c7\121\u029f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\057\050\u029b\057\u0248" +
    "\061\u029e\062\u0243\064\u0245\103\u02cb\121\u029f\001\001\000" +
    "\002\001\001\000\022\015\057\050\u029b\057\u0248\061\u029e" +
    "\062\u0243\064\u0245\103\u02cd\121\u029f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\057" +
    "\050\u0279\054\u027c\055\u023c\057\u0236\066\u023b\102\u02d1\121" +
    "\u027b\001\001\000\002\001\001\000\022\015\057\050\u0279" +
    "\054\u027c\055\u023c\057\u0236\066\u023b\102\u02d3\121\u027b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\u02d7\015\057\050\u0238\054\u023e\055\u023c\057" +
    "\u0236\066\u023b\121\u023d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\113\u02da\001\001\000\002\001\001\000" +
    "\004\113\u02dc\001\001\000\002\001\001\000\004\113\u02de" +
    "\001\001\000\002\001\001\000\022\015\057\050\u02e2\057" +
    "\u0248\060\u02e3\061\u02e6\062\u0243\064\u0245\121\u02e5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\050\u02e2" +
    "\057\u0248\060\u02e8\061\u02e6\062\u0243\064\u0245\121\u02e5\001" +
    "\001\000\022\015\057\050\u02e2\057\u0248\060\u02e7\061\u02e6" +
    "\062\u0243\064\u0245\121\u02e5\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\050\u02e2\057\u0248\060\u02ea" +
    "\061\u02e6\062\u0243\064\u0245\121\u02e5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\057\050\u02e2\057\u0248\060\u02ef\061\u02e6\062" +
    "\u0243\064\u0245\121\u02e5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\253\023\u02f3\024" +
    "\250\113\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\057\050\u02e2\057\u0248\060\u02f6\061\u02e6\062" +
    "\u0243\064\u0245\121\u02e5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\057\050\u02e2\057" +
    "\u0248\060\u02fa\061\u02e6\062\u0243\064\u0245\121\u02e5\001\001" +
    "\000\002\001\001\000\022\015\057\050\u02e2\057\u0248\060" +
    "\u02fc\061\u02e6\062\u0243\064\u0245\121\u02e5\001\001\000\002" +
    "\001\001\000\022\013\u02fe\015\057\050\u0238\054\u023e\055" +
    "\u023c\057\u0236\066\u023b\121\u023d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\253\023" +
    "\u0302\024\250\113\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\u0305\015\057\050\u0238\054\u023e\055" +
    "\u023c\057\u0236\066\u023b\121\u023d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\050\u0279\054\u027c\055\u023c" +
    "\057\u0236\066\u023b\102\u030b\121\u027b\001\001\000\010\056" +
    "\u030f\111\u030d\117\u030c\001\001\000\014\017\107\024\101" +
    "\030\u0320\050\106\113\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\057\050\u0279\054" +
    "\u027c\055\u023c\057\u0236\066\u023b\102\u0314\121\u027b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\057\050\u0279\054\u027c\055\u023c" +
    "\057\u0236\066\u023b\102\u0319\121\u027b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\057\050\u0279" +
    "\054\u027c\055\u023c\057\u0236\066\u023b\102\u0323\121\u027b\001" +
    "\001\000\010\056\u0326\111\u0324\117\u030c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\013\u0329\015\057\050\u0238\054\u023e\055\u023c" +
    "\057\u0236\066\u023b\121\u023d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u032d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0331\001\001\000\002\001\001\000\004\052\u0333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\021\010\020\021\u0337\053\023\001\001" +
    "\000\002\001\001\000\012\007\021\010\020\021\u0339\053" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u0341\001\001\000\002" +
    "\001\001\000\004\003\u0343\001\001\000\002\001\001\000" +
    "\004\005\u0345\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // INFOR_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INFOR_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INFOR_WHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INFOR_WHILE_FUNCION ::= exit function_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INFOR_WHILE_FUNCION ::= exit for_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INFOR_WHILE_FUNCION ::= exit do_ findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // INFOR_WHILE_FUNCION ::= DECLARACION_GENERAL INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // INFOR_WHILE_FUNCION ::= comentario findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // INFOR_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // INFOR_WHILE_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_WHILE_FUNCION next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // ELSE_IF_WHILE_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // ELSE_IF_WHILE_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // INIF_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // INIF_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // INIF_WHILE_FUNCION ::= exit for_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // INIF_WHILE_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // INIF_WHILE_FUNCION ::= DECLARACION_GENERAL INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // INIF_WHILE_FUNCION ::= comentario findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // INIF_WHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // INIF_WHILE_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // IF_WHILE_FUNCION ::= if_ CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INWHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // INWHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // INWHILE_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // INWHILE_FUNCION ::= exit do_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // INWHILE_FUNCION ::= DECLARACION_GENERAL INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // INWHILE_FUNCION ::= comentario findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // INWHILE_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // INWHILE_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // WHILE_FUNCION ::= do_ WHILE_TYPE CONDICION findelinea INWHILE_FUNCION loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // INWHILE_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INWHILE_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INWHILE_FOR_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INWHILE_FOR_FUNCION ::= exit function_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INWHILE_FOR_FUNCION ::= exit for_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INWHILE_FOR_FUNCION ::= exit do_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INWHILE_FOR_FUNCION ::= DECLARACION_GENERAL INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // INWHILE_FOR_FUNCION ::= comentario findelinea INWHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // INWHILE_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // INWHILE_FOR_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // WHILE_FOR_FUNCION ::= do_ WHILE_TYPE CONDICION findelinea INWHILE_FOR_FUNCION loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ELSE_IF_FOR_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ELSE_IF_FOR_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INIF_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // INIF_FOR_FUNCION ::= exit for_ findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // INIF_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // INIF_FOR_FUNCION ::= exit function_ findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // INIF_FOR_FUNCION ::= DECLARACION_GENERAL INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // INIF_FOR_FUNCION ::= comentario findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // INIF_FOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // INIF_FOR_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION else_ findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INFOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // INFOR_FUNCION ::= exit for_ findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INFOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INFOR_FUNCION ::= exit function_ findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INFOR_FUNCION ::= DECLARACION_GENERAL INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // INFOR_FUNCION ::= comentario findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // INFOR_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INFOR_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_FUNCION next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ELSE_IF_FUNCION2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ELSE_IF_FUNCION ::= ELSEIF_TYPE CONDICION then findelinea INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INIF_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INIF_FUNCION ::= exit function_ findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INIF_FUNCION ::= DECLARACION_GENERAL INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INIF_FUNCION ::= comentario findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INIF_FUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // INIF_FUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION else_ findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INFUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INFUNCION ::= exit function_ findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INFUNCION ::= LLAMAR_FUNCION findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INFUNCION ::= DECLARACION_GENERAL INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INFUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INFUNCION ::= comentario findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // INFUNCION ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // INFUNCION ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ findelinea INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // STRUCT_ ::= Public_ struct_ identificador findelinea DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // PARAMETROS_TYPE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // PARAMETROS_TYPE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // PARAMETROS_TYPE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_TYPE",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // PARAMETRO_SENCILLO ::= parentesisA PARAMETROS_TYPE parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // PARAMETRO_SENCILLO ::= PARAMETROS_TYPE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INFOR_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INFOR_WHILE ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INFOR_WHILE ::= exit do_ findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INFOR_WHILE ::= exit for_ findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INFOR_WHILE ::= DECLARACION_GENERAL INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // INFOR_WHILE ::= comentario findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // INFOR_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // INFOR_WHILE ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_WHILE next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // ELSE_IF_WHILE2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // ELSE_IF_WHILE ::= ELSEIF_TYPE CONDICION then findelinea INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE else_ findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INIF_WHILE ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INIF_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INIF_WHILE ::= exit sub findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INIF_WHILE ::= exit do_ findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INIF_WHILE ::= LLAMAR_FUNCION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INIF_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INIF_WHILE ::= DECLARACION_GENERAL INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INIF_WHILE ::= comentario findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INIF_WHILE ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INIF_WHILE ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INWHILE_MAIN ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INWHILE_MAIN ::= exit do_ findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // INWHILE_MAIN ::= DECLARACION_GENERAL INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INWHILE_MAIN ::= comentario findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INWHILE_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INWHILE_MAIN ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // WHILE_MAIN ::= do_ WHILE_TYPE CONDICION findelinea INWHILE_MAIN loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INWHILE_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INWHILE_FOR ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INWHILE_FOR ::= exit for_ findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INWHILE_FOR ::= exit do_ findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // INWHILE_FOR ::= DECLARACION_GENERAL INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // INWHILE_FOR ::= comentario findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // INWHILE_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // INWHILE_FOR ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // WHILE_FOR ::= do_ WHILE_TYPE CONDICION findelinea INWHILE_FOR loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ELSE_IF_FOR2 ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ELSE_IF_FOR ::= ELSEIF_TYPE CONDICION then findelinea INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR else_ findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INIF_FOR ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INIF_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INIF_FOR ::= exit sub findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INIF_FOR ::= exit for_ findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INIF_FOR ::= LLAMAR_FUNCION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INIF_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INIF_FOR ::= comentario findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INIF_FOR ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // INIF_FOR ::= DECLARACION_GENERAL INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // INIF_FOR ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INFOR_MAIN ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INFOR_MAIN ::= exit for_ findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INFOR_MAIN ::= comentario findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INFOR_MAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INFOR_MAIN ::= DECLARACION_GENERAL INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INFOR_MAIN ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_MAIN next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ELSE_IF_MAIN2 ::= ELSEIF_TYPE CONDICION then findelinea INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then findelinea INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ELSE_IF_MAIN ::= ELSEIF_TYPE CONDICION then findelinea INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INIF ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INIF ::= exit sub findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INIF ::= LLAMAR_FUNCION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INIF ::= DECLARACION_GENERAL INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INIF ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INIF ::= comentario findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INIF ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INIF ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF_MAIN ::= if_ CONDICION then findelinea INIF else_ findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF_MAIN ::= if_ CONDICION then findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELSEIF_TYPE ::= elseif_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELSEIF_TYPE ::= else_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSEIF_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WHILE_TYPE ::= while_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WHILE_TYPE ::= until 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_GENERAL ::= DECLARACION comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_GENERAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION_GENERAL ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_GENERAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= dim identificador as TYPE_ igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= dim identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= identificador punto identificador igual texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= identificador punto identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= identificador punto identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= identificador punto identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= identificador igual texto_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= dim identificador igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= dim identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_AR ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_AR ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AR",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERADOR_ARITMETICO ::= mod 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADOR_ARITMETICO ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR_ARITMETICO ::= div 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR_ARITMETICO ::= mult 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADOR_ARITMETICO ::= resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADOR_ARITMETICO ::= suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_ARITMETICA ::= parentesisA numero OPERADOR_ARITMETICO OPERACION_AR parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION_ARITMETICA ::= numero OPERADOR_ARITMETICO OPERACION_AR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLAMAR_SUB ::= identificador PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INMAIN ::= exit sub findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INMAIN ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INMAIN ::= LLAMAR_SUB findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INMAIN ::= LLAMAR_SUB findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INMAIN ::= LLAMAR_FUNCION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INMAIN ::= DECLARACION_GENERAL INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INMAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INMAIN ::= comentario findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INMAIN ::= comentario findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INMAIN ::= DECLARACION_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC comentario findelinea INMAIN end_ sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MAIN ::= Public_ sub main_ parentesisA parentesisC comentario findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN end_ sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEXT_MODULE ::= comentario findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEXT_MODULE ::= FUNCION_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NEXT_MODULE ::= STRUCT_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODULE ::= Public_ Module identificador comentario findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

