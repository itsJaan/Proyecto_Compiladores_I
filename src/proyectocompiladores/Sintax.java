
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 15 23:40:07 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 15 23:40:07 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\003\005\000\002\003\006\000\002\005\003" +
    "\000\002\005\005\000\002\005\003\000\002\005\005\000" +
    "\002\004\011\000\002\020\003\000\002\020\004\000\002" +
    "\020\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\010\014\000\002\010\015\000\002\021\011" +
    "\000\002\021\004\000\002\021\003\000\002\021\004\000" +
    "\002\021\012\000\002\021\005\000\002\021\004\000\002" +
    "\021\005\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\120\005\000\002\117\003\000\002\117\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\005\000\002\022\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\007\000\002\017\004" +
    "\000\002\017\003\000\002\023\004\000\002\023\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\024\004\000\002\024\005\000\002\024\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\004\000" +
    "\002\026\003\000\002\027\005\000\002\027\004\000\002" +
    "\015\006\000\002\015\010\000\002\015\006\000\002\015" +
    "\006\000\002\015\010\000\002\015\010\000\002\015\006" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\006\000\002" +
    "\015\007\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\006" +
    "\000\002\015\010\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\030" +
    "\003\000\002\030\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\012\000\002\032\015\000" +
    "\002\032\015\000\002\032\013\000\002\103\011\000\002" +
    "\103\004\000\002\103\003\000\002\103\004\000\002\103" +
    "\012\000\002\103\005\000\002\103\005\000\002\103\005" +
    "\000\002\033\011\000\002\033\011\000\002\113\011\000" +
    "\002\113\010\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\035\004\000" +
    "\002\035\004\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\017\000\002\037\011\000\002\037" +
    "\004\000\002\037\003\000\002\037\012\000\002\037\005" +
    "\000\002\037\004\000\002\037\004\000\002\037\005\000" +
    "\002\037\005\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\104\011\000\002\104\004\000\002\104" +
    "\003\000\002\104\012\000\002\104\005\000\002\104\004" +
    "\000\002\104\004\000\002\104\005\000\002\104\005\000" +
    "\002\041\012\000\002\041\015\000\002\041\015\000\002" +
    "\041\013\000\002\042\011\000\002\042\011\000\002\114" +
    "\010\000\002\114\011\000\002\043\011\000\002\044\011" +
    "\000\002\044\004\000\002\044\003\000\002\044\012\000" +
    "\002\044\005\000\002\044\004\000\002\044\004\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\045" +
    "\011\000\002\046\011\000\002\046\004\000\002\046\003" +
    "\000\002\046\012\000\002\046\005\000\002\046\004\000" +
    "\002\046\004\000\002\046\005\000\002\046\005\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\105" +
    "\011\000\002\105\004\000\002\105\003\000\002\105\012" +
    "\000\002\105\005\000\002\105\004\000\002\105\004\000" +
    "\002\105\005\000\002\105\005\000\002\050\012\000\002" +
    "\050\015\000\002\050\015\000\002\050\013\000\002\051" +
    "\011\000\002\051\011\000\002\112\010\000\002\112\011" +
    "\000\002\052\017\000\002\053\011\000\002\053\004\000" +
    "\002\053\003\000\002\053\012\000\002\053\005\000\002" +
    "\053\004\000\002\053\004\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\054\005\000\002\054\006" +
    "\000\002\055\007\000\002\055\005\000\002\055\005\000" +
    "\002\121\003\000\002\121\003\000\002\121\003\000\002" +
    "\056\007\000\002\056\010\000\002\007\011\000\002\057" +
    "\016\000\002\011\005\000\002\011\007\000\002\011\010" +
    "\000\002\011\006\000\002\013\011\000\002\013\004\000" +
    "\002\013\003\000\002\013\004\000\002\013\012\000\002" +
    "\013\005\000\002\013\004\000\002\013\005\000\002\013" +
    "\005\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\061\012\000\002\061\015\000\002\061\015\000" +
    "\002\061\013\000\002\106\011\000\002\106\004\000\002" +
    "\106\003\000\002\106\012\000\002\106\005\000\002\106" +
    "\004\000\002\106\004\000\002\106\005\000\002\106\005" +
    "\000\002\062\011\000\002\062\011\000\002\115\010\000" +
    "\002\115\011\000\002\063\017\000\002\064\011\000\002" +
    "\064\004\000\002\064\003\000\002\064\012\000\002\064" +
    "\005\000\002\064\004\000\002\064\004\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\066\012\000\002" +
    "\066\015\000\002\066\015\000\002\066\013\000\002\107" +
    "\011\000\002\107\004\000\002\107\003\000\002\107\012" +
    "\000\002\107\005\000\002\107\004\000\002\107\004\000" +
    "\002\107\005\000\002\107\005\000\002\107\005\000\002" +
    "\067\011\000\002\067\011\000\002\116\010\000\002\116" +
    "\011\000\002\070\011\000\002\071\011\000\002\071\004" +
    "\000\002\071\003\000\002\071\012\000\002\071\005\000" +
    "\002\071\004\000\002\071\004\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\072" +
    "\011\000\002\073\011\000\002\073\004\000\002\073\003" +
    "\000\002\073\012\000\002\073\005\000\002\073\004\000" +
    "\002\073\004\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\075\010\000\002\075\012\000\002\075\013" +
    "\000\002\075\010\000\002\075\013\000\002\110\011\000" +
    "\002\110\004\000\002\110\003\000\002\110\012\000\002" +
    "\110\005\000\002\110\004\000\002\110\004\000\002\110" +
    "\005\000\002\110\005\000\002\110\005\000\002\100\011" +
    "\000\002\100\011\000\002\111\010\000\002\111\011\000" +
    "\002\076\017\000\002\077\011\000\002\077\004\000\002" +
    "\077\003\000\002\077\012\000\002\077\005\000\002\077" +
    "\004\000\002\077\004\000\002\077\005\000\002\077\005" +
    "\000\002\077\005\000\002\077\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02fd\000\004\004\004\001\002\000\006\017\u02f9\051" +
    "\u02f7\001\002\000\004\002\u02f6\001\002\000\004\006\007" +
    "\001\002\000\004\007\012\001\002\000\006\002\000\100" +
    "\011\001\002\000\004\002\uffff\001\002\000\004\051\013" +
    "\001\002\000\004\100\014\001\002\000\006\006\015\033" +
    "\016\001\002\000\006\010\027\025\u02ea\001\002\000\004" +
    "\030\u0202\001\002\000\006\013\ufff7\100\u0200\001\002\000" +
    "\006\006\023\100\u01fe\001\002\000\004\013\u01fb\001\002" +
    "\000\006\006\023\100\025\001\002\000\004\010\027\001" +
    "\002\000\004\013\ufff5\001\002\000\006\006\015\033\016" +
    "\001\002\000\004\013\ufff3\001\002\000\006\051\031\103" +
    "\030\001\002\000\004\073\u01f4\001\002\000\004\073\032" +
    "\001\002\000\006\051\035\106\033\001\002\000\004\051" +
    "\u01ef\001\002\000\004\074\047\001\002\000\004\022\036" +
    "\001\002\000\014\014\042\015\041\016\044\046\043\051" +
    "\040\001\002\000\006\074\uff14\104\045\001\002\000\012" +
    "\054\uffa8\074\uffa8\100\uffa8\104\uffa8\001\002\000\012\054" +
    "\uffab\074\uffab\100\uffab\104\uffab\001\002\000\012\054\uffaa" +
    "\074\uffaa\100\uffaa\104\uffaa\001\002\000\012\054\uffa9\074" +
    "\uffa9\100\uffa9\104\uffa9\001\002\000\012\054\uffac\074\uffac" +
    "\100\uffac\104\uffac\001\002\000\006\051\035\106\033\001" +
    "\002\000\004\074\uff13\001\002\000\004\100\050\001\002" +
    "\000\020\005\053\011\061\012\060\020\056\023\067\035" +
    "\052\051\066\001\002\000\026\005\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\020\uffa2\023\uffa2\027\uffa2\035\uffa2\051\uffa2\100" +
    "\uffa2\001\002\000\004\010\u01ed\001\002\000\020\042\074" +
    "\043\076\051\104\060\071\065\101\066\073\073\072\001" +
    "\002\000\004\100\u01bb\001\002\000\026\005\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\020\uffa0\023\uffa0\027\uffa0\035\uffa0\051" +
    "\uffa0\100\uffa0\001\002\000\004\070\u01b4\001\002\000\026" +
    "\005\uffa1\011\uffa1\012\uffa1\013\uffa1\020\uffa1\023\uffa1\027" +
    "\uffa1\035\uffa1\051\uffa1\100\uffa1\001\002\000\004\051\u01a4" +
    "\001\002\000\004\051\u0185\001\002\000\004\100\u0183\001" +
    "\002\000\004\100\u0181\001\002\000\022\005\053\011\061" +
    "\012\060\013\uffed\020\056\023\067\035\052\051\066\001" +
    "\002\000\004\013\u017d\001\002\000\022\042\074\043\076" +
    "\051\134\054\124\060\071\065\101\070\123\073\u0179\001" +
    "\002\000\004\036\070\001\002\000\020\042\074\043\076" +
    "\051\104\060\071\065\101\066\073\073\072\001\002\000" +
    "\004\065\u0178\001\002\000\012\060\071\065\101\066\073" +
    "\073\072\001\002\000\022\045\163\057\156\060\155\061" +
    "\157\062\154\063\153\066\073\073\072\001\002\000\022" +
    "\026\uffa4\054\uffa4\055\uffa4\056\uffa4\074\uffa4\100\uffa4\101" +
    "\uffa4\104\uffa4\001\002\000\010\054\u0152\055\u0154\056\u0153" +
    "\001\002\000\022\026\uffa3\054\uffa3\055\uffa3\056\uffa3\074" +
    "\uffa3\100\uffa3\101\uffa3\104\uffa3\001\002\000\020\026\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\074\uffd4\100\uffd4\101\uffd4\001" +
    "\002\000\030\045\163\054\u0152\055\u0154\056\u0153\057\156" +
    "\060\155\061\157\062\154\063\153\066\073\073\072\001" +
    "\002\000\046\026\uffe3\037\uffe3\045\uffe3\047\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\066\uffe3\073\uffe3\074\uffe3\100\uffe3\101\uffe3\104\uffe3" +
    "\001\002\000\010\054\u0152\055\u0154\056\u0153\001\002\000" +
    "\010\054\u0152\055\u0154\056\u0153\001\002\000\012\054\u0152" +
    "\055\u0154\056\u0153\073\125\001\002\000\004\100\106\001" +
    "\002\000\020\005\111\011\117\012\060\020\114\023\067" +
    "\035\110\051\122\001\002\000\026\005\uff3f\011\uff3f\012" +
    "\uff3f\013\uff3f\020\uff3f\023\uff3f\027\uff3f\034\uff3f\035\uff3f" +
    "\051\uff3f\001\002\000\004\023\u0150\001\002\000\020\042" +
    "\074\043\076\051\104\060\071\065\101\066\073\073\072" +
    "\001\002\000\004\100\u011c\001\002\000\026\005\uff3d\011" +
    "\uff3d\012\uff3d\013\uff3d\020\uff3d\023\uff3d\027\uff3d\034\uff3d" +
    "\035\uff3d\051\uff3d\001\002\000\004\070\u0115\001\002\000" +
    "\004\034\u0113\001\002\000\022\005\111\011\117\012\060" +
    "\020\114\023\067\034\uff46\035\110\051\122\001\002\000" +
    "\004\051\214\001\002\000\004\100\212\001\002\000\026" +
    "\005\uff3e\011\uff3e\012\uff3e\013\uff3e\020\uff3e\023\uff3e\027" +
    "\uff3e\034\uff3e\035\uff3e\051\uff3e\001\002\000\010\054\124" +
    "\070\123\073\125\001\002\000\004\051\202\001\002\000" +
    "\022\042\074\043\076\051\150\060\071\064\151\065\101" +
    "\066\073\073\072\001\002\000\020\042\074\043\076\051" +
    "\134\060\071\065\101\073\127\074\126\001\002\000\014" +
    "\026\uff20\054\uff20\055\uff20\056\uff20\100\uff20\001\002\000" +
    "\014\042\074\043\076\051\134\060\071\065\101\001\002" +
    "\000\004\074\137\001\002\000\006\074\uff1a\104\uff1a\001" +
    "\002\000\006\074\uff19\104\uff19\001\002\000\004\104\135" +
    "\001\002\000\006\074\uff1b\104\uff1b\001\002\000\016\042" +
    "\074\043\076\051\134\060\071\065\101\073\127\001\002" +
    "\000\006\074\uff1c\100\uff1c\001\002\000\014\026\uff1f\054" +
    "\uff1f\055\uff1f\056\uff1f\100\uff1f\001\002\000\004\074\141" +
    "\001\002\000\010\074\uff1d\100\uff1d\104\142\001\002\000" +
    "\016\042\074\043\076\051\134\060\071\065\101\073\127" +
    "\001\002\000\006\074\uff1e\100\uff1e\001\002\000\004\100" +
    "\uffb6\001\002\000\024\045\163\057\156\060\155\061\157" +
    "\062\154\063\153\066\073\073\072\100\uffb7\001\002\000" +
    "\004\100\uffb9\001\002\000\004\100\uffb8\001\002\000\006" +
    "\073\125\100\uffba\001\002\000\004\100\152\001\002\000" +
    "\004\100\uffb5\001\002\000\006\060\071\065\101\001\002" +
    "\000\006\060\071\065\101\001\002\000\006\060\071\065" +
    "\101\001\002\000\006\060\071\065\101\001\002\000\006" +
    "\060\071\065\101\001\002\000\020\026\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\074\uffc4\100\uffc4\101\uffc4\001\002\000\020" +
    "\026\uffcc\054\uffcc\055\uffcc\056\uffcc\074\uffcc\100\uffcc\101" +
    "\uffcc\001\002\000\020\026\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\074\uffc7\100\uffc7\101\uffc7\001\002\000\006\060\071\065" +
    "\101\001\002\000\020\026\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\074\uffd5\100\uffd5\101\uffd5\001\002\000\020\026\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\074\uffcf\100\uffcf\101\uffcf\001\002" +
    "\000\034\026\uffce\045\163\054\uffce\055\uffce\056\uffce\061" +
    "\157\062\154\063\153\066\073\073\072\074\uffce\100\uffce" +
    "\101\uffce\001\002\000\020\026\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\074\uffcd\100\uffcd\101\uffcd\001\002\000\032\026\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\061\157\062\154\063\153\066" +
    "\073\073\072\074\uffcb\100\uffcb\101\uffcb\001\002\000\020" +
    "\026\uffc9\054\uffc9\055\uffc9\056\uffc9\074\uffc9\100\uffc9\101" +
    "\uffc9\001\002\000\040\026\uffd3\045\163\054\uffd3\055\uffd3" +
    "\056\uffd3\057\156\060\155\061\157\062\154\063\153\066" +
    "\073\073\072\074\uffd3\100\uffd3\101\uffd3\001\002\000\020" +
    "\026\uffd1\054\uffd1\055\uffd1\056\uffd1\074\uffd1\100\uffd1\101" +
    "\uffd1\001\002\000\040\026\uffd2\045\163\054\uffd2\055\uffd2" +
    "\056\uffd2\057\156\060\155\061\157\062\154\063\153\066" +
    "\073\073\072\074\uffd2\100\uffd2\101\uffd2\001\002\000\020" +
    "\026\uffd0\054\uffd0\055\uffd0\056\uffd0\074\uffd0\100\uffd0\101" +
    "\uffd0\001\002\000\032\026\uffca\054\uffca\055\uffca\056\uffca" +
    "\061\157\062\154\063\153\066\073\073\072\074\uffca\100" +
    "\uffca\101\uffca\001\002\000\020\026\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\074\uffc8\100\uffc8\101\uffc8\001\002\000\026\026" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\063\153\066\073\073\072" +
    "\074\uffc5\100\uffc5\101\uffc5\001\002\000\020\026\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\074\uffc6\100\uffc6\101\uffc6\001\002" +
    "\000\004\054\203\001\002\000\022\042\074\043\076\051" +
    "\210\060\071\064\211\065\101\066\073\073\072\001\002" +
    "\000\004\100\uffb0\001\002\000\024\045\163\057\156\060" +
    "\155\061\157\062\154\063\153\066\073\073\072\100\uffb1" +
    "\001\002\000\004\100\uffb3\001\002\000\004\100\uffb2\001" +
    "\002\000\006\073\125\100\uffb4\001\002\000\004\100\uffaf" +
    "\001\002\000\022\005\111\011\117\012\060\020\114\023" +
    "\067\034\uff42\035\110\051\122\001\002\000\004\034\uff41" +
    "\001\002\000\004\054\215\001\002\000\006\060\071\065" +
    "\101\001\002\000\004\037\217\001\002\000\006\060\071" +
    "\065\101\001\002\000\004\047\221\001\002\000\006\060" +
    "\071\065\101\001\002\000\004\100\223\001\002\000\020" +
    "\005\226\011\061\012\060\020\231\023\236\035\225\051" +
    "\122\001\002\000\022\005\226\011\061\012\060\020\231" +
    "\023\236\032\uff28\035\225\051\122\001\002\000\006\011" +
    "\u010e\023\u010d\001\002\000\020\042\074\043\076\051\104" +
    "\060\071\065\101\066\073\073\072\001\002\000\004\100" +
    "\331\001\002\000\026\005\uff67\011\uff67\012\uff67\013\uff67" +
    "\020\uff67\023\uff67\027\uff67\032\uff67\035\uff67\051\uff67\001" +
    "\002\000\004\070\322\001\002\000\004\100\320\001\002" +
    "\000\026\005\uff68\011\uff68\012\uff68\013\uff68\020\uff68\023" +
    "\uff68\027\uff68\032\uff68\035\uff68\051\uff68\001\002\000\004" +
    "\032\315\001\002\000\026\005\uff66\011\uff66\012\uff66\013" +
    "\uff66\020\uff66\023\uff66\027\uff66\032\uff66\035\uff66\051\uff66" +
    "\001\002\000\004\036\237\001\002\000\020\042\074\043" +
    "\076\051\104\060\071\065\101\066\073\073\072\001\002" +
    "\000\004\100\241\001\002\000\020\005\111\011\117\012" +
    "\060\020\244\023\067\035\242\051\122\001\002\000\006" +
    "\011\312\023\311\001\002\000\004\100\307\001\002\000" +
    "\004\070\255\001\002\000\022\005\111\011\117\012\060" +
    "\020\244\023\067\034\uff51\035\242\051\122\001\002\000" +
    "\004\100\252\001\002\000\004\034\250\001\002\000\004" +
    "\100\251\001\002\000\026\005\uff54\011\uff54\012\uff54\013" +
    "\uff54\020\uff54\023\uff54\027\uff54\032\uff54\035\uff54\051\uff54" +
    "\001\002\000\022\005\111\011\117\012\060\020\244\023" +
    "\067\034\uff4d\035\242\051\122\001\002\000\004\034\uff4c" +
    "\001\002\000\004\034\uff4e\001\002\000\004\021\256\001" +
    "\002\000\004\073\257\001\002\000\022\042\074\043\076" +
    "\051\264\060\071\064\265\065\101\066\073\073\072\001" +
    "\002\000\006\074\uffdf\101\305\001\002\000\026\045\163" +
    "\057\156\060\155\061\157\062\154\063\153\066\073\073" +
    "\072\074\uffe0\101\303\001\002\000\004\074\300\001\002" +
    "\000\006\074\uffdc\101\276\001\002\000\010\070\270\074" +
    "\uffde\101\271\001\002\000\006\074\uffe1\101\266\001\002" +
    "\000\022\042\074\043\076\051\264\060\071\064\265\065" +
    "\101\066\073\073\072\001\002\000\004\074\uffdb\001\002" +
    "\000\004\051\273\001\002\000\022\042\074\043\076\051" +
    "\264\060\071\064\265\065\101\066\073\073\072\001\002" +
    "\000\004\074\uffd7\001\002\000\006\074\uffdd\101\274\001" +
    "\002\000\022\042\074\043\076\051\264\060\071\064\265" +
    "\065\101\066\073\073\072\001\002\000\004\074\uffd6\001" +
    "\002\000\022\042\074\043\076\051\264\060\071\064\265" +
    "\065\101\066\073\073\072\001\002\000\004\074\uffd9\001" +
    "\002\000\004\100\301\001\002\000\022\005\111\011\117" +
    "\012\060\020\244\023\067\034\uff53\035\242\051\122\001" +
    "\002\000\004\034\uff50\001\002\000\022\042\074\043\076" +
    "\051\264\060\071\064\265\065\101\066\073\073\072\001" +
    "\002\000\004\074\uffda\001\002\000\022\042\074\043\076" +
    "\051\264\060\071\064\265\065\101\066\073\073\072\001" +
    "\002\000\004\074\uffd8\001\002\000\022\005\111\011\117" +
    "\012\060\020\244\023\067\034\uff52\035\242\051\122\001" +
    "\002\000\004\034\uff4f\001\002\000\004\100\314\001\002" +
    "\000\004\100\313\001\002\000\004\034\uff4a\001\002\000" +
    "\004\034\uff4b\001\002\000\004\051\316\001\002\000\004" +
    "\100\317\001\002\000\026\005\uff2b\011\uff2b\012\uff2b\013" +
    "\uff2b\020\uff2b\023\uff2b\027\uff2b\034\uff2b\035\uff2b\051\uff2b" +
    "\001\002\000\022\005\226\011\061\012\060\020\231\023" +
    "\236\032\uff24\035\225\051\122\001\002\000\004\032\uff23" +
    "\001\002\000\004\021\323\001\002\000\004\073\324\001" +
    "\002\000\022\042\074\043\076\051\264\060\071\064\265" +
    "\065\101\066\073\073\072\001\002\000\004\074\326\001" +
    "\002\000\004\100\327\001\002\000\022\005\226\011\061" +
    "\012\060\020\231\023\236\032\uff2a\035\225\051\122\001" +
    "\002\000\004\032\uff27\001\002\000\022\005\226\011\061" +
    "\012\060\020\231\023\236\032\uff29\035\225\051\122\001" +
    "\002\000\004\032\uff26\001\002\000\004\026\334\001\002" +
    "\000\004\100\335\001\002\000\020\005\226\011\061\012" +
    "\060\020\341\023\236\035\337\051\122\001\002\000\024" +
    "\005\226\011\061\012\060\013\uff63\020\341\023\236\027" +
    "\uff63\035\337\051\122\001\002\000\004\011\u010a\001\002" +
    "\000\004\100\u0108\001\002\000\004\070\u0101\001\002\000" +
    "\004\100\377\001\002\000\006\013\347\027\346\001\002" +
    "\000\004\013\374\001\002\000\004\100\367\001\002\000" +
    "\006\005\352\100\353\001\002\000\004\005\350\001\002" +
    "\000\004\100\351\001\002\000\026\005\uff5c\011\uff5c\012" +
    "\uff5c\013\uff5c\020\uff5c\023\uff5c\027\uff5c\032\uff5c\035\uff5c" +
    "\051\uff5c\001\002\000\020\042\074\043\076\051\104\060" +
    "\071\065\101\066\073\073\072\001\002\000\020\005\226" +
    "\011\061\012\060\020\341\023\236\035\337\051\122\001" +
    "\002\000\004\013\355\001\002\000\004\005\356\001\002" +
    "\000\004\100\357\001\002\000\026\005\uff5b\011\uff5b\012" +
    "\uff5b\013\uff5b\020\uff5b\023\uff5b\027\uff5b\032\uff5b\035\uff5b" +
    "\051\uff5b\001\002\000\004\026\361\001\002\000\004\100" +
    "\362\001\002\000\020\005\226\011\061\012\060\020\341" +
    "\023\236\035\337\051\122\001\002\000\006\013\uff56\027" +
    "\366\001\002\000\004\013\uff55\001\002\000\004\100\uff57" +
    "\001\002\000\006\005\352\100\uff58\001\002\000\020\005" +
    "\226\011\061\012\060\020\341\023\236\035\337\051\122" +
    "\001\002\000\004\013\371\001\002\000\004\005\372\001" +
    "\002\000\004\100\373\001\002\000\026\005\uff5a\011\uff5a" +
    "\012\uff5a\013\uff5a\020\uff5a\023\uff5a\027\uff5a\032\uff5a\035" +
    "\uff5a\051\uff5a\001\002\000\004\005\375\001\002\000\004" +
    "\100\376\001\002\000\026\005\uff59\011\uff59\012\uff59\013" +
    "\uff59\020\uff59\023\uff59\027\uff59\032\uff59\035\uff59\051\uff59" +
    "\001\002\000\024\005\226\011\061\012\060\013\uff5f\020" +
    "\341\023\236\027\uff5f\035\337\051\122\001\002\000\006" +
    "\013\uff5e\027\uff5e\001\002\000\004\021\u0102\001\002\000" +
    "\004\073\u0103\001\002\000\022\042\074\043\076\051\264" +
    "\060\071\064\265\065\101\066\073\073\072\001\002\000" +
    "\004\074\u0105\001\002\000\004\100\u0106\001\002\000\024" +
    "\005\226\011\061\012\060\013\uff65\020\341\023\236\027" +
    "\uff65\035\337\051\122\001\002\000\006\013\uff62\027\uff62" +
    "\001\002\000\024\005\226\011\061\012\060\013\uff64\020" +
    "\341\023\236\027\uff64\035\337\051\122\001\002\000\006" +
    "\013\uff61\027\uff61\001\002\000\004\100\u010b\001\002\000" +
    "\006\013\uff5d\027\uff5d\001\002\000\006\013\uff60\027\uff60" +
    "\001\002\000\004\100\u0110\001\002\000\004\100\u010f\001" +
    "\002\000\004\032\uff22\001\002\000\004\032\uff21\001\002" +
    "\000\004\032\uff25\001\002\000\004\034\uff43\001\002\000" +
    "\004\100\u0114\001\002\000\030\005\uff49\011\uff49\012\uff49" +
    "\013\uff49\020\uff49\023\uff49\027\uff49\034\uff49\035\uff49\051" +
    "\uff49\100\uff49\001\002\000\004\021\u0116\001\002\000\004" +
    "\073\u0117\001\002\000\022\042\074\043\076\051\264\060" +
    "\071\064\265\065\101\066\073\073\072\001\002\000\004" +
    "\074\u0119\001\002\000\004\100\u011a\001\002\000\022\005" +
    "\111\011\117\012\060\020\114\023\067\034\uff48\035\110" +
    "\051\122\001\002\000\004\034\uff45\001\002\000\022\005" +
    "\111\011\117\012\060\020\114\023\067\034\uff47\035\110" +
    "\051\122\001\002\000\004\034\uff44\001\002\000\004\026" +
    "\u011f\001\002\000\004\100\u0120\001\002\000\020\005\111" +
    "\011\117\012\060\020\u0123\023\067\035\u0121\051\122\001" +
    "\002\000\004\023\u014e\001\002\000\004\100\u014c\001\002" +
    "\000\004\070\u0145\001\002\000\024\005\111\011\117\012" +
    "\060\013\uff3a\020\u0123\023\067\027\uff3a\035\u0121\051\122" +
    "\001\002\000\004\100\u0142\001\002\000\006\013\u012a\027" +
    "\u0127\001\002\000\006\005\u0135\100\u0136\001\002\000\004" +
    "\100\u0130\001\002\000\004\013\u012d\001\002\000\004\005" +
    "\u012b\001\002\000\004\100\u012c\001\002\000\026\005\uff33" +
    "\011\uff33\012\uff33\013\uff33\020\uff33\023\uff33\027\uff33\034" +
    "\uff33\035\uff33\051\uff33\001\002\000\004\005\u012e\001\002" +
    "\000\004\100\u012f\001\002\000\026\005\uff30\011\uff30\012" +
    "\uff30\013\uff30\020\uff30\023\uff30\027\uff30\034\uff30\035\uff30" +
    "\051\uff30\001\002\000\020\005\111\011\117\012\060\020" +
    "\u0123\023\067\035\u0121\051\122\001\002\000\004\013\u0132" +
    "\001\002\000\004\005\u0133\001\002\000\004\100\u0134\001" +
    "\002\000\026\005\uff31\011\uff31\012\uff31\013\uff31\020\uff31" +
    "\023\uff31\027\uff31\034\uff31\035\uff31\051\uff31\001\002\000" +
    "\020\042\074\043\076\051\104\060\071\065\101\066\073" +
    "\073\072\001\002\000\020\005\111\011\117\012\060\020" +
    "\u0123\023\067\035\u0121\051\122\001\002\000\004\013\u0138" +
    "\001\002\000\004\005\u0139\001\002\000\004\100\u013a\001" +
    "\002\000\026\005\uff32\011\uff32\012\uff32\013\uff32\020\uff32" +
    "\023\uff32\027\uff32\034\uff32\035\uff32\051\uff32\001\002\000" +
    "\004\026\u013c\001\002\000\004\100\u013d\001\002\000\020" +
    "\005\111\011\117\012\060\020\u0123\023\067\035\u0121\051" +
    "\122\001\002\000\006\013\uff2d\027\u013f\001\002\000\006" +
    "\005\u0135\100\uff2f\001\002\000\004\100\uff2e\001\002\000" +
    "\004\013\uff2c\001\002\000\024\005\111\011\117\012\060" +
    "\013\uff36\020\u0123\023\067\027\uff36\035\u0121\051\122\001" +
    "\002\000\006\013\uff35\027\uff35\001\002\000\006\013\uff37" +
    "\027\uff37\001\002\000\004\021\u0146\001\002\000\004\073" +
    "\u0147\001\002\000\022\042\074\043\076\051\264\060\071" +
    "\064\265\065\101\066\073\073\072\001\002\000\004\074" +
    "\u0149\001\002\000\004\100\u014a\001\002\000\024\005\111" +
    "\011\117\012\060\013\uff3c\020\u0123\023\067\027\uff3c\035" +
    "\u0121\051\122\001\002\000\006\013\uff39\027\uff39\001\002" +
    "\000\024\005\111\011\117\012\060\013\uff3b\020\u0123\023" +
    "\067\027\uff3b\035\u0121\051\122\001\002\000\006\013\uff38" +
    "\027\uff38\001\002\000\004\100\u014f\001\002\000\006\013" +
    "\uff34\027\uff34\001\002\000\004\100\u0151\001\002\000\004" +
    "\034\uff40\001\002\000\020\042\uff75\043\uff75\051\uff75\060" +
    "\uff75\065\uff75\066\uff75\073\uff75\001\002\000\022\042\uff73" +
    "\043\uff73\051\uff73\054\u015c\060\uff73\065\uff73\066\uff73\073" +
    "\uff73\001\002\000\022\042\uff74\043\uff74\051\uff74\054\u015b" +
    "\060\uff74\065\uff74\066\uff74\073\uff74\001\002\000\020\042" +
    "\074\043\076\051\u015a\060\071\065\101\066\073\073\072" +
    "\001\002\000\006\026\uff8d\100\uff8d\001\002\000\026\026" +
    "\uff8e\045\163\057\156\060\155\061\157\062\154\063\153" +
    "\066\073\073\072\100\uff8e\001\002\000\006\026\uff7e\100" +
    "\uff7e\001\002\000\006\026\uff8c\100\uff8c\001\002\000\010" +
    "\026\uff8f\073\125\100\uff8f\001\002\000\020\042\uff77\043" +
    "\uff77\051\uff77\060\uff77\065\uff77\066\uff77\073\uff77\001\002" +
    "\000\020\042\uff76\043\uff76\051\uff76\060\uff76\065\uff76\066" +
    "\uff76\073\uff76\001\002\000\020\042\074\043\076\051\u0162" +
    "\060\071\065\101\066\073\073\072\001\002\000\006\026" +
    "\uff88\100\uff88\001\002\000\026\026\uff8b\045\163\057\156" +
    "\060\155\061\157\062\154\063\153\066\073\073\072\100" +
    "\uff8b\001\002\000\006\026\uff7c\100\uff7c\001\002\000\006" +
    "\026\uff8a\100\uff8a\001\002\000\010\026\uff89\073\125\100" +
    "\uff89\001\002\000\020\042\074\043\076\051\u0167\060\071" +
    "\065\101\066\073\073\072\001\002\000\006\026\uff7b\100" +
    "\uff7b\001\002\000\026\026\uff79\045\163\057\156\060\155" +
    "\061\157\062\154\063\153\066\073\073\072\100\uff79\001" +
    "\002\000\006\026\uff78\100\uff78\001\002\000\006\026\uff7a" +
    "\100\uff7a\001\002\000\020\042\074\043\076\051\u016d\060" +
    "\071\065\101\066\073\073\072\001\002\000\006\026\uff80" +
    "\100\uff80\001\002\000\026\026\uff83\045\163\057\156\060" +
    "\155\061\157\062\154\063\153\066\073\073\072\100\uff83" +
    "\001\002\000\006\026\uff7d\100\uff7d\001\002\000\006\026" +
    "\uff81\100\uff81\001\002\000\010\026\uff82\073\125\100\uff82" +
    "\001\002\000\020\042\074\043\076\051\u0173\060\071\065" +
    "\101\066\073\073\072\001\002\000\006\026\uff87\100\uff87" +
    "\001\002\000\026\026\uff86\045\163\057\156\060\155\061" +
    "\157\062\154\063\153\066\073\073\072\100\uff86\001\002" +
    "\000\006\026\uff7f\100\uff7f\001\002\000\006\026\uff84\100" +
    "\uff84\001\002\000\010\026\uff85\073\125\100\uff85\001\002" +
    "\000\020\026\uffc2\054\uffc2\055\uffc2\056\uffc2\074\uffc2\100" +
    "\uffc2\101\uffc2\001\002\000\022\045\163\057\156\060\155" +
    "\061\157\062\154\063\153\066\073\073\072\001\002\000" +
    "\004\074\u0177\001\002\000\020\026\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\074\uffc3\100\uffc3\101\uffc3\001\002\000\046\026" +
    "\uffe2\037\uffe2\045\uffe2\047\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2\073" +
    "\uffe2\074\uffe2\100\uffe2\101\uffe2\104\uffe2\001\002\000\020" +
    "\042\074\043\076\051\134\060\071\065\101\073\127\074" +
    "\126\001\002\000\004\100\u017b\001\002\000\004\100\uffe4" +
    "\001\002\000\006\074\141\104\135\001\002\000\004\010" +
    "\u017e\001\002\000\004\100\u017f\001\002\000\006\013\ufff0" +
    "\100\ufff0\001\002\000\004\013\uffe9\001\002\000\022\005" +
    "\053\011\061\012\060\013\uffe7\020\056\023\067\035\052" +
    "\051\066\001\002\000\004\013\uffe6\001\002\000\022\005" +
    "\053\011\061\012\060\013\uffec\020\056\023\067\035\052" +
    "\051\066\001\002\000\004\013\uffe8\001\002\000\004\054" +
    "\u0186\001\002\000\006\060\071\065\101\001\002\000\004" +
    "\037\u0188\001\002\000\006\060\071\065\101\001\002\000" +
    "\004\047\u018a\001\002\000\006\060\071\065\101\001\002" +
    "\000\004\100\u018c\001\002\000\020\005\226\011\061\012" +
    "\060\020\u0191\023\236\035\u018e\051\122\001\002\000\022" +
    "\005\226\011\061\012\060\020\u0191\023\236\032\uff6f\035" +
    "\u018e\051\122\001\002\000\004\011\u01a1\001\002\000\004" +
    "\032\u019e\001\002\000\004\100\u019c\001\002\000\004\070" +
    "\u0195\001\002\000\004\100\u0193\001\002\000\022\005\226" +
    "\011\061\012\060\020\u0191\023\236\032\uff6b\035\u018e\051" +
    "\122\001\002\000\004\032\uff6a\001\002\000\004\021\u0196" +
    "\001\002\000\004\073\u0197\001\002\000\022\042\074\043" +
    "\076\051\264\060\071\064\265\065\101\066\073\073\072" +
    "\001\002\000\004\074\u0199\001\002\000\004\100\u019a\001" +
    "\002\000\022\005\226\011\061\012\060\020\u0191\023\236" +
    "\032\uff71\035\u018e\051\122\001\002\000\004\032\uff6e\001" +
    "\002\000\022\005\226\011\061\012\060\020\u0191\023\236" +
    "\032\uff70\035\u018e\051\122\001\002\000\004\032\uff6d\001" +
    "\002\000\004\051\u019f\001\002\000\004\100\u01a0\001\002" +
    "\000\030\005\uff72\011\uff72\012\uff72\013\uff72\020\uff72\023" +
    "\uff72\027\uff72\032\uff72\035\uff72\051\uff72\100\uff72\001\002" +
    "\000\004\100\u01a2\001\002\000\004\032\uff69\001\002\000" +
    "\004\032\uff6c\001\002\000\006\022\u01a5\054\u01a6\001\002" +
    "\000\014\014\042\015\041\016\044\046\043\051\040\001" +
    "\002\000\022\042\074\043\076\051\u01ad\060\071\064\u01ac" +
    "\065\101\066\073\073\072\001\002\000\004\100\uffa5\001" +
    "\002\000\024\045\163\057\156\060\155\061\157\062\154" +
    "\063\153\066\073\073\072\100\uffa6\001\002\000\004\100" +
    "\uffbe\001\002\000\004\100\uffbf\001\002\000\004\100\uffbb" +
    "\001\002\000\004\100\uffa7\001\002\000\006\073\125\100" +
    "\uffae\001\002\000\006\054\u01af\100\uffc1\001\002\000\022" +
    "\042\074\043\076\051\u01b3\060\071\064\u01ac\065\101\066" +
    "\073\073\072\001\002\000\004\100\uffbd\001\002\000\004" +
    "\100\uffc0\001\002\000\004\100\uffbc\001\002\000\006\073" +
    "\125\100\uffad\001\002\000\004\021\u01b5\001\002\000\004" +
    "\073\u01b6\001\002\000\022\042\074\043\076\051\264\060" +
    "\071\064\265\065\101\066\073\073\072\001\002\000\004" +
    "\074\u01b8\001\002\000\004\100\u01b9\001\002\000\022\005" +
    "\053\011\061\012\060\013\uffef\020\056\023\067\035\052" +
    "\051\066\001\002\000\004\013\uffeb\001\002\000\022\005" +
    "\053\011\061\012\060\013\uffee\020\056\023\067\035\052" +
    "\051\066\001\002\000\004\013\uffea\001\002\000\004\026" +
    "\u01be\001\002\000\004\100\u01bf\001\002\000\016\005\053" +
    "\011\061\012\060\020\u01c1\023\067\051\122\001\002\000" +
    "\004\100\u01eb\001\002\000\004\070\u01e4\001\002\000\006" +
    "\013\u01cc\027\u01cb\001\002\000\004\100\u01c7\001\002\000" +
    "\010\013\uff99\027\uff99\100\u01c5\001\002\000\016\005\053" +
    "\011\061\012\060\020\u01c1\023\067\051\122\001\002\000" +
    "\006\013\uff95\027\uff95\001\002\000\022\005\053\011\061" +
    "\012\060\013\uff98\020\u01c1\023\067\027\uff98\051\122\001" +
    "\002\000\006\013\uff94\027\uff94\001\002\000\004\013\u01e1" +
    "\001\002\000\004\100\u01dc\001\002\000\006\005\u01cf\100" +
    "\u01d0\001\002\000\004\005\u01cd\001\002\000\004\100\u01ce" +
    "\001\002\000\026\005\uff9f\011\uff9f\012\uff9f\013\uff9f\020" +
    "\uff9f\023\uff9f\027\uff9f\035\uff9f\051\uff9f\100\uff9f\001\002" +
    "\000\020\042\074\043\076\051\104\060\071\065\101\066" +
    "\073\073\072\001\002\000\016\005\053\011\061\012\060" +
    "\020\u01c1\023\067\051\122\001\002\000\004\013\u01d2\001" +
    "\002\000\004\005\u01d3\001\002\000\004\100\u01d4\001\002" +
    "\000\026\005\uff9e\011\uff9e\012\uff9e\013\uff9e\020\uff9e\023" +
    "\uff9e\027\uff9e\035\uff9e\051\uff9e\100\uff9e\001\002\000\004" +
    "\026\u01d6\001\002\000\004\100\u01d7\001\002\000\016\005" +
    "\053\011\061\012\060\020\u01c1\023\067\051\122\001\002" +
    "\000\006\013\uff90\027\u01db\001\002\000\004\013\uff91\001" +
    "\002\000\004\100\uff93\001\002\000\006\005\u01cf\100\uff92" +
    "\001\002\000\016\005\053\011\061\012\060\020\u01c1\023" +
    "\067\051\122\001\002\000\004\013\u01de\001\002\000\004" +
    "\005\u01df\001\002\000\004\100\u01e0\001\002\000\026\005" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\020\uff9d\023\uff9d\027\uff9d" +
    "\035\uff9d\051\uff9d\100\uff9d\001\002\000\004\005\u01e2\001" +
    "\002\000\004\100\u01e3\001\002\000\026\005\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\020\uff9c\023\uff9c\027\uff9c\035\uff9c\051" +
    "\uff9c\100\uff9c\001\002\000\004\021\u01e5\001\002\000\004" +
    "\073\u01e6\001\002\000\022\042\074\043\076\051\264\060" +
    "\071\064\265\065\101\066\073\073\072\001\002\000\004" +
    "\074\u01e8\001\002\000\004\100\u01e9\001\002\000\022\005" +
    "\053\011\061\012\060\013\uff9b\020\u01c1\023\067\027\uff9b" +
    "\051\122\001\002\000\006\013\uff97\027\uff97\001\002\000" +
    "\022\005\053\011\061\012\060\013\uff9a\020\u01c1\023\067" +
    "\027\uff9a\051\122\001\002\000\006\013\uff96\027\uff96\001" +
    "\002\000\004\100\u01ee\001\002\000\004\013\uffe5\001\002" +
    "\000\004\022\u01f0\001\002\000\014\014\042\015\041\016" +
    "\044\046\043\051\040\001\002\000\006\074\uff11\104\u01f2" +
    "\001\002\000\006\051\035\106\033\001\002\000\004\074" +
    "\uff12\001\002\000\004\074\u01f5\001\002\000\004\100\u01f6" +
    "\001\002\000\020\005\053\011\061\012\060\020\056\023" +
    "\067\035\052\051\066\001\002\000\004\013\u01f8\001\002" +
    "\000\004\010\u01f9\001\002\000\004\100\u01fa\001\002\000" +
    "\006\013\ufff1\100\ufff1\001\002\000\004\007\u01fc\001\002" +
    "\000\006\002\ufff8\100\ufff8\001\002\000\004\013\ufff6\001" +
    "\002\000\006\006\015\033\016\001\002\000\004\013\ufff4" +
    "\001\002\000\006\006\015\033\016\001\002\000\004\013" +
    "\ufff2\001\002\000\004\051\u0203\001\002\000\004\073\u0204" +
    "\001\002\000\006\051\035\106\033\001\002\000\004\074" +
    "\u0206\001\002\000\004\022\u0207\001\002\000\014\014\042" +
    "\015\041\016\044\046\043\051\040\001\002\000\004\100" +
    "\u0209\001\002\000\020\005\u020b\011\u0211\012\060\020\u020f" +
    "\023\u0215\035\u020a\051\122\001\002\000\004\030\u02e8\001" +
    "\002\000\020\042\074\043\076\051\104\060\071\065\101" +
    "\066\073\073\072\001\002\000\004\013\u02c7\001\002\000" +
    "\004\100\u02c5\001\002\000\026\005\uff06\011\uff06\012\uff06" +
    "\013\uff06\020\uff06\023\uff06\027\uff06\034\uff06\035\uff06\051" +
    "\uff06\001\002\000\004\070\u02be\001\002\000\004\100\u02bc" +
    "\001\002\000\004\051\u029b\001\002\000\026\005\uff05\011" +
    "\uff05\012\uff05\013\uff05\020\uff05\023\uff05\027\uff05\034\uff05" +
    "\035\uff05\051\uff05\001\002\000\022\005\u020b\011\u0211\012" +
    "\060\013\uff0e\020\u020f\023\u0215\035\u020a\051\122\001\002" +
    "\000\026\005\uff07\011\uff07\012\uff07\013\uff07\020\uff07\023" +
    "\uff07\027\uff07\034\uff07\035\uff07\051\uff07\001\002\000\004" +
    "\036\u0216\001\002\000\020\042\074\043\076\051\104\060" +
    "\071\065\101\066\073\073\072\001\002\000\004\100\u0218" +
    "\001\002\000\020\005\u021c\011\u0211\012\060\020\u0220\023" +
    "\u0223\035\u021a\051\122\001\002\000\030\005\ufee8\011\ufee8" +
    "\012\ufee8\013\ufee8\020\ufee8\023\ufee8\027\ufee8\032\ufee8\034" +
    "\ufee8\035\ufee8\051\ufee8\001\002\000\006\023\u0296\030\u0297" +
    "\001\002\000\030\005\ufee6\011\ufee6\012\ufee6\013\ufee6\020" +
    "\ufee6\023\ufee6\027\ufee6\032\ufee6\034\ufee6\035\ufee6\051\ufee6" +
    "\001\002\000\020\042\074\043\076\051\104\060\071\065" +
    "\101\066\073\073\072\001\002\000\004\100\u0260\001\002" +
    "\000\004\034\u025e\001\002\000\030\005\ufee7\011\ufee7\012" +
    "\ufee7\013\ufee7\020\ufee7\023\ufee7\027\ufee7\032\ufee7\034\ufee7" +
    "\035\ufee7\051\ufee7\001\002\000\004\070\u0257\001\002\000" +
    "\004\100\u0242\001\002\000\022\005\u021c\011\u0211\012\060" +
    "\020\u0220\023\u0223\034\ufec4\035\u021a\051\122\001\002\000" +
    "\004\036\u0224\001\002\000\020\042\074\043\076\051\104" +
    "\060\071\065\101\066\073\073\072\001\002\000\004\100" +
    "\u0226\001\002\000\020\005\111\011\117\012\060\020\u022a" +
    "\023\067\035\u0227\051\122\001\002\000\010\011\u023d\023" +
    "\u023b\030\u023c\001\002\000\004\100\u0239\001\002\000\004" +
    "\034\u0237\001\002\000\004\070\u0230\001\002\000\022\005" +
    "\111\011\117\012\060\020\114\023\067\034\ufed0\035\110" +
    "\051\122\001\002\000\004\100\u022d\001\002\000\022\005" +
    "\111\011\117\012\060\020\114\023\067\034\ufecc\035\110" +
    "\051\122\001\002\000\004\034\ufecb\001\002\000\004\034" +
    "\ufecd\001\002\000\004\021\u0231\001\002\000\004\073\u0232" +
    "\001\002\000\022\042\074\043\076\051\264\060\071\064" +
    "\265\065\101\066\073\073\072\001\002\000\004\074\u0234" +
    "\001\002\000\004\100\u0235\001\002\000\022\005\111\011" +
    "\117\012\060\020\114\023\067\034\ufed2\035\110\051\122" +
    "\001\002\000\004\034\ufecf\001\002\000\004\100\u0238\001" +
    "\002\000\030\005\ufed3\011\ufed3\012\ufed3\013\ufed3\020\ufed3" +
    "\023\ufed3\027\ufed3\032\ufed3\034\ufed3\035\ufed3\051\ufed3\001" +
    "\002\000\022\005\111\011\117\012\060\020\114\023\067" +
    "\034\ufed1\035\110\051\122\001\002\000\004\034\ufece\001" +
    "\002\000\004\100\u0240\001\002\000\004\100\u023f\001\002" +
    "\000\004\100\u023e\001\002\000\004\034\ufec9\001\002\000" +
    "\004\034\ufec8\001\002\000\004\034\ufeca\001\002\000\004" +
    "\034\ufec1\001\002\000\022\005\u020b\011\u0211\012\060\020" +
    "\u0246\023\u0215\034\ufec0\035\u0244\051\122\001\002\000\004" +
    "\034\ufebf\001\002\000\004\030\u0255\001\002\000\004\100" +
    "\u0253\001\002\000\004\070\u024c\001\002\000\004\100\u024a" +
    "\001\002\000\026\005\u020b\011\u0211\012\060\013\ufefe\020" +
    "\u0246\023\u0215\027\ufefe\034\ufefe\035\u0244\051\122\001\002" +
    "\000\010\013\ufefb\027\ufefb\034\ufefb\001\002\000\026\005" +
    "\u020b\011\u0211\012\060\013\ufefa\020\u0246\023\u0215\027\ufefa" +
    "\034\ufefa\035\u0244\051\122\001\002\000\010\013\ufef9\027" +
    "\ufef9\034\ufef9\001\002\000\004\021\u024d\001\002\000\004" +
    "\073\u024e\001\002\000\022\042\074\043\076\051\264\060" +
    "\071\064\265\065\101\066\073\073\072\001\002\000\004" +
    "\074\u0250\001\002\000\004\100\u0251\001\002\000\026\005" +
    "\u020b\011\u0211\012\060\013\uff00\020\u0246\023\u0215\027\uff00" +
    "\034\uff00\035\u0244\051\122\001\002\000\010\013\ufefd\027" +
    "\ufefd\034\ufefd\001\002\000\026\005\u020b\011\u0211\012\060" +
    "\013\ufeff\020\u0246\023\u0215\027\ufeff\034\ufeff\035\u0244\051" +
    "\122\001\002\000\010\013\ufefc\027\ufefc\034\ufefc\001\002" +
    "\000\004\100\u0256\001\002\000\010\013\ufef8\027\ufef8\034" +
    "\ufef8\001\002\000\004\021\u0258\001\002\000\004\073\u0259" +
    "\001\002\000\022\042\074\043\076\051\264\060\071\064" +
    "\265\065\101\066\073\073\072\001\002\000\004\074\u025b" +
    "\001\002\000\004\100\u025c\001\002\000\022\005\u021c\011" +
    "\u0211\012\060\020\u0220\023\u0223\034\ufec6\035\u021a\051\122" +
    "\001\002\000\004\034\ufec3\001\002\000\004\100\u025f\001" +
    "\002\000\026\005\ufec7\011\ufec7\012\ufec7\013\ufec7\020\ufec7" +
    "\023\ufec7\027\ufec7\034\ufec7\035\ufec7\051\ufec7\001\002\000" +
    "\022\005\u021c\011\u0211\012\060\020\u0220\023\u0223\034\ufec5" +
    "\035\u021a\051\122\001\002\000\004\034\ufec2\001\002\000" +
    "\004\026\u0263\001\002\000\004\100\u0264\001\002\000\020" +
    "\005\u021c\011\u0211\012\060\020\u0267\023\u0223\035\u0265\051" +
    "\122\001\002\000\006\011\u0293\030\u0292\001\002\000\004" +
    "\100\u0290\001\002\000\004\070\u0289\001\002\000\004\100" +
    "\u0287\001\002\000\006\013\u026f\027\u026c\001\002\000\024" +
    "\005\u021c\011\u0211\012\060\013\ufedf\020\u0267\023\u0223\027" +
    "\ufedf\035\u0265\051\122\001\002\000\006\013\ufedc\027\ufedc" +
    "\001\002\000\006\005\u027a\100\u027b\001\002\000\004\100" +
    "\u0275\001\002\000\004\013\u0272\001\002\000\004\005\u0270" +
    "\001\002\000\004\100\u0271\001\002\000\030\005\ufee5\011" +
    "\ufee5\012\ufee5\013\ufee5\020\ufee5\023\ufee5\027\ufee5\032\ufee5" +
    "\034\ufee5\035\ufee5\051\ufee5\001\002\000\004\005\u0273\001" +
    "\002\000\004\100\u0274\001\002\000\030\005\ufee2\011\ufee2" +
    "\012\ufee2\013\ufee2\020\ufee2\023\ufee2\027\ufee2\032\ufee2\034" +
    "\ufee2\035\ufee2\051\ufee2\001\002\000\020\005\u021c\011\u0211" +
    "\012\060\020\u0267\023\u0223\035\u0265\051\122\001\002\000" +
    "\004\013\u0277\001\002\000\004\005\u0278\001\002\000\004" +
    "\100\u0279\001\002\000\030\005\ufee3\011\ufee3\012\ufee3\013" +
    "\ufee3\020\ufee3\023\ufee3\027\ufee3\032\ufee3\034\ufee3\035\ufee3" +
    "\051\ufee3\001\002\000\020\042\074\043\076\051\104\060" +
    "\071\065\101\066\073\073\072\001\002\000\020\005\u021c" +
    "\011\u0211\012\060\020\u0267\023\u0223\035\u0265\051\122\001" +
    "\002\000\004\013\u027d\001\002\000\004\005\u027e\001\002" +
    "\000\004\100\u027f\001\002\000\030\005\ufee4\011\ufee4\012" +
    "\ufee4\013\ufee4\020\ufee4\023\ufee4\027\ufee4\032\ufee4\034\ufee4" +
    "\035\ufee4\051\ufee4\001\002\000\004\026\u0281\001\002\000" +
    "\004\100\u0282\001\002\000\020\005\u021c\011\u0211\012\060" +
    "\020\u0267\023\u0223\035\u0265\051\122\001\002\000\006\013" +
    "\ufed5\027\u0284\001\002\000\006\005\u027a\100\ufed7\001\002" +
    "\000\004\100\ufed6\001\002\000\004\013\ufed4\001\002\000" +
    "\024\005\u020b\011\u0211\012\060\013\ufedb\020\u0246\023\u0215" +
    "\027\ufedb\035\u0244\051\122\001\002\000\006\013\ufeda\027" +
    "\ufeda\001\002\000\004\021\u028a\001\002\000\004\073\u028b" +
    "\001\002\000\022\042\074\043\076\051\264\060\071\064" +
    "\265\065\101\066\073\073\072\001\002\000\004\074\u028d" +
    "\001\002\000\004\100\u028e\001\002\000\024\005\u021c\011" +
    "\u0211\012\060\013\ufee1\020\u0267\023\u0223\027\ufee1\035\u0265" +
    "\051\122\001\002\000\006\013\ufede\027\ufede\001\002\000" +
    "\024\005\u021c\011\u0211\012\060\013\ufee0\020\u0267\023\u0223" +
    "\027\ufee0\035\u0265\051\122\001\002\000\006\013\ufedd\027" +
    "\ufedd\001\002\000\004\100\u0295\001\002\000\004\100\u0294" +
    "\001\002\000\006\013\ufed8\027\ufed8\001\002\000\006\013" +
    "\ufed9\027\ufed9\001\002\000\004\100\u0299\001\002\000\004" +
    "\100\u0298\001\002\000\004\034\ufebd\001\002\000\004\034" +
    "\ufebe\001\002\000\004\013\uff0a\001\002\000\004\054\u029c" +
    "\001\002\000\006\060\071\065\101\001\002\000\004\037" +
    "\u029e\001\002\000\006\060\071\065\101\001\002\000\004" +
    "\047\u02a0\001\002\000\006\060\071\065\101\001\002\000" +
    "\004\100\u02a2\001\002\000\020\005\u021c\011\u0211\012\060" +
    "\020\u02a5\023\u0223\035\u02a3\051\122\001\002\000\006\011" +
    "\u02b9\030\u02b8\001\002\000\004\100\u02b6\001\002\000\004" +
    "\070\u02af\001\002\000\004\100\u02ad\001\002\000\004\032" +
    "\u02aa\001\002\000\022\005\u021c\011\u0211\012\060\020\u02a5" +
    "\023\u0223\032\ufef0\035\u02a3\051\122\001\002\000\004\032" +
    "\ufeed\001\002\000\004\051\u02ab\001\002\000\004\100\u02ac" +
    "\001\002\000\030\005\ufef3\011\ufef3\012\ufef3\013\ufef3\020" +
    "\ufef3\023\ufef3\027\ufef3\032\ufef3\034\ufef3\035\ufef3\051\ufef3" +
    "\001\002\000\022\005\u021c\011\u0211\012\060\020\u02a5\023" +
    "\u0223\032\ufeec\035\u02a3\051\122\001\002\000\004\032\ufeeb" +
    "\001\002\000\004\021\u02b0\001\002\000\004\073\u02b1\001" +
    "\002\000\022\042\074\043\076\051\264\060\071\064\265" +
    "\065\101\066\073\073\072\001\002\000\004\074\u02b3\001" +
    "\002\000\004\100\u02b4\001\002\000\022\005\u021c\011\u0211" +
    "\012\060\020\u02a5\023\u0223\032\ufef2\035\u02a3\051\122\001" +
    "\002\000\004\032\ufeef\001\002\000\022\005\u021c\011\u0211" +
    "\012\060\020\u02a5\023\u0223\032\ufef1\035\u02a3\051\122\001" +
    "\002\000\004\032\ufeee\001\002\000\004\100\u02bb\001\002" +
    "\000\004\100\u02ba\001\002\000\004\032\ufee9\001\002\000" +
    "\004\032\ufeea\001\002\000\022\005\u020b\011\u0211\012\060" +
    "\013\uff0d\020\u020f\023\u0215\035\u020a\051\122\001\002\000" +
    "\004\013\uff09\001\002\000\004\021\u02bf\001\002\000\004" +
    "\073\u02c0\001\002\000\022\042\074\043\076\051\264\060" +
    "\071\064\265\065\101\066\073\073\072\001\002\000\004" +
    "\074\u02c2\001\002\000\004\100\u02c3\001\002\000\022\005" +
    "\u020b\011\u0211\012\060\013\uff10\020\u020f\023\u0215\035\u020a" +
    "\051\122\001\002\000\004\013\uff0c\001\002\000\022\005" +
    "\u020b\011\u0211\012\060\013\uff0f\020\u020f\023\u0215\035\u020a" +
    "\051\122\001\002\000\004\013\uff0b\001\002\000\004\030" +
    "\u02c8\001\002\000\006\006\uff15\100\uff15\001\002\000\004" +
    "\026\u02ca\001\002\000\004\100\u02cb\001\002\000\020\005" +
    "\u020b\011\u0211\012\060\020\u0246\023\u0215\035\u0244\051\122" +
    "\001\002\000\006\013\u02d0\027\u02ce\001\002\000\004\013" +
    "\u02e5\001\002\000\006\005\u02d8\100\u02d9\001\002\000\004" +
    "\100\u02d3\001\002\000\004\005\u02d1\001\002\000\004\100" +
    "\u02d2\001\002\000\026\005\uff04\011\uff04\012\uff04\013\uff04" +
    "\020\uff04\023\uff04\027\uff04\034\uff04\035\uff04\051\uff04\001" +
    "\002\000\020\005\u020b\011\u0211\012\060\020\u0246\023\u0215" +
    "\035\u0244\051\122\001\002\000\004\013\u02d5\001\002\000" +
    "\004\005\u02d6\001\002\000\004\100\u02d7\001\002\000\026" +
    "\005\uff02\011\uff02\012\uff02\013\uff02\020\uff02\023\uff02\027" +
    "\uff02\034\uff02\035\uff02\051\uff02\001\002\000\020\042\074" +
    "\043\076\051\104\060\071\065\101\066\073\073\072\001" +
    "\002\000\020\005\u020b\011\u0211\012\060\020\u0246\023\u0215" +
    "\035\u0244\051\122\001\002\000\004\013\u02db\001\002\000" +
    "\004\005\u02dc\001\002\000\004\100\u02dd\001\002\000\026" +
    "\005\uff03\011\uff03\012\uff03\013\uff03\020\uff03\023\uff03\027" +
    "\uff03\034\uff03\035\uff03\051\uff03\001\002\000\004\026\u02df" +
    "\001\002\000\004\100\u02e0\001\002\000\020\005\u020b\011" +
    "\u0211\012\060\020\u0246\023\u0215\035\u0244\051\122\001\002" +
    "\000\006\013\ufef5\027\u02e3\001\002\000\004\013\ufef4\001" +
    "\002\000\006\005\u02d8\100\ufef7\001\002\000\004\100\ufef6" +
    "\001\002\000\004\005\u02e6\001\002\000\004\100\u02e7\001" +
    "\002\000\026\005\uff01\011\uff01\012\uff01\013\uff01\020\uff01" +
    "\023\uff01\027\uff01\034\uff01\035\uff01\051\uff01\001\002\000" +
    "\004\100\u02e9\001\002\000\004\013\uff08\001\002\000\004" +
    "\051\u02eb\001\002\000\004\100\u02ec\001\002\000\004\012" +
    "\u02ee\001\002\000\004\013\u02f4\001\002\000\004\051\u02ef" +
    "\001\002\000\004\022\u02f0\001\002\000\014\014\042\015" +
    "\041\016\044\046\043\051\040\001\002\000\004\100\u02f2" +
    "\001\002\000\006\012\u02ee\013\uff18\001\002\000\004\013" +
    "\uff17\001\002\000\004\025\u02f5\001\002\000\006\006\uff16" +
    "\100\uff16\001\002\000\004\002\001\001\002\000\006\070" +
    "\u02fe\100\ufffc\001\002\000\004\100\u02fc\001\002\000\006" +
    "\070\u02fa\100\ufffa\001\002\000\006\017\u02f9\051\u02f7\001" +
    "\002\000\004\100\ufff9\001\002\000\006\004\004\006\ufffe" +
    "\001\002\000\004\006\ufffd\001\002\000\006\017\u02f9\051" +
    "\u02f7\001\002\000\004\100\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02fd\000\006\002\004\003\005\001\001\000\004\005" +
    "\u02f7\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\017\010\016" +
    "\020\020\057\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u01fc\001\001\000\002" +
    "\001\001\000\004\010\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\017\010\016\020\025\057\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\053\021\064\031\063\032\050\036" +
    "\056\045\054\054\061\120\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\102\027\076\030\074\034" +
    "\u01bc\054\101\117\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\053\021\u017f\031\063\032\050\036\056\045" +
    "\054\054\061\120\062\001\001\000\002\001\001\000\012" +
    "\030\130\055\u0179\117\131\121\132\001\001\000\002\001" +
    "\001\000\016\017\102\027\076\030\074\034\104\054\101" +
    "\117\077\001\001\000\002\001\001\000\010\017\u0175\027" +
    "\076\117\u0174\001\001\000\014\023\u0173\024\164\025\160" +
    "\026\161\027\157\001\001\000\002\001\001\000\004\035" +
    "\u016d\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\163\024\164\025\160\026\161\027\157\035\u0167\001" +
    "\001\000\002\001\001\000\004\035\u0162\001\001\000\004" +
    "\035\u015c\001\001\000\004\035\u0154\001\001\000\002\001" +
    "\001\000\020\015\111\045\112\046\114\047\115\050\106" +
    "\052\120\054\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\102\027\076\030\074\034\u011d\054\101" +
    "\117\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\111\045\112" +
    "\046\u0111\047\115\050\106\052\120\054\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\146\027\076\030" +
    "\143\054\145\117\144\001\001\000\012\030\130\055\127" +
    "\117\131\121\132\001\001\000\002\001\001\000\010\030" +
    "\130\117\131\121\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\130\055\135\117\131\121\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\030\130\055\142\117\131\121\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\023" +
    "\163\024\164\025\160\026\161\027\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\177\001\001\000\004" +
    "\117\175\001\001\000\004\117\173\001\001\000\004\117" +
    "\171\001\001\000\004\117\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\166" +
    "\025\160\026\161\027\157\001\001\000\002\001\001\000" +
    "\010\025\170\026\161\027\157\001\001\000\002\001\001" +
    "\000\014\023\172\024\164\025\160\026\161\027\157\001" +
    "\001\000\002\001\001\000\014\023\174\024\164\025\160" +
    "\026\161\027\157\001\001\000\002\001\001\000\010\025" +
    "\176\026\161\027\157\001\001\000\002\001\001\000\006" +
    "\026\200\027\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\206\027\076\030\203\054\205\117\204" +
    "\001\001\000\002\001\001\000\014\023\163\024\164\025" +
    "\160\026\161\027\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\111\045\112\046\212\047\115\050\106\052\120\054\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\215\001\001\000\002\001\001\000\004\117\217\001\001" +
    "\000\002\001\001\000\004\117\221\001\001\000\002\001" +
    "\001\000\020\015\226\036\227\040\223\041\232\043\234" +
    "\053\233\054\231\001\001\000\020\015\226\036\227\040" +
    "\223\041\232\043\234\053\u0110\054\231\001\001\000\002" +
    "\001\001\000\016\017\102\027\076\030\074\034\332\054" +
    "\101\117\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\102\027\076\030\074\034\237\054\101\117\077\001" +
    "\001\000\002\001\001\000\020\015\242\044\246\045\112" +
    "\047\244\050\106\052\120\054\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\242" +
    "\044\253\045\112\047\244\050\106\052\120\054\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\242\044\252\045\112\047" +
    "\244\050\106\052\120\054\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\262\022\261\027\076\030\257\117\260\001\001" +
    "\000\002\001\001\000\014\023\163\024\164\025\160\026" +
    "\161\027\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\262\022" +
    "\266\027\076\030\257\117\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\262\022\271\027\076\030" +
    "\257\117\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\262\022\274\027\076\030\257\117\260\001" +
    "\001\000\002\001\001\000\014\017\262\022\276\027\076" +
    "\030\257\117\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\242\044\301\045\112\047\244\050\106" +
    "\052\120\054\245\001\001\000\002\001\001\000\014\017" +
    "\262\022\303\027\076\030\257\117\260\001\001\000\002" +
    "\001\001\000\014\017\262\022\305\027\076\030\257\117" +
    "\260\001\001\000\002\001\001\000\020\015\242\044\307" +
    "\045\112\047\244\050\106\052\120\054\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\226\036\227\040\223" +
    "\041\232\043\234\053\320\054\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\262" +
    "\022\324\027\076\030\257\117\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\226\036\227\040\223" +
    "\041\232\043\234\053\327\054\231\001\001\000\002\001" +
    "\001\000\020\015\226\036\227\040\223\041\232\043\234" +
    "\053\331\054\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\337\036\227\040\335" +
    "\041\232\043\234\054\341\104\342\001\001\000\020\015" +
    "\337\036\227\040\335\041\232\043\234\054\341\104\u010b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\344\114\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\102\027\076\030\074\034\357\054\101\117\077\001" +
    "\001\000\020\015\337\036\227\040\335\041\232\043\234" +
    "\054\341\104\353\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\337\036\227\040\335\041" +
    "\232\043\234\054\341\104\362\001\001\000\006\042\364" +
    "\114\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\337\036\227\040\335\041\232" +
    "\043\234\054\341\104\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\337\036\227\040\335\041\232\043\234\054\341\104\377" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\262\022\u0103\027\076\030\257\117\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\337\036\227\040\335\041\232\043\234\054\341\104\u0106" +
    "\001\001\000\002\001\001\000\020\015\337\036\227\040" +
    "\335\041\232\043\234\054\341\104\u0108\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\262\022\u0117\027\076\030\257\117" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\111\045\112\046\u011a\047\115\050\106\052\120\054" +
    "\117\001\001\000\002\001\001\000\020\015\111\045\112" +
    "\046\u011c\047\115\050\106\052\120\054\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u0121\045\112\047\u0123\050\106\052\120\054\u0124\105" +
    "\u0125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u0121\045\112\047\u0123\050\106\052" +
    "\120\054\u0124\105\u0143\001\001\000\002\001\001\000\006" +
    "\051\u0127\112\u0128\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\u0121\045\112\047\u0123\050\106" +
    "\052\120\054\u0124\105\u0130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\102\027\076\030\074\034\u013a\054\101\117\077\001" +
    "\001\000\020\015\u0121\045\112\047\u0123\050\106\052\120" +
    "\054\u0124\105\u0136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\u0121\045\112\047\u0123\050" +
    "\106\052\120\054\u0124\105\u013d\001\001\000\006\051\u013f" +
    "\112\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\u0121\045\112\047\u0123\050\106" +
    "\052\120\054\u0124\105\u0142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\262\022\u0147\027\076\030\257\117\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u0121\045\112" +
    "\047\u0123\050\106\052\120\054\u0124\105\u014a\001\001\000" +
    "\002\001\001\000\020\015\u0121\045\112\047\u0123\050\106" +
    "\052\120\054\u0124\105\u014c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\u0158\027\076\030\u0155\054\u0157\117\u0156" +
    "\001\001\000\002\001\001\000\014\023\163\024\164\025" +
    "\160\026\161\027\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\u0160\027\076\030\u015d\054\u015f\117\u015e" +
    "\001\001\000\002\001\001\000\014\023\163\024\164\025" +
    "\160\026\161\027\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\u0165\027\076\030" +
    "\u0163\117\u0164\001\001\000\002\001\001\000\014\023\163" +
    "\024\164\025\160\026\161\027\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u016b\027\076\030\u0168" +
    "\054\u016a\117\u0169\001\001\000\002\001\001\000\014\023" +
    "\163\024\164\025\160\026\161\027\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\u0171\027\076\030\u016e\054\u0170\117\u016f\001\001\000\002" +
    "\001\001\000\014\023\163\024\164\025\160\026\161\027" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\163\024\164\025" +
    "\160\026\161\027\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\130\055\127\117" +
    "\131\121\u017b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\053\021\u0181" +
    "\031\063\032\050\036\056\045\054\054\061\120\062\001" +
    "\001\000\002\001\001\000\022\015\053\021\u0183\031\063" +
    "\032\050\036\056\045\054\054\061\120\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\117\u0186\001\001" +
    "\000\002\001\001\000\004\117\u0188\001\001\000\002\001" +
    "\001\000\004\117\u018a\001\001\000\002\001\001\000\020" +
    "\015\u018f\036\227\037\u018e\040\u018c\041\232\043\234\054" +
    "\u0191\001\001\000\020\015\u018f\036\227\037\u01a2\040\u018c" +
    "\041\232\043\234\054\u0191\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u018f\036\227\037\u0193\040\u018c\041" +
    "\232\043\234\054\u0191\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\262\022\u0197\027" +
    "\076\030\257\117\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u018f\036\227\037\u019a\040\u018c\041" +
    "\232\043\234\054\u0191\001\001\000\002\001\001\000\020" +
    "\015\u018f\036\227\037\u019c\040\u018c\041\232\043\234\054" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u01ad" +
    "\001\001\000\016\016\u01a9\017\u01aa\027\076\030\u01a6\054" +
    "\u01a8\117\u01a7\001\001\000\002\001\001\000\014\023\163" +
    "\024\164\025\160\026\161\027\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\u01b0\017" +
    "\u01b1\027\076\030\u01a6\054\u01af\117\u01a7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\262" +
    "\022\u01b6\027\076\030\257\117\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\053\021\u01b9\031\063" +
    "\032\050\036\056\045\054\054\061\120\062\001\001\000" +
    "\002\001\001\000\022\015\053\021\u01bb\031\063\032\050" +
    "\036\056\045\054\054\061\120\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u01bf" +
    "\031\u01c3\032\050\036\056\045\054\054\u01c2\103\u01c1\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\u01c9" +
    "\113\u01c8\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\u01bf\031\u01c3\032\050\036\056\045\054\054\u01c2" +
    "\103\u01c5\001\001\000\002\001\001\000\020\015\u01bf\031" +
    "\u01c3\032\050\036\056\045\054\054\u01c2\103\u01c7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\102\027\076\030\074\034\u01d4\054" +
    "\101\117\077\001\001\000\020\015\u01bf\031\u01c3\032\050" +
    "\036\056\045\054\054\u01c2\103\u01d0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u01bf\031" +
    "\u01c3\032\050\036\056\045\054\054\u01c2\103\u01d7\001\001" +
    "\000\006\033\u01d9\113\u01d8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u01bf\031\u01c3" +
    "\032\050\036\056\045\054\054\u01c2\103\u01dc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\262" +
    "\022\u01e6\027\076\030\257\117\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u01bf\031\u01c3\032\050" +
    "\036\056\045\054\054\u01c2\103\u01e9\001\001\000\002\001" +
    "\001\000\020\015\u01bf\031\u01c3\032\050\036\056\045\054" +
    "\054\u01c2\103\u01eb\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u01f0" +
    "\001\001\000\002\001\001\000\004\011\u01f2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\053\021\u01f6\031\063\032\050\036\056\045\054\054" +
    "\061\120\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\017\010\016" +
    "\020\u01fe\057\021\001\001\000\002\001\001\000\012\007" +
    "\017\010\016\020\u0200\057\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0207" +
    "\001\001\000\002\001\001\000\020\013\u020b\015\u020c\054" +
    "\u020f\060\u0212\061\u0213\063\u020d\072\u0211\001\001\000\002" +
    "\001\001\000\016\017\102\027\076\030\074\034\u02c8\054" +
    "\101\117\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\u0299\015\u020c" +
    "\054\u020f\060\u0212\061\u0213\063\u020d\072\u0211\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\102\027\076" +
    "\030\074\034\u0216\054\101\117\077\001\001\000\002\001" +
    "\001\000\020\015\u021c\054\u0220\063\u021e\065\u0221\066\u0218" +
    "\070\u021a\073\u021d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\102\027\076\030\074" +
    "\034\u0261\054\101\117\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u021c\054\u0220\063\u021e\065\u0221\066" +
    "\u0218\070\u021a\073\u0240\001\001\000\002\001\001\000\016" +
    "\017\102\027\076\030\074\034\u0224\054\101\117\077\001" +
    "\001\000\002\001\001\000\020\015\u0227\045\112\047\u022a" +
    "\050\106\052\120\054\u022b\071\u0228\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\111\045\112\046\u022e\047\115\050\106\052" +
    "\120\054\117\001\001\000\002\001\001\000\020\015\111" +
    "\045\112\046\u022d\047\115\050\106\052\120\054\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\262\022\u0232\027\076\030" +
    "\257\117\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\111\045\112\046\u0235\047\115\050\106\052" +
    "\120\054\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\111\045\112\046\u0239\047" +
    "\115\050\106\052\120\054\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u0244\054\u0246\060\u0247\061\u0213\063" +
    "\u020d\072\u0211\106\u0242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\u0244\054\u0246\060\u0247\061\u0213\063\u020d" +
    "\072\u0211\106\u0248\001\001\000\002\001\001\000\020\015" +
    "\u0244\054\u0246\060\u0247\061\u0213\063\u020d\072\u0211\106\u024a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\262\022\u024e\027\076\030\257\117\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\u0244\054\u0246\060\u0247\061\u0213\063\u020d\072\u0211\106\u0251" +
    "\001\001\000\002\001\001\000\020\015\u0244\054\u0246\060" +
    "\u0247\061\u0213\063\u020d\072\u0211\106\u0253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\262\022\u0259\027\076" +
    "\030\257\117\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\u021c\054\u0220\063\u021e\065\u0221\066\u0218" +
    "\070\u021a\073\u025c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u021c\054\u0220\063\u021e" +
    "\065\u0221\066\u0218\070\u021a\073\u0260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u0265" +
    "\054\u0267\063\u021e\065\u0269\066\u0218\070\u021a\107\u0268\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\067\u026c\116\u026d\001\001\000" +
    "\020\015\u0265\054\u0267\063\u021e\065\u0269\066\u0218\070\u021a" +
    "\107\u026a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u0265\054\u0267\063\u021e" +
    "\065\u0269\066\u0218\070\u021a\107\u0275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\102\027\076\030\074\034\u027f\054\101\117" +
    "\077\001\001\000\020\015\u0265\054\u0267\063\u021e\065\u0269" +
    "\066\u0218\070\u021a\107\u027b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\u0265\054\u0267\063" +
    "\u021e\065\u0269\066\u0218\070\u021a\107\u0282\001\001\000\006" +
    "\067\u0284\116\u0285\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u0244\054\u0246\060\u0247" +
    "\061\u0213\063\u020d\072\u0211\106\u0287\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\262" +
    "\022\u028b\027\076\030\257\117\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\u0265\054\u0267\063\u021e" +
    "\065\u0269\066\u0218\070\u021a\107\u028e\001\001\000\002\001" +
    "\001\000\020\015\u0265\054\u0267\063\u021e\065\u0269\066\u0218" +
    "\070\u021a\107\u0290\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\u029c\001\001\000\002\001\001\000\004\117\u029e\001" +
    "\001\000\002\001\001\000\004\117\u02a0\001\001\000\002" +
    "\001\001\000\020\015\u02a3\054\u02a5\063\u021e\064\u02a6\065" +
    "\u02a7\066\u0218\070\u021a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\u02a3\054\u02a5\063\u021e\064\u02a8\065\u02a7" +
    "\066\u0218\070\u021a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u02a3" +
    "\054\u02a5\063\u021e\064\u02ad\065\u02a7\066\u0218\070\u021a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\262\022\u02b1\027\076\030\257\117\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u02a3" +
    "\054\u02a5\063\u021e\064\u02b4\065\u02a7\066\u0218\070\u021a\001" +
    "\001\000\002\001\001\000\020\015\u02a3\054\u02a5\063\u021e" +
    "\064\u02b6\065\u02a7\066\u0218\070\u021a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\u02bc\015\u020c\054\u020f\060" +
    "\u0212\061\u0213\063\u020d\072\u0211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\262\022" +
    "\u02c0\027\076\030\257\117\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\u02c3\015\u020c\054\u020f\060" +
    "\u0212\061\u0213\063\u020d\072\u0211\001\001\000\002\001\001" +
    "\000\020\013\u02c5\015\u020c\054\u020f\060\u0212\061\u0213\063" +
    "\u020d\072\u0211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\u0244\054\u0246\060\u0247\061\u0213\063\u020d\072\u0211" +
    "\106\u02cb\001\001\000\006\062\u02ce\115\u02cc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\u0244\054\u0246\060\u0247\061\u0213\063\u020d\072\u0211\106\u02d3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\102\027\076\030\074" +
    "\034\u02dd\054\101\117\077\001\001\000\020\015\u0244\054" +
    "\u0246\060\u0247\061\u0213\063\u020d\072\u0211\106\u02d9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u0244\054\u0246\060\u0247\061\u0213\063\u020d\072\u0211\106" +
    "\u02e0\001\001\000\006\062\u02e3\115\u02e1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u02ec\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u02f0\001\001\000\002\001" +
    "\001\000\004\056\u02f2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u02fa" +
    "\001\001\000\002\001\001\000\004\003\u02fc\001\001\000" +
    "\002\001\001\000\004\005\u02fe\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INFOR_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INFOR_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INFOR_WHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // INFOR_WHILE_FUNCION ::= DECLARACION findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // INFOR_WHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // FOR_WHILE_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_WHILE_FUNCION next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ELSE_IF_WHILE_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ELSE_IF_WHILE_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then findelinea INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // INIF_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // INIF_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INIF_WHILE_FUNCION ::= DECLARACION findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // INIF_WHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // IF_WHILE_FUNCION ::= if_ CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INWHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INWHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // INWHILE_FUNCION ::= DECLARACION findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INWHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // WHILE_FUNCION ::= do_ until CONDICION findelinea INWHILE_FUNCION loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INWHILE_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // INWHILE_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // INWHILE_FOR_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INWHILE_FOR_FUNCION ::= DECLARACION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INWHILE_FOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // WHILE_FOR_FUNCION ::= do_ until CONDICION findelinea INWHILE_FOR_FUNCION loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ELSE_IF_FOR_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ELSE_IF_FOR_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then findelinea INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INIF_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INIF_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INIF_FOR_FUNCION ::= DECLARACION findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // INIF_FOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION else_ findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INFOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INFOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // INFOR_FUNCION ::= DECLARACION findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // INFOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // FOR_FUNCION ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_FUNCION next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ELSE_IF_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ELSE_IF_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ELSE_IF_FUNCION ::= else_ if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ELSE_IF_FUNCION ::= else_ if_ CONDICION then findelinea INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // INIF_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INIF_FUNCION ::= DECLARACION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // INIF_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION else_ findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INFUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INFUNCION ::= LLAMAR_FUNCION findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INFUNCION ::= DECLARACION findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // INFUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // INFUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // PARAMETRO ::= byval identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // PARAMETRO ::= byval identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ findelinea INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // STRUCT_ ::= Public_ struct_ identificador findelinea DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // PARAMETRO_SENCILLO2 ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO2",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // PARAMETRO_SENCILLO2 ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO2",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // PARAMETRO_SENCILLO2 ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO2",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // PARAMETRO_SENCILLO ::= PARAMETRO_SENCILLO2 coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // PARAMETRO_SENCILLO ::= parentesisA PARAMETRO_SENCILLO2 parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // PARAMETRO_SENCILLO ::= parentesisA PARAMETRO_SENCILLO2 parentesisC coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INFOR_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INFOR_WHILE ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INFOR_WHILE ::= DECLARACION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INFOR_WHILE ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // FOR_WHILE ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_WHILE next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ELSE_IF_WHILE2 ::= else_ if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ELSE_IF_WHILE2 ::= else_ if_ CONDICION then findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // ELSE_IF_WHILE ::= else_ if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ELSE_IF_WHILE ::= else_ if_ CONDICION then findelinea INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE else_ findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INIF_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INIF_WHILE ::= LLAMAR_FUNCION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // INIF_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // INIF_WHILE ::= DECLARACION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // INIF_WHILE ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // INWHILE_MAIN ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // INWHILE_MAIN ::= DECLARACION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // INWHILE_MAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // WHILE_MAIN ::= do_ until CONDICION findelinea INWHILE_MAIN loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INWHILE_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INWHILE_FOR ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INWHILE_FOR ::= DECLARACION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INWHILE_FOR ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // WHILE_FOR ::= do_ until CONDICION findelinea INWHILE_FOR loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ELSE_IF_FOR2 ::= else_ if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ELSE_IF_FOR2 ::= else_ if_ CONDICION then findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ELSE_IF_FOR ::= else_ if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ELSE_IF_FOR ::= else_ if_ CONDICION then findelinea INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR else_ findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INIF_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // INIF_FOR ::= LLAMAR_FUNCION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INIF_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INIF_FOR ::= DECLARACION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INIF_FOR ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INFOR_MAIN ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INFOR_MAIN ::= DECLARACION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INFOR_MAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FOR_MAIN ::= for_ identificador igual NUMERO to NUMERO step_ NUMERO findelinea INFOR_MAIN next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONDICION ::= NUMERO OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONDICION ::= NUMERO OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONDICION ::= NUMERO OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICION ::= NUMERO OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICION ::= NUMERO OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= BOOLEAN OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONDICION ::= identificador OPERADORRELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELSE_IF_MAIN2 ::= else_ if_ CONDICION then findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELSE_IF_MAIN2 ::= else_ if_ CONDICION then findelinea INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELSE_IF_MAIN ::= else_ if_ CONDICION then findelinea INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELSE_IF_MAIN ::= else_ if_ CONDICION then findelinea INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INIF ::= LLAMAR_FUNCION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INIF ::= DECLARACION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INIF ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INIF ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF_MAIN ::= if_ CONDICION then findelinea INIF else_ findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF_MAIN ::= if_ CONDICION then findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPEDECLARE ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= dim identificador as TYPE_ igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= dim identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= identificador punto identificador igual texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= identificador punto identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= identificador punto identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= identificador punto identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= identificador igual texto_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= identificador igual NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= dim identificador igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= dim identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_PARENTESIS ::= espacio OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION_PARENTESIS ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_POTENCIA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_POTENCIA ::= potencia NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_POTENCIA ::= potencia NUMERO OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION_MULT_DIV ::= OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION_MULT_DIV ::= div NUMERO OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION_MULT_DIV ::= mult NUMERO OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION_MULT_DIV ::= div NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION_MULT_DIV ::= mult NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION_MOD ::= OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_MOD ::= mod NUMERO OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION_MOD ::= mod NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_ARITMETICA_MAS_MENOS ::= OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_ARITMETICA_MAS_MENOS ::= resta NUMERO OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_ARITMETICA_MAS_MENOS ::= suma NUMERO OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_ARITMETICA_MAS_MENOS ::= resta NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_ARITMETICA_MAS_MENOS ::= suma NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_ARITMETICA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_ARITMETICA ::= NUMERO OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INPARENTESIS ::= NUMERO continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INPARENTESIS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NUMERO ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LLAMAR_SUB ::= identificador PARAMETRO_SENCILLO findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_SUB",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INMAIN ::= exit sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INMAIN ::= LLAMAR_SUB findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INMAIN ::= LLAMAR_SUB findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INMAIN ::= LLAMAR_FUNCION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INMAIN ::= DECLARACION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INMAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INMAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAIN ::= Public_ sub identificador parentesisA PARAMETRO parentesisC findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEXT_MODULE ::= MAIN findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NEXT_MODULE ::= FUNCION_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NEXT_MODULE ::= STRUCT_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UC ::= IMPORTS MODULE findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

