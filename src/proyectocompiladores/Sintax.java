
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 14 15:20:02 CST 2021
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 14 15:20:02 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\006\000\002\005\003\000\002\005\005" +
    "\000\002\005\003\000\002\005\005\000\002\004\012\000" +
    "\002\020\003\000\002\020\004\000\002\020\004\000\002" +
    "\020\005\000\002\020\005\000\002\010\014\000\002\021" +
    "\011\000\002\021\004\000\002\021\003\000\002\021\004" +
    "\000\002\021\012\000\002\021\005\000\002\021\004\000" +
    "\002\021\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\007\000" +
    "\002\017\004\000\002\017\003\000\002\023\004\000\002" +
    "\023\004\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\004\000\002\024\005\000\002\024\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\026\004\000\002\026\003\000\002\027\005\000\002\027" +
    "\004\000\002\015\006\000\002\015\010\000\002\015\006" +
    "\000\002\015\006\000\002\015\010\000\002\015\010\000" +
    "\002\015\006\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\006\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\015\006\000\002\015\010\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\012\000\002" +
    "\032\015\000\002\032\015\000\002\032\013\000\002\103" +
    "\011\000\002\103\004\000\002\103\003\000\002\103\004" +
    "\000\002\103\012\000\002\103\005\000\002\103\005\000" +
    "\002\103\005\000\002\033\011\000\002\033\011\000\002" +
    "\113\011\000\002\113\010\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\035\004\000\002\035\004\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\017\000\002\037\011" +
    "\000\002\037\004\000\002\037\003\000\002\037\012\000" +
    "\002\037\005\000\002\037\004\000\002\037\004\000\002" +
    "\037\005\000\002\037\005\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\104\011\000\002\104\004" +
    "\000\002\104\003\000\002\104\012\000\002\104\005\000" +
    "\002\104\004\000\002\104\004\000\002\104\005\000\002" +
    "\104\005\000\002\041\012\000\002\041\015\000\002\041" +
    "\015\000\002\041\013\000\002\042\011\000\002\042\011" +
    "\000\002\114\010\000\002\114\011\000\002\043\011\000" +
    "\002\044\011\000\002\044\004\000\002\044\003\000\002" +
    "\044\012\000\002\044\005\000\002\044\004\000\002\044" +
    "\004\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\045\011\000\002\046\011\000\002\046\004\000" +
    "\002\046\003\000\002\046\012\000\002\046\005\000\002" +
    "\046\004\000\002\046\004\000\002\046\005\000\002\046" +
    "\005\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\105\011\000\002\105\004\000\002\105\003\000" +
    "\002\105\012\000\002\105\005\000\002\105\004\000\002" +
    "\105\004\000\002\105\005\000\002\105\005\000\002\050" +
    "\012\000\002\050\015\000\002\050\015\000\002\050\013" +
    "\000\002\051\011\000\002\051\011\000\002\112\010\000" +
    "\002\112\011\000\002\052\017\000\002\053\011\000\002" +
    "\053\004\000\002\053\003\000\002\053\012\000\002\053" +
    "\005\000\002\053\004\000\002\053\004\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\054\005\000" +
    "\002\054\006\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\007\000\002\056\010\000\002\007\011" +
    "\000\002\057\016\000\002\011\005\000\002\011\007\000" +
    "\002\013\011\000\002\013\004\000\002\013\003\000\002" +
    "\013\004\000\002\013\012\000\002\013\005\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\061\012\000" +
    "\002\061\015\000\002\061\015\000\002\061\013\000\002" +
    "\106\011\000\002\106\004\000\002\106\003\000\002\106" +
    "\012\000\002\106\005\000\002\106\004\000\002\106\004" +
    "\000\002\106\005\000\002\106\005\000\002\062\011\000" +
    "\002\062\011\000\002\115\010\000\002\115\011\000\002" +
    "\063\017\000\002\064\011\000\002\064\004\000\002\064" +
    "\003\000\002\064\012\000\002\064\005\000\002\064\004" +
    "\000\002\064\004\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\066\012\000\002\066\015\000\002\066" +
    "\015\000\002\066\013\000\002\107\011\000\002\107\004" +
    "\000\002\107\003\000\002\107\012\000\002\107\005\000" +
    "\002\107\004\000\002\107\004\000\002\107\005\000\002" +
    "\107\005\000\002\107\005\000\002\067\011\000\002\067" +
    "\011\000\002\116\010\000\002\116\011\000\002\070\011" +
    "\000\002\071\011\000\002\071\004\000\002\071\003\000" +
    "\002\071\012\000\002\071\005\000\002\071\004\000\002" +
    "\071\004\000\002\071\005\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\072\011\000\002\073\011" +
    "\000\002\073\004\000\002\073\003\000\002\073\012\000" +
    "\002\073\005\000\002\073\004\000\002\073\004\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\075\010" +
    "\000\002\075\012\000\002\075\013\000\002\075\010\000" +
    "\002\075\013\000\002\110\011\000\002\110\004\000\002" +
    "\110\003\000\002\110\012\000\002\110\005\000\002\110" +
    "\004\000\002\110\004\000\002\110\005\000\002\110\005" +
    "\000\002\110\005\000\002\100\011\000\002\100\011\000" +
    "\002\111\010\000\002\111\011\000\002\076\017\000\002" +
    "\077\011\000\002\077\004\000\002\077\003\000\002\077" +
    "\012\000\002\077\005\000\002\077\004\000\002\077\004" +
    "\000\002\077\005\000\002\077\005\000\002\077\005\000" +
    "\002\077\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02dc\000\004\004\004\001\002\000\006\017\u02d8\051" +
    "\u02d6\001\002\000\004\002\u02d5\001\002\000\004\006\007" +
    "\001\002\000\004\007\011\001\002\000\004\002\000\001" +
    "\002\000\004\051\012\001\002\000\004\100\013\001\002" +
    "\000\006\006\014\033\016\001\002\000\006\010\031\025" +
    "\u02c9\001\002\000\004\013\ufff8\001\002\000\004\030\u01dc" +
    "\001\002\000\006\006\025\100\u01da\001\002\000\006\006" +
    "\025\100\027\001\002\000\004\013\022\001\002\000\004" +
    "\007\023\001\002\000\004\100\024\001\002\000\004\002" +
    "\ufff9\001\002\000\004\010\031\001\002\000\004\013\ufff6" +
    "\001\002\000\006\006\014\033\016\001\002\000\004\013" +
    "\ufff4\001\002\000\004\103\032\001\002\000\004\073\033" +
    "\001\002\000\004\074\034\001\002\000\004\100\035\001" +
    "\002\000\016\005\037\011\046\012\044\020\043\023\052" +
    "\051\051\001\002\000\024\005\uffab\011\uffab\012\uffab\013" +
    "\uffab\020\uffab\023\uffab\027\uffab\051\uffab\100\uffab\001\002" +
    "\000\016\042\056\043\061\051\065\065\062\066\055\073" +
    "\054\001\002\000\024\005\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\020\uffa9\023\uffa9\027\uffa9\051\uffa9\100\uffa9\001\002\000" +
    "\004\100\u01a7\001\002\000\024\005\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\020\uffaa\023\uffaa\027\uffaa\051\uffaa\100\uffaa\001" +
    "\002\000\004\070\u01a0\001\002\000\004\051\u018b\001\002" +
    "\000\004\100\u0189\001\002\000\004\051\u016a\001\002\000" +
    "\020\005\037\011\046\012\044\013\ufff0\020\043\023\052" +
    "\051\051\001\002\000\004\013\u0166\001\002\000\010\054" +
    "\u0156\070\u0155\073\u0126\001\002\000\004\036\053\001\002" +
    "\000\016\042\056\043\061\051\065\065\062\066\055\073" +
    "\054\001\002\000\010\065\u0152\066\055\073\054\001\002" +
    "\000\022\045\202\057\174\060\173\061\175\062\172\063" +
    "\171\066\055\073\054\001\002\000\022\026\uffad\054\uffad" +
    "\055\uffad\056\uffad\074\uffad\100\uffad\101\uffad\104\uffad\001" +
    "\002\000\010\054\u0122\055\u0124\056\u0123\001\002\000\020" +
    "\026\uffdd\054\uffdd\055\uffdd\056\uffdd\074\uffdd\100\uffdd\101" +
    "\uffdd\001\002\000\022\026\uffac\054\uffac\055\uffac\056\uffac" +
    "\074\uffac\100\uffac\101\uffac\104\uffac\001\002\000\030\045" +
    "\202\054\u0122\055\u0124\056\u0123\057\174\060\173\061\175" +
    "\062\172\063\171\066\055\073\054\001\002\000\010\054" +
    "\u0122\055\u0124\056\u0123\001\002\000\010\054\u0122\055\u0124" +
    "\056\u0123\001\002\000\012\054\u0122\055\u0124\056\u0123\073" +
    "\u0126\001\002\000\004\100\067\001\002\000\020\005\072" +
    "\011\100\012\044\020\075\023\052\035\071\051\051\001" +
    "\002\000\026\005\uff48\011\uff48\012\uff48\013\uff48\020\uff48" +
    "\023\uff48\027\uff48\034\uff48\035\uff48\051\uff48\001\002\000" +
    "\004\023\u0120\001\002\000\016\042\056\043\061\051\065" +
    "\065\062\066\055\073\054\001\002\000\026\005\uff46\011" +
    "\uff46\012\uff46\013\uff46\020\uff46\023\uff46\027\uff46\034\uff46" +
    "\035\uff46\051\uff46\001\002\000\004\100\354\001\002\000" +
    "\004\070\345\001\002\000\004\034\343\001\002\000\022" +
    "\005\072\011\100\012\044\020\075\023\052\034\uff4f\035" +
    "\071\051\051\001\002\000\004\051\105\001\002\000\004" +
    "\100\103\001\002\000\026\005\uff47\011\uff47\012\uff47\013" +
    "\uff47\020\uff47\023\uff47\027\uff47\034\uff47\035\uff47\051\uff47" +
    "\001\002\000\022\005\072\011\100\012\044\020\075\023" +
    "\052\034\uff4b\035\071\051\051\001\002\000\004\034\uff4a" +
    "\001\002\000\004\054\106\001\002\000\004\065\107\001" +
    "\002\000\004\037\110\001\002\000\004\065\111\001\002" +
    "\000\004\047\112\001\002\000\004\065\113\001\002\000" +
    "\004\100\114\001\002\000\020\005\117\011\046\012\044" +
    "\020\122\023\127\035\116\051\051\001\002\000\022\005" +
    "\117\011\046\012\044\020\122\023\127\032\uff31\035\116" +
    "\051\051\001\002\000\006\011\336\023\335\001\002\000" +
    "\016\042\056\043\061\051\065\065\062\066\055\073\054" +
    "\001\002\000\004\100\251\001\002\000\026\005\uff70\011" +
    "\uff70\012\uff70\013\uff70\020\uff70\023\uff70\027\uff70\032\uff70" +
    "\035\uff70\051\uff70\001\002\000\004\070\242\001\002\000" +
    "\004\100\240\001\002\000\026\005\uff71\011\uff71\012\uff71" +
    "\013\uff71\020\uff71\023\uff71\027\uff71\032\uff71\035\uff71\051" +
    "\uff71\001\002\000\004\032\235\001\002\000\026\005\uff6f" +
    "\011\uff6f\012\uff6f\013\uff6f\020\uff6f\023\uff6f\027\uff6f\032" +
    "\uff6f\035\uff6f\051\uff6f\001\002\000\004\036\130\001\002" +
    "\000\016\042\056\043\061\051\065\065\062\066\055\073" +
    "\054\001\002\000\004\100\132\001\002\000\020\005\072" +
    "\011\100\012\044\020\135\023\052\035\133\051\051\001" +
    "\002\000\006\011\232\023\231\001\002\000\004\100\227" +
    "\001\002\000\004\070\146\001\002\000\022\005\072\011" +
    "\100\012\044\020\135\023\052\034\uff5a\035\133\051\051" +
    "\001\002\000\004\100\143\001\002\000\004\034\141\001" +
    "\002\000\004\100\142\001\002\000\026\005\uff5d\011\uff5d" +
    "\012\uff5d\013\uff5d\020\uff5d\023\uff5d\027\uff5d\032\uff5d\035" +
    "\uff5d\051\uff5d\001\002\000\022\005\072\011\100\012\044" +
    "\020\135\023\052\034\uff56\035\133\051\051\001\002\000" +
    "\004\034\uff55\001\002\000\004\034\uff57\001\002\000\004" +
    "\021\147\001\002\000\004\073\150\001\002\000\020\042" +
    "\056\043\061\051\155\064\156\065\153\066\055\073\054" +
    "\001\002\000\006\074\uffe8\101\225\001\002\000\004\074" +
    "\222\001\002\000\026\045\202\057\174\060\173\061\175" +
    "\062\172\063\171\066\055\073\054\074\uffe9\101\176\001" +
    "\002\000\006\074\uffe5\101\167\001\002\000\010\070\161" +
    "\074\uffe7\101\162\001\002\000\006\074\uffea\101\157\001" +
    "\002\000\020\042\056\043\061\051\155\064\156\065\153" +
    "\066\055\073\054\001\002\000\004\074\uffe4\001\002\000" +
    "\004\051\164\001\002\000\020\042\056\043\061\051\155" +
    "\064\156\065\153\066\055\073\054\001\002\000\004\074" +
    "\uffe0\001\002\000\006\074\uffe6\101\165\001\002\000\020" +
    "\042\056\043\061\051\155\064\156\065\153\066\055\073" +
    "\054\001\002\000\004\074\uffdf\001\002\000\020\042\056" +
    "\043\061\051\155\064\156\065\153\066\055\073\054\001" +
    "\002\000\004\074\uffe2\001\002\000\004\065\220\001\002" +
    "\000\004\065\216\001\002\000\004\065\214\001\002\000" +
    "\004\065\212\001\002\000\004\065\210\001\002\000\020" +
    "\042\056\043\061\051\155\064\156\065\153\066\055\073" +
    "\054\001\002\000\020\026\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\074\uffcd\100\uffcd\101\uffcd\001\002\000\020\026\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\074\uffd5\100\uffd5\101\uffd5\001\002" +
    "\000\020\026\uffd0\054\uffd0\055\uffd0\056\uffd0\074\uffd0\100" +
    "\uffd0\101\uffd0\001\002\000\004\065\205\001\002\000\020" +
    "\026\uffde\054\uffde\055\uffde\056\uffde\074\uffde\100\uffde\101" +
    "\uffde\001\002\000\020\026\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\074\uffd8\100\uffd8\101\uffd8\001\002\000\034\026\uffd7\045" +
    "\202\054\uffd7\055\uffd7\056\uffd7\061\175\062\172\063\171" +
    "\066\055\073\054\074\uffd7\100\uffd7\101\uffd7\001\002\000" +
    "\020\026\uffd6\054\uffd6\055\uffd6\056\uffd6\074\uffd6\100\uffd6" +
    "\101\uffd6\001\002\000\004\074\uffe3\001\002\000\032\026" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\061\175\062\172\063\171" +
    "\066\055\073\054\074\uffd4\100\uffd4\101\uffd4\001\002\000" +
    "\020\026\uffd2\054\uffd2\055\uffd2\056\uffd2\074\uffd2\100\uffd2" +
    "\101\uffd2\001\002\000\040\026\uffdc\045\202\054\uffdc\055" +
    "\uffdc\056\uffdc\057\174\060\173\061\175\062\172\063\171" +
    "\066\055\073\054\074\uffdc\100\uffdc\101\uffdc\001\002\000" +
    "\020\026\uffda\054\uffda\055\uffda\056\uffda\074\uffda\100\uffda" +
    "\101\uffda\001\002\000\040\026\uffdb\045\202\054\uffdb\055" +
    "\uffdb\056\uffdb\057\174\060\173\061\175\062\172\063\171" +
    "\066\055\073\054\074\uffdb\100\uffdb\101\uffdb\001\002\000" +
    "\020\026\uffd9\054\uffd9\055\uffd9\056\uffd9\074\uffd9\100\uffd9" +
    "\101\uffd9\001\002\000\032\026\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\061\175\062\172\063\171\066\055\073\054\074\uffd3" +
    "\100\uffd3\101\uffd3\001\002\000\020\026\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\074\uffd1\100\uffd1\101\uffd1\001\002\000\026" +
    "\026\uffce\054\uffce\055\uffce\056\uffce\063\171\066\055\073" +
    "\054\074\uffce\100\uffce\101\uffce\001\002\000\020\026\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\074\uffcf\100\uffcf\101\uffcf\001" +
    "\002\000\004\100\223\001\002\000\022\005\072\011\100" +
    "\012\044\020\135\023\052\034\uff5c\035\133\051\051\001" +
    "\002\000\004\034\uff59\001\002\000\020\042\056\043\061" +
    "\051\155\064\156\065\153\066\055\073\054\001\002\000" +
    "\004\074\uffe1\001\002\000\022\005\072\011\100\012\044" +
    "\020\135\023\052\034\uff5b\035\133\051\051\001\002\000" +
    "\004\034\uff58\001\002\000\004\100\234\001\002\000\004" +
    "\100\233\001\002\000\004\034\uff53\001\002\000\004\034" +
    "\uff54\001\002\000\004\051\236\001\002\000\004\100\237" +
    "\001\002\000\026\005\uff34\011\uff34\012\uff34\013\uff34\020" +
    "\uff34\023\uff34\027\uff34\034\uff34\035\uff34\051\uff34\001\002" +
    "\000\022\005\117\011\046\012\044\020\122\023\127\032" +
    "\uff2d\035\116\051\051\001\002\000\004\032\uff2c\001\002" +
    "\000\004\021\243\001\002\000\004\073\244\001\002\000" +
    "\020\042\056\043\061\051\155\064\156\065\153\066\055" +
    "\073\054\001\002\000\004\074\246\001\002\000\004\100" +
    "\247\001\002\000\022\005\117\011\046\012\044\020\122" +
    "\023\127\032\uff33\035\116\051\051\001\002\000\004\032" +
    "\uff30\001\002\000\022\005\117\011\046\012\044\020\122" +
    "\023\127\032\uff32\035\116\051\051\001\002\000\004\032" +
    "\uff2f\001\002\000\004\026\254\001\002\000\004\100\255" +
    "\001\002\000\020\005\117\011\046\012\044\020\261\023" +
    "\127\035\257\051\051\001\002\000\024\005\117\011\046" +
    "\012\044\013\uff6c\020\261\023\127\027\uff6c\035\257\051" +
    "\051\001\002\000\004\011\332\001\002\000\004\100\330" +
    "\001\002\000\004\070\321\001\002\000\004\100\317\001" +
    "\002\000\006\013\267\027\266\001\002\000\004\013\314" +
    "\001\002\000\004\100\307\001\002\000\006\005\272\100" +
    "\273\001\002\000\004\005\270\001\002\000\004\100\271" +
    "\001\002\000\026\005\uff65\011\uff65\012\uff65\013\uff65\020" +
    "\uff65\023\uff65\027\uff65\032\uff65\035\uff65\051\uff65\001\002" +
    "\000\016\042\056\043\061\051\065\065\062\066\055\073" +
    "\054\001\002\000\020\005\117\011\046\012\044\020\261" +
    "\023\127\035\257\051\051\001\002\000\004\013\275\001" +
    "\002\000\004\005\276\001\002\000\004\100\277\001\002" +
    "\000\026\005\uff64\011\uff64\012\uff64\013\uff64\020\uff64\023" +
    "\uff64\027\uff64\032\uff64\035\uff64\051\uff64\001\002\000\004" +
    "\026\301\001\002\000\004\100\302\001\002\000\020\005" +
    "\117\011\046\012\044\020\261\023\127\035\257\051\051" +
    "\001\002\000\006\013\uff5f\027\306\001\002\000\004\013" +
    "\uff5e\001\002\000\004\100\uff60\001\002\000\006\005\272" +
    "\100\uff61\001\002\000\020\005\117\011\046\012\044\020" +
    "\261\023\127\035\257\051\051\001\002\000\004\013\311" +
    "\001\002\000\004\005\312\001\002\000\004\100\313\001" +
    "\002\000\026\005\uff63\011\uff63\012\uff63\013\uff63\020\uff63" +
    "\023\uff63\027\uff63\032\uff63\035\uff63\051\uff63\001\002\000" +
    "\004\005\315\001\002\000\004\100\316\001\002\000\026" +
    "\005\uff62\011\uff62\012\uff62\013\uff62\020\uff62\023\uff62\027" +
    "\uff62\032\uff62\035\uff62\051\uff62\001\002\000\024\005\117" +
    "\011\046\012\044\013\uff68\020\261\023\127\027\uff68\035" +
    "\257\051\051\001\002\000\006\013\uff67\027\uff67\001\002" +
    "\000\004\021\322\001\002\000\004\073\323\001\002\000" +
    "\020\042\056\043\061\051\155\064\156\065\153\066\055" +
    "\073\054\001\002\000\004\074\325\001\002\000\004\100" +
    "\326\001\002\000\024\005\117\011\046\012\044\013\uff6e" +
    "\020\261\023\127\027\uff6e\035\257\051\051\001\002\000" +
    "\006\013\uff6b\027\uff6b\001\002\000\024\005\117\011\046" +
    "\012\044\013\uff6d\020\261\023\127\027\uff6d\035\257\051" +
    "\051\001\002\000\006\013\uff6a\027\uff6a\001\002\000\004" +
    "\100\333\001\002\000\006\013\uff66\027\uff66\001\002\000" +
    "\006\013\uff69\027\uff69\001\002\000\004\100\340\001\002" +
    "\000\004\100\337\001\002\000\004\032\uff2b\001\002\000" +
    "\004\032\uff2a\001\002\000\004\032\uff2e\001\002\000\004" +
    "\034\uff4c\001\002\000\004\100\344\001\002\000\030\005" +
    "\uff52\011\uff52\012\uff52\013\uff52\020\uff52\023\uff52\027\uff52" +
    "\034\uff52\035\uff52\051\uff52\100\uff52\001\002\000\004\021" +
    "\346\001\002\000\004\073\347\001\002\000\020\042\056" +
    "\043\061\051\155\064\156\065\153\066\055\073\054\001" +
    "\002\000\004\074\351\001\002\000\004\100\352\001\002" +
    "\000\022\005\072\011\100\012\044\020\075\023\052\034" +
    "\uff51\035\071\051\051\001\002\000\004\034\uff4e\001\002" +
    "\000\022\005\072\011\100\012\044\020\075\023\052\034" +
    "\uff50\035\071\051\051\001\002\000\004\034\uff4d\001\002" +
    "\000\004\026\357\001\002\000\004\100\360\001\002\000" +
    "\020\005\072\011\100\012\044\020\363\023\052\035\361" +
    "\051\051\001\002\000\004\023\u011e\001\002\000\004\100" +
    "\u011c\001\002\000\004\070\u0115\001\002\000\024\005\072" +
    "\011\100\012\044\013\uff43\020\363\023\052\027\uff43\035" +
    "\361\051\051\001\002\000\004\100\u0112\001\002\000\006" +
    "\013\372\027\367\001\002\000\006\005\u0105\100\u0106\001" +
    "\002\000\004\100\u0100\001\002\000\004\013\375\001\002" +
    "\000\004\005\373\001\002\000\004\100\374\001\002\000" +
    "\026\005\uff3c\011\uff3c\012\uff3c\013\uff3c\020\uff3c\023\uff3c" +
    "\027\uff3c\034\uff3c\035\uff3c\051\uff3c\001\002\000\004\005" +
    "\376\001\002\000\004\100\377\001\002\000\026\005\uff39" +
    "\011\uff39\012\uff39\013\uff39\020\uff39\023\uff39\027\uff39\034" +
    "\uff39\035\uff39\051\uff39\001\002\000\020\005\072\011\100" +
    "\012\044\020\363\023\052\035\361\051\051\001\002\000" +
    "\004\013\u0102\001\002\000\004\005\u0103\001\002\000\004" +
    "\100\u0104\001\002\000\026\005\uff3a\011\uff3a\012\uff3a\013" +
    "\uff3a\020\uff3a\023\uff3a\027\uff3a\034\uff3a\035\uff3a\051\uff3a" +
    "\001\002\000\016\042\056\043\061\051\065\065\062\066" +
    "\055\073\054\001\002\000\020\005\072\011\100\012\044" +
    "\020\363\023\052\035\361\051\051\001\002\000\004\013" +
    "\u0108\001\002\000\004\005\u0109\001\002\000\004\100\u010a" +
    "\001\002\000\026\005\uff3b\011\uff3b\012\uff3b\013\uff3b\020" +
    "\uff3b\023\uff3b\027\uff3b\034\uff3b\035\uff3b\051\uff3b\001\002" +
    "\000\004\026\u010c\001\002\000\004\100\u010d\001\002\000" +
    "\020\005\072\011\100\012\044\020\363\023\052\035\361" +
    "\051\051\001\002\000\006\013\uff36\027\u010f\001\002\000" +
    "\006\005\u0105\100\uff38\001\002\000\004\100\uff37\001\002" +
    "\000\004\013\uff35\001\002\000\024\005\072\011\100\012" +
    "\044\013\uff3f\020\363\023\052\027\uff3f\035\361\051\051" +
    "\001\002\000\006\013\uff3e\027\uff3e\001\002\000\006\013" +
    "\uff40\027\uff40\001\002\000\004\021\u0116\001\002\000\004" +
    "\073\u0117\001\002\000\020\042\056\043\061\051\155\064" +
    "\156\065\153\066\055\073\054\001\002\000\004\074\u0119" +
    "\001\002\000\004\100\u011a\001\002\000\024\005\072\011" +
    "\100\012\044\013\uff45\020\363\023\052\027\uff45\035\361" +
    "\051\051\001\002\000\006\013\uff42\027\uff42\001\002\000" +
    "\024\005\072\011\100\012\044\013\uff44\020\363\023\052" +
    "\027\uff44\035\361\051\051\001\002\000\006\013\uff41\027" +
    "\uff41\001\002\000\004\100\u011f\001\002\000\006\013\uff3d" +
    "\027\uff3d\001\002\000\004\100\u0121\001\002\000\004\034" +
    "\uff49\001\002\000\016\042\uff7e\043\uff7e\051\uff7e\065\uff7e" +
    "\066\uff7e\073\uff7e\001\002\000\020\042\uff7c\043\uff7c\051" +
    "\uff7c\054\u0139\065\uff7c\066\uff7c\073\uff7c\001\002\000\020" +
    "\042\uff7d\043\uff7d\051\uff7d\054\u0138\065\uff7d\066\uff7d\073" +
    "\uff7d\001\002\000\016\042\056\043\061\051\u0137\065\u0134" +
    "\066\055\073\054\001\002\000\014\042\056\043\061\051" +
    "\u0128\065\u0127\074\u0129\001\002\000\006\074\uff23\104\u0131" +
    "\001\002\000\006\074\uff24\104\u012f\001\002\000\014\026" +
    "\uff29\054\uff29\055\uff29\056\uff29\100\uff29\001\002\000\006" +
    "\074\uff22\104\u012d\001\002\000\004\074\u012c\001\002\000" +
    "\014\026\uff28\054\uff28\055\uff28\056\uff28\100\uff28\001\002" +
    "\000\012\042\056\043\061\051\u0128\065\u0127\001\002\000" +
    "\004\074\uff25\001\002\000\012\042\056\043\061\051\u0128" +
    "\065\u0127\001\002\000\004\074\uff26\001\002\000\012\042" +
    "\056\043\061\051\u0128\065\u0127\001\002\000\004\074\uff27" +
    "\001\002\000\006\026\uff96\100\uff96\001\002\000\026\026" +
    "\uff97\045\202\057\174\060\173\061\175\062\172\063\171" +
    "\066\055\073\054\100\uff97\001\002\000\006\026\uff87\100" +
    "\uff87\001\002\000\006\026\uff95\100\uff95\001\002\000\010" +
    "\026\uff98\073\u0126\100\uff98\001\002\000\016\042\uff80\043" +
    "\uff80\051\uff80\065\uff80\066\uff80\073\uff80\001\002\000\016" +
    "\042\uff7f\043\uff7f\051\uff7f\065\uff7f\066\uff7f\073\uff7f\001" +
    "\002\000\016\042\056\043\061\051\u013f\065\u013c\066\055" +
    "\073\054\001\002\000\006\026\uff91\100\uff91\001\002\000" +
    "\026\026\uff94\045\202\057\174\060\173\061\175\062\172" +
    "\063\171\066\055\073\054\100\uff94\001\002\000\006\026" +
    "\uff85\100\uff85\001\002\000\006\026\uff93\100\uff93\001\002" +
    "\000\010\026\uff92\073\u0126\100\uff92\001\002\000\016\042" +
    "\056\043\061\051\u0144\065\u0142\066\055\073\054\001\002" +
    "\000\006\026\uff84\100\uff84\001\002\000\026\026\uff82\045" +
    "\202\057\174\060\173\061\175\062\172\063\171\066\055" +
    "\073\054\100\uff82\001\002\000\006\026\uff81\100\uff81\001" +
    "\002\000\006\026\uff83\100\uff83\001\002\000\016\042\056" +
    "\043\061\051\u014a\065\u0147\066\055\073\054\001\002\000" +
    "\006\026\uff89\100\uff89\001\002\000\026\026\uff8c\045\202" +
    "\057\174\060\173\061\175\062\172\063\171\066\055\073" +
    "\054\100\uff8c\001\002\000\006\026\uff86\100\uff86\001\002" +
    "\000\006\026\uff8a\100\uff8a\001\002\000\010\026\uff8b\073" +
    "\u0126\100\uff8b\001\002\000\016\042\056\043\061\051\u0150" +
    "\065\u014d\066\055\073\054\001\002\000\006\026\uff90\100" +
    "\uff90\001\002\000\026\026\uff8f\045\202\057\174\060\173" +
    "\061\175\062\172\063\171\066\055\073\054\100\uff8f\001" +
    "\002\000\006\026\uff88\100\uff88\001\002\000\006\026\uff8d" +
    "\100\uff8d\001\002\000\010\026\uff8e\073\u0126\100\uff8e\001" +
    "\002\000\020\026\uffcb\054\uffcb\055\uffcb\056\uffcb\074\uffcb" +
    "\100\uffcb\101\uffcb\001\002\000\022\045\202\057\174\060" +
    "\173\061\175\062\172\063\171\066\055\073\054\001\002" +
    "\000\004\074\u0154\001\002\000\020\026\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\074\uffcc\100\uffcc\101\uffcc\001\002\000\004" +
    "\051\u015e\001\002\000\020\042\056\043\061\051\u015b\064" +
    "\u015c\065\u0158\066\055\073\054\001\002\000\004\100\uffbf" +
    "\001\002\000\024\045\202\057\174\060\173\061\175\062" +
    "\172\063\171\066\055\073\054\100\uffc0\001\002\000\004" +
    "\100\uffc2\001\002\000\004\100\uffc1\001\002\000\006\073" +
    "\u0126\100\uffc3\001\002\000\004\100\u015d\001\002\000\004" +
    "\100\uffbe\001\002\000\004\054\u015f\001\002\000\020\042" +
    "\056\043\061\051\u0164\064\u0165\065\u0161\066\055\073\054" +
    "\001\002\000\004\100\uffb9\001\002\000\024\045\202\057" +
    "\174\060\173\061\175\062\172\063\171\066\055\073\054" +
    "\100\uffba\001\002\000\004\100\uffbc\001\002\000\004\100" +
    "\uffbb\001\002\000\006\073\u0126\100\uffbd\001\002\000\004" +
    "\100\uffb8\001\002\000\004\010\u0167\001\002\000\004\100" +
    "\u0168\001\002\000\004\013\ufff3\001\002\000\004\013\uffec" +
    "\001\002\000\004\054\u016b\001\002\000\004\065\u016c\001" +
    "\002\000\004\037\u016d\001\002\000\004\065\u016e\001\002" +
    "\000\004\047\u016f\001\002\000\004\065\u0170\001\002\000" +
    "\004\100\u0171\001\002\000\020\005\117\011\046\012\044" +
    "\020\u0176\023\127\035\u0173\051\051\001\002\000\022\005" +
    "\117\011\046\012\044\020\u0176\023\127\032\uff78\035\u0173" +
    "\051\051\001\002\000\004\011\u0186\001\002\000\004\032" +
    "\u0183\001\002\000\004\100\u0181\001\002\000\004\070\u017a" +
    "\001\002\000\004\100\u0178\001\002\000\022\005\117\011" +
    "\046\012\044\020\u0176\023\127\032\uff74\035\u0173\051\051" +
    "\001\002\000\004\032\uff73\001\002\000\004\021\u017b\001" +
    "\002\000\004\073\u017c\001\002\000\020\042\056\043\061" +
    "\051\155\064\156\065\153\066\055\073\054\001\002\000" +
    "\004\074\u017e\001\002\000\004\100\u017f\001\002\000\022" +
    "\005\117\011\046\012\044\020\u0176\023\127\032\uff7a\035" +
    "\u0173\051\051\001\002\000\004\032\uff77\001\002\000\022" +
    "\005\117\011\046\012\044\020\u0176\023\127\032\uff79\035" +
    "\u0173\051\051\001\002\000\004\032\uff76\001\002\000\004" +
    "\051\u0184\001\002\000\004\100\u0185\001\002\000\030\005" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\020\uff7b\023\uff7b\027\uff7b" +
    "\032\uff7b\035\uff7b\051\uff7b\100\uff7b\001\002\000\004\100" +
    "\u0187\001\002\000\004\032\uff72\001\002\000\004\032\uff75" +
    "\001\002\000\020\005\037\011\046\012\044\013\uffef\020" +
    "\043\023\052\051\051\001\002\000\004\013\uffeb\001\002" +
    "\000\006\022\u018c\054\u018d\001\002\000\014\014\u0198\015" +
    "\u0197\016\u019a\046\u0199\051\u0196\001\002\000\020\042\056" +
    "\043\061\051\u0194\064\u0193\065\u018f\066\055\073\054\001" +
    "\002\000\004\100\uffae\001\002\000\024\045\202\057\174" +
    "\060\173\061\175\062\172\063\171\066\055\073\054\100" +
    "\uffaf\001\002\000\004\100\uffc7\001\002\000\004\100\uffc8" +
    "\001\002\000\004\100\uffc4\001\002\000\004\100\uffb0\001" +
    "\002\000\006\073\u0126\100\uffb7\001\002\000\006\054\u019b" +
    "\100\uffca\001\002\000\012\054\uffb1\074\uffb1\100\uffb1\104" +
    "\uffb1\001\002\000\012\054\uffb4\074\uffb4\100\uffb4\104\uffb4" +
    "\001\002\000\012\054\uffb3\074\uffb3\100\uffb3\104\uffb3\001" +
    "\002\000\012\054\uffb2\074\uffb2\100\uffb2\104\uffb2\001\002" +
    "\000\012\054\uffb5\074\uffb5\100\uffb5\104\uffb5\001\002\000" +
    "\020\042\056\043\061\051\u019f\064\u0193\065\u018f\066\055" +
    "\073\054\001\002\000\004\100\uffc6\001\002\000\004\100" +
    "\uffc9\001\002\000\004\100\uffc5\001\002\000\006\073\u0126" +
    "\100\uffb6\001\002\000\004\021\u01a1\001\002\000\004\073" +
    "\u01a2\001\002\000\020\042\056\043\061\051\155\064\156" +
    "\065\153\066\055\073\054\001\002\000\004\074\u01a4\001" +
    "\002\000\004\100\u01a5\001\002\000\020\005\037\011\046" +
    "\012\044\013\ufff2\020\043\023\052\051\051\001\002\000" +
    "\004\013\uffee\001\002\000\020\005\037\011\046\012\044" +
    "\013\ufff1\020\043\023\052\051\051\001\002\000\004\013" +
    "\uffed\001\002\000\004\026\u01aa\001\002\000\004\100\u01ab" +
    "\001\002\000\016\005\037\011\046\012\044\020\u01ad\023" +
    "\052\051\051\001\002\000\004\100\u01d7\001\002\000\004" +
    "\070\u01d0\001\002\000\006\013\u01b8\027\u01b7\001\002\000" +
    "\004\100\u01b3\001\002\000\010\013\uffa2\027\uffa2\100\u01b1" +
    "\001\002\000\016\005\037\011\046\012\044\020\u01ad\023" +
    "\052\051\051\001\002\000\006\013\uff9e\027\uff9e\001\002" +
    "\000\022\005\037\011\046\012\044\013\uffa1\020\u01ad\023" +
    "\052\027\uffa1\051\051\001\002\000\006\013\uff9d\027\uff9d" +
    "\001\002\000\004\013\u01cd\001\002\000\004\100\u01c8\001" +
    "\002\000\006\005\u01bb\100\u01bc\001\002\000\004\005\u01b9" +
    "\001\002\000\004\100\u01ba\001\002\000\024\005\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\020\uffa8\023\uffa8\027\uffa8\051\uffa8" +
    "\100\uffa8\001\002\000\016\042\056\043\061\051\065\065" +
    "\062\066\055\073\054\001\002\000\016\005\037\011\046" +
    "\012\044\020\u01ad\023\052\051\051\001\002\000\004\013" +
    "\u01be\001\002\000\004\005\u01bf\001\002\000\004\100\u01c0" +
    "\001\002\000\024\005\uffa7\011\uffa7\012\uffa7\013\uffa7\020" +
    "\uffa7\023\uffa7\027\uffa7\051\uffa7\100\uffa7\001\002\000\004" +
    "\026\u01c2\001\002\000\004\100\u01c3\001\002\000\016\005" +
    "\037\011\046\012\044\020\u01ad\023\052\051\051\001\002" +
    "\000\006\013\uff99\027\u01c7\001\002\000\004\013\uff9a\001" +
    "\002\000\004\100\uff9c\001\002\000\006\005\u01bb\100\uff9b" +
    "\001\002\000\016\005\037\011\046\012\044\020\u01ad\023" +
    "\052\051\051\001\002\000\004\013\u01ca\001\002\000\004" +
    "\005\u01cb\001\002\000\004\100\u01cc\001\002\000\024\005" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\020\uffa6\023\uffa6\027\uffa6" +
    "\051\uffa6\100\uffa6\001\002\000\004\005\u01ce\001\002\000" +
    "\004\100\u01cf\001\002\000\024\005\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\020\uffa5\023\uffa5\027\uffa5\051\uffa5\100\uffa5\001" +
    "\002\000\004\021\u01d1\001\002\000\004\073\u01d2\001\002" +
    "\000\020\042\056\043\061\051\155\064\156\065\153\066" +
    "\055\073\054\001\002\000\004\074\u01d4\001\002\000\004" +
    "\100\u01d5\001\002\000\022\005\037\011\046\012\044\013" +
    "\uffa4\020\u01ad\023\052\027\uffa4\051\051\001\002\000\006" +
    "\013\uffa0\027\uffa0\001\002\000\022\005\037\011\046\012" +
    "\044\013\uffa3\020\u01ad\023\052\027\uffa3\051\051\001\002" +
    "\000\006\013\uff9f\027\uff9f\001\002\000\004\013\ufff7\001" +
    "\002\000\006\006\014\033\016\001\002\000\004\013\ufff5" +
    "\001\002\000\004\051\u01dd\001\002\000\004\073\u01de\001" +
    "\002\000\004\051\u01e0\001\002\000\004\074\u01e5\001\002" +
    "\000\004\022\u01e1\001\002\000\014\014\u0198\015\u0197\016" +
    "\u019a\046\u0199\051\u0196\001\002\000\006\074\uff1d\104\u01e3" +
    "\001\002\000\004\051\u01e0\001\002\000\004\074\uff1c\001" +
    "\002\000\004\022\u01e6\001\002\000\014\014\u0198\015\u0197" +
    "\016\u019a\046\u0199\051\u0196\001\002\000\004\100\u01e8\001" +
    "\002\000\020\005\u01ea\011\u01f0\012\044\020\u01ee\023\u01f4" +
    "\035\u01e9\051\051\001\002\000\004\030\u02c7\001\002\000" +
    "\016\042\056\043\061\051\065\065\062\066\055\073\054" +
    "\001\002\000\004\013\u02a6\001\002\000\004\100\u02a4\001" +
    "\002\000\026\005\uff11\011\uff11\012\uff11\013\uff11\020\uff11" +
    "\023\uff11\027\uff11\034\uff11\035\uff11\051\uff11\001\002\000" +
    "\004\070\u029d\001\002\000\004\100\u029b\001\002\000\004" +
    "\051\u027a\001\002\000\026\005\uff10\011\uff10\012\uff10\013" +
    "\uff10\020\uff10\023\uff10\027\uff10\034\uff10\035\uff10\051\uff10" +
    "\001\002\000\026\005\uff12\011\uff12\012\uff12\013\uff12\020" +
    "\uff12\023\uff12\027\uff12\034\uff12\035\uff12\051\uff12\001\002" +
    "\000\022\005\u01ea\011\u01f0\012\044\013\uff19\020\u01ee\023" +
    "\u01f4\035\u01e9\051\051\001\002\000\004\036\u01f5\001\002" +
    "\000\016\042\056\043\061\051\065\065\062\066\055\073" +
    "\054\001\002\000\004\100\u01f7\001\002\000\020\005\u01fa" +
    "\011\u01f0\012\044\020\u01ff\023\u0202\035\u01f9\051\051\001" +
    "\002\000\030\005\ufef3\011\ufef3\012\ufef3\013\ufef3\020\ufef3" +
    "\023\ufef3\027\ufef3\032\ufef3\034\ufef3\035\ufef3\051\ufef3\001" +
    "\002\000\006\023\u0275\030\u0276\001\002\000\016\042\056" +
    "\043\061\051\065\065\062\066\055\073\054\001\002\000" +
    "\030\005\ufef1\011\ufef1\012\ufef1\013\ufef1\020\ufef1\023\ufef1" +
    "\027\ufef1\032\ufef1\034\ufef1\035\ufef1\051\ufef1\001\002\000" +
    "\004\034\u023f\001\002\000\004\100\u023d\001\002\000\030" +
    "\005\ufef2\011\ufef2\012\ufef2\013\ufef2\020\ufef2\023\ufef2\027" +
    "\ufef2\032\ufef2\034\ufef2\035\ufef2\051\ufef2\001\002\000\004" +
    "\070\u0236\001\002\000\004\100\u0221\001\002\000\022\005" +
    "\u01fa\011\u01f0\012\044\020\u01ff\023\u0202\034\ufecf\035\u01f9" +
    "\051\051\001\002\000\004\036\u0203\001\002\000\016\042" +
    "\056\043\061\051\065\065\062\066\055\073\054\001\002" +
    "\000\004\100\u0205\001\002\000\020\005\072\011\100\012" +
    "\044\020\u0209\023\052\035\u0206\051\051\001\002\000\010" +
    "\011\u021c\023\u021a\030\u021b\001\002\000\004\100\u0218\001" +
    "\002\000\004\034\u0216\001\002\000\004\070\u020f\001\002" +
    "\000\022\005\072\011\100\012\044\020\075\023\052\034" +
    "\ufedb\035\071\051\051\001\002\000\004\100\u020c\001\002" +
    "\000\022\005\072\011\100\012\044\020\075\023\052\034" +
    "\ufed7\035\071\051\051\001\002\000\004\034\ufed6\001\002" +
    "\000\004\034\ufed8\001\002\000\004\021\u0210\001\002\000" +
    "\004\073\u0211\001\002\000\020\042\056\043\061\051\155" +
    "\064\156\065\153\066\055\073\054\001\002\000\004\074" +
    "\u0213\001\002\000\004\100\u0214\001\002\000\022\005\072" +
    "\011\100\012\044\020\075\023\052\034\ufedd\035\071\051" +
    "\051\001\002\000\004\034\ufeda\001\002\000\004\100\u0217" +
    "\001\002\000\030\005\ufede\011\ufede\012\ufede\013\ufede\020" +
    "\ufede\023\ufede\027\ufede\032\ufede\034\ufede\035\ufede\051\ufede" +
    "\001\002\000\022\005\072\011\100\012\044\020\075\023" +
    "\052\034\ufedc\035\071\051\051\001\002\000\004\034\ufed9" +
    "\001\002\000\004\100\u021f\001\002\000\004\100\u021e\001" +
    "\002\000\004\100\u021d\001\002\000\004\034\ufed4\001\002" +
    "\000\004\034\ufed3\001\002\000\004\034\ufed5\001\002\000" +
    "\004\034\ufecc\001\002\000\022\005\u01ea\011\u01f0\012\044" +
    "\020\u0225\023\u01f4\034\ufecb\035\u0223\051\051\001\002\000" +
    "\004\034\ufeca\001\002\000\004\030\u0234\001\002\000\004" +
    "\100\u0232\001\002\000\004\070\u022b\001\002\000\004\100" +
    "\u0229\001\002\000\026\005\u01ea\011\u01f0\012\044\013\uff09" +
    "\020\u0225\023\u01f4\027\uff09\034\uff09\035\u0223\051\051\001" +
    "\002\000\010\013\uff06\027\uff06\034\uff06\001\002\000\026" +
    "\005\u01ea\011\u01f0\012\044\013\uff05\020\u0225\023\u01f4\027" +
    "\uff05\034\uff05\035\u0223\051\051\001\002\000\010\013\uff04" +
    "\027\uff04\034\uff04\001\002\000\004\021\u022c\001\002\000" +
    "\004\073\u022d\001\002\000\020\042\056\043\061\051\155" +
    "\064\156\065\153\066\055\073\054\001\002\000\004\074" +
    "\u022f\001\002\000\004\100\u0230\001\002\000\026\005\u01ea" +
    "\011\u01f0\012\044\013\uff0b\020\u0225\023\u01f4\027\uff0b\034" +
    "\uff0b\035\u0223\051\051\001\002\000\010\013\uff08\027\uff08" +
    "\034\uff08\001\002\000\026\005\u01ea\011\u01f0\012\044\013" +
    "\uff0a\020\u0225\023\u01f4\027\uff0a\034\uff0a\035\u0223\051\051" +
    "\001\002\000\010\013\uff07\027\uff07\034\uff07\001\002\000" +
    "\004\100\u0235\001\002\000\010\013\uff03\027\uff03\034\uff03" +
    "\001\002\000\004\021\u0237\001\002\000\004\073\u0238\001" +
    "\002\000\020\042\056\043\061\051\155\064\156\065\153" +
    "\066\055\073\054\001\002\000\004\074\u023a\001\002\000" +
    "\004\100\u023b\001\002\000\022\005\u01fa\011\u01f0\012\044" +
    "\020\u01ff\023\u0202\034\ufed1\035\u01f9\051\051\001\002\000" +
    "\004\034\ufece\001\002\000\022\005\u01fa\011\u01f0\012\044" +
    "\020\u01ff\023\u0202\034\ufed0\035\u01f9\051\051\001\002\000" +
    "\004\034\ufecd\001\002\000\004\100\u0240\001\002\000\026" +
    "\005\ufed2\011\ufed2\012\ufed2\013\ufed2\020\ufed2\023\ufed2\027" +
    "\ufed2\034\ufed2\035\ufed2\051\ufed2\001\002\000\004\026\u0242" +
    "\001\002\000\004\100\u0243\001\002\000\020\005\u01fa\011" +
    "\u01f0\012\044\020\u0246\023\u0202\035\u0244\051\051\001\002" +
    "\000\006\011\u0272\030\u0271\001\002\000\004\100\u026f\001" +
    "\002\000\004\070\u0268\001\002\000\004\100\u0266\001\002" +
    "\000\006\013\u024e\027\u024b\001\002\000\024\005\u01fa\011" +
    "\u01f0\012\044\013\ufeea\020\u0246\023\u0202\027\ufeea\035\u0244" +
    "\051\051\001\002\000\006\013\ufee7\027\ufee7\001\002\000" +
    "\006\005\u0259\100\u025a\001\002\000\004\100\u0254\001\002" +
    "\000\004\013\u0251\001\002\000\004\005\u024f\001\002\000" +
    "\004\100\u0250\001\002\000\030\005\ufef0\011\ufef0\012\ufef0" +
    "\013\ufef0\020\ufef0\023\ufef0\027\ufef0\032\ufef0\034\ufef0\035" +
    "\ufef0\051\ufef0\001\002\000\004\005\u0252\001\002\000\004" +
    "\100\u0253\001\002\000\030\005\ufeed\011\ufeed\012\ufeed\013" +
    "\ufeed\020\ufeed\023\ufeed\027\ufeed\032\ufeed\034\ufeed\035\ufeed" +
    "\051\ufeed\001\002\000\020\005\u01fa\011\u01f0\012\044\020" +
    "\u0246\023\u0202\035\u0244\051\051\001\002\000\004\013\u0256" +
    "\001\002\000\004\005\u0257\001\002\000\004\100\u0258\001" +
    "\002\000\030\005\ufeee\011\ufeee\012\ufeee\013\ufeee\020\ufeee" +
    "\023\ufeee\027\ufeee\032\ufeee\034\ufeee\035\ufeee\051\ufeee\001" +
    "\002\000\016\042\056\043\061\051\065\065\062\066\055" +
    "\073\054\001\002\000\020\005\u01fa\011\u01f0\012\044\020" +
    "\u0246\023\u0202\035\u0244\051\051\001\002\000\004\013\u025c" +
    "\001\002\000\004\005\u025d\001\002\000\004\100\u025e\001" +
    "\002\000\030\005\ufeef\011\ufeef\012\ufeef\013\ufeef\020\ufeef" +
    "\023\ufeef\027\ufeef\032\ufeef\034\ufeef\035\ufeef\051\ufeef\001" +
    "\002\000\004\026\u0260\001\002\000\004\100\u0261\001\002" +
    "\000\020\005\u01fa\011\u01f0\012\044\020\u0246\023\u0202\035" +
    "\u0244\051\051\001\002\000\006\013\ufee0\027\u0263\001\002" +
    "\000\006\005\u0259\100\ufee2\001\002\000\004\100\ufee1\001" +
    "\002\000\004\013\ufedf\001\002\000\024\005\u01ea\011\u01f0" +
    "\012\044\013\ufee6\020\u0225\023\u01f4\027\ufee6\035\u0223\051" +
    "\051\001\002\000\006\013\ufee5\027\ufee5\001\002\000\004" +
    "\021\u0269\001\002\000\004\073\u026a\001\002\000\020\042" +
    "\056\043\061\051\155\064\156\065\153\066\055\073\054" +
    "\001\002\000\004\074\u026c\001\002\000\004\100\u026d\001" +
    "\002\000\024\005\u01fa\011\u01f0\012\044\013\ufeec\020\u0246" +
    "\023\u0202\027\ufeec\035\u0244\051\051\001\002\000\006\013" +
    "\ufee9\027\ufee9\001\002\000\024\005\u01fa\011\u01f0\012\044" +
    "\013\ufeeb\020\u0246\023\u0202\027\ufeeb\035\u0244\051\051\001" +
    "\002\000\006\013\ufee8\027\ufee8\001\002\000\004\100\u0274" +
    "\001\002\000\004\100\u0273\001\002\000\006\013\ufee3\027" +
    "\ufee3\001\002\000\006\013\ufee4\027\ufee4\001\002\000\004" +
    "\100\u0278\001\002\000\004\100\u0277\001\002\000\004\034" +
    "\ufec8\001\002\000\004\034\ufec9\001\002\000\004\013\uff15" +
    "\001\002\000\004\054\u027b\001\002\000\004\065\u027c\001" +
    "\002\000\004\037\u027d\001\002\000\004\065\u027e\001\002" +
    "\000\004\047\u027f\001\002\000\004\065\u0280\001\002\000" +
    "\004\100\u0281\001\002\000\020\005\u01fa\011\u01f0\012\044" +
    "\020\u0284\023\u0202\035\u0282\051\051\001\002\000\006\011" +
    "\u0298\030\u0297\001\002\000\004\100\u0295\001\002\000\004" +
    "\070\u028e\001\002\000\004\100\u028c\001\002\000\004\032" +
    "\u0289\001\002\000\022\005\u01fa\011\u01f0\012\044\020\u0284" +
    "\023\u0202\032\ufefb\035\u0282\051\051\001\002\000\004\032" +
    "\ufef8\001\002\000\004\051\u028a\001\002\000\004\100\u028b" +
    "\001\002\000\030\005\ufefe\011\ufefe\012\ufefe\013\ufefe\020" +
    "\ufefe\023\ufefe\027\ufefe\032\ufefe\034\ufefe\035\ufefe\051\ufefe" +
    "\001\002\000\022\005\u01fa\011\u01f0\012\044\020\u0284\023" +
    "\u0202\032\ufef7\035\u0282\051\051\001\002\000\004\032\ufef6" +
    "\001\002\000\004\021\u028f\001\002\000\004\073\u0290\001" +
    "\002\000\020\042\056\043\061\051\155\064\156\065\153" +
    "\066\055\073\054\001\002\000\004\074\u0292\001\002\000" +
    "\004\100\u0293\001\002\000\022\005\u01fa\011\u01f0\012\044" +
    "\020\u0284\023\u0202\032\ufefd\035\u0282\051\051\001\002\000" +
    "\004\032\ufefa\001\002\000\022\005\u01fa\011\u01f0\012\044" +
    "\020\u0284\023\u0202\032\ufefc\035\u0282\051\051\001\002\000" +
    "\004\032\ufef9\001\002\000\004\100\u029a\001\002\000\004" +
    "\100\u0299\001\002\000\004\032\ufef4\001\002\000\004\032" +
    "\ufef5\001\002\000\022\005\u01ea\011\u01f0\012\044\013\uff18" +
    "\020\u01ee\023\u01f4\035\u01e9\051\051\001\002\000\004\013" +
    "\uff14\001\002\000\004\021\u029e\001\002\000\004\073\u029f" +
    "\001\002\000\020\042\056\043\061\051\155\064\156\065" +
    "\153\066\055\073\054\001\002\000\004\074\u02a1\001\002" +
    "\000\004\100\u02a2\001\002\000\022\005\u01ea\011\u01f0\012" +
    "\044\013\uff1b\020\u01ee\023\u01f4\035\u01e9\051\051\001\002" +
    "\000\004\013\uff17\001\002\000\022\005\u01ea\011\u01f0\012" +
    "\044\013\uff1a\020\u01ee\023\u01f4\035\u01e9\051\051\001\002" +
    "\000\004\013\uff16\001\002\000\004\030\u02a7\001\002\000" +
    "\006\006\uff1e\100\uff1e\001\002\000\004\026\u02a9\001\002" +
    "\000\004\100\u02aa\001\002\000\020\005\u01ea\011\u01f0\012" +
    "\044\020\u0225\023\u01f4\035\u0223\051\051\001\002\000\006" +
    "\013\u02af\027\u02ad\001\002\000\004\013\u02c4\001\002\000" +
    "\006\005\u02b7\100\u02b8\001\002\000\004\100\u02b2\001\002" +
    "\000\004\005\u02b0\001\002\000\004\100\u02b1\001\002\000" +
    "\026\005\uff0f\011\uff0f\012\uff0f\013\uff0f\020\uff0f\023\uff0f" +
    "\027\uff0f\034\uff0f\035\uff0f\051\uff0f\001\002\000\020\005" +
    "\u01ea\011\u01f0\012\044\020\u0225\023\u01f4\035\u0223\051\051" +
    "\001\002\000\004\013\u02b4\001\002\000\004\005\u02b5\001" +
    "\002\000\004\100\u02b6\001\002\000\026\005\uff0d\011\uff0d" +
    "\012\uff0d\013\uff0d\020\uff0d\023\uff0d\027\uff0d\034\uff0d\035" +
    "\uff0d\051\uff0d\001\002\000\016\042\056\043\061\051\065" +
    "\065\062\066\055\073\054\001\002\000\020\005\u01ea\011" +
    "\u01f0\012\044\020\u0225\023\u01f4\035\u0223\051\051\001\002" +
    "\000\004\013\u02ba\001\002\000\004\005\u02bb\001\002\000" +
    "\004\100\u02bc\001\002\000\026\005\uff0e\011\uff0e\012\uff0e" +
    "\013\uff0e\020\uff0e\023\uff0e\027\uff0e\034\uff0e\035\uff0e\051" +
    "\uff0e\001\002\000\004\026\u02be\001\002\000\004\100\u02bf" +
    "\001\002\000\020\005\u01ea\011\u01f0\012\044\020\u0225\023" +
    "\u01f4\035\u0223\051\051\001\002\000\006\013\uff00\027\u02c2" +
    "\001\002\000\004\013\ufeff\001\002\000\006\005\u02b7\100" +
    "\uff02\001\002\000\004\100\uff01\001\002\000\004\005\u02c5" +
    "\001\002\000\004\100\u02c6\001\002\000\026\005\uff0c\011" +
    "\uff0c\012\uff0c\013\uff0c\020\uff0c\023\uff0c\027\uff0c\034\uff0c" +
    "\035\uff0c\051\uff0c\001\002\000\004\100\u02c8\001\002\000" +
    "\004\013\uff13\001\002\000\004\051\u02ca\001\002\000\004" +
    "\100\u02cb\001\002\000\004\012\u02cd\001\002\000\004\013" +
    "\u02d3\001\002\000\004\051\u02ce\001\002\000\004\022\u02cf" +
    "\001\002\000\014\014\u0198\015\u0197\016\u019a\046\u0199\051" +
    "\u0196\001\002\000\004\100\u02d1\001\002\000\006\012\u02cd" +
    "\013\uff21\001\002\000\004\013\uff20\001\002\000\004\025" +
    "\u02d4\001\002\000\006\006\uff1f\100\uff1f\001\002\000\004" +
    "\002\001\001\002\000\006\070\u02dd\100\ufffd\001\002\000" +
    "\004\100\u02db\001\002\000\006\070\u02d9\100\ufffb\001\002" +
    "\000\006\017\u02d8\051\u02d6\001\002\000\004\100\ufffa\001" +
    "\002\000\006\004\004\006\uffff\001\002\000\004\006\ufffe" +
    "\001\002\000\006\017\u02d8\051\u02d6\001\002\000\004\100" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02dc\000\006\002\004\003\005\001\001\000\004\005" +
    "\u02d6\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\016\010\014\020\020\057\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01d8\001\001\000\004\010\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\016\010\014\020\027\057\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\040\021\047\031\046\032" +
    "\035\036\041\045\037\054\044\001\001\000\002\001\001" +
    "\000\014\017\063\027\057\030\056\034\u01a8\054\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\040\021\u0168\031\046\032\035" +
    "\036\041\045\037\054\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\063\027\057" +
    "\030\056\034\065\054\062\001\001\000\006\017\u0152\027" +
    "\057\001\001\000\014\023\u0150\024\203\025\177\026\200" +
    "\027\176\001\001\000\002\001\001\000\004\035\u014a\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\202" +
    "\024\203\025\177\026\200\027\176\035\u0144\001\001\000" +
    "\004\035\u013f\001\001\000\004\035\u0139\001\001\000\004" +
    "\035\u0124\001\001\000\002\001\001\000\020\015\073\045" +
    "\072\046\075\047\076\050\067\052\101\054\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\063\027" +
    "\057\030\056\034\355\054\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\073\045\072\046\341\047\076\050\067\052\101" +
    "\054\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\073\045\072\046\103\047\076" +
    "\050\067\052\101\054\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\117\036\120\040\114\041\123\043\125" +
    "\053\124\054\122\001\001\000\020\015\117\036\120\040" +
    "\114\041\123\043\125\053\340\054\122\001\001\000\002" +
    "\001\001\000\014\017\063\027\057\030\056\034\252\054" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\063" +
    "\027\057\030\056\034\130\054\062\001\001\000\002\001" +
    "\001\000\020\015\133\044\137\045\072\047\135\050\067" +
    "\052\101\054\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\133\044\144\045\072" +
    "\047\135\050\067\052\101\054\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\133\044\143\045\072\047\135\050\067\052" +
    "\101\054\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\153\022" +
    "\151\027\057\030\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\023\202\024\203\025\177\026\200\027" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\153\022\157\027\057\030\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\153" +
    "\022\162\027\057\030\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\153\022\165\027\057\030\150" +
    "\001\001\000\002\001\001\000\012\017\153\022\167\027" +
    "\057\030\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\153\022\206\027\057\030\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\205\025\177\026\200\027\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\210\026\200" +
    "\027\176\001\001\000\002\001\001\000\014\023\212\024" +
    "\203\025\177\026\200\027\176\001\001\000\002\001\001" +
    "\000\014\023\214\024\203\025\177\026\200\027\176\001" +
    "\001\000\002\001\001\000\010\025\216\026\200\027\176" +
    "\001\001\000\002\001\001\000\006\026\220\027\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\133" +
    "\044\223\045\072\047\135\050\067\052\101\054\136\001" +
    "\001\000\002\001\001\000\012\017\153\022\225\027\057" +
    "\030\150\001\001\000\002\001\001\000\020\015\133\044" +
    "\227\045\072\047\135\050\067\052\101\054\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\117\036\120\040" +
    "\114\041\123\043\125\053\240\054\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\153\022\244\027\057\030\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\117\036\120\040\114\041" +
    "\123\043\125\053\247\054\122\001\001\000\002\001\001" +
    "\000\020\015\117\036\120\040\114\041\123\043\125\053" +
    "\251\054\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\257\036\120\040\255\041" +
    "\123\043\125\054\261\104\262\001\001\000\020\015\257" +
    "\036\120\040\255\041\123\043\125\054\261\104\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\264\114\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\063\027\057\030\056\034\277\054\062\001\001\000\020" +
    "\015\257\036\120\040\255\041\123\043\125\054\261\104" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\257\036\120\040\255\041\123\043\125" +
    "\054\261\104\302\001\001\000\006\042\304\114\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\257\036\120\040\255\041\123\043\125\054" +
    "\261\104\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\257\036\120" +
    "\040\255\041\123\043\125\054\261\104\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\153\022\323\027\057\030\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\257\036\120\040\255" +
    "\041\123\043\125\054\261\104\326\001\001\000\002\001" +
    "\001\000\020\015\257\036\120\040\255\041\123\043\125" +
    "\054\261\104\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\153\022\347\027\057\030\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\073\045\072\046\352\047" +
    "\076\050\067\052\101\054\100\001\001\000\002\001\001" +
    "\000\020\015\073\045\072\046\354\047\076\050\067\052" +
    "\101\054\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\361\045\072\047\363\050" +
    "\067\052\101\054\364\105\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\361\045" +
    "\072\047\363\050\067\052\101\054\364\105\u0113\001\001" +
    "\000\002\001\001\000\006\051\367\112\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\361" +
    "\045\072\047\363\050\067\052\101\054\364\105\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\063\027\057\030\056\034" +
    "\u010a\054\062\001\001\000\020\015\361\045\072\047\363" +
    "\050\067\052\101\054\364\105\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\361\045" +
    "\072\047\363\050\067\052\101\054\364\105\u010d\001\001" +
    "\000\006\051\u010f\112\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\361\045\072" +
    "\047\363\050\067\052\101\054\364\105\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\153\022\u0117\027\057\030\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\361" +
    "\045\072\047\363\050\067\052\101\054\364\105\u011a\001" +
    "\001\000\002\001\001\000\020\015\361\045\072\047\363" +
    "\050\067\052\101\054\364\105\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\u0135\027\057\030\u0132\054\u0134" +
    "\001\001\000\006\030\u0129\055\u012a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\u0129\055" +
    "\u012d\001\001\000\002\001\001\000\006\030\u0129\055\u012f" +
    "\001\001\000\002\001\001\000\006\030\u0129\055\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\202" +
    "\024\203\025\177\026\200\027\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\u013d\027\057\030\u013a\054" +
    "\u013c\001\001\000\002\001\001\000\014\023\202\024\203" +
    "\025\177\026\200\027\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u0142\027\057" +
    "\030\u0140\001\001\000\002\001\001\000\014\023\202\024" +
    "\203\025\177\026\200\027\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\u0148\027\057\030\u0145\054" +
    "\u0147\001\001\000\002\001\001\000\014\023\202\024\203" +
    "\025\177\026\200\027\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\u014e\027\057" +
    "\030\u014b\054\u014d\001\001\000\002\001\001\000\014\023" +
    "\202\024\203\025\177\026\200\027\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\202\024\203\025\177\026\200\027\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\u0159\027\057\030\u0156\054\u0158\001\001" +
    "\000\002\001\001\000\014\023\202\024\203\025\177\026" +
    "\200\027\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\u0162\027\057\030\u015f\054\u0161" +
    "\001\001\000\002\001\001\000\014\023\202\024\203\025" +
    "\177\026\200\027\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u0174\036\120\037\u0173\040\u0171\041" +
    "\123\043\125\054\u0176\001\001\000\020\015\u0174\036\120" +
    "\037\u0187\040\u0171\041\123\043\125\054\u0176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\u0174\036\120\037" +
    "\u0178\040\u0171\041\123\043\125\054\u0176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\153\022\u017c\027\057\030\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\u0174\036\120\037\u017f\040" +
    "\u0171\041\123\043\125\054\u0176\001\001\000\002\001\001" +
    "\000\020\015\u0174\036\120\037\u0181\040\u0171\041\123\043" +
    "\125\054\u0176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\040\021\u0189" +
    "\031\046\032\035\036\041\045\037\054\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0194\001\001" +
    "\000\014\016\u0190\017\u0191\027\057\030\u018d\054\u018f\001" +
    "\001\000\002\001\001\000\014\023\202\024\203\025\177" +
    "\026\200\027\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\u019c\017\u019d\027\057\030\u018d\054\u019b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\153\022\u01a2\027\057\030\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\040\021\u01a5\031\046\032" +
    "\035\036\041\045\037\054\044\001\001\000\002\001\001" +
    "\000\020\015\040\021\u01a7\031\046\032\035\036\041\045" +
    "\037\054\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\u01ab\031\u01af\032\035\036" +
    "\041\045\037\054\u01ae\103\u01ad\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\u01b5\113\u01b4\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\u01ab\031\u01af" +
    "\032\035\036\041\045\037\054\u01ae\103\u01b1\001\001\000" +
    "\002\001\001\000\020\015\u01ab\031\u01af\032\035\036\041" +
    "\045\037\054\u01ae\103\u01b3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\063\027\057\030\056\034\u01c0\054\062\001\001\000\020" +
    "\015\u01ab\031\u01af\032\035\036\041\045\037\054\u01ae\103" +
    "\u01bc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\u01ab\031\u01af\032\035\036\041\045\037" +
    "\054\u01ae\103\u01c3\001\001\000\006\033\u01c5\113\u01c4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u01ab\031\u01af\032\035\036\041\045\037\054" +
    "\u01ae\103\u01c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\153\022\u01d2\027\057\030\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u01ab" +
    "\031\u01af\032\035\036\041\045\037\054\u01ae\103\u01d5\001" +
    "\001\000\002\001\001\000\020\015\u01ab\031\u01af\032\035" +
    "\036\041\045\037\054\u01ae\103\u01d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\016\010\014\020\u01da" +
    "\057\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u01de\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u01e1\001\001\000\002\001" +
    "\001\000\004\011\u01e3\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u01e6\001\001\000\002\001\001\000" +
    "\020\013\u01ea\015\u01eb\054\u01ee\060\u01f2\061\u01f1\063\u01ec" +
    "\072\u01f0\001\001\000\002\001\001\000\014\017\063\027" +
    "\057\030\056\034\u02a7\054\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\u0278\015\u01eb\054\u01ee\060\u01f2\061" +
    "\u01f1\063\u01ec\072\u01f0\001\001\000\002\001\001\000\014" +
    "\017\063\027\057\030\056\034\u01f5\054\062\001\001\000" +
    "\002\001\001\000\020\015\u01fc\054\u01ff\063\u01fd\065\u0200" +
    "\066\u01f7\070\u01fa\073\u01fb\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\063\027\057\030\056\034\u0240" +
    "\054\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u01fc\054\u01ff\063\u01fd\065\u0200\066" +
    "\u01f7\070\u01fa\073\u021f\001\001\000\002\001\001\000\014" +
    "\017\063\027\057\030\056\034\u0203\054\062\001\001\000" +
    "\002\001\001\000\020\015\u0206\045\072\047\u0209\050\067" +
    "\052\101\054\u020a\071\u0207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\073\045\072\046\u020d\047\076\050\067\052\101\054" +
    "\100\001\001\000\002\001\001\000\020\015\073\045\072" +
    "\046\u020c\047\076\050\067\052\101\054\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\153\022\u0211\027\057\030\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\073" +
    "\045\072\046\u0214\047\076\050\067\052\101\054\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\073\045\072\046\u0218\047\076\050\067\052" +
    "\101\054\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\u0223\054\u0225\060\u0226\061\u01f1\063\u01ec\072\u01f0\106" +
    "\u0221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\u0223\054\u0225\060\u0226\061\u01f1\063\u01ec\072\u01f0\106\u0227" +
    "\001\001\000\002\001\001\000\020\015\u0223\054\u0225\060" +
    "\u0226\061\u01f1\063\u01ec\072\u01f0\106\u0229\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\153\022\u022d\027\057\030\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\u0223\054\u0225\060\u0226\061" +
    "\u01f1\063\u01ec\072\u01f0\106\u0230\001\001\000\002\001\001" +
    "\000\020\015\u0223\054\u0225\060\u0226\061\u01f1\063\u01ec\072" +
    "\u01f0\106\u0232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\153\022\u0238\027\057\030\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\u01fc\054\u01ff\063" +
    "\u01fd\065\u0200\066\u01f7\070\u01fa\073\u023b\001\001\000\002" +
    "\001\001\000\020\015\u01fc\054\u01ff\063\u01fd\065\u0200\066" +
    "\u01f7\070\u01fa\073\u023d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\u0244\054\u0246\063\u01fd\065\u0248\066\u01f7" +
    "\070\u01fa\107\u0247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\067\u024b" +
    "\116\u024c\001\001\000\020\015\u0244\054\u0246\063\u01fd\065" +
    "\u0248\066\u01f7\070\u01fa\107\u0249\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\u0244\054\u0246\063\u01fd\065\u0248\066\u01f7\070\u01fa\107\u0254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\063\027\057\030\056" +
    "\034\u025e\054\062\001\001\000\020\015\u0244\054\u0246\063" +
    "\u01fd\065\u0248\066\u01f7\070\u01fa\107\u025a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u0244" +
    "\054\u0246\063\u01fd\065\u0248\066\u01f7\070\u01fa\107\u0261\001" +
    "\001\000\006\067\u0263\116\u0264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u0223\054" +
    "\u0225\060\u0226\061\u01f1\063\u01ec\072\u01f0\106\u0266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\153\022\u026a\027\057\030\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\u0244\054\u0246\063" +
    "\u01fd\065\u0248\066\u01f7\070\u01fa\107\u026d\001\001\000\002" +
    "\001\001\000\020\015\u0244\054\u0246\063\u01fd\065\u0248\066" +
    "\u01f7\070\u01fa\107\u026f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\u0282\054\u0284\063\u01fd\064\u0285\065\u0286\066\u01f7\070\u01fa" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\u0282" +
    "\054\u0284\063\u01fd\064\u0287\065\u0286\066\u01f7\070\u01fa\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\u0282\054\u0284\063\u01fd\064" +
    "\u028c\065\u0286\066\u01f7\070\u01fa\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\153\022" +
    "\u0290\027\057\030\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\u0282\054\u0284\063\u01fd\064\u0293\065" +
    "\u0286\066\u01f7\070\u01fa\001\001\000\002\001\001\000\020" +
    "\015\u0282\054\u0284\063\u01fd\064\u0295\065\u0286\066\u01f7\070" +
    "\u01fa\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\u029b\015\u01eb\054\u01ee\060\u01f2\061\u01f1\063\u01ec\072\u01f0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\153\022\u029f\027\057\030\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\u02a2\015" +
    "\u01eb\054\u01ee\060\u01f2\061\u01f1\063\u01ec\072\u01f0\001\001" +
    "\000\002\001\001\000\020\013\u02a4\015\u01eb\054\u01ee\060" +
    "\u01f2\061\u01f1\063\u01ec\072\u01f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\u0223\054\u0225\060\u0226\061\u01f1" +
    "\063\u01ec\072\u01f0\106\u02aa\001\001\000\006\062\u02ad\115" +
    "\u02ab\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\u0223\054\u0225\060\u0226\061\u01f1\063\u01ec" +
    "\072\u01f0\106\u02b2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\063" +
    "\027\057\030\056\034\u02bc\054\062\001\001\000\020\015" +
    "\u0223\054\u0225\060\u0226\061\u01f1\063\u01ec\072\u01f0\106\u02b8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\u0223\054\u0225\060\u0226\061\u01f1\063\u01ec\072" +
    "\u01f0\106\u02bf\001\001\000\006\062\u02c2\115\u02c0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\u02cb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u02cf\001\001\000" +
    "\002\001\001\000\004\056\u02d1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u02d9\001\001\000\002\001\001\000\004\003\u02db\001" +
    "\001\000\002\001\001\000\004\005\u02dd\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // INFOR_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // INFOR_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // INFOR_WHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INFOR_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // INFOR_WHILE_FUNCION ::= DECLARACION findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INFOR_WHILE_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INFOR_WHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE_FUNCION",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // FOR_WHILE_FUNCION ::= for_ identificador igual numero to numero step_ numero findelinea INFOR_WHILE_FUNCION next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE_FUNCION",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ELSE_IF_WHILE_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ELSE_IF_WHILE_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION2",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then findelinea INIF_WHILE_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE_FUNCION",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // INIF_WHILE_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // INIF_WHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // INIF_WHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INIF_WHILE_FUNCION ::= DECLARACION findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INIF_WHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INIF_WHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INIF_WHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE_FUNCION",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // IF_WHILE_FUNCION ::= if_ CONDICION then findelinea INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION else_ INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // IF_WHILE_FUNCION ::= if_ CONDICION then INIF_WHILE_FUNCION end_ if_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE_FUNCION",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // SENTENCIA_WHILE_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // SENTENCIA_WHILE_FUNCION ::= FOR_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE_FUNCION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INWHILE_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // INWHILE_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INWHILE_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INWHILE_FUNCION ::= DECLARACION findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INWHILE_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INWHILE_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INWHILE_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNCION",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // WHILE_FUNCION ::= do_ until CONDICION findelinea INWHILE_FUNCION loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INWHILE_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INWHILE_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INWHILE_FOR_FUNCION ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INWHILE_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INWHILE_FOR_FUNCION ::= DECLARACION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INWHILE_FOR_FUNCION ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // INWHILE_FOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR_FUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // WHILE_FOR_FUNCION ::= do_ until CONDICION findelinea INWHILE_FOR_FUNCION loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR_FUNCION",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ELSE_IF_FOR_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ELSE_IF_FOR_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION2",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then findelinea INIF_FOR_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR_FUNCION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // INIF_FOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // INIF_FOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INIF_FOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INIF_FOR_FUNCION ::= DECLARACION findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INIF_FOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INIF_FOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INIF_FOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR_FUNCION",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION ELSE_IF_FOR_FUNCION findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION else_ findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // IF_FOR_FUNCION ::= if_ CONDICION then findelinea INIF_FOR_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR_FUNCION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // SENTENCIA_FOR_FUNCION ::= WHILE_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // SENTENCIA_FOR_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR_FUNCION",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // INFOR_FUNCION ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // INFOR_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // INFOR_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // INFOR_FUNCION ::= DECLARACION findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INFOR_FUNCION ::= SENTENCIA_FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INFOR_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INFOR_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_FUNCION",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FOR_FUNCION ::= for_ identificador igual numero to numero step_ numero findelinea INFOR_FUNCION next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_FUNCION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ELSE_IF_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ELSE_IF_FUNCION2 ::= else_ if_ CONDICION then findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION2",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ELSE_IF_FUNCION ::= else_ if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ELSE_IF_FUNCION ::= else_ if_ CONDICION then findelinea INIF_FUNCION else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FUNCION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // INIF_FUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // INIF_FUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // INIF_FUNCION ::= SENTENCIA_FUNCION INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INIF_FUNCION ::= DECLARACION findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // INIF_FUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // INIF_FUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // INIF_FUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FUNCION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION ELSE_IF_FUNCION findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION else_ findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // IF_FUNCION ::= if_ CONDICION then findelinea INIF_FUNCION end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // SENTENCIA_FUNCION ::= WHILE_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // SENTENCIA_FUNCION ::= FOR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // SENTENCIA_FUNCION ::= IF_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // INFUNCION ::= exit function_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // INFUNCION ::= LLAMAR_FUNCION findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // INFUNCION ::= SENTENCIA_FUNCION INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // INFUNCION ::= DECLARACION findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // INFUNCION ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INFUNCION ::= SENTENCIA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INFUNCION ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // INFUNCION ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // PARAMETRO ::= identificador as TYPE_ coma_ PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // PARAMETRO ::= identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ findelinea INFUNCION end_ function_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // STRUCT_ ::= Public_ struct_ identificador findelinea DECLARACIONSENCILLA end_ struct_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT_",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea DECLARACIONSENCILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // DECLARACIONSENCILLA ::= dim identificador as TYPE_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONSENCILLA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // PARAMETRO_SENCILLO ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // PARAMETRO_SENCILLO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // PARAMETRO_SENCILLO ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // PARAMETRO_SENCILLO ::= BOOLEAN coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // PARAMETRO_SENCILLO ::= identificador coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // PARAMETRO_SENCILLO ::= numero coma_ PARAMETRO_SENCILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SENCILLO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // LLAMAR_FUNCION ::= identificador parentesisA PARAMETRO_SENCILLO parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // LLAMAR_FUNCION ::= identificador parentesisA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INFOR_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INFOR_WHILE ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INFOR_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INFOR_WHILE ::= SENTENCIA_FOR INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // INFOR_WHILE ::= DECLARACION findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // INFOR_WHILE ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // INFOR_WHILE ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // INFOR_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // FOR_WHILE ::= for_ identificador igual numero to numero step_ numero findelinea INFOR_WHILE next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_WHILE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ELSE_IF_WHILE2 ::= else_ if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ELSE_IF_WHILE2 ::= else_ if_ CONDICION then findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ELSE_IF_WHILE ::= else_ if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ELSE_IF_WHILE ::= else_ if_ CONDICION then findelinea INIF_WHILE else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE ELSE_IF_WHILE findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE else_ findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // IF_WHILE ::= if_ CONDICION then findelinea INIF_WHILE end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // INIF_WHILE ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // INIF_WHILE ::= LLAMAR_FUNCION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // INIF_WHILE ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // INIF_WHILE ::= SENTENCIA_WHILE INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // INIF_WHILE ::= DECLARACION findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // INIF_WHILE ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // INIF_WHILE ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // INIF_WHILE ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIA_WHILE ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA_WHILE ::= FOR_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_WHILE ::= IF_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // INWHILE_MAIN ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INWHILE_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INWHILE_MAIN ::= SENTENCIA_WHILE INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INWHILE_MAIN ::= DECLARACION findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INWHILE_MAIN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INWHILE_MAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INWHILE_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_MAIN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // WHILE_MAIN ::= do_ until CONDICION findelinea INWHILE_MAIN loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_MAIN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INWHILE_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INWHILE_FOR ::= exit do_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INWHILE_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // INWHILE_FOR ::= SENTENCIA_WHILE INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INWHILE_FOR ::= DECLARACION findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INWHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // INWHILE_FOR ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INWHILE_FOR ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // WHILE_FOR ::= do_ until CONDICION findelinea INWHILE_FOR loop findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE_FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ELSE_IF_FOR2 ::= else_ if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ELSE_IF_FOR2 ::= else_ if_ CONDICION then findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR2",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ELSE_IF_FOR ::= else_ if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ELSE_IF_FOR ::= else_ if_ CONDICION then findelinea INIF_FOR else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR ELSE_IF_FOR findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR else_ findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // IF_FOR ::= if_ CONDICION then findelinea INIF_FOR end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INIF_FOR ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INIF_FOR ::= LLAMAR_FUNCION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INIF_FOR ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INIF_FOR ::= SENTENCIA_FOR INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INIF_FOR ::= DECLARACION findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INIF_FOR ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INIF_FOR ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INIF_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF_FOR",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA_FOR ::= WHILE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_FOR ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA_FOR ::= IF_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INFOR_MAIN ::= exit for_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INFOR_MAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INFOR_MAIN ::= SENTENCIA_FOR INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // INFOR_MAIN ::= DECLARACION findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INFOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // INFOR_MAIN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INFOR_MAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // INFOR_MAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFOR_MAIN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FOR_MAIN ::= for_ identificador igual numero to numero step_ numero findelinea INFOR_MAIN next identificador findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_MAIN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERADORRELACIONAL ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERADORRELACIONAL ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERADORRELACIONAL ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERADORRELACIONAL ::= menor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERADORRELACIONAL ::= mayor igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICION ::= LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= numero OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= identificador OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICION ::= numero OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDICION ::= numero OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDICION ::= numero OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDICION ::= numero OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICION ::= BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONDICION ::= BOOLEAN OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONDICION ::= BOOLEAN OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONDICION ::= BOOLEAN OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICION ::= OPERACION_ARITMETICA OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICION ::= identificador OPERADORRELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICION ::= identificador OPERADORRELACIONAL BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICION ::= identificador OPERADORRELACIONAL numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICION ::= identificador OPERADORRELACIONAL identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELSE_IF_MAIN2 ::= else_ if_ CONDICION then findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELSE_IF_MAIN2 ::= else_ if_ CONDICION then findelinea INIF ELSE_IF_MAIN2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN2",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELSE_IF_MAIN ::= else_ if_ CONDICION then findelinea INIF else_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELSE_IF_MAIN ::= else_ if_ CONDICION then findelinea INIF ELSE_IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INIF ::= LLAMAR_FUNCION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INIF ::= SENTENCIA_MAIN findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INIF ::= DECLARACION findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INIF ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INIF ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INIF ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INIF ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIF",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN2 end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF_MAIN ::= if_ CONDICION then findelinea INIF ELSE_IF_MAIN findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF_MAIN ::= if_ CONDICION then findelinea INIF else_ findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF_MAIN ::= if_ CONDICION then findelinea INIF end_ if_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_MAIN ::= WHILE_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_MAIN ::= FOR_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_MAIN ::= IF_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MAIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BOOLEAN ::= false_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BOOLEAN ::= true_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TYPEDECLARE ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TYPEDECLARE ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TYPEDECLARE ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPEDECLARE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPE_ ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPE_ ::= int_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPE_ ::= integer_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPE_ ::= boolean_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TYPE_ ::= string_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= dim identificador as TYPE_ igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= dim identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= identificador punto identificador igual texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= identificador punto identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= identificador punto identificador igual numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= identificador punto identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= identificador punto identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= identificador punto identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= identificador igual texto_ findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= identificador igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= identificador igual numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= identificador igual identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= dim identificador igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= dim identificador as TYPE_ igual OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= dim identificador as TYPE_ igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= dim identificador igual LLAMAR_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= dim identificador igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= dim identificador as TYPE_ igual TYPEDECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= dim identificador as TYPE_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION_PARENTESIS ::= espacio OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION_PARENTESIS ::= parentesisA OPERACION_ARITMETICA parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PARENTESIS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_POTENCIA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION_POTENCIA ::= potencia numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_POTENCIA ::= potencia numero OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_POTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_MULT_DIV ::= OPERACION_POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_MULT_DIV ::= div numero OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_MULT_DIV ::= mult numero OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_MULT_DIV ::= div numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_MULT_DIV ::= mult numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULT_DIV",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_MOD ::= OPERACION_MULT_DIV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_MOD ::= mod numero OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_MOD ::= mod numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_ARITMETICA_MAS_MENOS ::= OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_ARITMETICA_MAS_MENOS ::= resta numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_ARITMETICA_MAS_MENOS ::= suma numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_ARITMETICA_MAS_MENOS ::= resta numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_ARITMETICA_MAS_MENOS ::= suma numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA_MAS_MENOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_ARITMETICA ::= OPERACION_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_ARITMETICA ::= numero OPERACION_ARITMETICA_MAS_MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INPARENTESIS ::= identificador punto identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INPARENTESIS ::= identificador continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INPARENTESIS ::= BOOLEAN continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INPARENTESIS ::= OPERACION_ARITMETICA continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INPARENTESIS ::= numero continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INPARENTESIS ::= texto_ continuaciondelinea INPARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INPARENTESIS ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INPARENTESIS ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INPARENTESIS ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INPARENTESIS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INPARENTESIS ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INPARENTESIS ::= texto_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPARENTESIS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INMAIN ::= LLAMAR_FUNCION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INMAIN ::= SENTENCIA_MAIN INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INMAIN ::= DECLARACION findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea INMAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INMAIN ::= LLAMAR_FUNCION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INMAIN ::= SENTENCIA_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INMAIN ::= DECLARACION findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INMAIN ::= console_ punto writeline parentesisA INPARENTESIS parentesisC findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INMAIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MAIN ::= Public_ sub main_ parentesisA parentesisC findelinea INMAIN end_ sub findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NEXT_MODULE ::= FUNCION_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEXT_MODULE ::= STRUCT_ findelinea NEXT_MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NEXT_MODULE ::= FUNCION_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NEXT_MODULE ::= STRUCT_ MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NEXT_MODULE ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXT_MODULE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODULE ::= Public_ Module identificador findelinea NEXT_MODULE end_ Module findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODULE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENTIFICADOR_IMPORT ::= System_ punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_IMPORT ::= System_ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDENTIFICADOR_IMPORT ::= identificador punto IDENTIFICADOR_IMPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDENTIFICADOR_IMPORT ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTS ::= imports IDENTIFICADOR_IMPORT findelinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // UC ::= IMPORTS MODULE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UC",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= UC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

