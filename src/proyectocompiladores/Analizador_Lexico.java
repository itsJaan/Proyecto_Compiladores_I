/* The following code was generated by JFlex 1.4.3 on 14/3/21 02:03 */

package proyectocompiladores;
import static proyectocompiladores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/3/21 02:03 from the specification file
 * <tt>C:/Users/willi/OneDrive/Documents/NetBeansProjects/Proyecto_Compiladores_I-master/src/proyectocompiladores/Analizador_Lexico.flex</tt>
 */
public class Analizador_Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\14\2\0\1\17\22\0\1\12\1\0\1\13\3\0"+
    "\1\20\1\15\2\16\2\11\1\16\1\1\1\16\1\11\12\2\2\0"+
    "\3\4\2\0\1\36\1\27\1\31\1\10\1\32\1\33\1\35\1\41"+
    "\1\21\1\3\1\44\1\30\1\6\1\34\1\7\1\22\1\3\1\23"+
    "\1\25\1\24\1\26\1\43\1\40\1\42\1\37\1\3\3\0\1\11"+
    "\1\3\1\0\1\36\1\27\1\31\1\10\1\32\1\33\1\35\1\41"+
    "\1\21\1\3\1\44\1\30\1\6\1\34\1\7\1\22\1\3\1\23"+
    "\1\25\1\24\1\26\1\43\1\40\1\42\1\37\1\3\1\16\1\5"+
    "\1\16\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\4\3\1\5\1\6"+
    "\1\7\1\10\2\7\1\6\1\11\16\3\1\12\1\3"+
    "\1\12\1\3\1\12\1\3\1\12\13\3\1\12\1\3"+
    "\1\0\1\13\1\12\5\3\1\12\22\3\1\12\3\3"+
    "\1\12\1\3\1\12\2\3\2\12\2\3\1\12\4\3"+
    "\1\12\1\3\1\12\5\3\1\12\4\3\1\12\5\3"+
    "\1\12\1\14\2\12\4\3\1\12\3\3\2\12\3\3"+
    "\1\12\2\3\1\12\2\3\1\12\1\3\1\12\1\3"+
    "\1\12\1\3\2\12\6\3\1\12\4\3\2\12\2\3"+
    "\4\12\1\3\1\12\2\3\1\12\2\3\1\12\3\3"+
    "\1\12\4\3\1\12\2\3\2\12\1\3\2\12\2\3"+
    "\1\12\4\3\1\12\3\3\2\12\1\3\1\12\1\3"+
    "\2\12\1\3\1\12\1\3\2\12\1\3\2\12\1\3"+
    "\1\12\1\3\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\112\0\157\0\45\0\224\0\271"+
    "\0\336\0\u0103\0\45\0\u0128\0\u014d\0\u0172\0\u0197\0\45"+
    "\0\u01bc\0\45\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a"+
    "\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2"+
    "\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\157\0\u04c5"+
    "\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed"+
    "\0\u0612\0\u0637\0\u065c\0\u065c\0\u0681\0\u0197\0\u06a6\0\u06cb"+
    "\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3"+
    "\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b"+
    "\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0940"+
    "\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46"+
    "\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e"+
    "\0\u0c93\0\u0cb8\0\u0cdd\0\u0bda\0\u0d02\0\u0d27\0\u0d4c\0\u0b6b"+
    "\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74"+
    "\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0681\0\u0f52\0\u0f77"+
    "\0\u0f9c\0\u0fc1\0\u0bff\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a"+
    "\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2"+
    "\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca"+
    "\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd"+
    "\0\u1280\0\u13f2\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab"+
    "\0\u1314\0\u14ab\0\u1339\0\u14d0\0\u1417\0\u13cd\0\u14f5\0\u0f08"+
    "\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae\0\u15d3\0\u15f8\0\u161d"+
    "\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u168c\0\u1720"+
    "\0\u1745\0\u176a\0\u178f\0\u178f\0\u17b4\0\u17d9\0\u17d9\0\u17fe"+
    "\0\u1823\0\u1848\0\u186d\0\u17b4\0\u1892\0\u16b1\0\u18b7\0\u18dc"+
    "\0\u1901\0\u1642\0\u1926\0\u194b\0\u1970\0\u1995\0\336\0\u19ba"+
    "\0\u19ba\0\u19df\0\u1a04\0\u1a04\0\u0e99\0\u1a29\0\u0fe6\0\u194b"+
    "\0\u1a4e\0\u1a73\0\u1a98\0\u1a98";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\5\1\37\1\5"+
    "\1\40\4\5\47\0\1\4\44\0\2\5\1\0\4\5"+
    "\10\0\24\5\2\0\2\5\1\0\1\41\1\42\1\43"+
    "\1\5\10\0\1\44\1\5\1\45\1\46\1\47\1\50"+
    "\1\5\1\51\1\5\1\52\1\47\1\53\1\5\1\54"+
    "\1\55\1\5\1\56\1\57\2\5\2\0\2\5\1\0"+
    "\1\60\1\5\1\61\1\5\10\0\15\5\1\62\6\5"+
    "\2\0\2\5\1\0\1\47\3\5\10\0\2\5\1\47"+
    "\21\5\2\0\2\5\1\0\1\63\1\5\1\47\1\5"+
    "\10\0\1\64\23\5\12\0\1\14\4\0\1\14\25\0"+
    "\14\65\1\0\30\65\14\0\1\16\2\0\1\16\25\0"+
    "\14\66\1\0\30\66\12\0\1\14\1\0\1\16\2\0"+
    "\1\21\27\0\2\5\1\0\1\67\1\42\2\5\10\0"+
    "\12\5\1\47\1\70\10\5\2\0\2\5\1\0\1\71"+
    "\3\5\10\0\2\5\1\72\2\5\1\73\16\5\2\0"+
    "\2\5\1\0\1\74\3\5\10\0\11\5\1\74\12\5"+
    "\2\0\2\5\1\0\1\75\1\5\1\47\1\5\10\0"+
    "\2\5\1\76\15\5\1\77\3\5\2\0\2\5\1\0"+
    "\1\100\3\5\10\0\3\5\1\46\1\5\1\101\10\5"+
    "\1\55\5\5\2\0\2\5\1\0\1\102\3\5\10\0"+
    "\13\5\1\102\10\5\2\0\2\5\1\0\1\103\1\5"+
    "\1\103\1\5\10\0\24\5\2\0\2\5\1\0\1\104"+
    "\1\5\1\105\1\5\10\0\1\106\23\5\2\0\2\5"+
    "\1\0\1\107\1\5\1\107\1\5\10\0\24\5\2\0"+
    "\2\5\1\0\1\110\3\5\10\0\7\5\1\51\3\5"+
    "\1\111\5\5\1\57\2\5\2\0\2\5\1\0\1\112"+
    "\1\5\1\11\1\5\10\0\5\5\1\113\7\5\1\114"+
    "\6\5\2\0\2\5\1\0\1\115\3\5\10\0\5\5"+
    "\1\116\3\5\1\117\12\5\2\0\2\5\1\0\1\120"+
    "\3\5\10\0\4\5\1\47\6\5\1\111\10\5\2\0"+
    "\2\5\1\0\1\121\3\5\10\0\2\5\1\122\15\5"+
    "\1\123\3\5\2\0\2\5\1\0\1\124\1\47\1\125"+
    "\1\126\10\0\1\127\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\136\1\5\1\137\1\5\1\140\5\5\1\141"+
    "\1\5\1\134\2\0\2\5\1\0\1\130\3\5\10\0"+
    "\1\5\1\130\22\5\2\0\2\5\1\0\1\142\1\5"+
    "\1\125\1\126\10\0\2\5\1\47\10\5\1\143\10\5"+
    "\2\0\2\5\1\0\1\144\1\47\2\5\10\0\23\5"+
    "\1\134\2\0\2\5\1\0\1\145\3\5\10\0\1\146"+
    "\4\5\1\134\16\5\2\0\2\5\1\0\1\147\3\5"+
    "\10\0\2\5\1\150\6\5\1\151\12\5\2\0\2\5"+
    "\1\0\1\152\3\5\10\0\6\5\1\135\1\153\3\5"+
    "\1\154\10\5\2\0\2\5\1\0\1\134\3\5\10\0"+
    "\4\5\1\134\17\5\2\0\2\5\1\0\1\155\3\5"+
    "\10\0\3\5\1\156\15\5\1\141\2\5\2\0\2\5"+
    "\1\0\1\157\2\5\1\47\10\0\3\5\1\157\20\5"+
    "\2\0\2\5\1\0\1\160\3\5\10\0\1\161\6\5"+
    "\1\51\14\5\2\0\2\5\1\0\1\162\3\5\10\0"+
    "\4\5\1\162\17\5\2\0\2\5\1\0\1\163\3\5"+
    "\10\0\1\164\10\5\1\161\12\5\2\0\2\5\1\0"+
    "\1\141\3\5\10\0\1\141\23\5\2\0\2\5\1\0"+
    "\1\165\2\5\1\126\10\0\1\161\23\5\2\0\2\5"+
    "\1\0\1\126\2\5\1\126\10\0\24\5\2\0\2\5"+
    "\1\0\1\161\3\5\10\0\1\161\23\5\2\0\2\5"+
    "\1\0\2\47\2\5\10\0\24\5\13\65\1\166\1\0"+
    "\30\65\2\0\2\5\1\0\1\167\3\5\10\0\1\5"+
    "\1\130\1\5\1\170\20\5\2\0\2\5\1\0\1\170"+
    "\3\5\10\0\3\5\1\170\20\5\2\0\2\5\1\0"+
    "\1\171\3\5\10\0\1\172\5\5\1\173\15\5\2\0"+
    "\2\5\1\0\1\172\3\5\10\0\1\172\23\5\2\0"+
    "\2\5\1\0\1\173\3\5\10\0\6\5\1\173\15\5"+
    "\2\0\2\5\1\0\1\156\3\5\10\0\3\5\1\156"+
    "\20\5\2\0\2\5\1\0\1\174\3\5\10\0\5\5"+
    "\1\134\3\5\1\161\12\5\2\0\2\5\1\0\1\134"+
    "\3\5\10\0\5\5\1\134\16\5\2\0\2\5\1\0"+
    "\1\161\3\5\10\0\11\5\1\161\12\5\2\0\2\5"+
    "\1\0\1\175\3\5\10\0\2\5\1\150\1\5\1\162"+
    "\1\5\1\47\2\5\1\151\12\5\2\0\2\5\1\0"+
    "\1\47\3\5\10\0\6\5\1\47\15\5\2\0\2\5"+
    "\1\0\1\176\3\5\10\0\3\5\1\176\20\5\2\0"+
    "\2\5\1\0\1\177\1\5\1\177\1\5\10\0\24\5"+
    "\2\0\2\5\1\0\1\200\1\5\1\151\1\5\10\0"+
    "\23\5\1\134\2\0\2\5\1\0\1\151\1\5\1\151"+
    "\1\5\10\0\24\5\2\0\2\5\1\0\1\134\3\5"+
    "\10\0\23\5\1\134\2\0\2\5\1\0\1\143\3\5"+
    "\10\0\13\5\1\143\10\5\2\0\2\5\1\0\1\201"+
    "\2\5\1\47\10\0\1\141\3\5\1\134\17\5\2\0"+
    "\2\5\1\0\1\47\2\5\1\47\10\0\24\5\2\0"+
    "\2\5\1\0\1\202\3\5\10\0\2\5\1\47\4\5"+
    "\1\51\3\5\1\154\10\5\2\0\2\5\1\0\1\154"+
    "\3\5\10\0\13\5\1\154\10\5\2\0\2\5\1\0"+
    "\1\51\3\5\10\0\7\5\1\51\14\5\2\0\2\5"+
    "\1\0\1\203\3\5\10\0\7\5\1\153\11\5\1\141"+
    "\2\5\2\0\2\5\1\0\1\153\3\5\10\0\7\5"+
    "\1\153\14\5\2\0\2\5\1\0\1\141\3\5\10\0"+
    "\21\5\1\141\2\5\2\0\2\5\1\0\1\204\3\5"+
    "\10\0\1\204\23\5\2\0\2\5\1\0\1\205\3\5"+
    "\10\0\1\205\23\5\2\0\2\5\1\0\1\164\3\5"+
    "\10\0\1\164\23\5\2\0\2\5\1\0\1\206\1\5"+
    "\1\207\1\5\10\0\1\210\1\47\1\5\1\211\1\212"+
    "\1\213\1\5\1\214\1\215\1\216\1\5\1\47\6\5"+
    "\1\217\1\5\2\0\2\5\1\0\1\220\3\5\10\0"+
    "\1\5\1\47\5\5\1\221\14\5\2\0\2\5\1\0"+
    "\1\164\3\5\10\0\5\5\1\164\16\5\2\0\2\5"+
    "\1\0\1\222\3\5\10\0\3\5\1\223\3\5\1\134"+
    "\3\5\1\47\6\5\1\217\1\5\2\0\2\5\1\0"+
    "\1\207\1\5\1\207\1\5\10\0\24\5\2\0\2\5"+
    "\1\0\1\224\3\5\10\0\1\225\4\5\1\226\16\5"+
    "\2\0\2\5\1\0\1\227\3\5\10\0\1\153\4\5"+
    "\1\230\3\5\1\231\12\5\2\0\2\5\1\0\1\232"+
    "\3\5\10\0\3\5\1\233\5\5\1\47\12\5\2\0"+
    "\2\5\1\0\1\47\3\5\10\0\11\5\1\47\12\5"+
    "\2\0\2\5\1\0\1\234\3\5\10\0\7\5\1\234"+
    "\14\5\2\0\2\5\1\0\1\144\3\5\10\0\4\5"+
    "\1\134\2\5\1\47\14\5\2\0\2\5\1\0\1\47"+
    "\3\5\10\0\1\5\1\47\11\5\1\47\10\5\2\0"+
    "\2\5\1\0\1\235\3\5\10\0\4\5\1\236\3\5"+
    "\1\215\13\5\2\0\2\5\1\0\1\47\3\5\10\0"+
    "\3\5\1\47\20\5\2\0\2\5\1\0\1\237\3\5"+
    "\10\0\1\5\1\47\2\5\1\236\1\164\1\5\1\221"+
    "\14\5\2\0\2\5\1\0\1\236\3\5\10\0\4\5"+
    "\1\236\17\5\2\0\2\5\1\0\1\240\3\5\10\0"+
    "\3\5\1\241\5\5\1\47\10\5\1\217\1\5\2\0"+
    "\2\5\1\0\1\242\3\5\10\0\3\5\1\241\16\5"+
    "\1\217\1\5\2\0\2\5\1\0\1\243\3\5\10\0"+
    "\1\225\1\47\3\5\1\226\16\5\2\0\2\5\1\0"+
    "\1\47\3\5\10\0\1\5\1\47\22\5\2\0\2\5"+
    "\1\0\1\244\3\5\10\0\7\5\1\245\1\215\13\5"+
    "\2\0\2\5\1\0\1\47\3\5\10\0\7\5\1\47"+
    "\14\5\2\0\2\5\1\0\1\215\3\5\10\0\10\5"+
    "\1\215\13\5\2\0\2\5\1\0\1\246\3\5\10\0"+
    "\3\5\1\47\1\5\1\230\16\5\2\0\2\5\1\0"+
    "\1\230\3\5\10\0\5\5\1\230\16\5\2\0\2\5"+
    "\1\0\1\247\3\5\10\0\1\153\10\5\1\231\12\5"+
    "\2\0\2\5\1\0\1\144\3\5\10\0\4\5\1\134"+
    "\6\5\1\47\10\5\2\0\2\5\1\0\1\47\3\5"+
    "\10\0\13\5\1\47\10\5\2\0\2\5\1\0\1\233"+
    "\3\5\10\0\3\5\1\233\20\5\2\0\2\5\1\0"+
    "\1\144\3\5\10\0\7\5\1\134\3\5\1\47\10\5"+
    "\2\0\2\5\1\0\1\134\3\5\10\0\7\5\1\134"+
    "\14\5\2\0\2\5\1\0\1\250\3\5\10\0\5\5"+
    "\1\164\5\5\1\47\10\5\2\0\2\5\1\0\1\251"+
    "\1\5\1\207\1\5\10\0\11\5\1\231\12\5\2\0"+
    "\2\5\1\0\1\231\3\5\10\0\11\5\1\231\12\5"+
    "\2\0\2\5\1\0\1\252\3\5\10\0\7\5\1\234"+
    "\12\5\1\217\1\5\2\0\2\5\1\0\1\217\3\5"+
    "\10\0\22\5\1\217\1\5\2\0\2\5\1\0\1\47"+
    "\3\5\10\0\11\5\1\47\1\5\1\47\10\5\2\0"+
    "\2\5\1\0\1\253\3\5\10\0\1\225\1\47\1\5"+
    "\1\233\1\5\1\226\16\5\2\0\2\5\1\0\1\153"+
    "\3\5\10\0\1\153\23\5\2\0\2\5\1\0\1\221"+
    "\3\5\10\0\7\5\1\221\14\5\2\0\2\5\1\0"+
    "\1\47\3\5\10\0\1\5\1\47\7\5\1\47\12\5"+
    "\2\0\2\5\1\0\1\47\3\5\10\0\3\5\1\47"+
    "\5\5\1\47\12\5\2\0\2\5\1\0\1\254\3\5"+
    "\10\0\4\5\1\134\3\5\1\215\13\5\2\0\2\5"+
    "\1\0\1\47\3\5\10\0\3\5\1\47\3\5\1\47"+
    "\14\5\2\0\2\5\1\0\1\255\3\5\10\0\3\5"+
    "\1\241\3\5\1\134\14\5\2\0\2\5\1\0\1\241"+
    "\3\5\10\0\3\5\1\241\20\5\2\0\2\5\1\0"+
    "\1\256\1\5\1\164\1\5\10\0\1\257\1\5\1\260"+
    "\1\261\3\5\1\144\1\141\1\262\1\5\1\263\1\264"+
    "\1\265\6\5\2\0\2\5\1\0\1\266\3\5\10\0"+
    "\2\5\1\266\21\5\2\0\2\5\1\0\1\267\3\5"+
    "\10\0\7\5\1\47\3\5\1\263\10\5\2\0\2\5"+
    "\1\0\1\270\3\5\10\0\11\5\1\270\12\5\2\0"+
    "\2\5\1\0\1\250\1\5\1\164\1\5\10\0\11\5"+
    "\1\47\12\5\2\0\2\5\1\0\1\271\3\5\10\0"+
    "\2\5\1\161\4\5\1\134\1\141\13\5\2\0\2\5"+
    "\1\0\1\272\3\5\10\0\1\257\10\5\1\273\12\5"+
    "\2\0\2\5\1\0\1\261\3\5\10\0\3\5\1\261"+
    "\20\5\2\0\2\5\1\0\1\264\3\5\10\0\14\5"+
    "\1\264\7\5\2\0\2\5\1\0\1\265\3\5\10\0"+
    "\15\5\1\265\6\5\2\0\2\5\1\0\1\274\3\5"+
    "\10\0\11\5\1\274\12\5\2\0\2\5\1\0\1\275"+
    "\3\5\10\0\11\5\1\276\3\5\1\265\6\5\2\0"+
    "\2\5\1\0\1\277\3\5\10\0\11\5\1\277\12\5"+
    "\2\0\2\5\1\0\1\300\3\5\10\0\10\5\1\141"+
    "\2\5\1\263\10\5\2\0\2\5\1\0\1\263\3\5"+
    "\10\0\13\5\1\263\10\5\2\0\2\5\1\0\1\141"+
    "\3\5\10\0\10\5\1\141\13\5\2\0\2\5\1\0"+
    "\1\301\3\5\10\0\2\5\1\161\4\5\1\47\4\5"+
    "\1\264\7\5\2\0\2\5\1\0\1\161\3\5\10\0"+
    "\2\5\1\161\21\5\2\0\2\5\1\0\1\64\3\5"+
    "\10\0\11\5\1\64\12\5\2\0\2\5\1\0\1\257"+
    "\3\5\10\0\1\257\23\5\2\0\2\5\1\0\1\302"+
    "\1\5\1\164\1\5\10\0\3\5\1\261\20\5\2\0"+
    "\2\5\1\0\1\164\1\5\1\164\1\5\10\0\24\5"+
    "\2\0\2\5\1\0\1\303\1\5\1\164\1\5\10\0"+
    "\7\5\1\134\1\5\1\274\12\5\2\0\2\5\1\0"+
    "\1\304\3\5\10\0\11\5\1\277\3\5\1\265\6\5"+
    "\2\0\2\5\1\0\1\305\3\5\10\0\1\257\2\5"+
    "\1\261\20\5\2\0\2\5\1\0\1\306\3\5\10\0"+
    "\7\5\1\47\4\5\1\264\7\5\2\0\2\5\1\0"+
    "\1\307\3\5\10\0\2\5\1\266\11\5\1\264\7\5"+
    "\2\0\2\5\1\0\1\310\3\5\10\0\1\257\14\5"+
    "\1\265\6\5\2\0\2\5\1\0\1\311\3\5\10\0"+
    "\10\5\1\141\1\64\1\5\1\263\10\5\2\0\2\5"+
    "\1\0\1\312\3\5\10\0\3\5\1\261\5\5\1\47"+
    "\12\5\2\0\2\5\1\0\1\276\3\5\10\0\11\5"+
    "\1\276\12\5\2\0\2\5\1\0\1\313\1\47\2\5"+
    "\10\0\1\314\2\5\1\315\3\5\1\316\1\47\1\317"+
    "\1\5\2\47\1\161\6\5\2\0\2\5\1\0\1\47"+
    "\3\5\10\0\10\5\1\47\13\5\2\0\2\5\1\0"+
    "\1\320\3\5\10\0\3\5\1\321\7\5\1\47\10\5"+
    "\2\0\2\5\1\0\1\314\3\5\10\0\1\314\23\5"+
    "\2\0\2\5\1\0\1\322\1\47\2\5\10\0\7\5"+
    "\1\323\5\5\1\161\6\5\2\0\2\5\1\0\1\47"+
    "\3\5\10\0\14\5\1\47\7\5\2\0\2\5\1\0"+
    "\1\11\3\5\10\0\11\5\1\11\12\5\2\0\2\5"+
    "\1\0\1\134\3\5\10\0\3\5\1\134\20\5\2\0"+
    "\2\5\1\0\1\321\3\5\10\0\3\5\1\321\20\5"+
    "\2\0\2\5\1\0\1\324\1\47\2\5\10\0\7\5"+
    "\1\323\14\5\2\0\2\5\1\0\1\47\3\5\10\0"+
    "\3\5\1\47\5\5\1\47\1\5\1\47\10\5\2\0"+
    "\2\5\1\0\1\325\3\5\10\0\10\5\1\47\4\5"+
    "\1\161\6\5\2\0\2\5\1\0\1\161\3\5\10\0"+
    "\15\5\1\161\6\5\2\0\2\5\1\0\1\316\3\5"+
    "\10\0\3\5\1\134\3\5\1\323\14\5\2\0\2\5"+
    "\1\0\1\323\3\5\10\0\7\5\1\323\14\5\2\0"+
    "\2\5\1\0\1\47\3\5\10\0\3\5\1\47\10\5"+
    "\1\47\7\5\2\0\2\5\1\0\1\317\3\5\10\0"+
    "\11\5\1\11\1\5\1\47\10\5\2\0\2\5\1\0"+
    "\1\326\3\5\10\0\1\314\6\5\1\134\14\5\2\0"+
    "\2\5\1\0\1\327\3\5\10\0\7\5\1\134\1\5"+
    "\1\47\3\5\1\161\6\5\2\0\2\5\1\0\1\330"+
    "\3\5\10\0\1\314\7\5\1\47\13\5\2\0\2\5"+
    "\1\0\1\331\3\5\10\0\3\5\1\321\5\5\1\11"+
    "\12\5\2\0\2\5\1\0\1\144\3\5\10\0\3\5"+
    "\1\134\4\5\1\47\13\5\2\0\2\5\1\0\2\47"+
    "\2\5\10\0\3\5\1\47\10\5\1\47\7\5\2\0"+
    "\2\5\1\0\1\332\1\5\1\161\1\5\10\0\1\333"+
    "\1\5\1\47\1\5\1\47\4\5\1\47\1\5\1\47"+
    "\10\5\2\0\2\5\1\0\1\161\1\5\1\161\1\5"+
    "\10\0\24\5\2\0\2\5\1\0\1\47\3\5\10\0"+
    "\4\5\1\47\4\5\1\47\12\5\2\0\2\5\1\0"+
    "\1\334\3\5\10\0\1\333\10\5\1\47\12\5\2\0"+
    "\2\5\1\0\1\47\3\5\10\0\4\5\1\47\17\5"+
    "\2\0\2\5\1\0\1\334\3\5\10\0\1\333\12\5"+
    "\1\47\10\5\2\0\2\5\1\0\1\333\3\5\10\0"+
    "\1\333\23\5\2\0\2\5\1\0\1\325\1\5\1\161"+
    "\1\5\10\0\11\5\1\47\12\5\2\0\2\5\1\0"+
    "\1\47\3\5\10\0\2\5\1\47\1\5\1\47\17\5"+
    "\2\0\2\5\1\0\1\144\3\5\10\0\13\5\1\144"+
    "\10\5\2\0\2\5\1\0\1\134\3\5\10\0\13\5"+
    "\1\134\10\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6845];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\1\11\4\1\1\11"+
    "\1\1\1\11\42\1\1\0\247\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    int esEnter = 0;
    public int getLine(){return (yyline + 1);}
    public int getColumn(){return (yycolumn +1);}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analizador_Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { esEnter =0;
                                        if(yytext().equals("+")){return suma;}
                                        if(yytext().equals("-")){return resta;}
                                        if(yytext().equals("*")){return mult;}
                                        if(yytext().equals("/")){return div;}
                                        if(yytext().equals("^")){return potencia;}
          }
        case 13: break;
        case 2: 
          { esEnter =0;return numero;
          }
        case 14: break;
        case 1: 
          { esEnter =0;
                                        return error_;
          }
        case 15: break;
        case 4: 
          { esEnter =0;
                                        if(yytext().equals(">=")){return mayorigual;}
                                        if(yytext().equals("<=")){return menorigual;}
                                        if(yytext().equals("=")){return igual;}
                                        if(yytext().equals(">")){return mayor;}
                                        if(yytext().equals("<")){return menor;}
          }
        case 16: break;
        case 11: 
          { esEnter =0;return comentario;
          }
        case 17: break;
        case 10: 
          { esEnter =0;
                                        if(yytext().equalsIgnoreCase("if")){return if_;}
                                        if(yytext().equalsIgnoreCase("imports")){return imports;}
                                        if(yytext().equalsIgnoreCase("public")){return public_;}
                                        if(yytext().equalsIgnoreCase("module")){return module;}
                                        if(yytext().equalsIgnoreCase("sub")){return sub;}
                                        if(yytext().equalsIgnoreCase("for")){return for_;}
                                        if(yytext().equalsIgnoreCase("dim")){return dim;}
                                        if(yytext().equalsIgnoreCase("end")){return end_;}
                                        if(yytext().equalsIgnoreCase("integer")){return integer_;}
                                        if(yytext().equalsIgnoreCase("boolean")){return boolean_;}
                                        if(yytext().equalsIgnoreCase("string")){return string_;}
                                        if(yytext().equalsIgnoreCase("system")){return system_;}
                                        if(yytext().equalsIgnoreCase("console")){return console_;}
                                        if(yytext().equalsIgnoreCase("writeline")){return writeline;}
                                        if(yytext().equalsIgnoreCase("as")){return as;}
                                        if(yytext().equalsIgnoreCase("do")){return do_;}
                                        if(yytext().equalsIgnoreCase("while")){return while_;}
                                        if(yytext().equalsIgnoreCase("struct")){return struct;}
                                        if(yytext().equalsIgnoreCase("then")){return then;}
                                        if(yytext().equalsIgnoreCase("else")){return else_;}
                                        if(yytext().equalsIgnoreCase("function")){return function_;}
                                        if(yytext().equalsIgnoreCase("return")){return return_;}
                                        if(yytext().equalsIgnoreCase("next")){return next;}
                                        if(yytext().equalsIgnoreCase("private")){return private_;}
                                        if(yytext().equalsIgnoreCase("loop")){return loop;}
                                        if(yytext().equalsIgnoreCase("exit")){return exit;}
                                        if(yytext().equalsIgnoreCase("until")){return until;}
                                        if(yytext().equalsIgnoreCase("to")){return to;}
                                        if(yytext().equalsIgnoreCase("and")){return and;}
                                        if(yytext().equalsIgnoreCase("or")){return or;}
                                        if(yytext().equalsIgnoreCase("true")){return true_;}
                                        if(yytext().equalsIgnoreCase("false")){return false_;}
                                        if(yytext().equalsIgnoreCase("like")){return like;}
                                        if(yytext().equalsIgnoreCase("mod")){return mod;}
                                        if(yytext().equalsIgnoreCase("int")){return  int_;}
                                        if(yytext().equalsIgnoreCase("null")){return null_;}
                                        if(yytext().equalsIgnoreCase("main")){return main_;}
                                        if(yytext().equalsIgnoreCase("step")){return step_;}
          }
        case 18: break;
        case 12: 
          { esEnter =0;return texto_;
          }
        case 19: break;
        case 6: 
          { esEnter =0;return espacio;
          }
        case 20: break;
        case 3: 
          { esEnter =0;return identificador;
          }
        case 21: break;
        case 7: 
          { esEnter =0;
                                        if(yytext().equals(".")){return punto;}
                                        if(yytext().equals("\"")){return comillaD;}
                                        if(yytext().equals("\'")){return comillaS;}
                                        if(yytext().equals("(")){return parentesisA;}
                                        if(yytext().equals(")")){return parentesisC;}
                                        if(yytext().equals("{")){return llaveA;}
                                        if(yytext().equals("}")){return llaveC;}
                                        if(yytext().equals(",")){return coma;}
          }
        case 22: break;
        case 8: 
          { esEnter++; if(esEnter==1){return findelinea;}
          }
        case 23: break;
        case 9: 
          { esEnter =0;return continuaciondelinea;
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
