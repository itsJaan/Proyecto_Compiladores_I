package proyectocompiladores;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }
:};

terminal imports,if_,public_,module,sub,for_,dim,end_,integer_,boolean_,string_,
         system_,console_,writeline,as,do_,while_,struct_,then,else_,function_,
         return_,next,private_,loop,exit,until,to,and,or,true_,false_,like,
         mod,int_,step_,null_,identificador,mayorigual, menorigual, igual, mayor, menor,
         suma,resta,mult,div,potencia,texto_,numero,espacio,modulo,punto,comillaD,
         comillaS,parentesisA,parentesisC,llaveA,llaveC,guionB,findelinea,
         continuaciondelinea,comentario,main_,coma,error_;

non terminal UC, IMPORTS, MODULE, IDENTIFICADOR_IMPORT, FUNCTION_, STRUCT_, MAIN, PARAMETRO, TYPE_,
             INFUNCION,SENTENCIA, DECLARACION, TYPEDECLARE,OPERACION_ARITMETICA, NEXT_MODULE, INMAIN,
             INPARENTESIS, OPERACION_ARITMETICA_MAS_MENOS, OPERACION_MOD, OPERACION_MULT_DIV,
             OPERACION_POTENCIA, OPERACION_PARENTESIS, BOOLEAN, SENTENCIA_MAIN, IF_MAIN, ELSE_IF_MAIN,
             CONDICION, OPERADORRELACIONAL, FOR_MAIN, INFOR_MAIN, SENTENCIA_FOR, IF_FOR, ELSE_IF_FOR,
             WHILE_FOR, INWHILE_FOR, WHILE_MAIN, INWHILE_MAIN, SENTENCIA_WHILE, IF_WHILE, ELSE_IF_WHILE,
             FOR_WHILE, INFOR_WHILE, LLAMAR_FUNCION, PARAMETRO_SENCILLO, DECLARACIONSENCILLA, FUNCION_,
             SENTENCIA_FUNCION, IF_FUNCION, ELSE_IF_FUNCION, FOR_FUNCION, INFOR_FUNCION, SENTENCIA_FOR_FUNCION,
             IF_FOR_FUNCION, ELSE_IF_FOR_FUNCION, WHILE_FOR_FUNCION, INWHILE_FOR_FUNCION, WHILE_FUNCION,
             INWHILE_FUNCION, SENTENCIA_WHILE_FUNCION, IF_WHILE_FUNCION, ELSEIF_FUNCION, FOR_WHILE_FUNCION,
             INFOR_WHILE_FUNCION,ELSE_IF_WHILE_FUNCION,STRUCTMAIN,FUNCIONMAIN;

start with UC;

UC ::= IMPORTS MODULE ;

IMPORTS ::= imports IDENTIFICADOR_IMPORT|imports IDENTIFICADOR_IMPORT findelinea IMPORTS;

IDENTIFICADOR_IMPORT ::= identificador|identificador punto IDENTIFICADOR_IMPORT;

MODULE ::= public_ module identificador NEXT_MODULE end_ module;

NEXT_MODULE ::= MAIN|STRUCT_ espacio MAIN|FUNCION_ espacio MAIN|STRUCT_ findelinea NEXT_MODULE|FUNCION_ findelinea NEXT_MODULE;

MAIN ::= public_ sub main_ parentesisA parentesisC INMAIN  end_ sub;

INMAIN ::=  console_ punto writeline parentesisA  INPARENTESIS parentesisC|DECLARACION|SENTENCIA_MAIN|
           LLAMAR_FUNCION|console_ punto writeline parentesisA  INPARENTESIS parentesisC INMAIN|DECLARACION findelinea INMAIN|
           SENTENCIA_MAIN findelinea INMAIN|LLAMAR_FUNCION findelinea INMAIN;

INPARENTESIS::=  texto_|numero|BOOLEAN|identificador|OPERACION_ARITMETICA|texto_ continuaciondelinea INPARENTESIS|
                numero continuaciondelinea INPARENTESIS|OPERACION_ARITMETICA continuaciondelinea INPARENTESIS|
                BOOLEAN continuaciondelinea INPARENTESIS|identificador continuaciondelinea INPARENTESIS;

OPERACION_ARITMETICA ::= numero OPERACION_ARITMETICA_MAS_MENOS|OPERACION_PARENTESIS;

OPERACION_ARITMETICA_MAS_MENOS ::= suma numero|resta numero|suma numero OPERACION_ARITMETICA_MAS_MENOS|
                                   resta numero OPERACION_ARITMETICA_MAS_MENOS|OPERACION_MOD;

OPERACION_MOD ::= mod numero|mod numero OPERACION_MOD|OPERACION_MULT_DIV;

OPERACION_MULT_DIV::= mult numero|div numero|mult numero OPERACION_MULT_DIV|div numero OPERACION_MULT_DIV|OPERACION_POTENCIA;

OPERACION_POTENCIA ::= potencia numero OPERACION_POTENCIA|potencia numero|OPERACION_PARENTESIS;

OPERACION_PARENTESIS ::= parentesisA OPERACION_ARITMETICA parentesisC| espacio OPERACION_ARITMETICA_MAS_MENOS;

DECLARACION ::= dim identificador as TYPE_|dim identificador as TYPE_ igual TYPEDECLARE|
                dim identificador as TYPE_ espacio DECLARACION|dim identificador as TYPE_ igual TYPEDECLARE espacio DECLARACION|
                dim identificador igual LLAMAR_FUNCION|dim identificador as TYPE_ igual LLAMAR_FUNCION|dim identificador as TYPE_ igual OPERACION_ARITMETICA findelinea DECLARACION;

TYPE_ ::= string_|boolean_|integer_|int_; 

TYPEDECLARE ::= texto_|espacio numero|BOOLEAN;


BOOLEAN ::= true_|false_;

SENTENCIA_MAIN ::= IF_MAIN|FOR_MAIN|WHILE_MAIN;

IF_MAIN ::=  if_ CONDICION then INMAIN end_ if_|if_ CONDICION then INMAIN else_ INMAIN end_ if_|
            if_ CONDICION then INMAIN ELSE_IF_MAIN else_ espacio INMAIN end_ if_|if_ CONDICION then espacio INMAIN  ELSE_IF_MAIN;

ELSE_IF_MAIN ::= else_ if_ CONDICION then INMAIN end_ if_ espacio| else_ if_ CONDICION then INMAIN  ELSE_IF_MAIN end_ if_ espacio;

CONDICION ::= identificador OPERADORRELACIONAL identificador|identificador OPERADORRELACIONAL numero|
              identificador OPERADORRELACIONAL BOOLEAN|identificador OPERADORRELACIONAL OPERACION_ARITMETICA|
              OPERACION_ARITMETICA OPERADORRELACIONAL numero|OPERACION_ARITMETICA OPERADORRELACIONAL OPERACION_ARITMETICA|
              OPERACION_ARITMETICA OPERADORRELACIONAL identificador|OPERACION_ARITMETICA OPERADORRELACIONAL BOOLEAN|
              BOOLEAN OPERADORRELACIONAL BOOLEAN|BOOLEAN OPERADORRELACIONAL numero|BOOLEAN OPERADORRELACIONAL identificador|
              BOOLEAN OPERADORRELACIONAL OPERACION_ARITMETICA|numero OPERADORRELACIONAL numero|
              numero OPERADORRELACIONAL identificador|numero OPERADORRELACIONAL OPERACION_ARITMETICA|
              numero OPERADORRELACIONAL BOOLEAN|BOOLEAN OPERADORRELACIONAL LLAMAR_FUNCION|
              identificador OPERADORRELACIONAL LLAMAR_FUNCION|numero OPERADORRELACIONAL LLAMAR_FUNCION|
              OPERACION_ARITMETICA OPERADORRELACIONAL LLAMAR_FUNCION|LLAMAR_FUNCION OPERADORRELACIONAL BOOLEAN|
              LLAMAR_FUNCION OPERADORRELACIONAL identificador|LLAMAR_FUNCION OPERADORRELACIONAL numero|
              LLAMAR_FUNCION OPERADORRELACIONAL OPERACION_ARITMETICA;

OPERADORRELACIONAL ::= mayorigual|menorigual|igual|mayor|menor;

FOR_MAIN ::= for_ identificador igual numero to numero step_ numero INFOR_MAIN next identificador;

INFOR_MAIN::= console_ punto writeline parentesisA  INPARENTESIS parentesisC|DECLARACION|
             SENTENCIA_FOR|console_ punto writeline parentesisA  INPARENTESIS parentesisC INFOR_MAIN|DECLARACION findelinea INFOR_MAIN|
             SENTENCIA_MAIN INFOR_MAIN|LLAMAR_FUNCION|LLAMAR_FUNCION INFOR_MAIN |exit for_;

SENTENCIA_FOR::= IF_FOR |espacio FOR_MAIN|WHILE_FOR; 

IF_FOR ::= if_ CONDICION then espacio INFOR_MAIN  end_ if_|if_ CONDICION then findelinea INFOR_MAIN  else_  INFOR_MAIN  end_ if_|
           if_ CONDICION findelinea then INFOR_MAIN ELSE_IF_FOR else_ INFOR_MAIN end_ if_|if_ CONDICION findelinea then espacio INFOR_MAIN ELSE_IF_FOR;

ELSE_IF_FOR ::= else_ if_ CONDICION then INFOR_MAIN end_ if_|else_ if_ CONDICION then INFOR_MAIN ELSE_IF_FOR end_ if_;

WHILE_FOR::= do_ until CONDICION INWHILE_FOR loop;

INWHILE_FOR ::= console_ punto writeline parentesisA INPARENTESIS parentesisC|DECLARACION|findelinea SENTENCIA_FOR|
                console_ punto writeline parentesisA  INPARENTESIS parentesisC  INWHILE_FOR|DECLARACION findelinea INWHILE_FOR|
                findelinea SENTENCIA_FOR espacio INWHILE_FOR|LLAMAR_FUNCION|LLAMAR_FUNCION  INWHILE_FOR| exit do_ |exit for_;

WHILE_MAIN::= do_ until CONDICION INWHILE_MAIN loop;

INWHILE_MAIN ::= console_ punto writeline parentesisA  INPARENTESIS parentesisC findelinea|findelinea DECLARACION|SENTENCIA_WHILE|
                 console_ punto writeline parentesisA  INPARENTESIS parentesisC INWHILE_MAIN|DECLARACION findelinea INWHILE_MAIN|
                 SENTENCIA_WHILE INWHILE_MAIN|LLAMAR_FUNCION espacio|LLAMAR_FUNCION INWHILE_MAIN|exit do_ findelinea;

SENTENCIA_WHILE ::= IF_WHILE |FOR_WHILE|WHILE_MAIN;

IF_WHILE ::= if_ CONDICION then INWHILE_MAIN end_ if_|if_ CONDICION then INWHILE_MAIN else_ INWHILE_MAIN end_ if_|
             if_ CONDICION then INWHILE_MAIN ELSE_IF_WHILE else_ INWHILE_MAIN end_ if_|
             if_ CONDICION then INWHILE_MAIN ELSE_IF_WHILE findelinea;

ELSE_IF_WHILE ::= else_ if_ CONDICION then findelinea INWHILE_MAIN end_ if_|else_ if_ CONDICION then INWHILE_MAIN ELSE_IF_WHILE end_ if_;

FOR_WHILE ::= for_ identificador igual numero to numero step_ numero INFOR_WHILE next identificador;

INFOR_WHILE ::= console_ punto writeline parentesisA  INPARENTESIS parentesisC|DECLARACION|SENTENCIA_WHILE|
              console_ punto writeline parentesisA  INPARENTESIS parentesisC INFOR_WHILE|DECLARACION INFOR_WHILE|
              SENTENCIA_WHILE INFOR_WHILE |LLAMAR_FUNCION|LLAMAR_FUNCION INFOR_WHILE|exit for_ findelinea|exit do_ findelinea;

LLAMAR_FUNCION ::= identificador parentesisA parentesisC | identificador parentesisA PARAMETRO_SENCILLO parentesisC;

PARAMETRO_SENCILLO ::=  identificador|numero|BOOLEAN|identificador coma PARAMETRO_SENCILLO|numero coma PARAMETRO_SENCILLO|
                        BOOLEAN coma PARAMETRO_SENCILLO;

DECLARACIONSENCILLA ::= dim identificador as TYPE_|dim identificador as TYPE_ DECLARACIONSENCILLA;

STRUCT_ ::= public_ struct_ identificador DECLARACIONSENCILLA end_ struct_;

FUNCION_ ::= private_ function_ identificador parentesisA PARAMETRO parentesisC as TYPE_ INFUNCION end_ function_;

PARAMETRO ::= identificador as TYPE_|identificador as TYPE_ coma PARAMETRO;

INFUNCION ::= console_ punto writeline parentesisA  INPARENTESIS parentesisC|DECLARACION|SENTENCIA_FUNCION|
               LLAMAR_FUNCION|console_ punto writeline parentesisA  INPARENTESIS parentesisC INFUNCION|DECLARACION INFUNCION|
               SENTENCIA_FUNCION INFUNCION|LLAMAR_FUNCION INFUNCION|exit function_;


SENTENCIA_FUNCION ::= IF_FUNCION|FOR_FUNCION|WHILE_FUNCION;

IF_FUNCION ::=  if_ CONDICION then INFUNCION end_ if_|if_ CONDICION then INFUNCION else_ INFUNCION end_ if_|
              if_ CONDICION then INFUNCION ELSEIF_FUNCION else_ INFUNCION end_ if_|
              if_ CONDICION then INFUNCION ELSEIF_FUNCION findelinea;

ELSEIF_FUNCION ::= else_ if_ CONDICION then findelinea INFUNCION end_ if_|else_ if_ CONDICION then INFUNCION ELSEIF_FUNCION end_ if_;

FOR_FUNCION ::= for_ identificador igual numero to numero step_ numero INFOR_FUNCION next identificador;

INFOR_FUNCION ::= console_ punto writeline parentesisA  INPARENTESIS parentesisC|DECLARACION|SENTENCIA_FOR_FUNCION|
                console_ punto writeline parentesisA  INPARENTESIS parentesisC INFOR_FUNCION|DECLARACION INFOR_FUNCION|
                SENTENCIA_FOR_FUNCION INFOR_FUNCION|LLAMAR_FUNCION|LLAMAR_FUNCION INFOR_FUNCION|exit function_ |exit for_;

SENTENCIA_FOR_FUNCION ::= IF_FOR_FUNCION |FOR_FUNCION|WHILE_FOR_FUNCION;

IF_FOR_FUNCION ::= if_ CONDICION then INFOR_FUNCION end_ if_|if_ CONDICION then INFOR_FUNCION else_ INFOR_FUNCION end_ if_|
                 if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION else_ INFOR_FUNCION end_ if_|
                 if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION findelinea;

ELSE_IF_FOR_FUNCION ::= else_ if_ CONDICION then findelinea INFOR_FUNCION end_ if_|
                       else_ if_ CONDICION then INFOR_FUNCION ELSE_IF_FOR_FUNCION end_ if_;

WHILE_FOR_FUNCION::= do_ until CONDICION INWHILE_FOR loop;

INWHILE_FOR_FUNCION ::= console_ punto writeline parentesisA  INPARENTESIS parentesisC|DECLARACION|SENTENCIA_FOR|
                        console_ punto writeline parentesisA  INPARENTESIS parentesisC INWHILE_FOR_FUNCION|
                        DECLARACION INWHILE_FOR_FUNCION | SENTENCIA_FOR_FUNCION INWHILE_FOR_FUNCION|
                        LLAMAR_FUNCION|LLAMAR_FUNCION INWHILE_FOR_FUNCION| exit do_ |exit for_ | exit function_;

WHILE_FUNCION::= do_ until CONDICION INWHILE_FUNCION loop;

INWHILE_FUNCION ::= console_ punto writeline parentesisA  INPARENTESIS parentesisC|DECLARACION|
                    SENTENCIA_WHILE_FUNCION |console_ punto writeline parentesisA  INPARENTESIS parentesisC INWHILE_FUNCION|
                    DECLARACION INWHILE_MAIN | SENTENCIA_WHILE_FUNCION INWHILE_FUNCION|LLAMAR_FUNCION|
                    LLAMAR_FUNCION INWHILE_FUNCION|exit do_ |exit function_;

SENTENCIA_WHILE_FUNCION ::= IF_WHILE_FUNCION |FOR_WHILE_FUNCION|WHILE_FUNCION;

IF_WHILE_FUNCION ::= if_ CONDICION then INWHILE_FUNCION end_ if_|if_ CONDICION then INWHILE_FUNCION else_ INWHILE_FUNCION end_ if_|
                     if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION else_ INWHILE_FUNCION end_ if_|
                     if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION findelinea;

ELSE_IF_WHILE_FUNCION ::= else_ if_ CONDICION then findelinea INWHILE_FUNCION end_ if_|
                         else_ if_ CONDICION then INWHILE_FUNCION ELSE_IF_WHILE_FUNCION end_ if_;

FOR_WHILE_FUNCION ::= for_ identificador igual numero to numero step_ numero INFOR_WHILE_FUNCION next identificador;

INFOR_WHILE_FUNCION ::= console_ punto writeline parentesisA  INPARENTESIS parentesisC|DECLARACION|SENTENCIA_WHILE_FUNCION|
                      console_ punto writeline parentesisA INPARENTESIS parentesisC INFOR_WHILE_FUNCION|
                      DECLARACION INFOR_WHILE_FUNCION | SENTENCIA_WHILE_FUNCION INFOR_WHILE_FUNCION|
                      LLAMAR_FUNCION|LLAMAR_FUNCION INFOR_WHILE_FUNCION|exit for_ findelinea|exit do_ findelinea|exit function_ findelinea;  